// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"4rkIz":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "890e741a975ef6c8";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        if (e.message) console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"8lqZg":[function(require,module,exports) {
// Import the required modules using ES6 syntax
var _api = require("@polkadot/api");
async function main() {
    // Initialise the provider to connect to the local node
    const provider = new (0, _api.WsProvider)("wss://public-rpc.mainnet.energywebx.com");
    // Create the API and wait until ready
    const api = await (0, _api.ApiPromise).create({
        provider
    });
    // Retrieve the chain & node information information via rpc calls
    await getChainInfo(api);
    // Retrieve the active reward period information
    const activeRewardPeriod = await getActiveRewardPeriod(api);
    displayCurrentRewardPeriod(activeRewardPeriod);
    // Retrieve the number of submissions
    const numberOfSubmissions = await getNumberOfSubmissions(api, activeRewardPeriod.index);
    // Retrieve the worker node operator inventory
    const operatorInventory = await getWorkerNodeOperatorInventory(api);
    const locationCounts = countLocations(operatorInventory);
    drawLocationChart(locationCounts);
    // Update the HTML table with the submissions data
    const remainingTimeInSeconds = calculateRemainingTimeInSeconds(activeRewardPeriod);
    updateTableWithSubmissions(api, numberOfSubmissions, operatorInventory, remainingTimeInSeconds);
}
async function getChainInfo(api) {
    // Retrieve the chain & node information via rpc calls
    const [chain, nodeName, nodeVersion] = await Promise.all([
        api.rpc.system.chain(),
        api.rpc.system.name(),
        api.rpc.system.version()
    ]);
    console.log(`You are connected to chain ${chain} using ${nodeName} v${nodeVersion}`);
}
async function getActiveRewardPeriod(api) {
    // Query the activeRewardPeriodInfo
    const ARP = await api.query.workerNodePallet.activeRewardPeriodInfo();
    // Extract details
    const index = parseInt(ARP.index.toString());
    const firstBlock = parseInt(ARP.firstBlock.toString());
    const length = parseInt(ARP.length.toString());
    const lastBlock = firstBlock + length;
    // Get the current block number
    const currentBlock = parseInt((await api.rpc.chain.getHeader()).number);
    // Calculate the progress
    const progress = (currentBlock - firstBlock) / length * 100;
    // Calculate remaining time in seconds
    const remainingBlocks = lastBlock - currentBlock;
    const remainingTimeInSeconds = remainingBlocks * 12; // 12 seconds per block
    // Convert remaining time to hours, minutes, and seconds
    const hours = Math.floor(remainingTimeInSeconds / 3600);
    const minutes = Math.floor(remainingTimeInSeconds % 3600 / 60);
    // Create a result object
    const result = {
        index,
        firstBlock,
        lastBlock,
        currentBlock,
        progress: progress.toFixed(2),
        remainingTime: {
            hours,
            minutes
        }
    };
    // Log the results
    console.log(`Reward Period Index: ${index} \nFirst Block: ${firstBlock} \nLast Block: ${lastBlock} \nCurrent Block: ${currentBlock} \nProgress: ${progress.toFixed(2)}% \nEstimated Time to End: ${hours} hours, ${minutes} minutes`);
    return result;
}
async function getNumberOfSubmissions(api, activeRewardPeriodIndex, account = null) {
    let submissions;
    if (account) // Als account wordt meegegeven, gebruik deze in de query
    submissions = await api.query.workerNodePallet.numberOfSubmissions("smartflow.y24q2", activeRewardPeriodIndex, account);
    else // Als geen account wordt meegegeven, gebruik de .entries() methode
    submissions = await api.query.workerNodePallet.numberOfSubmissions.entries("smartflow.y24q2", activeRewardPeriodIndex);
    //console.log(JSON.stringify(submissions, null, 4));
    return submissions;
}
// Function to update the HTML table with submission data
async function updateTableWithSubmissions(api, submissions, inventoryMap, remainingTimeInSeconds) {
    const tableBody = document.getElementById("tableBody");
    tableBody.innerHTML = ""; // Clear existing rows
    // Check if submissions is defined and is an array
    if (!Array.isArray(submissions)) {
        console.error("Expected submissions to be an array, but received:", submissions);
        return; // Exit the function if submissions is not an array
    }
    // Sort submissions by votes in descending order
    const sortedSubmissions = submissions.sort((a, b)=>{
        const votesA = parseInt(a[1].toString());
        const votesB = parseInt(b[1].toString());
        return votesB - votesA; // For descending order
    });
    let totalAccounts = 0;
    for (const [key, value] of sortedSubmissions){
        const accountId = key.args[2].toString(); // Assuming this is the account
        const currentVotes = parseInt(value.toString());
        const maxVotes = 96;
        const threshold = 1;
        const operatorInfo = inventoryMap.get(accountId);
        const row = document.createElement("tr");
        const nameCell = document.createElement("td");
        const locationCell = document.createElement("td");
        const accountCell = document.createElement("td");
        const votesCell = document.createElement("td");
        nameCell.textContent = operatorInfo ? operatorInfo.friendlyName : "Unknown";
        locationCell.textContent = operatorInfo ? operatorInfo.legalLocation : "Unknown";
        accountCell.textContent = accountId;
        votesCell.textContent = value.toString();
        row.appendChild(nameCell);
        row.appendChild(locationCell);
        row.appendChild(accountCell);
        row.appendChild(votesCell);
        // Add progress bar cell
        const progressCell = document.createElement("td");
        progressCell.innerHTML = '<div id="progressBar_' + accountId + '" style="width: 100%; height: 20px;"></div>';
        row.appendChild(progressCell);
        tableBody.appendChild(row);
        // Call function to draw the progress bar
        drawProgressBar(accountId, currentVotes, maxVotes, threshold, remainingTimeInSeconds);
        totalAccounts += 1;
    }
    document.getElementById("totalAccounts").textContent = `Total Accounts: ${totalAccounts}`;
    $("#votesTable").DataTable({
        paging: false,
        order: [
            [
                4,
                "desc"
            ]
        ]
    });
}
function displayCurrentRewardPeriod(rewardPeriod) {
    const rewardPeriodDetailsElem = document.getElementById("rewardPeriodDetails");
    // Format the reward period information
    const rewardPeriodInfo = `
        Reward Period Index: ${rewardPeriod.index} <br>
        First Block: ${rewardPeriod.firstBlock} <br>
        Last Block: ${rewardPeriod.lastBlock} <br>
        Current Block: ${rewardPeriod.currentBlock} <br>
        Progress: ${rewardPeriod.progress}% <br>
        Estimated Time to End: ${rewardPeriod.remainingTime.hours} hours, ${rewardPeriod.remainingTime.minutes} minutes (based on 12 seconds per block)
    `;
    // Update the content of the reward period element
    rewardPeriodDetailsElem.innerHTML = rewardPeriodInfo;
}
async function getWorkerNodeOperatorInventory(api) {
    const inventoryEntries = await api.query.workerNodePallet.workerNodeOperatorInventory.entries();
    const inventoryMap = new Map();
    inventoryEntries.forEach(([key, optionValue])=>{
        if (optionValue.isSome) {
            const value = optionValue.unwrap();
            inventoryMap.set(key.args[0].toHuman(), {
                friendlyName: value.friendlyName.toHuman(),
                legalLocation: value.legalLocation.toHuman()
            });
        }
    });
    return inventoryMap;
}
function countLocations(operatorInventory) {
    const locationCounts = new Map();
    operatorInventory.forEach((info)=>{
        const location = info.legalLocation;
        if (locationCounts.has(location)) locationCounts.set(location, locationCounts.get(location) + 1);
        else locationCounts.set(location, 1);
    });
    return locationCounts;
}
function drawLocationChart(locationCounts) {
    google.charts.load("current", {
        "packages": [
            "corechart"
        ]
    });
    google.charts.setOnLoadCallback(function() {
        drawChart(locationCounts);
    });
    function drawChart(locationCounts) {
        // Convert and sort the locationCounts
        const sortedLocations = Array.from(locationCounts.entries()).sort((a, b)=>b[1] - a[1]);
        const data = new google.visualization.DataTable();
        data.addColumn("string", "Location");
        data.addColumn("number", "Counts");
        sortedLocations.forEach(([location, count])=>{
            data.addRow([
                location + " (" + count + ")",
                count
            ]); // Include count in label
        });
        const options = {
            title: "Location Statistics",
            pieHole: 0.4,
            pieSliceText: "value",
            legend: {
                position: "right",
                alignment: "center"
            },
            tooltip: {
                trigger: "selection"
            }
        };
        const chart = new google.visualization.PieChart(document.getElementById("locationChart"));
        chart.draw(data, options);
    }
}
function drawProgressBar(accountId, currentVotes, maxVotes = 96, threshold = 60, remainingTime) {
    google.charts.load("current", {
        "packages": [
            "corechart"
        ]
    });
    google.charts.setOnLoadCallback(function() {
        drawChart(accountId, currentVotes, maxVotes, threshold, remainingTime);
    });
    function drawChart(accountId, currentVotes, maxVotes, threshold, remainingTime) {
        const data = new google.visualization.DataTable();
        data.addColumn("string", "Label");
        data.addColumn("number", "Votes");
        data.addRows([
            [
                "",
                currentVotes
            ] // Empty string for label
        ]);
        let color;
        if (currentVotes >= threshold) color = "green"; // Above threshold
        else if (canReachThreshold(currentVotes, threshold, remainingTime)) color = "yellow"; // Can potentially reach threshold
        else color = "red"; // Cannot reach threshold
        const options = {
            title: "Votes Progress",
            bar: {
                groupWidth: "95%"
            },
            legend: {
                position: "none"
            },
            hAxis: {
                minValue: 0,
                maxValue: maxVotes,
                textPosition: "none" // Hide axis labels
            },
            colors: [
                color
            ]
        };
        const chart = new google.visualization.BarChart(document.getElementById("progressBar_" + accountId));
        chart.draw(data, options);
    }
}
function canReachThreshold(currentVotes, threshold, remainingTime) {
    const secondsPerVote = 900; // 15 minutes per vote in seconds
    const remainingVotesPossible = Math.floor(remainingTime / secondsPerVote); // Number of votes that can still be cast
    const totalVotesPossible = currentVotes + remainingVotesPossible; // Total votes possible by the end of the period
    return totalVotesPossible >= threshold;
}
function calculateRemainingTimeInSeconds(activeRewardPeriod) {
    // Assuming activeRewardPeriod contains 'lastBlock' and 'currentBlock'
    // and each block represents a fixed time interval (e.g., 12 seconds)
    const blocksPerSecond = 1 / 12; // Assuming 12 seconds per block
    const remainingBlocks = activeRewardPeriod.lastBlock - activeRewardPeriod.currentBlock;
    // Calculate remaining time in seconds
    const remainingTimeInSeconds = remainingBlocks / blocksPerSecond;
    return remainingTimeInSeconds;
}
function aggregateVotes(submissions) {
    const voteRanges = {};
    const maxVotes = 100; // Set maximum votes if needed
    const increment = 5;
    // Initialize voteRanges with increments of 5
    for(let i = 0; i <= maxVotes; i += increment){
        const rangeKey = `${i}-${i + increment - 1}`;
        voteRanges[rangeKey] = 0;
    }
    submissions.forEach(([key, value])=>{
        const votes = parseInt(value.toString());
        // Determine the range for the current number of votes
        const rangeIndex = Math.floor(votes / increment);
        const lowerBound = rangeIndex * increment;
        const upperBound = lowerBound + increment - 1;
        const rangeKey = `${lowerBound}-${upperBound}`;
        // Increment the count for the range
        if (voteRanges.hasOwnProperty(rangeKey)) voteRanges[rangeKey]++;
        else // Handle votes that exceed the maximum defined range
        voteRanges[`${maxVotes}+`] = (voteRanges[`${maxVotes}+`] || 0) + 1;
    });
    return voteRanges;
}
main().catch(console.error);

},{"@polkadot/api":"gqBQQ"}],"gqBQQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"lj1FA","./bundle.js":"18vg0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lj1FA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"9TQUp","./packageInfo.js":"1czuv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3HnHw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"9c9bq","./bundle.js":"8hWQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9c9bq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
var _versionDetectJs = require("./versionDetect.js");
(0, _versionDetectJs.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"./detectOther.js":"baej9","./packageInfo.js":"6T6yl","./versionDetect.js":"a4erl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"baej9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _xTextdecoder = require("@polkadot/x-textdecoder");
var _xTextencoder = require("@polkadot/x-textencoder");
exports.default = [
    (0, _xTextdecoder.packageInfo),
    (0, _xTextencoder.packageInfo)
];

},{"@polkadot/x-textdecoder":"fM3XH","@polkadot/x-textencoder":"1eRz6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fM3XH":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TextDecoder = exports.packageInfo = void 0;
const x_global_1 = require("2dce0110d5ff2b44");
const fallback_js_1 = require("98a3b4ebe7744714");
var packageInfo_js_1 = require("c94a257b3612200c");
Object.defineProperty(exports, "packageInfo", {
    enumerable: true,
    get: function() {
        return packageInfo_js_1.packageInfo;
    }
});
exports.TextDecoder = (0, x_global_1.extractGlobal)("TextDecoder", fallback_js_1.TextDecoder);

},{"2dce0110d5ff2b44":"k9Iwp","98a3b4ebe7744714":"f6dNL","c94a257b3612200c":"bTksn"}],"k9Iwp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
parcelHelpers.export(exports, "xglobal", ()=>xglobal);
/**
 * Extracts a known global from the environment, applying a fallback if not found
 */ parcelHelpers.export(exports, "extractGlobal", ()=>extractGlobal);
/**
 * Expose a value as a known global, if not already defined
 */ parcelHelpers.export(exports, "exposeGlobal", ()=>exposeGlobal);
var _packageInfoJs = require("./packageInfo.js");
var global = arguments[3];
/** @internal Last-resort "this", if it gets here it probably would fail anyway */ function evaluateThis(fn) {
    return fn("return this");
}
const xglobal = /*#__PURE__*/ typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis(Function);
function extractGlobal(name, fallback) {
    // Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea
    // (as of now) as to why this looks like an "any" when we do cast it to a T
    //
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return typeof xglobal[name] === "undefined" ? fallback : xglobal[name];
}
function exposeGlobal(name, fallback) {
    if (typeof xglobal[name] === "undefined") xglobal[name] = fallback;
}

},{"./packageInfo.js":"3NSHH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3NSHH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $2c5061ba5d08d3c3$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/x-global/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/x-global",
    path: $2c5061ba5d08d3c3$import_meta && "file:///node_modules/@polkadot/x-global/packageInfo.js" ? new URL("file:///node_modules/@polkadot/x-global/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/x-global/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "12.6.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"f6dNL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TextDecoder = void 0;
class TextDecoder {
    __encoding;
    constructor(encoding){
        this.__encoding = encoding;
    }
    decode(value) {
        let result = "";
        for(let i = 0, count = value.length; i < count; i++)result += String.fromCharCode(value[i]);
        return result;
    }
}
exports.TextDecoder = TextDecoder;

},{}],"bTksn":[function(require,module,exports) {
var __dirname = "node_modules/@polkadot/x-textdecoder/cjs";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.packageInfo = void 0;
exports.packageInfo = {
    name: "@polkadot/x-textdecoder",
    path: typeof __dirname === "string" ? __dirname : "auto",
    type: "cjs",
    version: "12.6.2"
};

},{}],"1eRz6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TextEncoder = exports.packageInfo = void 0;
const x_global_1 = require("649ee8e84dfc987a");
const fallback_js_1 = require("b7e8a58a114e2dc0");
var packageInfo_js_1 = require("47159db5ec83ae11");
Object.defineProperty(exports, "packageInfo", {
    enumerable: true,
    get: function() {
        return packageInfo_js_1.packageInfo;
    }
});
exports.TextEncoder = (0, x_global_1.extractGlobal)("TextEncoder", fallback_js_1.TextEncoder);

},{"649ee8e84dfc987a":"k9Iwp","b7e8a58a114e2dc0":"dfrqT","47159db5ec83ae11":"huhmx"}],"dfrqT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TextEncoder = void 0;
class TextEncoder {
    encode(value) {
        const count = value.length;
        const u8a = new Uint8Array(count);
        for(let i = 0; i < count; i++)u8a[i] = value.charCodeAt(i);
        return u8a;
    }
}
exports.TextEncoder = TextEncoder;

},{}],"huhmx":[function(require,module,exports) {
var __dirname = "node_modules/@polkadot/x-textencoder/cjs";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.packageInfo = void 0;
exports.packageInfo = {
    name: "@polkadot/x-textencoder",
    path: typeof __dirname === "string" ? __dirname : "auto",
    type: "cjs",
    version: "12.6.2"
};

},{}],"6T6yl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $503cf666ad554433$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/util/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/util",
    path: $503cf666ad554433$import_meta && "file:///node_modules/@polkadot/util/packageInfo.js" ? new URL("file:///node_modules/@polkadot/util/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/util/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "12.6.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a4erl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG", ()=>POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG);
/**
 * @name detectPackage
 * @summary Checks that a specific package is only imported once
 * @description A `@polkadot/*` version detection utility, checking for one occurrence of a package in addition to checking for dependency versions.
 */ parcelHelpers.export(exports, "detectPackage", ()=>detectPackage);
var _xGlobal = require("@polkadot/x-global");
var _functionJs = require("./is/function.js");
const DEDUPE = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
const POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
/** @internal */ function getEntry(name) {
    const _global = (0, _xGlobal.xglobal);
    if (!_global.__polkadotjs) _global.__polkadotjs = {};
    if (!_global.__polkadotjs[name]) _global.__polkadotjs[name] = [];
    return _global.__polkadotjs[name];
}
/** @internal */ function formatDisplay(all, fmt) {
    let max = 0;
    for(let i = 0, count = all.length; i < count; i++)max = Math.max(max, all[i].version.length);
    return all.map((d)=>`\t${fmt(d.version.padEnd(max), d).join("	")}`).join("\n");
}
/** @internal */ function formatInfo(version, { name }) {
    return [
        version,
        name
    ];
}
/** @internal */ function formatVersion(version, { path, type }) {
    let extracted;
    if (path && path.length >= 5) {
        const nmIndex = path.indexOf("node_modules");
        extracted = nmIndex === -1 ? path : path.substring(nmIndex);
    } else extracted = "<unknown>";
    return [
        `${`${type || ""}`.padStart(3)} ${version}`,
        extracted
    ];
}
/** @internal */ function getPath(infoPath, pathOrFn) {
    if (infoPath) return infoPath;
    else if ((0, _functionJs.isFunction)(pathOrFn)) try {
        return pathOrFn() || "";
    } catch  {
        return "";
    }
    return pathOrFn || "";
}
/** @internal */ function warn(pre, all, fmt) {
    console.warn(`${pre}\n${DEDUPE}\n${formatDisplay(all, fmt)}`);
}
function detectPackage({ name, path, type, version }, pathOrFn, deps = []) {
    if (!name.startsWith("@polkadot")) throw new Error(`Invalid package descriptor ${name}`);
    const entry = getEntry(name);
    entry.push({
        path: getPath(path, pathOrFn),
        type,
        version
    });
    // if we have more than one entry at DIFFERENT version types then warn. If there is more than one entry at the same
    // version and ESM/CJS dual warnings are disabled, then do not display warnings
    const entriesSameVersion = entry.every((e)=>e.version === version);
    const esmCjsWarningDisabled = (0, _xGlobal.xglobal).process?.env?.[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG] === "1";
    const multipleEntries = entry.length !== 1;
    const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
    if (multipleEntries && !disableWarnings) warn(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion);
    else {
        const mismatches = deps.filter((d)=>d && d.version !== version);
        if (mismatches.length) warn(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo);
    }
}

},{"@polkadot/x-global":"k9Iwp","./is/function.js":"3nYod","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3nYod":[function(require,module,exports) {
/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
function isFunction(value) {
    return typeof value === "function";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8hWQ4":[function(require,module,exports) {
/**
 * @summary Utility methods for this package are split into groups
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
var _packageInfoJs = require("./packageInfo.js");
var _indexJs = require("./array/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var _assertJs = require("./assert.js");
parcelHelpers.exportAll(_assertJs, exports);
var _indexJs1 = require("./bi/index.js");
parcelHelpers.exportAll(_indexJs1, exports);
var _indexJs2 = require("./bn/index.js");
parcelHelpers.exportAll(_indexJs2, exports);
var _indexJs3 = require("./buffer/index.js");
parcelHelpers.exportAll(_indexJs3, exports);
var _indexJs4 = require("./compact/index.js");
parcelHelpers.exportAll(_indexJs4, exports);
var _extractTimeJs = require("./extractTime.js");
parcelHelpers.exportAll(_extractTimeJs, exports);
var _indexJs5 = require("./float/index.js");
parcelHelpers.exportAll(_indexJs5, exports);
var _indexJs6 = require("./format/index.js");
parcelHelpers.exportAll(_indexJs6, exports);
var _hasJs = require("./has.js");
parcelHelpers.exportAll(_hasJs, exports);
var _indexJs7 = require("./hex/index.js");
parcelHelpers.exportAll(_indexJs7, exports);
var _indexJs8 = require("./is/index.js");
parcelHelpers.exportAll(_indexJs8, exports);
var _lazyJs = require("./lazy.js");
parcelHelpers.exportAll(_lazyJs, exports);
var _loggerJs = require("./logger.js");
parcelHelpers.exportAll(_loggerJs, exports);
var _memoizeJs = require("./memoize.js");
parcelHelpers.exportAll(_memoizeJs, exports);
var _nextTickJs = require("./nextTick.js");
parcelHelpers.exportAll(_nextTickJs, exports);
var _noopJs = require("./noop.js");
parcelHelpers.exportAll(_noopJs, exports);
var _indexJs9 = require("./number/index.js");
parcelHelpers.exportAll(_indexJs9, exports);
var _indexJs10 = require("./object/index.js");
parcelHelpers.exportAll(_indexJs10, exports);
var _promisifyJs = require("./promisify.js");
parcelHelpers.exportAll(_promisifyJs, exports);
var _indexJs11 = require("./string/index.js");
parcelHelpers.exportAll(_indexJs11, exports);
var _stringifyJs = require("./stringify.js");
parcelHelpers.exportAll(_stringifyJs, exports);
var _indexJs12 = require("./u8a/index.js");
parcelHelpers.exportAll(_indexJs12, exports);
var _versionDetectJs = require("./versionDetect.js");
parcelHelpers.exportAll(_versionDetectJs, exports);

},{"./packageInfo.js":false,"./array/index.js":"gL7B5","./assert.js":"jdCS2","./bi/index.js":"fmYOm","./bn/index.js":"jr1HC","./buffer/index.js":false,"./compact/index.js":"cKdLW","./extractTime.js":false,"./float/index.js":"aoED9","./format/index.js":"adOCa","./has.js":"kBoWG","./hex/index.js":"foCYc","./is/index.js":"hZ2pz","./lazy.js":"g0R3i","./logger.js":"87mNm","./memoize.js":"fHTyq","./nextTick.js":"cyuHx","./noop.js":"5HtX0","./number/index.js":false,"./object/index.js":"iYuNH","./promisify.js":false,"./string/index.js":"9jYpH","./stringify.js":"4kzVD","./u8a/index.js":"7qmUM","./versionDetect.js":"a4erl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gL7B5":[function(require,module,exports) {
/**
 * @summary Utility methods that operates on arrays
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arrayChunk", ()=>(0, _chunkJs.arrayChunk));
parcelHelpers.export(exports, "arrayFilter", ()=>(0, _filterJs.arrayFilter));
parcelHelpers.export(exports, "arrayFlatten", ()=>(0, _flattenJs.arrayFlatten));
parcelHelpers.export(exports, "arrayRange", ()=>(0, _rangeJs.arrayRange));
parcelHelpers.export(exports, "arrayShuffle", ()=>(0, _shuffleJs.arrayShuffle));
parcelHelpers.export(exports, "arrayUnzip", ()=>(0, _unzipJs.arrayUnzip));
parcelHelpers.export(exports, "arrayZip", ()=>(0, _zipJs.arrayZip));
var _chunkJs = require("./chunk.js");
var _filterJs = require("./filter.js");
var _flattenJs = require("./flatten.js");
var _rangeJs = require("./range.js");
var _shuffleJs = require("./shuffle.js");
var _unzipJs = require("./unzip.js");
var _zipJs = require("./zip.js");

},{"./chunk.js":"euHur","./filter.js":false,"./flatten.js":"vqeg2","./range.js":false,"./shuffle.js":false,"./unzip.js":false,"./zip.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"euHur":[function(require,module,exports) {
/**
 * @name arrayChunk
 * @summary Split T[] into T[][] based on the defind size
 * @description
 * Returns a set ao arrays based on the chunksize
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayChunk } from '@polkadot/util';
 *
 * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arrayChunk", ()=>arrayChunk);
function arrayChunk(array, chunkSize) {
    const outputSize = Math.ceil(array.length / chunkSize);
    // shortcut for the single-split case
    if (outputSize === 1) return [
        array
    ];
    const output = Array(outputSize);
    for(let i = 0; i < outputSize; i++){
        const offset = i * chunkSize;
        output[i] = array.slice(offset, offset + chunkSize);
    }
    return output;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"vqeg2":[function(require,module,exports) {
/**
 * @name arrayFlatten
 * @summary Merge T[][] into T[]
 * @description
 * Returns a new array with all arrays merged into one
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayFlatten } from '@polkadot/util';
 *
 * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arrayFlatten", ()=>arrayFlatten);
function arrayFlatten(arrays) {
    const num = arrays.length;
    // shortcuts for the empty & single-entry case
    if (num === 0) return [];
    else if (num === 1) return arrays[0];
    // pre-allocate based on the combined size
    let size = 0;
    for(let i = 0; i < num; i++)size += arrays[i].length;
    const output = new Array(size);
    let i = -1;
    for(let j = 0; j < num; j++){
        const a = arrays[j];
        // instead of pushing, we just set the entries
        for(let e = 0, count = a.length; e < count; e++)output[++i] = a[e];
    }
    return output;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jdCS2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name assert
 * @summary Checks for a valid test, if not Error is thrown.
 * @description
 * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.
 * @example
 * <BR>
 *
 * ```javascript
 * const { assert } from '@polkadot/util';
 *
 * assert(true, 'True should be true'); // passes
 * assert(false, 'False should not be true'); // Error thrown
 * assert(false, () => 'message'); // Error with 'message'
 * ```
 */ parcelHelpers.export(exports, "assert", ()=>assert);
/**
 * @name assertReturn
 * @description Returns when the value is not undefined/null, otherwise throws assertion error
 */ parcelHelpers.export(exports, "assertReturn", ()=>assertReturn);
/**
 * @name assertUnreachable
 * @description An assertion helper that ensures all codepaths are followed
 */ parcelHelpers.export(exports, "assertUnreachable", ()=>assertUnreachable);
var _functionJs = require("./is/function.js");
function assert(condition, message) {
    if (!condition) throw new Error((0, _functionJs.isFunction)(message) ? message() : message);
}
function assertReturn(value, message) {
    assert(value !== undefined && value !== null, message);
    return value;
}
function assertUnreachable(x) {
    throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
}

},{"./is/function.js":"3nYod","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fmYOm":[function(require,module,exports) {
/**
 * @summary Utility methods to convert to and from `bigint` objects
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nMax", ()=>(0, _minJs.nMax));
parcelHelpers.export(exports, "nMin", ()=>(0, _minJs.nMin));
parcelHelpers.export(exports, "nSqrt", ()=>(0, _sqrtJs.nSqrt));
parcelHelpers.export(exports, "nToBigInt", ()=>(0, _toBigIntJs.nToBigInt));
parcelHelpers.export(exports, "nToHex", ()=>(0, _toHexJs.nToHex));
parcelHelpers.export(exports, "nToU8a", ()=>(0, _toU8AJs.nToU8a));
var _minJs = require("./min.js");
var _sqrtJs = require("./sqrt.js");
var _toBigIntJs = require("./toBigInt.js");
var _toHexJs = require("./toHex.js");
var _toU8AJs = require("./toU8a.js");
var _constsJs = require("./consts.js");
parcelHelpers.exportAll(_constsJs, exports);

},{"./min.js":false,"./sqrt.js":false,"./toBigInt.js":false,"./toHex.js":false,"./toU8a.js":false,"./consts.js":"eBuQk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eBuQk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_0n", ()=>_0n);
parcelHelpers.export(exports, "_1n", ()=>_1n);
parcelHelpers.export(exports, "_2n", ()=>_2n);
parcelHelpers.export(exports, "_3n", ()=>_3n);
parcelHelpers.export(exports, "_4n", ()=>_4n);
parcelHelpers.export(exports, "_5n", ()=>_5n);
parcelHelpers.export(exports, "_6n", ()=>_6n);
parcelHelpers.export(exports, "_7n", ()=>_7n);
parcelHelpers.export(exports, "_8n", ()=>_8n);
parcelHelpers.export(exports, "_9n", ()=>_9n);
parcelHelpers.export(exports, "_10n", ()=>_10n);
parcelHelpers.export(exports, "_100n", ()=>_100n);
parcelHelpers.export(exports, "_1000n", ()=>_1000n);
parcelHelpers.export(exports, "_1Mn", ()=>_1Mn);
parcelHelpers.export(exports, "_1Bn", ()=>_1Bn);
parcelHelpers.export(exports, "_1Qn", ()=>_1Qn);
parcelHelpers.export(exports, "_2pow53n", ()=>_2pow53n);
parcelHelpers.export(exports, "_sqrt2pow53n", ()=>_sqrt2pow53n);
var _xBigint = require("@polkadot/x-bigint");
const _0n = /*#__PURE__*/ (0, _xBigint.BigInt)(0);
const _1n = /*#__PURE__*/ (0, _xBigint.BigInt)(1);
const _2n = /*#__PURE__*/ (0, _xBigint.BigInt)(2);
const _3n = /*#__PURE__*/ (0, _xBigint.BigInt)(3);
const _4n = /*#__PURE__*/ (0, _xBigint.BigInt)(4);
const _5n = /*#__PURE__*/ (0, _xBigint.BigInt)(5);
const _6n = /*#__PURE__*/ (0, _xBigint.BigInt)(6);
const _7n = /*#__PURE__*/ (0, _xBigint.BigInt)(7);
const _8n = /*#__PURE__*/ (0, _xBigint.BigInt)(8);
const _9n = /*#__PURE__*/ (0, _xBigint.BigInt)(9);
const _10n = /*#__PURE__*/ (0, _xBigint.BigInt)(10);
const _100n = /*#__PURE__*/ (0, _xBigint.BigInt)(100);
const _1000n = /*#__PURE__*/ (0, _xBigint.BigInt)(1000);
const _1Mn = /*#__PURE__*/ (0, _xBigint.BigInt)(1000000);
const _1Bn = /*#__PURE__*/ (0, _xBigint.BigInt)(1000000000);
const _1Qn = _1Bn * _1Bn;
const _2pow53n = /*#__PURE__*/ (0, _xBigint.BigInt)(Number.MAX_SAFE_INTEGER);
const _sqrt2pow53n = /*#__PURE__*/ (0, _xBigint.BigInt)(94906265);

},{"@polkadot/x-bigint":"6Blk3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Blk3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
parcelHelpers.export(exports, "BigInt", ()=>BigInt);
var _xGlobal = require("@polkadot/x-global");
var _packageInfoJs = require("./packageInfo.js");
/**
 * @internal
 *
 * There are _still_ some older environments (specifically RN < 0.70), that does
 * not have proper BigInt support - a non-working fallback is provided for those.
 *
 * We detect availability of BigInt upon usage, so this is purely to allow functional
 * compilation & bundling. Since we have operators such as *+-/ top-level, a number-ish
 * result is used here.
 */ function invalidFallback() {
    return Number.NaN;
}
const BigInt = /*#__PURE__*/ (0, _xGlobal.extractGlobal)("BigInt", invalidFallback);

},{"@polkadot/x-global":"k9Iwp","./packageInfo.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jr1HC":[function(require,module,exports) {
/**
 * @summary Utility methods to convert to and from `BN` objects
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BN", ()=>(0, _bnJs.BN));
parcelHelpers.export(exports, "bnFromHex", ()=>(0, _fromHexJs.bnFromHex));
parcelHelpers.export(exports, "bnMax", ()=>(0, _minJs.bnMax));
parcelHelpers.export(exports, "bnMin", ()=>(0, _minJs.bnMin));
parcelHelpers.export(exports, "bnSqrt", ()=>(0, _sqrtJs.bnSqrt));
parcelHelpers.export(exports, "bnToBn", ()=>(0, _toBnJs.bnToBn));
parcelHelpers.export(exports, "bnToHex", ()=>(0, _toHexJs.bnToHex));
parcelHelpers.export(exports, "bnToU8a", ()=>(0, _toU8AJs.bnToU8a));
var _bnJs = require("./bn.js");
var _fromHexJs = require("./fromHex.js");
var _minJs = require("./min.js");
var _sqrtJs = require("./sqrt.js");
var _toBnJs = require("./toBn.js");
var _toHexJs = require("./toHex.js");
var _toU8AJs = require("./toU8a.js");
var _constsJs = require("./consts.js");
parcelHelpers.exportAll(_constsJs, exports);

},{"./bn.js":"6mwqp","./fromHex.js":false,"./min.js":"1iFkW","./sqrt.js":"bQguI","./toBn.js":"iM6St","./toHex.js":"kjx2g","./toU8a.js":"gK1IE","./consts.js":"iWb8H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6mwqp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BN", ()=>(0, _bnJsDefault.default));
var _bnJs = require("bn.js");
var _bnJsDefault = parcelHelpers.interopDefault(_bnJs);

},{"bn.js":"VopIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"VopIn":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("bd440367abe2ded7").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, "Invalid character in " + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
    } catch (e) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"bd440367abe2ded7":"jhUEF"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"1iFkW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bnMax", ()=>bnMax);
parcelHelpers.export(exports, "bnMin", ()=>bnMin);
var _helpersJs = require("../bi/helpers.js");
const bnMax = /*#__PURE__*/ (0, _helpersJs.createCmp)((a, b)=>a.gt(b));
const bnMin = /*#__PURE__*/ (0, _helpersJs.createCmp)((a, b)=>a.lt(b));

},{"../bi/helpers.js":"9tnDJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9tnDJ":[function(require,module,exports) {
/** @internal */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCmp", ()=>createCmp);
function createCmp(cmp) {
    return (...items)=>{
        const count = items.length;
        if (count === 0) throw new Error("Must provide one or more arguments");
        let result = items[0];
        for(let i = 1; i < count; i++)if (cmp(items[i], result)) result = items[i];
        return result;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bQguI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name bnSqrt
 * @summary Calculates the integer square root of a BN
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnSqrt } from '@polkadot/util';
 *
 * bnSqrt(new BN(16)).toString(); // => '4'
 * ```
 */ parcelHelpers.export(exports, "bnSqrt", ()=>bnSqrt);
var _bnJs = require("./bn.js");
var _constsJs = require("./consts.js");
var _toBnJs = require("./toBn.js");
function bnSqrt(value) {
    const n = (0, _toBnJs.bnToBn)(value);
    if (n.isNeg()) throw new Error("square root of negative numbers is not supported");
    // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
    // shortcut <= 2^53 - 1 to use the JS utils
    if (n.lte((0, _constsJs.BN_MAX_INTEGER))) // ~~ More performant version of Math.floor
    return new (0, _bnJs.BN)(~~Math.sqrt(n.toNumber()));
    // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
    // output will be larger than this, we expect this to be a safe start
    let x0 = (0, _constsJs.BN_SQRT_MAX_INTEGER).clone();
    while(true){
        const x1 = n.div(x0).iadd(x0).ishrn(1);
        if (x0.eq(x1) || x0.eq(x1.sub((0, _constsJs.BN_ONE)))) return x0;
        x0 = x1;
    }
}

},{"./bn.js":"6mwqp","./consts.js":"iWb8H","./toBn.js":"iM6St","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iWb8H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BN_ZERO", ()=>BN_ZERO);
parcelHelpers.export(exports, "BN_ONE", ()=>BN_ONE);
parcelHelpers.export(exports, "BN_TWO", ()=>BN_TWO);
parcelHelpers.export(exports, "BN_THREE", ()=>BN_THREE);
parcelHelpers.export(exports, "BN_FOUR", ()=>BN_FOUR);
parcelHelpers.export(exports, "BN_FIVE", ()=>BN_FIVE);
parcelHelpers.export(exports, "BN_SIX", ()=>BN_SIX);
parcelHelpers.export(exports, "BN_SEVEN", ()=>BN_SEVEN);
parcelHelpers.export(exports, "BN_EIGHT", ()=>BN_EIGHT);
parcelHelpers.export(exports, "BN_NINE", ()=>BN_NINE);
parcelHelpers.export(exports, "BN_TEN", ()=>BN_TEN);
parcelHelpers.export(exports, "BN_HUNDRED", ()=>BN_HUNDRED);
parcelHelpers.export(exports, "BN_THOUSAND", ()=>BN_THOUSAND);
parcelHelpers.export(exports, "BN_MILLION", ()=>BN_MILLION);
parcelHelpers.export(exports, "BN_BILLION", ()=>BN_BILLION);
parcelHelpers.export(exports, "BN_QUINTILL", ()=>BN_QUINTILL);
parcelHelpers.export(exports, "BN_MAX_INTEGER", ()=>BN_MAX_INTEGER);
parcelHelpers.export(exports, "BN_SQRT_MAX_INTEGER", ()=>BN_SQRT_MAX_INTEGER);
var _bnJs = require("./bn.js");
const BN_ZERO = /*#__PURE__*/ new (0, _bnJs.BN)(0);
const BN_ONE = /*#__PURE__*/ new (0, _bnJs.BN)(1);
const BN_TWO = /*#__PURE__*/ new (0, _bnJs.BN)(2);
const BN_THREE = /*#__PURE__*/ new (0, _bnJs.BN)(3);
const BN_FOUR = /*#__PURE__*/ new (0, _bnJs.BN)(4);
const BN_FIVE = /*#__PURE__*/ new (0, _bnJs.BN)(5);
const BN_SIX = /*#__PURE__*/ new (0, _bnJs.BN)(6);
const BN_SEVEN = /*#__PURE__*/ new (0, _bnJs.BN)(7);
const BN_EIGHT = /*#__PURE__*/ new (0, _bnJs.BN)(8);
const BN_NINE = /*#__PURE__*/ new (0, _bnJs.BN)(9);
const BN_TEN = /*#__PURE__*/ new (0, _bnJs.BN)(10);
const BN_HUNDRED = /*#__PURE__*/ new (0, _bnJs.BN)(100);
const BN_THOUSAND = /*#__PURE__*/ new (0, _bnJs.BN)(1000);
const BN_MILLION = /*#__PURE__*/ new (0, _bnJs.BN)(1000000);
const BN_BILLION = /*#__PURE__*/ new (0, _bnJs.BN)(1000000000);
const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
const BN_MAX_INTEGER = /*#__PURE__*/ new (0, _bnJs.BN)(Number.MAX_SAFE_INTEGER);
const BN_SQRT_MAX_INTEGER = /*#__PURE__*/ new (0, _bnJs.BN)(94906265);

},{"./bn.js":"6mwqp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iM6St":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name bnToBn
 * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.
 * @description
 * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnToBn } from '@polkadot/util';
 *
 * bnToBn(0x1234); // => BN(0x1234)
 * bnToBn(new BN(0x1234)); // => BN(0x1234)
 * ```
 */ parcelHelpers.export(exports, "bnToBn", ()=>bnToBn);
var _toBnJs = require("../hex/toBn.js");
var _bigIntJs = require("../is/bigInt.js");
var _hexJs = require("../is/hex.js");
var _toBigIntJs = require("../is/toBigInt.js");
var _toBnJs1 = require("../is/toBn.js");
var _bnJs = require("./bn.js");
function bnToBn(value) {
    return value ? (0, _bnJs.BN).isBN(value) ? value : (0, _hexJs.isHex)(value) ? (0, _toBnJs.hexToBn)(value.toString()) : (0, _bigIntJs.isBigInt)(value) ? new (0, _bnJs.BN)(value.toString()) : (0, _toBnJs1.isToBn)(value) ? value.toBn() : (0, _toBigIntJs.isToBigInt)(value) ? new (0, _bnJs.BN)(value.toBigInt().toString()) : new (0, _bnJs.BN)(value) : new (0, _bnJs.BN)(0);
}

},{"../hex/toBn.js":"dITJ7","../is/bigInt.js":"aHtst","../is/hex.js":"1XrXF","../is/toBigInt.js":"7gXiE","../is/toBn.js":"klE8p","./bn.js":"6mwqp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dITJ7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name hexToBn
 * @summary Creates a BN.js object from a hex string.
 * @description
 * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @param _value The value to convert
 * @param _options Options to pass while converting
 * @param _options.isLe Convert using Little Endian
 * @param _options.isNegative Convert using two's complement
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToBn } from '@polkadot/util';
 *
 * hexToBn('0x123480001f'); // => BN(0x123480001f)
 * ```
 */ parcelHelpers.export(exports, "hexToBn", ()=>hexToBn);
var _bnJs = require("../bn/bn.js");
var _stripPrefixJs = require("./stripPrefix.js");
function hexToBn(value, { isLe = false, isNegative = false } = {}) {
    if (!value || value === "0x") return new (0, _bnJs.BN)(0);
    const stripped = (0, _stripPrefixJs.hexStripPrefix)(value);
    const bn = new (0, _bnJs.BN)(stripped, 16, isLe ? "le" : "be");
    // fromTwos takes as parameter the number of bits, which is the hex length
    // multiplied by 4 (2 bytes being 8 bits)
    return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

},{"../bn/bn.js":"6mwqp","./stripPrefix.js":"5qaue","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5qaue":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name hexStripPrefix
 * @summary Strips any leading `0x` prefix.
 * @description
 * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexStripPrefix } from '@polkadot/util';
 *
 * console.log('stripped', hexStripPrefix('0x1234')); // => 1234
 * ```
 */ parcelHelpers.export(exports, "hexStripPrefix", ()=>hexStripPrefix);
var _hexJs = require("../is/hex.js");
function hexStripPrefix(value) {
    if (!value || value === "0x") return "";
    else if ((0, _hexJs.REGEX_HEX_PREFIXED).test(value)) return value.substring(2);
    else if ((0, _hexJs.REGEX_HEX_NOPREFIX).test(value)) return value;
    throw new Error(`Expected hex value to convert, found '${value}'`);
}

},{"../is/hex.js":"1XrXF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1XrXF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "REGEX_HEX_PREFIXED", ()=>REGEX_HEX_PREFIXED);
parcelHelpers.export(exports, "REGEX_HEX_NOPREFIX", ()=>REGEX_HEX_NOPREFIX);
/**
 * @name isHex
 * @summary Tests for a hex string.
 * @description
 * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isHex } from '@polkadot/util';
 *
 * isHex('0x1234'); // => true
 * isHex('0x1234', 8); // => false
 * ```
 */ parcelHelpers.export(exports, "isHex", ()=>isHex);
const REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
const REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
function isHex(value, bitLength = -1, ignoreLength) {
    return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aHtst":[function(require,module,exports) {
/**
 * @name isBigInt
 * @summary Tests for a `BigInt` object instance.
 * @description
 * Checks to see if the input object is an instance of `BigInt`
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBigInt } from '@polkadot/util';
 *
 * console.log('isBigInt', isBigInt(123_456n)); // => true
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBigInt", ()=>isBigInt);
function isBigInt(value) {
    return typeof value === "bigint";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7gXiE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isToBigInt", ()=>isToBigInt);
var _helpersJs = require("./helpers.js");
const isToBigInt = /*#__PURE__*/ (0, _helpersJs.isOn)("toBigInt");

},{"./helpers.js":"h9gvY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h9gvY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isOn", ()=>isOn);
parcelHelpers.export(exports, "isOnFunction", ()=>isOnFunction);
parcelHelpers.export(exports, "isOnObject", ()=>isOnObject);
var _functionJs = require("./function.js");
var _objectJs = require("./object.js");
function isOn(...fns) {
    return (value)=>((0, _objectJs.isObject)(value) || (0, _functionJs.isFunction)(value)) && fns.every((f)=>(0, _functionJs.isFunction)(value[f]));
}
function isOnFunction(...fns) {
    return (value)=>(0, _functionJs.isFunction)(value) && fns.every((f)=>(0, _functionJs.isFunction)(value[f]));
}
function isOnObject(...fns) {
    return (value)=>(0, _objectJs.isObject)(value) && fns.every((f)=>(0, _functionJs.isFunction)(value[f]));
}

},{"./function.js":"3nYod","./object.js":"cSHr5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cSHr5":[function(require,module,exports) {
/**
 * @name isObject
 * @summary Tests for an `object`.
 * @description
 * Checks to see if the input value is a JavaScript object.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isObject } from '@polkadot/util';
 *
 * isObject({}); // => true
 * isObject('something'); // => false
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isObject", ()=>isObject);
function isObject(value) {
    return !!value && typeof value === "object";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"klE8p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isToBn", ()=>isToBn);
var _helpersJs = require("./helpers.js");
const isToBn = /*#__PURE__*/ (0, _helpersJs.isOn)("toBn");

},{"./helpers.js":"h9gvY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kjx2g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name bnToHex
 * @summary Creates a hex value from a BN.js bignumber object.
 * @description
 * `null` inputs returns a `0x` result, BN values return the actual value as a `0x` prefixed hex value. Anything that is not a BN object throws an error. With `bitLength` set, it fixes the number to the specified length.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnToHex } from '@polkadot/util';
 *
 * bnToHex(new BN(0x123456)); // => '0x123456'
 * ```
 */ parcelHelpers.export(exports, "bnToHex", ()=>bnToHex);
var _indexJs = require("../u8a/index.js");
var _toU8AJs = require("./toU8a.js");
function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
    return (0, _indexJs.u8aToHex)((0, _toU8AJs.bnToU8a)(value, {
        bitLength,
        isLe,
        isNegative
    }));
}

},{"../u8a/index.js":"7qmUM","./toU8a.js":"gK1IE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7qmUM":[function(require,module,exports) {
/**
 * @summary Utility methods to convert to and from `Uint8Array` objects
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "u8aCmp", ()=>(0, _cmpJs.u8aCmp));
parcelHelpers.export(exports, "u8aConcat", ()=>(0, _concatJs.u8aConcat));
parcelHelpers.export(exports, "u8aConcatStrict", ()=>(0, _concatJs.u8aConcatStrict));
parcelHelpers.export(exports, "u8aEmpty", ()=>(0, _emptyJs.u8aEmpty));
parcelHelpers.export(exports, "u8aEq", ()=>(0, _eqJs.u8aEq));
parcelHelpers.export(exports, "u8aFixLength", ()=>(0, _fixLengthJs.u8aFixLength));
parcelHelpers.export(exports, "u8aSorted", ()=>(0, _sortedJs.u8aSorted));
parcelHelpers.export(exports, "u8aToBigInt", ()=>(0, _toBigIntJs.u8aToBigInt));
parcelHelpers.export(exports, "u8aToBn", ()=>(0, _toBnJs.u8aToBn));
parcelHelpers.export(exports, "u8aToBuffer", ()=>(0, _toBufferJs.u8aToBuffer));
parcelHelpers.export(exports, "u8aToFloat", ()=>(0, _toFloatJs.u8aToFloat));
parcelHelpers.export(exports, "u8aToHex", ()=>(0, _toHexJs.u8aToHex));
parcelHelpers.export(exports, "u8aToNumber", ()=>(0, _toNumberJs.u8aToNumber));
parcelHelpers.export(exports, "u8aToString", ()=>(0, _toStringJs.u8aToString));
parcelHelpers.export(exports, "u8aToU8a", ()=>(0, _toU8AJs.u8aToU8a));
parcelHelpers.export(exports, "U8A_WRAP_ETHEREUM", ()=>(0, _wrapJs.U8A_WRAP_ETHEREUM));
parcelHelpers.export(exports, "U8A_WRAP_POSTFIX", ()=>(0, _wrapJs.U8A_WRAP_POSTFIX));
parcelHelpers.export(exports, "U8A_WRAP_PREFIX", ()=>(0, _wrapJs.U8A_WRAP_PREFIX));
parcelHelpers.export(exports, "u8aIsWrapped", ()=>(0, _wrapJs.u8aIsWrapped));
parcelHelpers.export(exports, "u8aUnwrapBytes", ()=>(0, _wrapJs.u8aUnwrapBytes));
parcelHelpers.export(exports, "u8aWrapBytes", ()=>(0, _wrapJs.u8aWrapBytes));
var _cmpJs = require("./cmp.js");
var _concatJs = require("./concat.js");
var _emptyJs = require("./empty.js");
var _eqJs = require("./eq.js");
var _fixLengthJs = require("./fixLength.js");
var _sortedJs = require("./sorted.js");
var _toBigIntJs = require("./toBigInt.js");
var _toBnJs = require("./toBn.js");
var _toBufferJs = require("./toBuffer.js");
var _toFloatJs = require("./toFloat.js");
var _toHexJs = require("./toHex.js");
var _toNumberJs = require("./toNumber.js");
var _toStringJs = require("./toString.js");
var _toU8AJs = require("./toU8a.js");
var _wrapJs = require("./wrap.js");

},{"./cmp.js":false,"./concat.js":"430bo","./empty.js":false,"./eq.js":"j350s","./fixLength.js":false,"./sorted.js":false,"./toBigInt.js":false,"./toBn.js":"epnYc","./toBuffer.js":false,"./toFloat.js":"d4AQW","./toHex.js":"cBjBN","./toNumber.js":"1nno4","./toString.js":"159cK","./toU8a.js":"2vZLl","./wrap.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"430bo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u8aConcat
 * @summary Creates a concatenated Uint8Array from the inputs.
 * @description
 * Concatenates the input arrays into a single `UInt8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { { u8aConcat } from '@polkadot/util';
 *
 * u8aConcat(
 *   new Uint8Array([1, 2, 3]),
 *   new Uint8Array([4, 5, 6])
 * ); // [1, 2, 3, 4, 5, 6]
 * ```
 */ parcelHelpers.export(exports, "u8aConcat", ()=>u8aConcat);
/**
 * @name u8aConcatStrict
 * @description A strict version of [[u8aConcat]], accepting only Uint8Array inputs
 */ parcelHelpers.export(exports, "u8aConcatStrict", ()=>u8aConcatStrict);
var _toU8AJs = require("./toU8a.js");
function u8aConcat(...list) {
    const count = list.length;
    const u8as = new Array(count);
    let length = 0;
    for(let i = 0; i < count; i++){
        u8as[i] = (0, _toU8AJs.u8aToU8a)(list[i]);
        length += u8as[i].length;
    }
    return u8aConcatStrict(u8as, length);
}
function u8aConcatStrict(u8as, length = 0) {
    const count = u8as.length;
    let offset = 0;
    if (!length) for(let i = 0; i < count; i++)length += u8as[i].length;
    const result = new Uint8Array(length);
    for(let i = 0; i < count; i++){
        result.set(u8as[i], offset);
        offset += u8as[i].length;
    }
    return result;
}

},{"./toU8a.js":"2vZLl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2vZLl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u8aToU8a
 * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.
 * @description
 * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToU8a } from '@polkadot/util';
 *
 * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])
 * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])
 * ```
 */ parcelHelpers.export(exports, "u8aToU8a", ()=>u8aToU8a);
var _toU8AJs = require("../hex/toU8a.js");
var _bufferJs = require("../is/buffer.js");
var _hexJs = require("../is/hex.js");
var _u8AJs = require("../is/u8a.js");
var _toU8AJs1 = require("../string/toU8a.js");
function u8aToU8a(value) {
    return (0, _u8AJs.isU8a)(value) ? (0, _bufferJs.isBuffer)(value) ? new Uint8Array(value) : value : (0, _hexJs.isHex)(value) ? (0, _toU8AJs.hexToU8a)(value) : Array.isArray(value) ? new Uint8Array(value) : (0, _toU8AJs1.stringToU8a)(value);
}

},{"../hex/toU8a.js":"g5dk6","../is/buffer.js":"dQj1x","../is/hex.js":"1XrXF","../is/u8a.js":"a3N6N","../string/toU8a.js":"eeJou","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g5dk6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name hexToU8a
 * @summary Creates a Uint8Array object from a hex string.
 * @description
 * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToU8a } from '@polkadot/util';
 *
 * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])
 * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])
 * ```
 */ parcelHelpers.export(exports, "hexToU8a", ()=>hexToU8a);
const CHR = "0123456789abcdef";
const U8 = new Uint8Array(256);
const U16 = new Uint8Array(65536);
for(let i = 0, count = CHR.length; i < count; i++){
    U8[CHR[i].charCodeAt(0) | 0] = i | 0;
    if (i > 9) U8[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
}
for(let i = 0; i < 256; i++){
    const s = i << 8;
    for(let j = 0; j < 256; j++)U16[s | j] = U8[i] << 4 | U8[j];
}
function hexToU8a(value, bitLength = -1) {
    if (!value) return new Uint8Array();
    let s = value.startsWith("0x") ? 2 : 0;
    const decLength = Math.ceil((value.length - s) / 2);
    const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
    const result = new Uint8Array(endLength);
    const offset = endLength > decLength ? endLength - decLength : 0;
    for(let i = offset; i < endLength; i++, s += 2)// The big factor here is actually the string lookups. If we do
    // HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
    // same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
    // also the faster operation by at least 2x with the character map above
    result[i] = U16[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dQj1x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name isBuffer
 * @summary Tests for a `Buffer` object instance.
 * @description
 * Checks to see if the input object is an instance of `Buffer`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBuffer } from '@polkadot/util';
 *
 * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true
 * ```
 */ parcelHelpers.export(exports, "isBuffer", ()=>isBuffer);
var _xGlobal = require("@polkadot/x-global");
var _hasJs = require("../has.js");
var _functionJs = require("./function.js");
function isBuffer(value) {
    // we do check a function first, since it is slightly faster than isBuffer itself
    return (0, _hasJs.hasBuffer) && !!value && (0, _functionJs.isFunction)(value.readDoubleLE) && (0, _xGlobal.xglobal).Buffer.isBuffer(value);
}

},{"@polkadot/x-global":"k9Iwp","../has.js":"kBoWG","./function.js":"3nYod","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kBoWG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasBigInt", ()=>hasBigInt);
parcelHelpers.export(exports, "hasCjs", ()=>hasCjs);
parcelHelpers.export(exports, "hasDirname", ()=>hasDirname);
parcelHelpers.export(exports, "hasEsm", ()=>hasEsm);
parcelHelpers.export(exports, "hasWasm", ()=>hasWasm);
parcelHelpers.export(exports, "hasBuffer", ()=>hasBuffer);
parcelHelpers.export(exports, "hasProcess", ()=>hasProcess);
var _xBigint = require("@polkadot/x-bigint");
var _xGlobal = require("@polkadot/x-global");
var __dirname = "node_modules/@polkadot/util";
const hasBigInt = typeof (0, _xBigint.BigInt) === "function" && typeof (0, _xBigint.BigInt).asIntN === "function";
const hasCjs = true;
const hasDirname = typeof __dirname !== "undefined";
const hasEsm = !hasCjs;
const hasWasm = typeof WebAssembly !== "undefined";
const hasBuffer = typeof (0, _xGlobal.xglobal).Buffer === "function" && typeof (0, _xGlobal.xglobal).Buffer.isBuffer === "function";
const hasProcess = typeof (0, _xGlobal.xglobal).process === "object";

},{"@polkadot/x-bigint":"6Blk3","@polkadot/x-global":"k9Iwp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a3N6N":[function(require,module,exports) {
/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isU8a", ()=>isU8a);
function isU8a(value) {
    // here we defer the instanceof check which is actually slightly
    // slower than just checking the constrctor (direct instances)
    return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eeJou":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name stringToU8a
 * @summary Creates a Uint8Array object from a utf-8 string.
 * @description
 * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringToU8a } from '@polkadot/util';
 *
 * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]
 * ```
 */ parcelHelpers.export(exports, "stringToU8a", ()=>stringToU8a);
var _xTextencoder = require("@polkadot/x-textencoder");
const encoder = new (0, _xTextencoder.TextEncoder)();
function stringToU8a(value) {
    return value ? encoder.encode(value.toString()) : new Uint8Array();
}

},{"@polkadot/x-textencoder":"1eRz6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j350s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u8aEq
 * @summary Compares two Uint8Arrays for equality.
 * @description
 * For `UInt8Array` (or hex string) input values true if there is a match.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aEq } from '@polkadot/util';
 *
 * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
 * ```
 */ parcelHelpers.export(exports, "u8aEq", ()=>u8aEq);
var _toU8AJs = require("./toU8a.js");
function u8aEq(a, b) {
    const u8aa = (0, _toU8AJs.u8aToU8a)(a);
    const u8ab = (0, _toU8AJs.u8aToU8a)(b);
    if (u8aa.length === u8ab.length) {
        const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
        const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
        const mod = u8aa.length % 4 | 0;
        const length = u8aa.length - mod | 0;
        for(let i = 0; i < length; i += 4){
            if (dvA.getUint32(i) !== dvB.getUint32(i)) return false;
        }
        for(let i = length, count = u8aa.length; i < count; i++){
            if (u8aa[i] !== u8ab[i]) return false;
        }
        return true;
    }
    return false;
}

},{"./toU8a.js":"2vZLl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"epnYc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u8aToBn
 * @summary Creates a BN from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.
 * @param value The value to convert
 * @param options Options to pass while converting
 * @param options.isLe Convert using Little Endian (default)
 * @param options.isNegative Convert using two's complement
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToBn } from '@polkadot/util';
 *
 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
 * ```
 */ parcelHelpers.export(exports, "u8aToBn", ()=>u8aToBn);
var _bnJs = require("../bn/bn.js");
function u8aToBn(value, { isLe = true, isNegative = false } = {}) {
    // slice + reverse is expensive, however SCALE is LE by default so this is the path
    // we are most interested in (the BE is added for the sake of being comprehensive)
    if (!isLe) value = value.slice().reverse();
    const count = value.length;
    // shortcut for <= u48 values - in this case the manual conversion
    // here seems to be more efficient than passing the full array
    if (isNegative && count && value[count - 1] & 0x80) // Most common case i{8, 16, 32} default LE SCALE-encoded
    // For <= 32, we also optimize the xor to a single op
    switch(count){
        case 0:
            return new (0, _bnJs.BN)(0);
        case 1:
            return new (0, _bnJs.BN)((value[0] ^ 255) * -1 - 1);
        case 2:
            return new (0, _bnJs.BN)((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
        case 3:
            return new (0, _bnJs.BN)((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
        case 4:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return new (0, _bnJs.BN)((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
        case 5:
            return new (0, _bnJs.BN)(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 0xff) * 4294967296) * -1 - 1);
        case 6:
            return new (0, _bnJs.BN)(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
        default:
            return new (0, _bnJs.BN)(value, "le").fromTwos(count * 8);
    }
    // Most common case - u{8, 16, 32} default LE SCALE-encoded
    //
    // There are some slight benefits in unrolling this specific loop,
    // however it comes with diminishing returns since here the actual
    // `new BN` does seem to take up the bulk of the time
    switch(count){
        case 0:
            return new (0, _bnJs.BN)(0);
        case 1:
            return new (0, _bnJs.BN)(value[0]);
        case 2:
            return new (0, _bnJs.BN)(value[0] + (value[1] << 8));
        case 3:
            return new (0, _bnJs.BN)(value[0] + (value[1] << 8) + (value[2] << 16));
        case 4:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return new (0, _bnJs.BN)(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
        case 5:
            return new (0, _bnJs.BN)(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
        case 6:
            return new (0, _bnJs.BN)(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
        default:
            return new (0, _bnJs.BN)(value, "le");
    }
}

},{"../bn/bn.js":"6mwqp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d4AQW":[function(require,module,exports) {
/**
 * @name u8aToFloat
 * @description Converts a Uint8Array value into the float (either 32 or 64-bit)
 * representation.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "u8aToFloat", ()=>u8aToFloat);
function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {
    if (bitLength !== 32 && bitLength !== 64) throw new Error("Invalid bitLength provided, expected 32 or 64");
    else if (value.length < bitLength / 8) throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
    const dv = new DataView(value.buffer, value.byteOffset);
    return bitLength === 32 ? dv.getFloat32(0, isLe) : dv.getFloat64(0, isLe);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cBjBN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u8aToHex
 * @summary Creates a hex string from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToHex } from '@polkadot/util';
 *
 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
 * ```
 */ parcelHelpers.export(exports, "u8aToHex", ()=>u8aToHex);
const U8 = new Array(256);
const U16 = new Array(65536);
for(let n = 0; n < 256; n++)U8[n] = n.toString(16).padStart(2, "0");
for(let i = 0; i < 256; i++){
    const s = i << 8;
    for(let j = 0; j < 256; j++)U16[s | j] = U8[i] + U8[j];
}
/** @internal */ function hex(value, result) {
    const mod = value.length % 2 | 0;
    const length = value.length - mod | 0;
    for(let i = 0; i < length; i += 2)result += U16[value[i] << 8 | value[i + 1]];
    if (mod) result += U8[value[length] | 0];
    return result;
}
function u8aToHex(value, bitLength = -1, isPrefixed = true) {
    // this is not 100% correct sinmce we support isPrefixed = false....
    const empty = isPrefixed ? "0x" : "";
    if (!value?.length) return empty;
    else if (bitLength > 0) {
        const length = Math.ceil(bitLength / 8);
        if (value.length > length) return `${hex(value.subarray(0, length / 2), empty)}\u{2026}${hex(value.subarray(value.length - length / 2), "")}`;
    }
    return hex(value, empty);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1nno4":[function(require,module,exports) {
/**
 * @name u8aToNumber
 * @summary Creates a number from a Uint8Array object.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "u8aToNumber", ()=>u8aToNumber);
function u8aToNumber(value, { isLe = true, isNegative = false } = {}) {
    // slice + reverse is expensive, however SCALE is LE by default so this is the path
    // we are most interested in (the BE is added for the sake of being comprehensive)
    if (!isLe) value = value.slice().reverse();
    const count = value.length;
    // When the value is a i{8, 16, 24, 32, 40, 40} values and the top-most bit
    // indicates a signed value, we use a two's complement conversion. If one of these
    // flags are not set, we just do a normal unsigned conversion (the same shortcut
    // applies in both the u8aTo{BigInt, Bn} conversions as well)
    if (isNegative && count && value[count - 1] & 0x80) switch(count){
        case 0:
            return 0;
        case 1:
            return (value[0] ^ 255) * -1 - 1;
        case 2:
            return (value[0] + (value[1] << 8) ^ 65535) * -1 - 1;
        case 3:
            return (value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1;
        case 4:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1;
        case 5:
            return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 0xff) * 4294967296) * -1 - 1;
        case 6:
            return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1;
        default:
            throw new Error("Value more than 48-bits cannot be reliably converted");
    }
    switch(count){
        case 0:
            return 0;
        case 1:
            return value[0];
        case 2:
            return value[0] + (value[1] << 8);
        case 3:
            return value[0] + (value[1] << 8) + (value[2] << 16);
        case 4:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216;
        case 5:
            return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216;
        case 6:
            return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216;
        default:
            throw new Error("Value more than 48-bits cannot be reliably converted");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"159cK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u8aToString
 * @summary Creates a utf-8 string from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToString } from '@polkadot/util';
 *
 * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello
 * ```
 */ parcelHelpers.export(exports, "u8aToString", ()=>u8aToString);
var _xTextdecoder = require("@polkadot/x-textdecoder");
const decoder = new (0, _xTextdecoder.TextDecoder)("utf-8");
function u8aToString(value) {
    return value ? decoder.decode(value) : "";
}

},{"@polkadot/x-textdecoder":"fM3XH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gK1IE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name bnToU8a
 * @summary Creates a Uint8Array object from a BN.
 * @description
 * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.
 * @example
 * <BR>
 *
 * ```javascript
 * import { bnToU8a } from '@polkadot/util';
 *
 * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]
 * ```
 */ parcelHelpers.export(exports, "bnToU8a", ()=>bnToU8a);
var _toBnJs = require("./toBn.js");
const DEFAULT_OPTS = {
    bitLength: -1,
    isLe: true,
    isNegative: false
};
function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {
    const valueBn = (0, _toBnJs.bnToBn)(value);
    const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
    if (!value) return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
    const output = new Uint8Array(byteLength);
    const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
    output.set(bn.toArray(isLe ? "le" : "be", byteLength), 0);
    return output;
}

},{"./toBn.js":"iM6St","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKdLW":[function(require,module,exports) {
/**
 * @description
 * Encoding and decoding of parity-codec compact numbers. The codec is created
 * to take up the least amount of space for a specific number. It performs the
 * same function as Length, however differs in that it uses a variable number of
 * bytes to do the actual encoding. From the Rust implementation for compact
 * encoding:
 *
 *     0b00 00 00 00 / 00 00 00 00 / 00 00 00 00 / 00 00 00 00
 * (0 ... 2**6 - 1)    (u8)
 *     xx xx xx 00
 * (2**6 ... 2**14 - 1)  (u8, u16)  low LH high
 *     yL yL yL 01 / yH yH yH yL
 * (2**14 ... 2**30 - 1)  (u16, u32)  low LMMH high
 *     zL zL zL 10 / zM zM zM zL / zM zM zM zM / zH zH zH zM
 * (2**30 ... 2**536 - 1)  (u32, u64, u128, U256, U512, U520) straight LE-encoded
 *     nn nn nn 11 [ / zz zz zz zz ]{4 + n}
 *
 * Note: we use *LOW BITS* of the LSB in LE encoding to encode the 2 bit key.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compactAddLength", ()=>(0, _addLengthJs.compactAddLength));
parcelHelpers.export(exports, "compactFromU8a", ()=>(0, _fromU8AJs.compactFromU8a));
parcelHelpers.export(exports, "compactFromU8aLim", ()=>(0, _fromU8AJs.compactFromU8aLim));
parcelHelpers.export(exports, "compactStripLength", ()=>(0, _stripLengthJs.compactStripLength));
parcelHelpers.export(exports, "compactToU8a", ()=>(0, _toU8AJs.compactToU8a));
var _addLengthJs = require("./addLength.js");
var _fromU8AJs = require("./fromU8a.js");
var _stripLengthJs = require("./stripLength.js");
var _toU8AJs = require("./toU8a.js");

},{"./addLength.js":"jN9DW","./fromU8a.js":"faYLI","./stripLength.js":"kdb6H","./toU8a.js":"1bv7B","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jN9DW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name compactAddLength
 * @description Adds a length prefix to the input value
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactAddLength } from '@polkadot/util';
 *
 * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])
 * ```
 */ parcelHelpers.export(exports, "compactAddLength", ()=>compactAddLength);
var _indexJs = require("../u8a/index.js");
var _toU8AJs = require("./toU8a.js");
function compactAddLength(input) {
    return (0, _indexJs.u8aConcatStrict)([
        (0, _toU8AJs.compactToU8a)(input.length),
        input
    ]);
}

},{"../u8a/index.js":"7qmUM","./toU8a.js":"1bv7B","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1bv7B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name compactToU8a
 * @description Encodes a number into a compact representation
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactToU8a } from '@polkadot/util';
 *
 * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])
 * ```
 */ parcelHelpers.export(exports, "compactToU8a", ()=>compactToU8a);
var _indexJs = require("../bn/index.js");
var _indexJs1 = require("../u8a/index.js");
const MAX_U8 = (0, _indexJs.BN_TWO).pow(new (0, _indexJs.BN)(6)).isub((0, _indexJs.BN_ONE));
const MAX_U16 = (0, _indexJs.BN_TWO).pow(new (0, _indexJs.BN)(14)).isub((0, _indexJs.BN_ONE));
const MAX_U32 = (0, _indexJs.BN_TWO).pow(new (0, _indexJs.BN)(30)).isub((0, _indexJs.BN_ONE));
const BL_16 = {
    bitLength: 16
};
const BL_32 = {
    bitLength: 32
};
function compactToU8a(value) {
    const bn = (0, _indexJs.bnToBn)(value);
    if (bn.lte(MAX_U8)) return new Uint8Array([
        bn.toNumber() << 2
    ]);
    else if (bn.lte(MAX_U16)) return (0, _indexJs.bnToU8a)(bn.shln(2).iadd((0, _indexJs.BN_ONE)), BL_16);
    else if (bn.lte(MAX_U32)) return (0, _indexJs.bnToU8a)(bn.shln(2).iadd((0, _indexJs.BN_TWO)), BL_32);
    const u8a = (0, _indexJs.bnToU8a)(bn);
    let length = u8a.length;
    // adjust to the minimum number of bytes
    while(u8a[length - 1] === 0)length--;
    if (length < 4) throw new Error("Invalid length, previous checks match anything less than 2^30");
    return (0, _indexJs1.u8aConcatStrict)([
        // subtract 4 as minimum (also catered for in decoding)
        new Uint8Array([
            (length - 4 << 2) + 3
        ]),
        u8a.subarray(0, length)
    ]);
}

},{"../bn/index.js":"jr1HC","../u8a/index.js":"7qmUM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"faYLI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name compactFromU8a
 * @description Retrives the offset and encoded length from a compact-prefixed value
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactFromU8a } from '@polkadot/util';
 *
 * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));
 *
 * console.log('value offset=', offset, 'length=', length); // 4, 0xffff
 * ```
 */ parcelHelpers.export(exports, "compactFromU8a", ()=>compactFromU8a);
/**
 * @name compactFromU8aLim
 * @description A limited version of [[compactFromU8a]], accepting only Uint8Array inputs for values <= 48 bits
 */ parcelHelpers.export(exports, "compactFromU8aLim", ()=>compactFromU8aLim);
var _indexJs = require("../bn/index.js");
var _indexJs1 = require("../u8a/index.js");
function compactFromU8a(input) {
    const u8a = (0, _indexJs1.u8aToU8a)(input);
    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
    // than doing an additional call to u8aToBn (as with variable length)
    switch(u8a[0] & 3){
        case 0:
            return [
                1,
                new (0, _indexJs.BN)(u8a[0] >>> 2)
            ];
        case 1:
            return [
                2,
                new (0, _indexJs.BN)(u8a[0] + (u8a[1] << 8) >>> 2)
            ];
        case 2:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return [
                4,
                new (0, _indexJs.BN)(u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2)
            ];
        // 0b11
        default:
            {
                // add 5 to shifted (4 for base length, 1 for this byte)
                const offset = (u8a[0] >>> 2) + 5;
                // we unroll the loop
                switch(offset){
                    // there still could be 4 bytes data, similar to 0b10 above (with offsets)
                    case 5:
                        // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                        // 32-bit, in the case where the top-most bit is set this yields a negative value
                        return [
                            5,
                            new (0, _indexJs.BN)(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216)
                        ];
                    case 6:
                        return [
                            6,
                            new (0, _indexJs.BN)(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216)
                        ];
                    // 6 bytes data is the maximum, 48 bits (56 would overflow)
                    case 7:
                        return [
                            7,
                            new (0, _indexJs.BN)(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)
                        ];
                    // for anything else, use the non-unrolled version
                    default:
                        return [
                            offset,
                            (0, _indexJs1.u8aToBn)(u8a.subarray(1, offset))
                        ];
                }
            }
    }
}
function compactFromU8aLim(u8a) {
    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
    // than doing an additional call to u8aToBn (as with variable length)
    switch(u8a[0] & 3){
        case 0:
            return [
                1,
                u8a[0] >>> 2
            ];
        case 1:
            return [
                2,
                u8a[0] + (u8a[1] << 8) >>> 2
            ];
        case 2:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return [
                4,
                u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2
            ];
        // 0b11
        default:
            // add 5 to shifted (4 for base length, 1 for this byte)
            // we unroll the loop
            switch((u8a[0] >>> 2) + 5){
                // there still could be 4 bytes data, similar to 0b10 above (with offsets)
                case 5:
                    return [
                        5,
                        u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216
                    ];
                case 6:
                    return [
                        6,
                        u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216
                    ];
                // 6 bytes data is the maximum, 48 bits (56 would overflow)
                case 7:
                    return [
                        7,
                        u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216
                    ];
                // for anything else, we are above the actual MAX_SAFE_INTEGER - bail out
                default:
                    throw new Error("Compact input is > Number.MAX_SAFE_INTEGER");
            }
    }
}

},{"../bn/index.js":"jr1HC","../u8a/index.js":"7qmUM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kdb6H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name compactStripLength
 * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactStripLength } from '@polkadot/util';
 *
 * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]
 * ```
 */ parcelHelpers.export(exports, "compactStripLength", ()=>compactStripLength);
var _fromU8AJs = require("./fromU8a.js");
function compactStripLength(input) {
    const [offset, length] = (0, _fromU8AJs.compactFromU8a)(input);
    const total = offset + length.toNumber();
    return [
        total,
        input.subarray(offset, total)
    ];
}

},{"./fromU8a.js":"faYLI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aoED9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floatToU8a", ()=>(0, _toU8AJs.floatToU8a));
var _toU8AJs = require("./toU8a.js");

},{"./toU8a.js":"dtKba","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dtKba":[function(require,module,exports) {
/**
 * @name floatToU8a
 * @description Converts a float into a U8a representation (While we don't use BE in SCALE
 * we still allow for either representation, although, as elsewhere, isLe is default)
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floatToU8a", ()=>floatToU8a);
function floatToU8a(value = 0.0, { bitLength = 32, isLe = true } = {}) {
    if (bitLength !== 32 && bitLength !== 64) throw new Error("Invalid bitLength provided, expected 32 or 64");
    const result = new Uint8Array(bitLength / 8);
    const dv = new DataView(result.buffer, result.byteOffset);
    if (bitLength === 32) dv.setFloat32(0, Number(value), isLe);
    else dv.setFloat64(0, Number(value), isLe);
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"adOCa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatBalance", ()=>(0, _formatBalanceJs.formatBalance));
parcelHelpers.export(exports, "formatDate", ()=>(0, _formatDateJs.formatDate));
parcelHelpers.export(exports, "formatDecimal", ()=>(0, _formatDecimalJs.formatDecimal));
parcelHelpers.export(exports, "formatElapsed", ()=>(0, _formatElapsedJs.formatElapsed));
parcelHelpers.export(exports, "formatNumber", ()=>(0, _formatNumberJs.formatNumber));
parcelHelpers.export(exports, "calcSi", ()=>(0, _siJs.calcSi));
parcelHelpers.export(exports, "findSi", ()=>(0, _siJs.findSi));
var _formatBalanceJs = require("./formatBalance.js");
var _formatDateJs = require("./formatDate.js");
var _formatDecimalJs = require("./formatDecimal.js");
var _formatElapsedJs = require("./formatElapsed.js");
var _formatNumberJs = require("./formatNumber.js");
var _siJs = require("./si.js");

},{"./formatBalance.js":"4l0T7","./formatDate.js":false,"./formatDecimal.js":false,"./formatElapsed.js":false,"./formatNumber.js":"62e9Y","./si.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4l0T7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatBalance", ()=>formatBalance);
var _toBnJs = require("../bn/toBn.js");
var _booleanJs = require("../is/boolean.js");
var _formatDecimalJs = require("./formatDecimal.js");
var _getSeparatorJs = require("./getSeparator.js");
var _siJs = require("./si.js");
const DEFAULT_DECIMALS = 0;
const DEFAULT_UNIT = (0, _siJs.SI)[0, _siJs.SI_MID].text;
let defaultDecimals = DEFAULT_DECIMALS;
let defaultUnit = DEFAULT_UNIT;
function _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
    // we only work with string inputs here - convert anything
    // into the string-only value
    let text = (0, _toBnJs.bnToBn)(input).toString();
    if (text.length === 0 || text === "0") return "0";
    // strip the negative sign so we can work with clean groupings, re-add this in the
    // end when we return the result (from here on we work with positive numbers)
    let sign = "";
    if (text[0].startsWith("-")) {
        sign = "-";
        text = text.substring(1);
    }
    // We start at midpoint (8) minus 1 - this means that values display as
    // 123.4567 instead of 0.1234 k (so we always have the most relevant).
    const si = (0, _siJs.calcSi)(text, decimals, forceUnit);
    const mid = text.length - (decimals + si.power);
    const pre = mid <= 0 ? "0" : text.substring(0, mid);
    // get the post from the midpoint onward and then first add max decimals
    // before trimming to the correct (calculated) amount of decimals again
    let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
    // remove all trailing 0's (if required via flag)
    if (!withZero) {
        let end = post.length - 1;
        // This looks inefficient, however it is better to do the checks and
        // only make one final slice than it is to do it in multiples
        do if (post[end] === "0") end--;
        while (post[end] === "0");
        post = post.substring(0, end + 1);
    }
    // the display unit
    const unit = (0, _booleanJs.isBoolean)(withUnit) ? (0, _siJs.SI)[0, _siJs.SI_MID].text : withUnit;
    // format the units for display based on the flags
    const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
    const { decimal, thousand } = (0, _getSeparatorJs.getSeparator)(locale);
    return `${sign}${(0, _formatDecimalJs.formatDecimal)(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
const formatBalance = _formatBalance;
formatBalance.calcSi = (text, decimals = defaultDecimals)=>(0, _siJs.calcSi)(text, decimals);
formatBalance.findSi = (0, _siJs.findSi);
formatBalance.getDefaults = ()=>{
    return {
        decimals: defaultDecimals,
        unit: defaultUnit
    };
};
formatBalance.getOptions = (decimals = defaultDecimals)=>{
    return (0, _siJs.SI).filter(({ power })=>power < 0 ? decimals + power >= 0 : true);
};
formatBalance.setDefaults = ({ decimals, unit })=>{
    defaultDecimals = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals;
    defaultUnit = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit;
    (0, _siJs.SI)[0, _siJs.SI_MID].text = defaultUnit;
};

},{"../bn/toBn.js":"iM6St","../is/boolean.js":"g4Bcm","./formatDecimal.js":"g7sur","./getSeparator.js":"eskad","./si.js":"6OhNs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4Bcm":[function(require,module,exports) {
/**
 * @name isBoolean
 * @summary Tests for a boolean value.
 * @description
 * Checks to see if the input value is a JavaScript boolean.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBoolean } from '@polkadot/util';
 *
 * isBoolean(false); // => true
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBoolean", ()=>isBoolean);
function isBoolean(value) {
    return typeof value === "boolean";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g7sur":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name formatDecimal
 * @description Formats a number into string format with thousand separators
 */ parcelHelpers.export(exports, "formatDecimal", ()=>formatDecimal);
const NUMBER_REGEX = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal(value, separator = ",") {
    // We can do this by adjusting the regx, however for the sake of clarity
    // we rather strip and re-add the negative sign in the output
    const isNegative = value[0].startsWith("-");
    const matched = isNegative ? value.substring(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
    return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eskad":[function(require,module,exports) {
/**
 * Get the decimal and thousand separator of a locale
 * @param locale
 * @returns {decimal: string, thousand: string}
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSeparator", ()=>getSeparator);
function getSeparator(locale) {
    return {
        decimal: 0.1.toLocaleString(locale).substring(1, 2),
        thousand: 1000..toLocaleString(locale).substring(1, 2)
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6OhNs":[function(require,module,exports) {
/** @internal */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SI_MID", ()=>SI_MID);
parcelHelpers.export(exports, "SI", ()=>SI);
/** @internal */ parcelHelpers.export(exports, "findSi", ()=>findSi);
/** @internal */ parcelHelpers.export(exports, "calcSi", ()=>calcSi);
const SI_MID = 8;
const SI = [
    {
        power: -24,
        text: "yocto",
        value: "y"
    },
    {
        power: -21,
        text: "zepto",
        value: "z"
    },
    {
        power: -18,
        text: "atto",
        value: "a"
    },
    {
        power: -15,
        text: "femto",
        value: "f"
    },
    {
        power: -12,
        text: "pico",
        value: "p"
    },
    {
        power: -9,
        text: "nano",
        value: "n"
    },
    {
        power: -6,
        text: "micro",
        value: "\xb5"
    },
    {
        power: -3,
        text: "milli",
        value: "m"
    },
    {
        power: 0,
        text: "Unit",
        value: "-"
    },
    {
        power: 3,
        text: "Kilo",
        value: "k"
    },
    {
        power: 6,
        text: "Mill",
        value: "M"
    },
    {
        power: 9,
        text: "Bill",
        value: "B"
    },
    {
        power: 12,
        text: "Tril",
        value: "T"
    },
    {
        power: 15,
        text: "Peta",
        value: "P"
    },
    {
        power: 18,
        text: "Exa",
        value: "E"
    },
    {
        power: 21,
        text: "Zeta",
        value: "Z"
    },
    {
        power: 24,
        text: "Yotta",
        value: "Y"
    }
];
function findSi(type) {
    // use a loop here, better RN support (which doesn't have [].find)
    for(let i = 0, count = SI.length; i < count; i++){
        if (SI[i].value === type) return SI[i];
    }
    return SI[SI_MID];
}
function calcSi(text, decimals, forceUnit) {
    if (forceUnit) return findSi(forceUnit);
    const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i5C3S":[function(require,module,exports) {
/** @internal */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name formatDate
 * @description Formats a date in CCYY-MM-DD HH:MM:SS format
 */ parcelHelpers.export(exports, "formatDate", ()=>formatDate);
function zeroPad(value) {
    return value.toString().padStart(2, "0");
}
function formatDate(date) {
    const year = date.getFullYear().toString();
    const month = zeroPad(date.getMonth() + 1);
    const day = zeroPad(date.getDate());
    const hour = zeroPad(date.getHours());
    const minute = zeroPad(date.getMinutes());
    const second = zeroPad(date.getSeconds());
    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"62e9Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name formatNumber
 * @description Formats a number into string format with thousand separators
 */ parcelHelpers.export(exports, "formatNumber", ()=>formatNumber);
var _toBnJs = require("../bn/toBn.js");
var _formatDecimalJs = require("./formatDecimal.js");
var _getSeparatorJs = require("./getSeparator.js");
function formatNumber(value, { locale = "en" } = {}) {
    const { thousand } = (0, _getSeparatorJs.getSeparator)(locale);
    return (0, _formatDecimalJs.formatDecimal)((0, _toBnJs.bnToBn)(value).toString(), thousand);
}

},{"../bn/toBn.js":"iM6St","./formatDecimal.js":"g7sur","./getSeparator.js":"eskad","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"foCYc":[function(require,module,exports) {
/**
 * @summary Internal utilities to create and test for hex values
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hexAddPrefix", ()=>(0, _addPrefixJs.hexAddPrefix));
parcelHelpers.export(exports, "hexFixLength", ()=>(0, _fixLengthJs.hexFixLength));
parcelHelpers.export(exports, "hexHasPrefix", ()=>(0, _hasPrefixJs.hexHasPrefix));
parcelHelpers.export(exports, "hexStripPrefix", ()=>(0, _stripPrefixJs.hexStripPrefix));
parcelHelpers.export(exports, "hexToBigInt", ()=>(0, _toBigIntJs.hexToBigInt));
parcelHelpers.export(exports, "hexToBn", ()=>(0, _toBnJs.hexToBn));
parcelHelpers.export(exports, "hexToNumber", ()=>(0, _toNumberJs.hexToNumber));
parcelHelpers.export(exports, "hexToString", ()=>(0, _toStringJs.hexToString));
parcelHelpers.export(exports, "hexToU8a", ()=>(0, _toU8AJs.hexToU8a));
var _addPrefixJs = require("./addPrefix.js");
var _fixLengthJs = require("./fixLength.js");
var _hasPrefixJs = require("./hasPrefix.js");
var _stripPrefixJs = require("./stripPrefix.js");
var _toBigIntJs = require("./toBigInt.js");
var _toBnJs = require("./toBn.js");
var _toNumberJs = require("./toNumber.js");
var _toStringJs = require("./toString.js");
var _toU8AJs = require("./toU8a.js");

},{"./addPrefix.js":false,"./fixLength.js":false,"./hasPrefix.js":false,"./stripPrefix.js":false,"./toBigInt.js":false,"./toBn.js":"dITJ7","./toNumber.js":false,"./toString.js":false,"./toU8a.js":"g5dk6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZ2pz":[function(require,module,exports) {
/**
 * @summary Type checking utilities
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isArray", ()=>(0, _arrayJs.isArray));
parcelHelpers.export(exports, "isAscii", ()=>(0, _asciiJs.isAscii));
parcelHelpers.export(exports, "isBigInt", ()=>(0, _bigIntJs.isBigInt));
parcelHelpers.export(exports, "isBn", ()=>(0, _bnJs.isBn));
parcelHelpers.export(exports, "isBoolean", ()=>(0, _booleanJs.isBoolean));
parcelHelpers.export(exports, "isBuffer", ()=>(0, _bufferJs.isBuffer));
parcelHelpers.export(exports, "isChildClass", ()=>(0, _childClassJs.isChildClass));
parcelHelpers.export(exports, "isClass", ()=>(0, _classJs.isClass));
parcelHelpers.export(exports, "isCodec", ()=>(0, _codecJs.isCodec));
parcelHelpers.export(exports, "isCompact", ()=>(0, _compactJs.isCompact));
parcelHelpers.export(exports, "isError", ()=>(0, _errorJs.isError));
parcelHelpers.export(exports, "isFunction", ()=>(0, _functionJs.isFunction));
parcelHelpers.export(exports, "isHex", ()=>(0, _hexJs.isHex));
parcelHelpers.export(exports, "isInstanceOf", ()=>(0, _instanceOfJs.isInstanceOf));
parcelHelpers.export(exports, "isIp", ()=>(0, _ipJs.isIp));
parcelHelpers.export(exports, "isJsonObject", ()=>(0, _jsonObjectJs.isJsonObject));
parcelHelpers.export(exports, "isNull", ()=>(0, _nullJs.isNull));
parcelHelpers.export(exports, "isNumber", ()=>(0, _numberJs.isNumber));
parcelHelpers.export(exports, "isObject", ()=>(0, _objectJs.isObject));
parcelHelpers.export(exports, "isObservable", ()=>(0, _observableJs.isObservable));
parcelHelpers.export(exports, "isPromise", ()=>(0, _promiseJs.isPromise));
parcelHelpers.export(exports, "isRiscV", ()=>(0, _riscvJs.isRiscV));
parcelHelpers.export(exports, "isString", ()=>(0, _stringJs.isString));
parcelHelpers.export(exports, "isTestChain", ()=>(0, _testChainJs.isTestChain));
parcelHelpers.export(exports, "isToBigInt", ()=>(0, _toBigIntJs.isToBigInt));
parcelHelpers.export(exports, "isToBn", ()=>(0, _toBnJs.isToBn));
parcelHelpers.export(exports, "isU8a", ()=>(0, _u8AJs.isU8a));
parcelHelpers.export(exports, "isUndefined", ()=>(0, _undefinedJs.isUndefined));
parcelHelpers.export(exports, "isUtf8", ()=>(0, _utf8Js.isUtf8));
parcelHelpers.export(exports, "isWasm", ()=>(0, _wasmJs.isWasm));
var _arrayJs = require("./array.js");
var _asciiJs = require("./ascii.js");
var _bigIntJs = require("./bigInt.js");
var _bnJs = require("./bn.js");
var _booleanJs = require("./boolean.js");
var _bufferJs = require("./buffer.js");
var _childClassJs = require("./childClass.js");
var _classJs = require("./class.js");
var _codecJs = require("./codec.js");
var _compactJs = require("./compact.js");
var _errorJs = require("./error.js");
var _functionJs = require("./function.js");
var _hexJs = require("./hex.js");
var _instanceOfJs = require("./instanceOf.js");
var _ipJs = require("./ip.js");
var _jsonObjectJs = require("./jsonObject.js");
var _nullJs = require("./null.js");
var _numberJs = require("./number.js");
var _objectJs = require("./object.js");
var _observableJs = require("./observable.js");
var _promiseJs = require("./promise.js");
var _riscvJs = require("./riscv.js");
var _stringJs = require("./string.js");
var _testChainJs = require("./testChain.js");
var _toBigIntJs = require("./toBigInt.js");
var _toBnJs = require("./toBn.js");
var _u8AJs = require("./u8a.js");
var _undefinedJs = require("./undefined.js");
var _utf8Js = require("./utf8.js");
var _wasmJs = require("./wasm.js");

},{"./array.js":false,"./ascii.js":"8Vnpf","./bigInt.js":"aHtst","./bn.js":"l418N","./boolean.js":"g4Bcm","./buffer.js":false,"./childClass.js":"l88uG","./class.js":false,"./codec.js":"bQ9BD","./compact.js":"5M2HJ","./error.js":false,"./function.js":"3nYod","./hex.js":"1XrXF","./instanceOf.js":false,"./ip.js":false,"./jsonObject.js":false,"./null.js":"fvgGr","./number.js":"26LZv","./object.js":"cSHr5","./observable.js":false,"./promise.js":false,"./riscv.js":false,"./string.js":"3nCC2","./testChain.js":false,"./toBigInt.js":false,"./toBn.js":false,"./u8a.js":"a3N6N","./undefined.js":"N37tY","./utf8.js":"cO5AZ","./wasm.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Vnpf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name isAscii
 * @summary Tests if the input is printable ASCII
 * @description
 * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters
 */ parcelHelpers.export(exports, "isAscii", ()=>isAscii);
var _toU8AJs = require("../u8a/toU8a.js");
var _hexJs = require("./hex.js");
var _stringJs = require("./string.js");
/** @internal */ function isAsciiStr(str) {
    for(let i = 0, count = str.length; i < count; i++){
        const b = str.charCodeAt(i);
        // check is inlined here, it is faster than making a call
        if (b < 32 || b > 126) return false;
    }
    return true;
}
/** @internal */ function isAsciiBytes(u8a) {
    for(let i = 0, count = u8a.length; i < count; i++){
        const b = u8a[i] | 0;
        // check is inlined here, it is faster than making a call
        if (b < 32 || b > 126) return false;
    }
    return true;
}
function isAscii(value) {
    return (0, _stringJs.isString)(value) ? (0, _hexJs.isHex)(value) ? isAsciiBytes((0, _toU8AJs.u8aToU8a)(value)) : isAsciiStr(value) : value ? isAsciiBytes(value) : false;
}

},{"../u8a/toU8a.js":"2vZLl","./hex.js":"1XrXF","./string.js":"3nCC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3nCC2":[function(require,module,exports) {
/**
 * @name isString
 * @summary Tests for a string.
 * @description
 * Checks to see if the input value is a JavaScript string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isString } from '@polkadot/util';
 *
 * console.log('isString', isString('test')); // => true
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isString", ()=>isString);
function isString(value) {
    return typeof value === "string" || value instanceof String;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l418N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name isBn
 * @summary Tests for a `BN` object instance.
 * @description
 * Checks to see if the input object is an instance of `BN` (bn.js).
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { isBn } from '@polkadot/util';
 *
 * console.log('isBn', isBn(new BN(1))); // => true
 * ```
 */ parcelHelpers.export(exports, "isBn", ()=>isBn);
var _bnJs = require("../bn/bn.js");
function isBn(value) {
    return (0, _bnJs.BN).isBN(value);
}

},{"../bn/bn.js":"6mwqp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l88uG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name isChildClass
 * @summary Tests if the child extends the parent Class
 * @description
 * Checks to see if the child Class extends the parent Class
 * @example
 * <BR>
 *
 * ```javascript
 * import { isChildClass } from '@polkadot/util';
 *
 * console.log('isChildClass', isChildClass(BN, BN); // => true
 * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false
 * ```
 */ parcelHelpers.export(exports, "isChildClass", ()=>isChildClass);
var _classJs = require("./class.js");
function isChildClass(Parent, Child) {
    // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664
    return (0, _classJs.isClass)(Child) && (0, _classJs.isClass)(Parent) ? Parent === Child || Parent.isPrototypeOf(Child) : false;
}

},{"./class.js":"jlO73","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jlO73":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isClass", ()=>isClass);
var _helpersJs = require("./helpers.js");
const isClass = /*#__PURE__*/ (0, _helpersJs.isOnFunction)("isPrototypeOf", "hasOwnProperty");

},{"./helpers.js":"h9gvY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bQ9BD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isCodec", ()=>isCodec);
var _helpersJs = require("./helpers.js");
const checkCodec = /*#__PURE__*/ (0, _helpersJs.isOnObject)("toHex", "toHuman", "toU8a");
const checkRegistry = /*#__PURE__*/ (0, _helpersJs.isOnObject)("get");
function isCodec(value) {
    return checkCodec(value) && checkRegistry(value.registry);
}

},{"./helpers.js":"h9gvY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5M2HJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isCompact", ()=>isCompact);
var _helpersJs = require("./helpers.js");
const isCompact = /*#__PURE__*/ (0, _helpersJs.isOnObject)("toBigInt", "toBn", "toNumber", "unwrap");

},{"./helpers.js":"h9gvY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fvgGr":[function(require,module,exports) {
/**
 * @name isNull
 * @summary Tests for a `null` values.
 * @description
 * Checks to see if the input value is `null`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNull } from '@polkadot/util';
 *
 * console.log('isNull', isNull(null)); // => true
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNull", ()=>isNull);
function isNull(value) {
    return value === null;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"26LZv":[function(require,module,exports) {
/**
 * @name isNumber
 * @summary Tests for a JavaScript number.
 * @description
 * Checks to see if the input value is a valid number.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNumber } from '@polkadot/util';
 *
 * console.log('isNumber', isNumber(1234)); // => true
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNumber", ()=>isNumber);
function isNumber(value) {
    return typeof value === "number";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"N37tY":[function(require,module,exports) {
/**
 * @name isUndefined
 * @summary Tests for a `undefined` values.
 * @description
 * Checks to see if the input value is `undefined`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUndefined } from '@polkadot/util';
 *
 * console.log('isUndefined', isUndefined(void(0))); // => true
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isUndefined", ()=>isUndefined);
function isUndefined(value) {
    return value === undefined;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cO5AZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name isUtf8
 * @summary Tests if the input is valid Utf8
 * @description
 * Checks to see if the input string or Uint8Array is valid Utf8
 */ parcelHelpers.export(exports, "isUtf8", ()=>isUtf8);
var _toU8AJs = require("../u8a/toU8a.js");
var _stringJs = require("./string.js");
function isUtf8(value) {
    if (!value) return (0, _stringJs.isString)(value);
    const u8a = (0, _toU8AJs.u8aToU8a)(value);
    const len = u8a.length;
    let i = 0;
    while(i < len){
        if (u8a[i] <= 0x7F) i += 1;
        else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF) /* C2..DF 80..BF */ {
            if (i + 1 < len) /* Expect a 2nd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) // *message = "After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF";
                // *faulty_bytes = 2;
                return false;
            } else // *message = "After a first byte between C2 and DF, expecting a 2nd byte.";
            // *faulty_bytes = 1;
            return false;
            i += 2;
        } else if (u8a[i] === 0xE0) /* E0 A0..BF 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) // *message = "After a first byte of E0, expecting a 2nd byte between A0 and BF.";
                // *faulty_bytes = 2;
                return false;
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) // *message = "After a first byte of E0, expecting a 3nd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
            } else // *message = "After a first byte of E0, expecting two following bytes.";
            // *faulty_bytes = 1;
            return false;
            i += 3;
        } else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC) /* E1..EC 80..BF 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) // *message = "After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.";
                // *faulty_bytes = 2;
                return false;
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) // *message = "After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
            } else // *message = "After a first byte between E1 and EC, expecting two following bytes.";
            // *faulty_bytes = 1;
            return false;
            i += 3;
        } else if (u8a[i] === 0xED) /* ED 80..9F 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) // *message = "After a first byte of ED, expecting 2nd byte between 80 and 9F.";
                // *faulty_bytes = 2;
                return false;
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) // *message = "After a first byte of ED, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
            } else // *message = "After a first byte of ED, expecting two following bytes.";
            // *faulty_bytes = 1;
            return false;
            i += 3;
        } else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF) /* EE..EF 80..BF 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) // *message = "After a first byte between EE and EF, expecting 2nd byte between 80 and BF.";
                // *faulty_bytes = 2;
                return false;
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) // *message = "After a first byte between EE and EF, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
            } else // *message = "After a first byte between EE and EF, two following bytes.";
            // *faulty_bytes = 1;
            return false;
            i += 3;
        } else if (u8a[i] === 0xF0) /* F0 90..BF 80..BF 80..BF */ {
            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) // *message = "After a first byte of F0, expecting 2nd byte between 90 and BF.";
                // *faulty_bytes = 2;
                return false;
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) // *message = "After a first byte of F0, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) // *message = "After a first byte of F0, expecting 4th byte between 80 and BF.";
                // *faulty_bytes = 4;
                return false;
            } else // *message = "After a first byte of F0, expecting three following bytes.";
            // *faulty_bytes = 1;
            return false;
            i += 4;
        } else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3) /* F1..F3 80..BF 80..BF 80..BF */ {
            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) // *message = "After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.";
                // *faulty_bytes = 2;
                return false;
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) // *message = "After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) // *message = "After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.";
                // *faulty_bytes = 4;
                return false;
            } else // *message = "After a first byte of F1, F2, or F3, expecting three following bytes.";
            // *faulty_bytes = 1;
            return false;
            i += 4;
        } else if (u8a[i] === 0xF4) /* F4 80..8F 80..BF 80..BF */ {
            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) // *message = "After a first byte of F4, expecting 2nd byte between 80 and 8F.";
                // *faulty_bytes = 2;
                return false;
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) // *message = "After a first byte of F4, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) // *message = "After a first byte of F4, expecting 4th byte between 80 and BF.";
                // *faulty_bytes = 4;
                return false;
            } else // *message = "After a first byte of F4, expecting three following bytes.";
            // *faulty_bytes = 1;
            return false;
            i += 4;
        } else // *message = "Expecting bytes in the following ranges: 00..7F C2..F4.";
        // *faulty_bytes = 1;
        return false;
    }
    return true;
}

},{"../u8a/toU8a.js":"2vZLl","./string.js":"3nCC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g0R3i":[function(require,module,exports) {
/**
 * @name lazyMethod
 * @description
 * Creates a lazy, on-demand getter for the specific value. Upon get the value will be evaluated.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lazyMethod", ()=>lazyMethod);
/**
 * @name lazyMethods
 * @description
 * Creates lazy, on-demand getters for the specific values.
 */ parcelHelpers.export(exports, "lazyMethods", ()=>lazyMethods);
function lazyMethod(result, item, creator, getName, index = 0) {
    const name = getName ? getName(item, index) : item.toString();
    let value;
    Object.defineProperty(result, name, {
        // This allows for re-configuration with the embedded defineProperty below
        // and ensures that on tested browsers and Node, it _will_ be redefined
        // and thus short-circuited for future access
        configurable: true,
        enumerable: true,
        // Use a function here, we don't want to capture the outer this, i.e.
        // don't use arrow functions in this context since we have a this inside
        get: function() {
            // This check should _always_ be false and unneeded, since we override
            // with a value below ... however we ensure we are quire vigilant against
            // all environment failures, so we are rather be safe than sorry
            if (value === undefined) {
                value = creator(item, index, this);
                try {
                    // re-define the property as a value, next time around this
                    // getter will only return the computed value
                    Object.defineProperty(this, name, {
                        value
                    });
                } catch  {
                // ignore any errors, since this _should_ not happen due to
                // the "configurable" property above. But if it ever does
                // from here-on we will be the cached value the next time
                // around (with a very slight dip in performance)
                }
            }
            return value;
        }
    });
}
function lazyMethods(result, items, creator, getName) {
    for(let i = 0, count = items.length; i < count; i++)lazyMethod(result, items[i], creator, getName, i);
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87mNm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loggerFormat", ()=>loggerFormat);
/**
 * @name Logger
 * @summary Creates a consistent log interface for messages
 * @description
 * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.
 * @example
 * <BR>
 *
 * ```javascript
 * import { logger } from '@polkadot/util';
 *
 * const l = logger('test');
 * ```
 */ parcelHelpers.export(exports, "logger", ()=>logger);
var _xGlobal = require("@polkadot/x-global");
var _formatDateJs = require("./format/formatDate.js");
var _bnJs = require("./is/bn.js");
var _bufferJs = require("./is/buffer.js");
var _functionJs = require("./is/function.js");
var _objectJs = require("./is/object.js");
var _u8AJs = require("./is/u8a.js");
var _toHexJs = require("./u8a/toHex.js");
var _toU8AJs = require("./u8a/toU8a.js");
var _noopJs = require("./noop.js");
const logTo = {
    debug: "log",
    error: "error",
    log: "log",
    warn: "warn"
};
function formatOther(value) {
    if (value && (0, _objectJs.isObject)(value) && value.constructor === Object) {
        const result = {};
        for (const [k, v] of Object.entries(value))result[k] = loggerFormat(v);
        return result;
    }
    return value;
}
function loggerFormat(value) {
    if (Array.isArray(value)) return value.map(loggerFormat);
    else if ((0, _bnJs.isBn)(value)) return value.toString();
    else if ((0, _u8AJs.isU8a)(value) || (0, _bufferJs.isBuffer)(value)) return (0, _toHexJs.u8aToHex)((0, _toU8AJs.u8aToU8a)(value));
    return formatOther(value);
}
function formatWithLength(maxLength) {
    return (v)=>{
        if (maxLength <= 0) return v;
        const r = `${v}`;
        return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
    };
}
function apply(log, type, values, maxSize = -1) {
    if (values.length === 1 && (0, _functionJs.isFunction)(values[0])) {
        const fnResult = values[0]();
        return apply(log, type, Array.isArray(fnResult) ? fnResult : [
            fnResult
        ], maxSize);
    }
    console[logTo[log]]((0, _formatDateJs.formatDate)(new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));
}
function isDebugOn(e, type) {
    return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff(e, type) {
    return !!e && e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1)));
}
function getDebugFlag(env, type) {
    let flag = false;
    for (const e of env){
        if (isDebugOn(e, type)) flag = true;
        else if (isDebugOff(e, type)) flag = false;
    }
    return flag;
}
function parseEnv(type) {
    const maxSize = parseInt((0, _xGlobal.xglobal).process?.env?.["DEBUG_MAX"] || "-1", 10);
    return [
        getDebugFlag(((0, _xGlobal.xglobal).process?.env?.["DEBUG"] || "").toLowerCase().split(","), type),
        isNaN(maxSize) ? -1 : maxSize
    ];
}
function logger(origin) {
    const type = `${origin.toUpperCase()}:`.padStart(16);
    const [isDebug, maxSize] = parseEnv(origin.toLowerCase());
    return {
        debug: isDebug ? (...values)=>apply("debug", type, values, maxSize) : (0, _noopJs.noop),
        error: (...values)=>apply("error", type, values),
        log: (...values)=>apply("log", type, values),
        noop: (0, _noopJs.noop),
        warn: (...values)=>apply("warn", type, values)
    };
}

},{"@polkadot/x-global":"k9Iwp","./format/formatDate.js":"i5C3S","./is/bn.js":"l418N","./is/buffer.js":"dQj1x","./is/function.js":"3nYod","./is/object.js":"cSHr5","./is/u8a.js":"a3N6N","./u8a/toHex.js":"cBjBN","./u8a/toU8a.js":"2vZLl","./noop.js":"5HtX0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5HtX0":[function(require,module,exports) {
/**
 * A sharable identity function. Returns the input as-is with no transformation applied.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity);
/**
 * A sharable noop function. As the name suggests, does nothing
 */ parcelHelpers.export(exports, "noop", ()=>noop);
function identity(value) {
    return value;
}
function noop() {
// noop
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fHTyq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name memoize
 * @description Memomize the function with a specific instanceId
 */ parcelHelpers.export(exports, "memoize", ()=>memoize);
var _stringifyJs = require("./stringify.js");
function defaultGetId() {
    return "none";
}
function memoize(fn, { getInstanceId = defaultGetId } = {}) {
    const cache = {};
    const memoized = (...args)=>{
        const stringParams = (0, _stringifyJs.stringify)(args);
        const instanceId = getInstanceId();
        if (!cache[instanceId]) cache[instanceId] = {};
        if (cache[instanceId][stringParams] === undefined) cache[instanceId][stringParams] = fn(...args);
        return cache[instanceId][stringParams];
    };
    memoized.unmemoize = (...args)=>{
        const stringParams = (0, _stringifyJs.stringify)(args);
        const instanceId = getInstanceId();
        if (cache[instanceId]?.[stringParams] !== undefined) delete cache[instanceId][stringParams];
    };
    return memoized;
}

},{"./stringify.js":"4kzVD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4kzVD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name stringify
 * @summary Performs a JSON.stringify, with BigInt handling
 * @description A wrapper for JSON.stringify that handles BigInt values transparently, converting them to string. No differences from the native JSON.stringify function otherwise.
 */ parcelHelpers.export(exports, "stringify", ()=>stringify);
var _bigIntJs = require("./is/bigInt.js");
/** @internal */ function replacer(_, v) {
    return (0, _bigIntJs.isBigInt)(v) ? v.toString() : v;
}
function stringify(value, space) {
    return JSON.stringify(value, replacer, space);
}

},{"./is/bigInt.js":"aHtst","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyuHx":[function(require,module,exports) {
/**
 * @name nextTick
 * @description Defer the operation to the queue for evaluation on the next tick
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nextTick", ()=>nextTick);
function nextTick(onExec, onError) {
    // While Promise.resolve().then(...) would defer to the nextTick, this
    // actually does not play as nicely in browsers like the setTimeout(...)
    // approach. So the safer, though less optimal approach is the one taken here
    setTimeout(()=>{
        Promise.resolve().then(()=>{
            onExec();
        }).catch((error)=>{
            if (onError) onError(error);
            else console.error(error);
        });
    }, 0);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iYuNH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "objectClear", ()=>(0, _clearJs.objectClear));
parcelHelpers.export(exports, "objectCopy", ()=>(0, _copyJs.objectCopy));
parcelHelpers.export(exports, "objectEntries", ()=>(0, _entriesJs.objectEntries));
parcelHelpers.export(exports, "objectKeys", ()=>(0, _keysJs.objectKeys));
parcelHelpers.export(exports, "objectProperties", ()=>(0, _propertyJs.objectProperties));
parcelHelpers.export(exports, "objectProperty", ()=>(0, _propertyJs.objectProperty));
parcelHelpers.export(exports, "objectSpread", ()=>(0, _spreadJs.objectSpread));
parcelHelpers.export(exports, "objectValues", ()=>(0, _valuesJs.objectValues));
var _clearJs = require("./clear.js");
var _copyJs = require("./copy.js");
var _entriesJs = require("./entries.js");
var _keysJs = require("./keys.js");
var _propertyJs = require("./property.js");
var _spreadJs = require("./spread.js");
var _valuesJs = require("./values.js");

},{"./clear.js":"f0GFo","./copy.js":false,"./entries.js":false,"./keys.js":false,"./property.js":"6M1eI","./spread.js":"fM6GI","./values.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f0GFo":[function(require,module,exports) {
/**
 * @name objectClear
 * @summary Removes all the keys from the input object
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "objectClear", ()=>objectClear);
function objectClear(value) {
    const keys = Object.keys(value);
    for(let i = 0, count = keys.length; i < count; i++)delete value[keys[i]];
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6M1eI":[function(require,module,exports) {
/**
 * @name objectProperty
 * @summary Assign a get property on the input object
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "objectProperty", ()=>objectProperty);
/**
 * @name objectProperties
 * @summary Assign get properties on the input object
 */ parcelHelpers.export(exports, "objectProperties", ()=>objectProperties);
function objectProperty(that, key, getter, getName, index = 0) {
    const name = getName ? getName(key, index) : key;
    // There are 3 approaches here -
    //  - Object.prototype.hasOwnProperty.call(that, key) - this only checks the current class, i.e
    //    will retuirn false if the property is set in the parent class
    //  - isUndefined(...) - this may yield a false positive when the property is there, but not set.
    //    Additionally, on pre-defined getters it may make a call
    //  - key in that - Does not need to be combined with either of the above and checks the full chain
    if (!(name in that)) Object.defineProperty(that, name, {
        enumerable: true,
        // Unlike in lazy, we always call into the upper function, i.e. this method
        // does not cache old values (it is expected to be used for dynamic values)
        get: function() {
            return getter(key, index, this);
        }
    });
}
function objectProperties(that, keys, getter, getName) {
    for(let i = 0, count = keys.length; i < count; i++)objectProperty(that, keys[i], getter, getName, i);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fM6GI":[function(require,module,exports) {
/**
 * @name objectSpread
 * @summary Concats all sources into the destination
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "objectSpread", ()=>objectSpread);
function objectSpread(dest, ...sources) {
    for(let i = 0, count = sources.length; i < count; i++){
        const src = sources[i];
        if (src) {
            if (typeof src.entries === "function") for (const [key, value] of src.entries())dest[key] = value;
            else Object.assign(dest, src);
        }
    }
    return dest;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jYpH":[function(require,module,exports) {
/**
 * @summary Utility methods to convert to work with `string` values
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringCamelCase", ()=>(0, _camelCaseJs.stringCamelCase));
parcelHelpers.export(exports, "stringPascalCase", ()=>(0, _camelCaseJs.stringPascalCase));
parcelHelpers.export(exports, "stringLowerFirst", ()=>(0, _lowerFirstJs.stringLowerFirst));
parcelHelpers.export(exports, "stringUpperFirst", ()=>(0, _lowerFirstJs.stringUpperFirst));
parcelHelpers.export(exports, "stringShorten", ()=>(0, _shortenJs.stringShorten));
parcelHelpers.export(exports, "stringToHex", ()=>(0, _toHexJs.stringToHex));
parcelHelpers.export(exports, "stringToU8a", ()=>(0, _toU8AJs.stringToU8a));
var _camelCaseJs = require("./camelCase.js");
var _lowerFirstJs = require("./lowerFirst.js");
var _shortenJs = require("./shorten.js");
var _toHexJs = require("./toHex.js");
var _toU8AJs = require("./toU8a.js");

},{"./camelCase.js":"bTkUv","./lowerFirst.js":"7RE6y","./shorten.js":false,"./toHex.js":"cRe5F","./toU8a.js":"eeJou","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bTkUv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CC_TO_UP", ()=>CC_TO_UP);
parcelHelpers.export(exports, "CC_TO_LO", ()=>CC_TO_LO);
parcelHelpers.export(exports, "stringCamelCase", ()=>stringCamelCase);
parcelHelpers.export(exports, "stringPascalCase", ()=>stringPascalCase);
const CC_TO_UP = new Array(256);
const CC_TO_LO = new Array(256);
for(let i = 0, count = CC_TO_UP.length; i < count; i++){
    CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();
    CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();
}
/** @internal */ function formatAllCaps(w) {
    return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
}
/**
 * @internal
 *
 * Inspired by https://stackoverflow.com/a/2970667
 *
 * This is not as optimal as the original SO answer (we split into per-word),
 * however it does pass the tests (which the SO version doesn't) and is still
 * a major improvement over the original camelcase npm package -
 *
 *   camelcase: 20.88 μs/op
 *        this:  1.00 μs/op
 *
 * Caveat of this: only Ascii, but acceptable for the intended usecase
 */ function converter(format) {
    return (value)=>{
        const parts = value// replace all separators (including consequtive) with spaces
        .replace(/[-_., ]+/g, " ")// we don't want leading or trailing spaces
        .trim()// split into words
        .split(" ");
        let result = "";
        for(let i = 0, count = parts.length; i < count; i++){
            const w = parts[i];
            // apply the formatting
            result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
        }
        return result;
    };
}
const stringCamelCase = /*#__PURE__*/ converter((w, i)=>(i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));
const stringPascalCase = /*#__PURE__*/ converter((w)=>CC_TO_UP[w.charCodeAt(0)] + w.slice(1));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7RE6y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringLowerFirst", ()=>stringLowerFirst);
parcelHelpers.export(exports, "stringUpperFirst", ()=>stringUpperFirst);
var _camelCaseJs = require("./camelCase.js");
/** @internal */ function converter(map) {
    return (value)=>value ? map[value.charCodeAt(0)] + value.slice(1) : "";
}
const stringLowerFirst = /*#__PURE__*/ converter((0, _camelCaseJs.CC_TO_LO));
const stringUpperFirst = /*#__PURE__*/ converter((0, _camelCaseJs.CC_TO_UP));

},{"./camelCase.js":"bTkUv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cRe5F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name stringToHex
 * @summary Creates a hex string from a utf-8 string
 * @description
 * String input values return the actual encoded hex value.
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringToHex } from '@polkadot/util';
 *
 * stringToU8a('hello'); // 0x68656c6c6f
 * ```
 */ parcelHelpers.export(exports, "stringToHex", ()=>stringToHex);
var _toHexJs = require("../u8a/toHex.js");
var _toU8AJs = require("./toU8a.js");
function stringToHex(value) {
    return (0, _toHexJs.u8aToHex)((0, _toU8AJs.stringToU8a)(value));
}

},{"../u8a/toHex.js":"cBjBN","./toU8a.js":"eeJou","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9TQUp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageInfo = require("@polkadot/api-derive/packageInfo");
var _packageInfo1 = require("@polkadot/rpc-core/packageInfo");
var _packageInfo2 = require("@polkadot/rpc-provider/packageInfo");
var _packageInfo3 = require("@polkadot/types/packageInfo");
var _packageInfo4 = require("@polkadot/types-known/packageInfo");
exports.default = [
    (0, _packageInfo.packageInfo),
    (0, _packageInfo1.packageInfo),
    (0, _packageInfo2.packageInfo),
    (0, _packageInfo3.packageInfo),
    (0, _packageInfo4.packageInfo)
];

},{"@polkadot/api-derive/packageInfo":"bD5x4","@polkadot/rpc-core/packageInfo":"3xOtl","@polkadot/rpc-provider/packageInfo":"bkNCg","@polkadot/types/packageInfo":"cIucp","@polkadot/types-known/packageInfo":"kiObO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bD5x4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $8777a0d34e9a9df6$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/api-derive/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/api-derive",
    path: $8777a0d34e9a9df6$import_meta && "file:///node_modules/@polkadot/api-derive/packageInfo.js" ? new URL("file:///node_modules/@polkadot/api-derive/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/api-derive/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "10.11.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3xOtl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $294b9aeb89acee4a$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/rpc-core/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/rpc-core",
    path: $294b9aeb89acee4a$import_meta && "file:///node_modules/@polkadot/rpc-core/packageInfo.js" ? new URL("file:///node_modules/@polkadot/rpc-core/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/rpc-core/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "10.11.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bkNCg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $84080cb15e86384b$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/rpc-provider/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/rpc-provider",
    path: $84080cb15e86384b$import_meta && "file:///node_modules/@polkadot/rpc-provider/packageInfo.js" ? new URL("file:///node_modules/@polkadot/rpc-provider/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/rpc-provider/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "10.11.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cIucp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $942104ff22a16d1c$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/types/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/types",
    path: $942104ff22a16d1c$import_meta && "file:///node_modules/@polkadot/types/packageInfo.js" ? new URL("file:///node_modules/@polkadot/types/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/types/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "10.11.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kiObO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $ec7c6ba94ba72554$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/types-known/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/types-known",
    path: $ec7c6ba94ba72554$import_meta && "file:///node_modules/@polkadot/types-known/packageInfo.js" ? new URL("file:///node_modules/@polkadot/types-known/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/types-known/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "10.11.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1czuv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $0e027133a0ad358d$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/api/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/api",
    path: $0e027133a0ad358d$import_meta && "file:///node_modules/@polkadot/api/packageInfo.js" ? new URL("file:///node_modules/@polkadot/api/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/api/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "10.11.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"18vg0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Keyring", ()=>(0, _keyring.Keyring));
parcelHelpers.export(exports, "HttpProvider", ()=>(0, _rpcProvider.HttpProvider));
parcelHelpers.export(exports, "ScProvider", ()=>(0, _rpcProvider.ScProvider));
parcelHelpers.export(exports, "WsProvider", ()=>(0, _rpcProvider.WsProvider));
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
parcelHelpers.export(exports, "SubmittableResult", ()=>(0, _indexJs.SubmittableResult));
var _rpcAugment = require("@polkadot/rpc-augment");
var _keyring = require("@polkadot/keyring");
var _rpcProvider = require("@polkadot/rpc-provider");
var _packageInfoJs = require("./packageInfo.js");
var _indexJs = require("./submittable/index.js");
var _indexJs1 = require("./promise/index.js");
parcelHelpers.exportAll(_indexJs1, exports);
var _indexJs2 = require("./rx/index.js");
parcelHelpers.exportAll(_indexJs2, exports);

},{"@polkadot/rpc-augment":"cYKme","@polkadot/keyring":false,"@polkadot/rpc-provider":"bvUtj","./packageInfo.js":false,"./submittable/index.js":false,"./promise/index.js":"7tNjd","./rx/index.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cYKme":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"a4ou1","./bundle.js":"9cqbF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a4ou1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"1yYvs","./packageInfo.js":"kBoEK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1yYvs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageInfo = require("@polkadot/rpc-core/packageInfo");
var _packageInfo1 = require("@polkadot/types/packageInfo");
exports.default = [
    (0, _packageInfo.packageInfo),
    (0, _packageInfo1.packageInfo)
];

},{"@polkadot/rpc-core/packageInfo":"3xOtl","@polkadot/types/packageInfo":"cIucp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kBoEK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $effa638d2be6b83a$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/rpc-augment/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/rpc-augment",
    path: $effa638d2be6b83a$import_meta && "file:///node_modules/@polkadot/rpc-augment/packageInfo.js" ? new URL("file:///node_modules/@polkadot/rpc-augment/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/rpc-augment/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "10.11.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9cqbF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
var _indexJs = require("./augment/index.js");
var _packageInfoJs = require("./packageInfo.js");

},{"./augment/index.js":"by6Iz","./packageInfo.js":"kBoEK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"by6Iz":[function(require,module,exports) {
var _jsonrpcJs = require("./jsonrpc.js");

},{"./jsonrpc.js":"sHaCH"}],"sHaCH":[function(require,module,exports) {
/* eslint-disable */ var _jsonrpc = require("@polkadot/rpc-core/types/jsonrpc");

},{"@polkadot/rpc-core/types/jsonrpc":"9zMul"}],"9zMul":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bvUtj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"iJssI","./bundle.js":"g7SDL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iJssI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"a8QCt","./packageInfo.js":"bkNCg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a8QCt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageInfo = require("@polkadot/types/packageInfo");
exports.default = [
    (0, _packageInfo.packageInfo)
];

},{"@polkadot/types/packageInfo":"cIucp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g7SDL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpProvider", ()=>(0, _indexJs.HttpProvider));
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
parcelHelpers.export(exports, "ScProvider", ()=>(0, _indexJs1.ScProvider));
parcelHelpers.export(exports, "WsProvider", ()=>(0, _indexJs2.WsProvider));
var _indexJs = require("./http/index.js");
var _packageInfoJs = require("./packageInfo.js");
var _indexJs1 = require("./substrate-connect/index.js");
var _indexJs2 = require("./ws/index.js");

},{"./http/index.js":false,"./packageInfo.js":false,"./substrate-connect/index.js":false,"./ws/index.js":"kGnGj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kGnGj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * # @polkadot/rpc-provider/ws
 *
 * @name WsProvider
 *
 * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Api from '@polkadot/api/promise';
 * import { WsProvider } from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const api = new Api(provider);
 * ```
 *
 * @see [[HttpProvider]]
 */ parcelHelpers.export(exports, "WsProvider", ()=>WsProvider);
var _eventemitter3 = require("eventemitter3");
var _util = require("@polkadot/util");
var _xGlobal = require("@polkadot/x-global");
var _xWs = require("@polkadot/x-ws");
var _indexJs = require("../coder/index.js");
var _defaultsJs = require("../defaults.js");
var _defaultsJsDefault = parcelHelpers.interopDefault(_defaultsJs);
var _lruJs = require("../lru.js");
var _errorsJs = require("./errors.js");
const ALIASES = {
    chain_finalisedHead: "chain_finalizedHead",
    chain_subscribeFinalisedHeads: "chain_subscribeFinalizedHeads",
    chain_unsubscribeFinalisedHeads: "chain_unsubscribeFinalizedHeads"
};
const RETRY_DELAY = 2500;
const DEFAULT_TIMEOUT_MS = 60000;
const TIMEOUT_INTERVAL = 5000;
const l = (0, _util.logger)("api-ws");
/** @internal Clears a Record<*> of all keys, optionally with all callback on clear */ function eraseRecord(record, cb) {
    Object.keys(record).forEach((key)=>{
        if (cb) cb(record[key]);
        delete record[key];
    });
}
/** @internal Creates a default/empty stats object */ function defaultEndpointStats() {
    return {
        bytesRecv: 0,
        bytesSent: 0,
        cached: 0,
        errors: 0,
        requests: 0,
        subscriptions: 0,
        timeout: 0
    };
}
class WsProvider {
    __internal__callCache = new (0, _lruJs.LRUCache)();
    __internal__coder;
    __internal__endpoints;
    __internal__headers;
    __internal__eventemitter;
    __internal__handlers = {};
    __internal__isReadyPromise;
    __internal__stats;
    __internal__waitingForId = {};
    __internal__autoConnectMs;
    __internal__endpointIndex;
    __internal__endpointStats;
    __internal__isConnected = false;
    __internal__subscriptions = {};
    __internal__timeoutId = null;
    __internal__websocket;
    __internal__timeout;
    /**
     * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
     * @param {number | false} autoConnectMs Whether to connect automatically or not (default). Provided value is used as a delay between retries.
     * @param {Record<string, string>} headers The headers provided to the underlying WebSocket
     * @param {number} [timeout] Custom timeout value used per request . Defaults to `DEFAULT_TIMEOUT_MS`
     */ constructor(endpoint = (0, _defaultsJsDefault.default).WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout){
        const endpoints = Array.isArray(endpoint) ? endpoint : [
            endpoint
        ];
        if (endpoints.length === 0) throw new Error("WsProvider requires at least one Endpoint");
        endpoints.forEach((endpoint)=>{
            if (!/^(wss|ws):\/\//.test(endpoint)) throw new Error(`Endpoint should start with 'ws://', received '${endpoint}'`);
        });
        this.__internal__eventemitter = new (0, _eventemitter3.EventEmitter)();
        this.__internal__autoConnectMs = autoConnectMs || 0;
        this.__internal__coder = new (0, _indexJs.RpcCoder)();
        this.__internal__endpointIndex = -1;
        this.__internal__endpoints = endpoints;
        this.__internal__headers = headers;
        this.__internal__websocket = null;
        this.__internal__stats = {
            active: {
                requests: 0,
                subscriptions: 0
            },
            total: defaultEndpointStats()
        };
        this.__internal__endpointStats = defaultEndpointStats();
        this.__internal__timeout = timeout || DEFAULT_TIMEOUT_MS;
        if (autoConnectMs && autoConnectMs > 0) this.connectWithRetry().catch((0, _util.noop));
        this.__internal__isReadyPromise = new Promise((resolve)=>{
            this.__internal__eventemitter.once("connected", ()=>{
                resolve(this);
            });
        });
    }
    /**
     * @summary `true` when this provider supports subscriptions
     */ get hasSubscriptions() {
        return true;
    }
    /**
     * @summary `true` when this provider supports clone()
     */ get isClonable() {
        return true;
    }
    /**
     * @summary Whether the node is connected or not.
     * @return {boolean} true if connected
     */ get isConnected() {
        return this.__internal__isConnected;
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */ get isReady() {
        return this.__internal__isReadyPromise;
    }
    get endpoint() {
        return this.__internal__endpoints[this.__internal__endpointIndex];
    }
    /**
     * @description Returns a clone of the object
     */ clone() {
        return new WsProvider(this.__internal__endpoints);
    }
    selectEndpointIndex(endpoints) {
        return (this.__internal__endpointIndex + 1) % endpoints.length;
    }
    /**
     * @summary Manually connect
     * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
     * connect manually using this method.
     */ // eslint-disable-next-line @typescript-eslint/require-await
    async connect() {
        if (this.__internal__websocket) throw new Error("WebSocket is already connected");
        try {
            this.__internal__endpointIndex = this.selectEndpointIndex(this.__internal__endpoints);
            // the as here is Deno-specific - not available on the globalThis
            this.__internal__websocket = typeof (0, _xGlobal.xglobal).WebSocket !== "undefined" && (0, _util.isChildClass)((0, _xGlobal.xglobal).WebSocket, (0, _xWs.WebSocket)) ? new (0, _xWs.WebSocket)(this.endpoint) : new (0, _xWs.WebSocket)(this.endpoint, undefined, {
                headers: this.__internal__headers
            });
            if (this.__internal__websocket) {
                this.__internal__websocket.onclose = this.__internal__onSocketClose;
                this.__internal__websocket.onerror = this.__internal__onSocketError;
                this.__internal__websocket.onmessage = this.__internal__onSocketMessage;
                this.__internal__websocket.onopen = this.__internal__onSocketOpen;
            }
            // timeout any handlers that have not had a response
            this.__internal__timeoutId = setInterval(()=>this.__internal__timeoutHandlers(), TIMEOUT_INTERVAL);
        } catch (error) {
            l.error(error);
            this.__internal__emit("error", error);
            throw error;
        }
    }
    /**
     * @description Connect, never throwing an error, but rather forcing a retry
     */ async connectWithRetry() {
        if (this.__internal__autoConnectMs > 0) try {
            await this.connect();
        } catch  {
            setTimeout(()=>{
                this.connectWithRetry().catch((0, _util.noop));
            }, this.__internal__autoConnectMs);
        }
    }
    /**
     * @description Manually disconnect from the connection, clearing auto-connect logic
     */ // eslint-disable-next-line @typescript-eslint/require-await
    async disconnect() {
        // switch off autoConnect, we are in manual mode now
        this.__internal__autoConnectMs = 0;
        try {
            if (this.__internal__websocket) // 1000 - Normal closure; the connection successfully completed
            this.__internal__websocket.close(1000);
        } catch (error) {
            l.error(error);
            this.__internal__emit("error", error);
            throw error;
        }
    }
    /**
     * @description Returns the connection stats
     */ get stats() {
        return {
            active: {
                requests: Object.keys(this.__internal__handlers).length,
                subscriptions: Object.keys(this.__internal__subscriptions).length
            },
            total: this.__internal__stats.total
        };
    }
    get endpointStats() {
        return this.__internal__endpointStats;
    }
    /**
     * @summary Listens on events after having subscribed using the [[subscribe]] function.
     * @param  {ProviderInterfaceEmitted} type Event
     * @param  {ProviderInterfaceEmitCb}  sub  Callback
     * @return unsubscribe function
     */ on(type, sub) {
        this.__internal__eventemitter.on(type, sub);
        return ()=>{
            this.__internal__eventemitter.removeListener(type, sub);
        };
    }
    /**
     * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
     * @param method The RPC methods to execute
     * @param params Encoded parameters as applicable for the method
     * @param subscription Subscription details (internally used)
     */ send(method, params, isCacheable, subscription) {
        this.__internal__endpointStats.requests++;
        this.__internal__stats.total.requests++;
        const [id, body] = this.__internal__coder.encodeJson(method, params);
        let resultPromise = isCacheable ? this.__internal__callCache.get(body) : null;
        if (!resultPromise) {
            resultPromise = this.__internal__send(id, body, method, params, subscription);
            if (isCacheable) this.__internal__callCache.set(body, resultPromise);
        } else {
            this.__internal__endpointStats.cached++;
            this.__internal__stats.total.cached++;
        }
        return resultPromise;
    }
    async __internal__send(id, body, method, params, subscription) {
        return new Promise((resolve, reject)=>{
            try {
                if (!this.isConnected || this.__internal__websocket === null) throw new Error("WebSocket is not connected");
                const callback = (error, result)=>{
                    error ? reject(error) : resolve(result);
                };
                l.debug(()=>[
                        "calling",
                        method,
                        body
                    ]);
                this.__internal__handlers[id] = {
                    callback,
                    method,
                    params,
                    start: Date.now(),
                    subscription
                };
                const bytesSent = body.length;
                this.__internal__endpointStats.bytesSent += bytesSent;
                this.__internal__stats.total.bytesSent += bytesSent;
                this.__internal__websocket.send(body);
            } catch (error) {
                this.__internal__endpointStats.errors++;
                this.__internal__stats.total.errors++;
                reject(error);
            }
        });
    }
    /**
     * @name subscribe
     * @summary Allows subscribing to a specific event.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const rpc = new Rpc(provider);
     *
     * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
     *   console.log(values)
     * }).then((subscriptionId) => {
     *   console.log('balance changes subscription id: ', subscriptionId)
     * })
     * ```
     */ subscribe(type, method, params, callback) {
        this.__internal__endpointStats.subscriptions++;
        this.__internal__stats.total.subscriptions++;
        // subscriptions are not cached, LRU applies to .at(<blockHash>) only
        return this.send(method, params, false, {
            callback,
            type
        });
    }
    /**
     * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
     */ async unsubscribe(type, method, id) {
        const subscription = `${type}::${id}`;
        // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
        // the assigned id now does not match what the API user originally received. It has
        // a slight complication in solving - since we cannot rely on the send id, but rather
        // need to find the actual subscription id to map it
        if ((0, _util.isUndefined)(this.__internal__subscriptions[subscription])) {
            l.debug(()=>`Unable to find active subscription=${subscription}`);
            return false;
        }
        delete this.__internal__subscriptions[subscription];
        try {
            return this.isConnected && !(0, _util.isNull)(this.__internal__websocket) ? this.send(method, [
                id
            ]) : true;
        } catch  {
            return false;
        }
    }
    __internal__emit = (type, ...args)=>{
        this.__internal__eventemitter.emit(type, ...args);
    };
    __internal__onSocketClose = (event)=>{
        const error = new Error(`disconnected from ${this.endpoint}: ${event.code}:: ${event.reason || (0, _errorsJs.getWSErrorString)(event.code)}`);
        if (this.__internal__autoConnectMs > 0) l.error(error.message);
        this.__internal__isConnected = false;
        if (this.__internal__websocket) {
            this.__internal__websocket.onclose = null;
            this.__internal__websocket.onerror = null;
            this.__internal__websocket.onmessage = null;
            this.__internal__websocket.onopen = null;
            this.__internal__websocket = null;
        }
        if (this.__internal__timeoutId) {
            clearInterval(this.__internal__timeoutId);
            this.__internal__timeoutId = null;
        }
        // reject all hanging requests
        eraseRecord(this.__internal__handlers, (h)=>{
            try {
                h.callback(error, undefined);
            } catch (err) {
                // does not throw
                l.error(err);
            }
        });
        eraseRecord(this.__internal__waitingForId);
        // Reset stats for active endpoint
        this.__internal__endpointStats = defaultEndpointStats();
        this.__internal__emit("disconnected");
        if (this.__internal__autoConnectMs > 0) setTimeout(()=>{
            this.connectWithRetry().catch((0, _util.noop));
        }, this.__internal__autoConnectMs);
    };
    __internal__onSocketError = (error)=>{
        l.debug(()=>[
                "socket error",
                error
            ]);
        this.__internal__emit("error", error);
    };
    __internal__onSocketMessage = (message)=>{
        l.debug(()=>[
                "received",
                message.data
            ]);
        const bytesRecv = message.data.length;
        this.__internal__endpointStats.bytesRecv += bytesRecv;
        this.__internal__stats.total.bytesRecv += bytesRecv;
        const response = JSON.parse(message.data);
        return (0, _util.isUndefined)(response.method) ? this.__internal__onSocketMessageResult(response) : this.__internal__onSocketMessageSubscribe(response);
    };
    __internal__onSocketMessageResult = (response)=>{
        const handler = this.__internal__handlers[response.id];
        if (!handler) {
            l.debug(()=>`Unable to find handler for id=${response.id}`);
            return;
        }
        try {
            const { method, params, subscription } = handler;
            const result = this.__internal__coder.decodeResponse(response);
            // first send the result - in case of subs, we may have an update
            // immediately if we have some queued results already
            handler.callback(null, result);
            if (subscription) {
                const subId = `${subscription.type}::${result}`;
                this.__internal__subscriptions[subId] = (0, _util.objectSpread)({}, subscription, {
                    method,
                    params
                });
                // if we have a result waiting for this subscription already
                if (this.__internal__waitingForId[subId]) this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[subId]);
            }
        } catch (error) {
            this.__internal__endpointStats.errors++;
            this.__internal__stats.total.errors++;
            handler.callback(error, undefined);
        }
        delete this.__internal__handlers[response.id];
    };
    __internal__onSocketMessageSubscribe = (response)=>{
        if (!response.method) throw new Error("No method found in JSONRPC response");
        const method = ALIASES[response.method] || response.method;
        const subId = `${method}::${response.params.subscription}`;
        const handler = this.__internal__subscriptions[subId];
        if (!handler) {
            // store the JSON, we could have out-of-order subid coming in
            this.__internal__waitingForId[subId] = response;
            l.debug(()=>`Unable to find handler for subscription=${subId}`);
            return;
        }
        // housekeeping
        delete this.__internal__waitingForId[subId];
        try {
            const result = this.__internal__coder.decodeResponse(response);
            handler.callback(null, result);
        } catch (error) {
            this.__internal__endpointStats.errors++;
            this.__internal__stats.total.errors++;
            handler.callback(error, undefined);
        }
    };
    __internal__onSocketOpen = ()=>{
        if (this.__internal__websocket === null) throw new Error("WebSocket cannot be null in onOpen");
        l.debug(()=>[
                "connected to",
                this.endpoint
            ]);
        this.__internal__isConnected = true;
        this.__internal__resubscribe();
        this.__internal__emit("connected");
        return true;
    };
    __internal__resubscribe = ()=>{
        const subscriptions = this.__internal__subscriptions;
        this.__internal__subscriptions = {};
        Promise.all(Object.keys(subscriptions).map(async (id)=>{
            const { callback, method, params, type } = subscriptions[id];
            // only re-create subscriptions which are not in author (only area where
            // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
            // are not included (and will not be re-broadcast)
            if (type.startsWith("author_")) return;
            try {
                await this.subscribe(type, method, params, callback);
            } catch (error) {
                l.error(error);
            }
        })).catch(l.error);
    };
    __internal__timeoutHandlers = ()=>{
        const now = Date.now();
        const ids = Object.keys(this.__internal__handlers);
        for(let i = 0, count = ids.length; i < count; i++){
            const handler = this.__internal__handlers[ids[i]];
            if (now - handler.start > this.__internal__timeout) {
                try {
                    handler.callback(new Error(`No response received from RPC endpoint in ${this.__internal__timeout / 1000}s`), undefined);
                } catch  {
                // ignore
                }
                this.__internal__endpointStats.timeout++;
                this.__internal__stats.total.timeout++;
                delete this.__internal__handlers[ids[i]];
            }
        }
    };
}

},{"eventemitter3":"3fnfh","@polkadot/util":"3HnHw","@polkadot/x-global":"k9Iwp","@polkadot/x-ws":"fGsOX","../coder/index.js":"hnZK5","../defaults.js":"384nS","../lru.js":"33o4q","./errors.js":"7XO2X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3fnfh":[function(require,module,exports) {
"use strict";
var has = Object.prototype.hasOwnProperty, prefix = "~";
/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */ function Events() {}
//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
    Events.prototype = Object.create(null);
    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new Events().__proto__) prefix = false;
}
/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */ function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
}
/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */ function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== "function") throw new TypeError("The listener must be a function");
    var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
    else emitter._events[evt] = [
        emitter._events[evt],
        listener
    ];
    return emitter;
}
/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */ function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();
    else delete emitter._events[evt];
}
/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */ function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
}
/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */ EventEmitter.prototype.eventNames = function eventNames() {
    var names = [], events, name;
    if (this._eventsCount === 0) return names;
    for(name in events = this._events)if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    if (Object.getOwnPropertySymbols) return names.concat(Object.getOwnPropertySymbols(events));
    return names;
};
/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */ EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event, handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [
        handlers.fn
    ];
    for(var i = 0, l = handlers.length, ee = new Array(l); i < l; i++)ee[i] = handlers[i].fn;
    return ee;
};
/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */ EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event, listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
};
/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */ EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
        switch(len){
            case 1:
                return listeners.fn.call(listeners.context), true;
            case 2:
                return listeners.fn.call(listeners.context, a1), true;
            case 3:
                return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
                return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for(i = 1, args = new Array(len - 1); i < len; i++)args[i - 1] = arguments[i];
        listeners.fn.apply(listeners.context, args);
    } else {
        var length = listeners.length, j;
        for(i = 0; i < length; i++){
            if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
            switch(len){
                case 1:
                    listeners[i].fn.call(listeners[i].context);
                    break;
                case 2:
                    listeners[i].fn.call(listeners[i].context, a1);
                    break;
                case 3:
                    listeners[i].fn.call(listeners[i].context, a1, a2);
                    break;
                case 4:
                    listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                    break;
                default:
                    if (!args) for(j = 1, args = new Array(len - 1); j < len; j++)args[j - 1] = arguments[j];
                    listeners[i].fn.apply(listeners[i].context, args);
            }
        }
    }
    return true;
};
/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
};
/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
};
/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;
    if (!fn) {
        clearEvent(this, evt);
        return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) clearEvent(this, evt);
    } else {
        for(var i = 0, events = [], length = listeners.length; i < length; i++)if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) events.push(listeners[i]);
        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
    }
    return this;
};
/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
    } else {
        this._events = new Events();
        this._eventsCount = 0;
    }
    return this;
};
//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;
//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;
//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;
module.exports = EventEmitter;

},{}],"fGsOX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebSocket = exports.packageInfo = void 0;
const x_global_1 = require("640c0c1453e164ed");
var packageInfo_js_1 = require("6d2fbb6081edb7a6");
Object.defineProperty(exports, "packageInfo", {
    enumerable: true,
    get: function() {
        return packageInfo_js_1.packageInfo;
    }
});
exports.WebSocket = x_global_1.xglobal.WebSocket;

},{"640c0c1453e164ed":"k9Iwp","6d2fbb6081edb7a6":"dhtOZ"}],"dhtOZ":[function(require,module,exports) {
var __dirname = "node_modules/@polkadot/x-ws/cjs";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.packageInfo = void 0;
exports.packageInfo = {
    name: "@polkadot/x-ws",
    path: typeof __dirname === "string" ? __dirname : "auto",
    type: "cjs",
    version: "12.6.2"
};

},{}],"hnZK5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "RpcCoder", ()=>RpcCoder);
var _util = require("@polkadot/util");
var _errorJs = require("./error.js");
var _errorJsDefault = parcelHelpers.interopDefault(_errorJs);
function formatErrorData(data) {
    if ((0, _util.isUndefined)(data)) return "";
    const formatted = `: ${(0, _util.isString)(data) ? data.replace(/Error\("/g, "").replace(/\("/g, "(").replace(/"\)/g, ")").replace(/\(/g, ", ").replace(/\)/g, "") : (0, _util.stringify)(data)}`;
    // We need some sort of cut-off here since these can be very large and
    // very nested, pick a number and trim the result display to it
    return formatted.length <= 256 ? formatted : `${formatted.substring(0, 255)}\u{2026}`;
}
function checkError(error) {
    if (error) {
        const { code, data, message } = error;
        throw new (0, _errorJsDefault.default)(`${code}: ${message}${formatErrorData(data)}`, code, data);
    }
}
class RpcCoder {
    __internal__id = 0;
    decodeResponse(response) {
        if (!response || response.jsonrpc !== "2.0") throw new Error("Invalid jsonrpc field in decoded object");
        const isSubscription = !(0, _util.isUndefined)(response.params) && !(0, _util.isUndefined)(response.method);
        if (!(0, _util.isNumber)(response.id) && (!isSubscription || !(0, _util.isNumber)(response.params.subscription) && !(0, _util.isString)(response.params.subscription))) throw new Error("Invalid id field in decoded object");
        checkError(response.error);
        if (response.result === undefined && !isSubscription) throw new Error("No result found in jsonrpc response");
        if (isSubscription) {
            checkError(response.params.error);
            return response.params.result;
        }
        return response.result;
    }
    encodeJson(method, params) {
        const [id, data] = this.encodeObject(method, params);
        return [
            id,
            (0, _util.stringify)(data)
        ];
    }
    encodeObject(method, params) {
        const id = ++this.__internal__id;
        return [
            id,
            {
                id,
                jsonrpc: "2.0",
                method,
                params
            }
        ];
    }
}

},{"@polkadot/util":"3HnHw","./error.js":"25oT1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"25oT1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _util = require("@polkadot/util");
const UNKNOWN = -99999;
function extend(that, name, value) {
    Object.defineProperty(that, name, {
        configurable: true,
        enumerable: false,
        value
    });
}
class RpcError extends Error {
    code;
    data;
    message;
    name;
    stack;
    constructor(message = "", code = UNKNOWN, data){
        super();
        extend(this, "message", String(message));
        extend(this, "name", this.constructor.name);
        extend(this, "data", data);
        extend(this, "code", code);
        if ((0, _util.isFunction)(Error.captureStackTrace)) Error.captureStackTrace(this, this.constructor);
        else {
            const { stack } = new Error(message);
            stack && extend(this, "stack", stack);
        }
    }
    static CODES = {
        ASSERT: -90009,
        INVALID_JSONRPC: -99998,
        METHOD_NOT_FOUND: -32601,
        UNKNOWN
    };
}
exports.default = RpcError;

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"384nS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const HTTP_URL = "http://127.0.0.1:9933";
const WS_URL = "ws://127.0.0.1:9944";
exports.default = {
    HTTP_URL,
    WS_URL
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"33o4q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LRUCache", ()=>LRUCache);
const DEFAULT_CAPACITY = 128;
class LRUNode {
    key;
    next;
    prev;
    constructor(key){
        this.key = key;
        this.next = this.prev = this;
    }
}
class LRUCache {
    capacity;
    __internal__data = new Map();
    __internal__refs = new Map();
    __internal__length = 0;
    __internal__head;
    __internal__tail;
    constructor(capacity = DEFAULT_CAPACITY){
        this.capacity = capacity;
        this.__internal__head = this.__internal__tail = new LRUNode("<empty>");
    }
    get length() {
        return this.__internal__length;
    }
    get lengthData() {
        return this.__internal__data.size;
    }
    get lengthRefs() {
        return this.__internal__refs.size;
    }
    entries() {
        const keys = this.keys();
        const count = keys.length;
        const entries = new Array(count);
        for(let i = 0; i < count; i++){
            const key = keys[i];
            entries[i] = [
                key,
                this.__internal__data.get(key)
            ];
        }
        return entries;
    }
    keys() {
        const keys = [];
        if (this.__internal__length) {
            let curr = this.__internal__head;
            while(curr !== this.__internal__tail){
                keys.push(curr.key);
                curr = curr.next;
            }
            keys.push(curr.key);
        }
        return keys;
    }
    get(key) {
        const data = this.__internal__data.get(key);
        if (data) {
            this.__internal__toHead(key);
            return data;
        }
        return null;
    }
    set(key, value) {
        if (this.__internal__data.has(key)) this.__internal__toHead(key);
        else {
            const node = new LRUNode(key);
            this.__internal__refs.set(node.key, node);
            if (this.length === 0) this.__internal__head = this.__internal__tail = node;
            else {
                this.__internal__head.prev = node;
                node.next = this.__internal__head;
                this.__internal__head = node;
            }
            if (this.__internal__length === this.capacity) {
                this.__internal__data.delete(this.__internal__tail.key);
                this.__internal__refs.delete(this.__internal__tail.key);
                this.__internal__tail = this.__internal__tail.prev;
                this.__internal__tail.next = this.__internal__head;
            } else this.__internal__length += 1;
        }
        this.__internal__data.set(key, value);
    }
    __internal__toHead(key) {
        const ref = this.__internal__refs.get(key);
        if (ref && ref !== this.__internal__head) {
            ref.prev.next = ref.next;
            ref.next.prev = ref.prev;
            ref.next = this.__internal__head;
            this.__internal__head.prev = ref;
            this.__internal__head = ref;
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7XO2X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getWSErrorString", ()=>getWSErrorString);
const known = {
    1000: "Normal Closure",
    1001: "Going Away",
    1002: "Protocol Error",
    1003: "Unsupported Data",
    1004: "(For future)",
    1005: "No Status Received",
    1006: "Abnormal Closure",
    1007: "Invalid frame payload data",
    1008: "Policy Violation",
    1009: "Message too big",
    1010: "Missing Extension",
    1011: "Internal Error",
    1012: "Service Restart",
    1013: "Try Again Later",
    1014: "Bad Gateway",
    1015: "TLS Handshake"
};
function getWSErrorString(code) {
    if (code >= 0 && code <= 999) return "(Unused)";
    else if (code >= 1016) {
        if (code <= 1999) return "(For WebSocket standard)";
        else if (code <= 2999) return "(For WebSocket extensions)";
        else if (code <= 3999) return "(For libraries and frameworks)";
        else if (code <= 4999) return "(For applications)";
    }
    return known[code] || "(Unknown)";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"IVbyl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSubmittable", ()=>(0, _createSubmittableJs.createSubmittable));
parcelHelpers.export(exports, "SubmittableResult", ()=>(0, _resultJs.SubmittableResult));
var _createSubmittableJs = require("./createSubmittable.js");
var _resultJs = require("./Result.js");

},{"./createSubmittable.js":"8p2ZD","./Result.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8p2ZD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSubmittable", ()=>createSubmittable);
var _createClassJs = require("./createClass.js");
function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
    const Submittable = (0, _createClassJs.createClass)({
        api,
        apiType,
        blockHash,
        decorateMethod
    });
    return (extrinsic)=>new Submittable(registry || api.registry, extrinsic);
}

},{"./createClass.js":"e7PMG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e7PMG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createClass", ()=>createClass);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _resultJs = require("./Result.js");
function makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {
    if (!header) {
        if (partialOptions.era && !partialOptions.blockHash) throw new Error("Expected blockHash to be passed alongside non-immortal era options");
        if ((0, _util.isNumber)(partialOptions.era)) {
            // since we have no header, it is immortal, remove any option overrides
            // so we only supply the genesisHash and no era to the construction
            delete partialOptions.era;
            delete partialOptions.blockHash;
        }
        return makeSignOptions(api, partialOptions, {
            nonce
        });
    }
    return makeSignOptions(api, partialOptions, {
        blockHash: header.hash,
        era: registry.createTypeUnsafe("ExtrinsicEra", [
            {
                current: header.number,
                period: partialOptions.era || mortalLength
            }
        ]),
        nonce
    });
}
function makeSignAndSendOptions(partialOptions, statusCb) {
    let options = {};
    if ((0, _util.isFunction)(partialOptions)) statusCb = partialOptions;
    else options = (0, _util.objectSpread)({}, partialOptions);
    return [
        options,
        statusCb
    ];
}
function makeSignOptions(api, partialOptions, extras) {
    return (0, _util.objectSpread)({
        blockHash: api.genesisHash,
        genesisHash: api.genesisHash
    }, partialOptions, extras, {
        runtimeVersion: api.runtimeVersion,
        signedExtensions: api.registry.signedExtensions,
        version: api.extrinsicType
    });
}
function optionsOrNonce(partialOptions = {}) {
    return (0, _util.isBn)(partialOptions) || (0, _util.isNumber)(partialOptions) ? {
        nonce: partialOptions
    } : partialOptions;
}
function createClass({ api, apiType, blockHash, decorateMethod }) {
    // an instance of the base extrinsic for us to extend
    const ExtrinsicBase = api.registry.createClass("Extrinsic");
    class Submittable extends ExtrinsicBase {
        __internal__ignoreStatusCb;
        __internal__transformResult = (0, _util.identity);
        constructor(registry, extrinsic){
            super(registry, extrinsic, {
                version: api.extrinsicType
            });
            this.__internal__ignoreStatusCb = apiType === "rxjs";
        }
        get hasDryRun() {
            return (0, _util.isFunction)(api.rpc.system?.dryRun);
        }
        get hasPaymentInfo() {
            return (0, _util.isFunction)(api.call.transactionPaymentApi?.queryInfo);
        }
        // dry run an extrinsic
        dryRun(account, optionsOrHash) {
            if (!this.hasDryRun) throw new Error("The system.dryRun RPC call is not available in your environment");
            if (blockHash || (0, _util.isString)(optionsOrHash) || (0, _util.isU8a)(optionsOrHash)) // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return decorateMethod(()=>api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(()=>this.__internal__observeSign(account, optionsOrHash).pipe((0, _rxjs.switchMap)(()=>api.rpc.system.dryRun(this.toHex()))))();
        }
        // calculate the payment info for this transaction (if signed and submitted)
        paymentInfo(account, optionsOrHash) {
            if (!this.hasPaymentInfo) throw new Error("The transactionPaymentApi.queryInfo runtime call is not available in your environment");
            if (blockHash || (0, _util.isString)(optionsOrHash) || (0, _util.isU8a)(optionsOrHash)) // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return decorateMethod(()=>api.callAt(blockHash || optionsOrHash).pipe((0, _rxjs.switchMap)((callAt)=>{
                    const u8a = this.toU8a();
                    return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);
                })));
            const [allOptions] = makeSignAndSendOptions(optionsOrHash);
            const address = (0, _indexJs.isKeyringPair)(account) ? account.address : account.toString();
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(()=>api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe((0, _rxjs.first)(), (0, _rxjs.switchMap)((signingInfo)=>{
                    // setup our options (same way as in signAndSend)
                    const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo);
                    const signOptions = makeSignOptions(api, eraOptions, {});
                    // 1. Don't use the internal objects inside the new tx (hence toU8a)
                    // 2. Don't override the data from existing signed extrinsics
                    // 3. Ensure that this object stays intact, with no new sign after operation
                    const u8a = api.tx(this.toU8a()).signFake(address, signOptions).toU8a();
                    return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);
                })))();
        }
        // send implementation for both immediate Hash and statusCb variants
        send(statusCb) {
            const isSubscription = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(isSubscription ? this.__internal__observeSubscribe : this.__internal__observeSend)(statusCb);
        }
        /**
         * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
         */ signAsync(account, partialOptions) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(()=>this.__internal__observeSign(account, partialOptions).pipe((0, _rxjs.map)(()=>this)))();
        }
        // signAndSend implementation for all 3 cases above
        signAndSend(account, partialOptions, optionalStatusCb) {
            const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
            const isSubscription = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(()=>this.__internal__observeSign(account, options).pipe((0, _rxjs.switchMap)((info)=>isSubscription ? this.__internal__observeSubscribe(info) : this.__internal__observeSend(info))) // FIXME This is wrong, SubmittableResult is _not_ a codec
            )(statusCb);
        }
        // adds a transform to the result, applied before result is returned
        withResultTransform(transform) {
            this.__internal__transformResult = transform;
            return this;
        }
        __internal__observeSign = (account, partialOptions)=>{
            const address = (0, _indexJs.isKeyringPair)(account) ? account.address : account.toString();
            const options = optionsOrNonce(partialOptions);
            return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe((0, _rxjs.first)(), (0, _rxjs.mergeMap)(async (signingInfo)=>{
                const eraOptions = makeEraOptions(api, this.registry, options, signingInfo);
                let updateId = -1;
                if ((0, _indexJs.isKeyringPair)(account)) this.sign(account, eraOptions);
                else updateId = await this.__internal__signViaSigner(address, eraOptions, signingInfo.header);
                return {
                    options: eraOptions,
                    updateId
                };
            }));
        };
        __internal__observeStatus = (txHash, status)=>{
            if (!status.isFinalized && !status.isInBlock) return (0, _rxjs.of)(this.__internal__transformResult(new (0, _resultJs.SubmittableResult)({
                status,
                txHash
            })));
            const blockHash = status.isInBlock ? status.asInBlock : status.asFinalized;
            return api.derive.tx.events(blockHash).pipe((0, _rxjs.map)(({ block, events })=>this.__internal__transformResult(new (0, _resultJs.SubmittableResult)({
                    ...(0, _indexJs.filterEvents)(txHash, block, events, status),
                    status,
                    txHash
                }))), (0, _rxjs.catchError)((internalError)=>(0, _rxjs.of)(this.__internal__transformResult(new (0, _resultJs.SubmittableResult)({
                    internalError,
                    status,
                    txHash
                })))));
        };
        __internal__observeSend = (info)=>{
            return api.rpc.author.submitExtrinsic(this).pipe((0, _rxjs.tap)((hash)=>{
                this.__internal__updateSigner(hash, info);
            }));
        };
        __internal__observeSubscribe = (info)=>{
            const txHash = this.hash;
            return api.rpc.author.submitAndWatchExtrinsic(this).pipe((0, _rxjs.switchMap)((status)=>this.__internal__observeStatus(txHash, status)), (0, _rxjs.tap)((status)=>{
                this.__internal__updateSigner(status, info);
            }));
        };
        __internal__signViaSigner = async (address, options, header)=>{
            const signer = options.signer || api.signer;
            if (!signer) throw new Error("No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
            const payload = this.registry.createTypeUnsafe("SignerPayload", [
                (0, _util.objectSpread)({}, options, {
                    address,
                    blockNumber: header ? header.number : 0,
                    method: this.method
                })
            ]);
            let result;
            if ((0, _util.isFunction)(signer.signPayload)) result = await signer.signPayload(payload.toPayload());
            else if ((0, _util.isFunction)(signer.signRaw)) result = await signer.signRaw(payload.toRaw());
            else throw new Error("Invalid signer interface, it should implement either signPayload or signRaw (or both)");
            // Here we explicitly call `toPayload()` again instead of working with an object
            // (reference) as passed to the signer. This means that we are sure that the
            // payload data is not modified from our inputs, but the signer
            super.addSignature(address, result.signature, payload.toPayload());
            return result.id;
        };
        __internal__updateSigner = (status, info)=>{
            if (info && info.updateId !== -1) {
                const { options, updateId } = info;
                const signer = options.signer || api.signer;
                if (signer && (0, _util.isFunction)(signer.update)) signer.update(updateId, status);
            }
        };
    }
    return Submittable;
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"gnxBn","./Result.js":"aFTVd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lLy7s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Observable", ()=>(0, _observable.Observable));
parcelHelpers.export(exports, "ConnectableObservable", ()=>(0, _connectableObservable.ConnectableObservable));
parcelHelpers.export(exports, "observable", ()=>(0, _observable1.observable));
parcelHelpers.export(exports, "animationFrames", ()=>(0, _animationFrames.animationFrames));
parcelHelpers.export(exports, "Subject", ()=>(0, _subject.Subject));
parcelHelpers.export(exports, "BehaviorSubject", ()=>(0, _behaviorSubject.BehaviorSubject));
parcelHelpers.export(exports, "ReplaySubject", ()=>(0, _replaySubject.ReplaySubject));
parcelHelpers.export(exports, "AsyncSubject", ()=>(0, _asyncSubject.AsyncSubject));
parcelHelpers.export(exports, "asap", ()=>(0, _asap.asap));
parcelHelpers.export(exports, "asapScheduler", ()=>(0, _asap.asapScheduler));
parcelHelpers.export(exports, "async", ()=>(0, _async.async));
parcelHelpers.export(exports, "asyncScheduler", ()=>(0, _async.asyncScheduler));
parcelHelpers.export(exports, "queue", ()=>(0, _queue.queue));
parcelHelpers.export(exports, "queueScheduler", ()=>(0, _queue.queueScheduler));
parcelHelpers.export(exports, "animationFrame", ()=>(0, _animationFrame.animationFrame));
parcelHelpers.export(exports, "animationFrameScheduler", ()=>(0, _animationFrame.animationFrameScheduler));
parcelHelpers.export(exports, "VirtualTimeScheduler", ()=>(0, _virtualTimeScheduler.VirtualTimeScheduler));
parcelHelpers.export(exports, "VirtualAction", ()=>(0, _virtualTimeScheduler.VirtualAction));
parcelHelpers.export(exports, "Scheduler", ()=>(0, _scheduler.Scheduler));
parcelHelpers.export(exports, "Subscription", ()=>(0, _subscription.Subscription));
parcelHelpers.export(exports, "Subscriber", ()=>(0, _subscriber.Subscriber));
parcelHelpers.export(exports, "Notification", ()=>(0, _notification.Notification));
parcelHelpers.export(exports, "NotificationKind", ()=>(0, _notification.NotificationKind));
parcelHelpers.export(exports, "pipe", ()=>(0, _pipe.pipe));
parcelHelpers.export(exports, "noop", ()=>(0, _noop.noop));
parcelHelpers.export(exports, "identity", ()=>(0, _identity.identity));
parcelHelpers.export(exports, "isObservable", ()=>(0, _isObservable.isObservable));
parcelHelpers.export(exports, "lastValueFrom", ()=>(0, _lastValueFrom.lastValueFrom));
parcelHelpers.export(exports, "firstValueFrom", ()=>(0, _firstValueFrom.firstValueFrom));
parcelHelpers.export(exports, "ArgumentOutOfRangeError", ()=>(0, _argumentOutOfRangeError.ArgumentOutOfRangeError));
parcelHelpers.export(exports, "EmptyError", ()=>(0, _emptyError.EmptyError));
parcelHelpers.export(exports, "NotFoundError", ()=>(0, _notFoundError.NotFoundError));
parcelHelpers.export(exports, "ObjectUnsubscribedError", ()=>(0, _objectUnsubscribedError.ObjectUnsubscribedError));
parcelHelpers.export(exports, "SequenceError", ()=>(0, _sequenceError.SequenceError));
parcelHelpers.export(exports, "TimeoutError", ()=>(0, _timeout.TimeoutError));
parcelHelpers.export(exports, "UnsubscriptionError", ()=>(0, _unsubscriptionError.UnsubscriptionError));
parcelHelpers.export(exports, "bindCallback", ()=>(0, _bindCallback.bindCallback));
parcelHelpers.export(exports, "bindNodeCallback", ()=>(0, _bindNodeCallback.bindNodeCallback));
parcelHelpers.export(exports, "combineLatest", ()=>(0, _combineLatest.combineLatest));
parcelHelpers.export(exports, "concat", ()=>(0, _concat.concat));
parcelHelpers.export(exports, "connectable", ()=>(0, _connectable.connectable));
parcelHelpers.export(exports, "defer", ()=>(0, _defer.defer));
parcelHelpers.export(exports, "empty", ()=>(0, _empty.empty));
parcelHelpers.export(exports, "forkJoin", ()=>(0, _forkJoin.forkJoin));
parcelHelpers.export(exports, "from", ()=>(0, _from.from));
parcelHelpers.export(exports, "fromEvent", ()=>(0, _fromEvent.fromEvent));
parcelHelpers.export(exports, "fromEventPattern", ()=>(0, _fromEventPattern.fromEventPattern));
parcelHelpers.export(exports, "generate", ()=>(0, _generate.generate));
parcelHelpers.export(exports, "iif", ()=>(0, _iif.iif));
parcelHelpers.export(exports, "interval", ()=>(0, _interval.interval));
parcelHelpers.export(exports, "merge", ()=>(0, _merge.merge));
parcelHelpers.export(exports, "never", ()=>(0, _never.never));
parcelHelpers.export(exports, "of", ()=>(0, _of.of));
parcelHelpers.export(exports, "onErrorResumeNext", ()=>(0, _onErrorResumeNext.onErrorResumeNext));
parcelHelpers.export(exports, "pairs", ()=>(0, _pairs.pairs));
parcelHelpers.export(exports, "partition", ()=>(0, _partition.partition));
parcelHelpers.export(exports, "race", ()=>(0, _race.race));
parcelHelpers.export(exports, "range", ()=>(0, _range.range));
parcelHelpers.export(exports, "throwError", ()=>(0, _throwError.throwError));
parcelHelpers.export(exports, "timer", ()=>(0, _timer.timer));
parcelHelpers.export(exports, "using", ()=>(0, _using.using));
parcelHelpers.export(exports, "zip", ()=>(0, _zip.zip));
parcelHelpers.export(exports, "scheduled", ()=>(0, _scheduled.scheduled));
parcelHelpers.export(exports, "EMPTY", ()=>(0, _empty.EMPTY));
parcelHelpers.export(exports, "NEVER", ()=>(0, _never.NEVER));
parcelHelpers.export(exports, "config", ()=>(0, _config.config));
parcelHelpers.export(exports, "audit", ()=>(0, _audit.audit));
parcelHelpers.export(exports, "auditTime", ()=>(0, _auditTime.auditTime));
parcelHelpers.export(exports, "buffer", ()=>(0, _buffer.buffer));
parcelHelpers.export(exports, "bufferCount", ()=>(0, _bufferCount.bufferCount));
parcelHelpers.export(exports, "bufferTime", ()=>(0, _bufferTime.bufferTime));
parcelHelpers.export(exports, "bufferToggle", ()=>(0, _bufferToggle.bufferToggle));
parcelHelpers.export(exports, "bufferWhen", ()=>(0, _bufferWhen.bufferWhen));
parcelHelpers.export(exports, "catchError", ()=>(0, _catchError.catchError));
parcelHelpers.export(exports, "combineAll", ()=>(0, _combineAll.combineAll));
parcelHelpers.export(exports, "combineLatestAll", ()=>(0, _combineLatestAll.combineLatestAll));
parcelHelpers.export(exports, "combineLatestWith", ()=>(0, _combineLatestWith.combineLatestWith));
parcelHelpers.export(exports, "concatAll", ()=>(0, _concatAll.concatAll));
parcelHelpers.export(exports, "concatMap", ()=>(0, _concatMap.concatMap));
parcelHelpers.export(exports, "concatMapTo", ()=>(0, _concatMapTo.concatMapTo));
parcelHelpers.export(exports, "concatWith", ()=>(0, _concatWith.concatWith));
parcelHelpers.export(exports, "connect", ()=>(0, _connect.connect));
parcelHelpers.export(exports, "count", ()=>(0, _count.count));
parcelHelpers.export(exports, "debounce", ()=>(0, _debounce.debounce));
parcelHelpers.export(exports, "debounceTime", ()=>(0, _debounceTime.debounceTime));
parcelHelpers.export(exports, "defaultIfEmpty", ()=>(0, _defaultIfEmpty.defaultIfEmpty));
parcelHelpers.export(exports, "delay", ()=>(0, _delay.delay));
parcelHelpers.export(exports, "delayWhen", ()=>(0, _delayWhen.delayWhen));
parcelHelpers.export(exports, "dematerialize", ()=>(0, _dematerialize.dematerialize));
parcelHelpers.export(exports, "distinct", ()=>(0, _distinct.distinct));
parcelHelpers.export(exports, "distinctUntilChanged", ()=>(0, _distinctUntilChanged.distinctUntilChanged));
parcelHelpers.export(exports, "distinctUntilKeyChanged", ()=>(0, _distinctUntilKeyChanged.distinctUntilKeyChanged));
parcelHelpers.export(exports, "elementAt", ()=>(0, _elementAt.elementAt));
parcelHelpers.export(exports, "endWith", ()=>(0, _endWith.endWith));
parcelHelpers.export(exports, "every", ()=>(0, _every.every));
parcelHelpers.export(exports, "exhaust", ()=>(0, _exhaust.exhaust));
parcelHelpers.export(exports, "exhaustAll", ()=>(0, _exhaustAll.exhaustAll));
parcelHelpers.export(exports, "exhaustMap", ()=>(0, _exhaustMap.exhaustMap));
parcelHelpers.export(exports, "expand", ()=>(0, _expand.expand));
parcelHelpers.export(exports, "filter", ()=>(0, _filter.filter));
parcelHelpers.export(exports, "finalize", ()=>(0, _finalize.finalize));
parcelHelpers.export(exports, "find", ()=>(0, _find.find));
parcelHelpers.export(exports, "findIndex", ()=>(0, _findIndex.findIndex));
parcelHelpers.export(exports, "first", ()=>(0, _first.first));
parcelHelpers.export(exports, "groupBy", ()=>(0, _groupBy.groupBy));
parcelHelpers.export(exports, "ignoreElements", ()=>(0, _ignoreElements.ignoreElements));
parcelHelpers.export(exports, "isEmpty", ()=>(0, _isEmpty.isEmpty));
parcelHelpers.export(exports, "last", ()=>(0, _last.last));
parcelHelpers.export(exports, "map", ()=>(0, _map.map));
parcelHelpers.export(exports, "mapTo", ()=>(0, _mapTo.mapTo));
parcelHelpers.export(exports, "materialize", ()=>(0, _materialize.materialize));
parcelHelpers.export(exports, "max", ()=>(0, _max.max));
parcelHelpers.export(exports, "mergeAll", ()=>(0, _mergeAll.mergeAll));
parcelHelpers.export(exports, "flatMap", ()=>(0, _flatMap.flatMap));
parcelHelpers.export(exports, "mergeMap", ()=>(0, _mergeMap.mergeMap));
parcelHelpers.export(exports, "mergeMapTo", ()=>(0, _mergeMapTo.mergeMapTo));
parcelHelpers.export(exports, "mergeScan", ()=>(0, _mergeScan.mergeScan));
parcelHelpers.export(exports, "mergeWith", ()=>(0, _mergeWith.mergeWith));
parcelHelpers.export(exports, "min", ()=>(0, _min.min));
parcelHelpers.export(exports, "multicast", ()=>(0, _multicast.multicast));
parcelHelpers.export(exports, "observeOn", ()=>(0, _observeOn.observeOn));
parcelHelpers.export(exports, "onErrorResumeNextWith", ()=>(0, _onErrorResumeNextWith.onErrorResumeNextWith));
parcelHelpers.export(exports, "pairwise", ()=>(0, _pairwise.pairwise));
parcelHelpers.export(exports, "pluck", ()=>(0, _pluck.pluck));
parcelHelpers.export(exports, "publish", ()=>(0, _publish.publish));
parcelHelpers.export(exports, "publishBehavior", ()=>(0, _publishBehavior.publishBehavior));
parcelHelpers.export(exports, "publishLast", ()=>(0, _publishLast.publishLast));
parcelHelpers.export(exports, "publishReplay", ()=>(0, _publishReplay.publishReplay));
parcelHelpers.export(exports, "raceWith", ()=>(0, _raceWith.raceWith));
parcelHelpers.export(exports, "reduce", ()=>(0, _reduce.reduce));
parcelHelpers.export(exports, "repeat", ()=>(0, _repeat.repeat));
parcelHelpers.export(exports, "repeatWhen", ()=>(0, _repeatWhen.repeatWhen));
parcelHelpers.export(exports, "retry", ()=>(0, _retry.retry));
parcelHelpers.export(exports, "retryWhen", ()=>(0, _retryWhen.retryWhen));
parcelHelpers.export(exports, "refCount", ()=>(0, _refCount.refCount));
parcelHelpers.export(exports, "sample", ()=>(0, _sample.sample));
parcelHelpers.export(exports, "sampleTime", ()=>(0, _sampleTime.sampleTime));
parcelHelpers.export(exports, "scan", ()=>(0, _scan.scan));
parcelHelpers.export(exports, "sequenceEqual", ()=>(0, _sequenceEqual.sequenceEqual));
parcelHelpers.export(exports, "share", ()=>(0, _share.share));
parcelHelpers.export(exports, "shareReplay", ()=>(0, _shareReplay.shareReplay));
parcelHelpers.export(exports, "single", ()=>(0, _single.single));
parcelHelpers.export(exports, "skip", ()=>(0, _skip.skip));
parcelHelpers.export(exports, "skipLast", ()=>(0, _skipLast.skipLast));
parcelHelpers.export(exports, "skipUntil", ()=>(0, _skipUntil.skipUntil));
parcelHelpers.export(exports, "skipWhile", ()=>(0, _skipWhile.skipWhile));
parcelHelpers.export(exports, "startWith", ()=>(0, _startWith.startWith));
parcelHelpers.export(exports, "subscribeOn", ()=>(0, _subscribeOn.subscribeOn));
parcelHelpers.export(exports, "switchAll", ()=>(0, _switchAll.switchAll));
parcelHelpers.export(exports, "switchMap", ()=>(0, _switchMap.switchMap));
parcelHelpers.export(exports, "switchMapTo", ()=>(0, _switchMapTo.switchMapTo));
parcelHelpers.export(exports, "switchScan", ()=>(0, _switchScan.switchScan));
parcelHelpers.export(exports, "take", ()=>(0, _take.take));
parcelHelpers.export(exports, "takeLast", ()=>(0, _takeLast.takeLast));
parcelHelpers.export(exports, "takeUntil", ()=>(0, _takeUntil.takeUntil));
parcelHelpers.export(exports, "takeWhile", ()=>(0, _takeWhile.takeWhile));
parcelHelpers.export(exports, "tap", ()=>(0, _tap.tap));
parcelHelpers.export(exports, "throttle", ()=>(0, _throttle.throttle));
parcelHelpers.export(exports, "throttleTime", ()=>(0, _throttleTime.throttleTime));
parcelHelpers.export(exports, "throwIfEmpty", ()=>(0, _throwIfEmpty.throwIfEmpty));
parcelHelpers.export(exports, "timeInterval", ()=>(0, _timeInterval.timeInterval));
parcelHelpers.export(exports, "timeout", ()=>(0, _timeout.timeout));
parcelHelpers.export(exports, "timeoutWith", ()=>(0, _timeoutWith.timeoutWith));
parcelHelpers.export(exports, "timestamp", ()=>(0, _timestamp.timestamp));
parcelHelpers.export(exports, "toArray", ()=>(0, _toArray.toArray));
parcelHelpers.export(exports, "window", ()=>(0, _window.window));
parcelHelpers.export(exports, "windowCount", ()=>(0, _windowCount.windowCount));
parcelHelpers.export(exports, "windowTime", ()=>(0, _windowTime.windowTime));
parcelHelpers.export(exports, "windowToggle", ()=>(0, _windowToggle.windowToggle));
parcelHelpers.export(exports, "windowWhen", ()=>(0, _windowWhen.windowWhen));
parcelHelpers.export(exports, "withLatestFrom", ()=>(0, _withLatestFrom.withLatestFrom));
parcelHelpers.export(exports, "zipAll", ()=>(0, _zipAll.zipAll));
parcelHelpers.export(exports, "zipWith", ()=>(0, _zipWith.zipWith));
var _observable = require("./internal/Observable");
var _connectableObservable = require("./internal/observable/ConnectableObservable");
var _observable1 = require("./internal/symbol/observable");
var _animationFrames = require("./internal/observable/dom/animationFrames");
var _subject = require("./internal/Subject");
var _behaviorSubject = require("./internal/BehaviorSubject");
var _replaySubject = require("./internal/ReplaySubject");
var _asyncSubject = require("./internal/AsyncSubject");
var _asap = require("./internal/scheduler/asap");
var _async = require("./internal/scheduler/async");
var _queue = require("./internal/scheduler/queue");
var _animationFrame = require("./internal/scheduler/animationFrame");
var _virtualTimeScheduler = require("./internal/scheduler/VirtualTimeScheduler");
var _scheduler = require("./internal/Scheduler");
var _subscription = require("./internal/Subscription");
var _subscriber = require("./internal/Subscriber");
var _notification = require("./internal/Notification");
var _pipe = require("./internal/util/pipe");
var _noop = require("./internal/util/noop");
var _identity = require("./internal/util/identity");
var _isObservable = require("./internal/util/isObservable");
var _lastValueFrom = require("./internal/lastValueFrom");
var _firstValueFrom = require("./internal/firstValueFrom");
var _argumentOutOfRangeError = require("./internal/util/ArgumentOutOfRangeError");
var _emptyError = require("./internal/util/EmptyError");
var _notFoundError = require("./internal/util/NotFoundError");
var _objectUnsubscribedError = require("./internal/util/ObjectUnsubscribedError");
var _sequenceError = require("./internal/util/SequenceError");
var _timeout = require("./internal/operators/timeout");
var _unsubscriptionError = require("./internal/util/UnsubscriptionError");
var _bindCallback = require("./internal/observable/bindCallback");
var _bindNodeCallback = require("./internal/observable/bindNodeCallback");
var _combineLatest = require("./internal/observable/combineLatest");
var _concat = require("./internal/observable/concat");
var _connectable = require("./internal/observable/connectable");
var _defer = require("./internal/observable/defer");
var _empty = require("./internal/observable/empty");
var _forkJoin = require("./internal/observable/forkJoin");
var _from = require("./internal/observable/from");
var _fromEvent = require("./internal/observable/fromEvent");
var _fromEventPattern = require("./internal/observable/fromEventPattern");
var _generate = require("./internal/observable/generate");
var _iif = require("./internal/observable/iif");
var _interval = require("./internal/observable/interval");
var _merge = require("./internal/observable/merge");
var _never = require("./internal/observable/never");
var _of = require("./internal/observable/of");
var _onErrorResumeNext = require("./internal/observable/onErrorResumeNext");
var _pairs = require("./internal/observable/pairs");
var _partition = require("./internal/observable/partition");
var _race = require("./internal/observable/race");
var _range = require("./internal/observable/range");
var _throwError = require("./internal/observable/throwError");
var _timer = require("./internal/observable/timer");
var _using = require("./internal/observable/using");
var _zip = require("./internal/observable/zip");
var _scheduled = require("./internal/scheduled/scheduled");
var _types = require("./internal/types");
parcelHelpers.exportAll(_types, exports);
var _config = require("./internal/config");
var _audit = require("./internal/operators/audit");
var _auditTime = require("./internal/operators/auditTime");
var _buffer = require("./internal/operators/buffer");
var _bufferCount = require("./internal/operators/bufferCount");
var _bufferTime = require("./internal/operators/bufferTime");
var _bufferToggle = require("./internal/operators/bufferToggle");
var _bufferWhen = require("./internal/operators/bufferWhen");
var _catchError = require("./internal/operators/catchError");
var _combineAll = require("./internal/operators/combineAll");
var _combineLatestAll = require("./internal/operators/combineLatestAll");
var _combineLatestWith = require("./internal/operators/combineLatestWith");
var _concatAll = require("./internal/operators/concatAll");
var _concatMap = require("./internal/operators/concatMap");
var _concatMapTo = require("./internal/operators/concatMapTo");
var _concatWith = require("./internal/operators/concatWith");
var _connect = require("./internal/operators/connect");
var _count = require("./internal/operators/count");
var _debounce = require("./internal/operators/debounce");
var _debounceTime = require("./internal/operators/debounceTime");
var _defaultIfEmpty = require("./internal/operators/defaultIfEmpty");
var _delay = require("./internal/operators/delay");
var _delayWhen = require("./internal/operators/delayWhen");
var _dematerialize = require("./internal/operators/dematerialize");
var _distinct = require("./internal/operators/distinct");
var _distinctUntilChanged = require("./internal/operators/distinctUntilChanged");
var _distinctUntilKeyChanged = require("./internal/operators/distinctUntilKeyChanged");
var _elementAt = require("./internal/operators/elementAt");
var _endWith = require("./internal/operators/endWith");
var _every = require("./internal/operators/every");
var _exhaust = require("./internal/operators/exhaust");
var _exhaustAll = require("./internal/operators/exhaustAll");
var _exhaustMap = require("./internal/operators/exhaustMap");
var _expand = require("./internal/operators/expand");
var _filter = require("./internal/operators/filter");
var _finalize = require("./internal/operators/finalize");
var _find = require("./internal/operators/find");
var _findIndex = require("./internal/operators/findIndex");
var _first = require("./internal/operators/first");
var _groupBy = require("./internal/operators/groupBy");
var _ignoreElements = require("./internal/operators/ignoreElements");
var _isEmpty = require("./internal/operators/isEmpty");
var _last = require("./internal/operators/last");
var _map = require("./internal/operators/map");
var _mapTo = require("./internal/operators/mapTo");
var _materialize = require("./internal/operators/materialize");
var _max = require("./internal/operators/max");
var _mergeAll = require("./internal/operators/mergeAll");
var _flatMap = require("./internal/operators/flatMap");
var _mergeMap = require("./internal/operators/mergeMap");
var _mergeMapTo = require("./internal/operators/mergeMapTo");
var _mergeScan = require("./internal/operators/mergeScan");
var _mergeWith = require("./internal/operators/mergeWith");
var _min = require("./internal/operators/min");
var _multicast = require("./internal/operators/multicast");
var _observeOn = require("./internal/operators/observeOn");
var _onErrorResumeNextWith = require("./internal/operators/onErrorResumeNextWith");
var _pairwise = require("./internal/operators/pairwise");
var _pluck = require("./internal/operators/pluck");
var _publish = require("./internal/operators/publish");
var _publishBehavior = require("./internal/operators/publishBehavior");
var _publishLast = require("./internal/operators/publishLast");
var _publishReplay = require("./internal/operators/publishReplay");
var _raceWith = require("./internal/operators/raceWith");
var _reduce = require("./internal/operators/reduce");
var _repeat = require("./internal/operators/repeat");
var _repeatWhen = require("./internal/operators/repeatWhen");
var _retry = require("./internal/operators/retry");
var _retryWhen = require("./internal/operators/retryWhen");
var _refCount = require("./internal/operators/refCount");
var _sample = require("./internal/operators/sample");
var _sampleTime = require("./internal/operators/sampleTime");
var _scan = require("./internal/operators/scan");
var _sequenceEqual = require("./internal/operators/sequenceEqual");
var _share = require("./internal/operators/share");
var _shareReplay = require("./internal/operators/shareReplay");
var _single = require("./internal/operators/single");
var _skip = require("./internal/operators/skip");
var _skipLast = require("./internal/operators/skipLast");
var _skipUntil = require("./internal/operators/skipUntil");
var _skipWhile = require("./internal/operators/skipWhile");
var _startWith = require("./internal/operators/startWith");
var _subscribeOn = require("./internal/operators/subscribeOn");
var _switchAll = require("./internal/operators/switchAll");
var _switchMap = require("./internal/operators/switchMap");
var _switchMapTo = require("./internal/operators/switchMapTo");
var _switchScan = require("./internal/operators/switchScan");
var _take = require("./internal/operators/take");
var _takeLast = require("./internal/operators/takeLast");
var _takeUntil = require("./internal/operators/takeUntil");
var _takeWhile = require("./internal/operators/takeWhile");
var _tap = require("./internal/operators/tap");
var _throttle = require("./internal/operators/throttle");
var _throttleTime = require("./internal/operators/throttleTime");
var _throwIfEmpty = require("./internal/operators/throwIfEmpty");
var _timeInterval = require("./internal/operators/timeInterval");
var _timeoutWith = require("./internal/operators/timeoutWith");
var _timestamp = require("./internal/operators/timestamp");
var _toArray = require("./internal/operators/toArray");
var _window = require("./internal/operators/window");
var _windowCount = require("./internal/operators/windowCount");
var _windowTime = require("./internal/operators/windowTime");
var _windowToggle = require("./internal/operators/windowToggle");
var _windowWhen = require("./internal/operators/windowWhen");
var _withLatestFrom = require("./internal/operators/withLatestFrom");
var _zipAll = require("./internal/operators/zipAll");
var _zipWith = require("./internal/operators/zipWith");

},{"./internal/Observable":"4Jvxr","./internal/observable/ConnectableObservable":false,"./internal/symbol/observable":false,"./internal/observable/dom/animationFrames":false,"./internal/Subject":false,"./internal/BehaviorSubject":"4s6yS","./internal/ReplaySubject":false,"./internal/AsyncSubject":false,"./internal/scheduler/asap":"ercvV","./internal/scheduler/async":false,"./internal/scheduler/queue":false,"./internal/scheduler/animationFrame":false,"./internal/scheduler/VirtualTimeScheduler":false,"./internal/Scheduler":false,"./internal/Subscription":"lFyhg","./internal/Subscriber":false,"./internal/Notification":false,"./internal/util/pipe":false,"./internal/util/noop":false,"./internal/util/identity":false,"./internal/util/isObservable":false,"./internal/lastValueFrom":false,"./internal/firstValueFrom":"6sMsY","./internal/util/ArgumentOutOfRangeError":false,"./internal/util/EmptyError":false,"./internal/util/NotFoundError":false,"./internal/util/ObjectUnsubscribedError":false,"./internal/util/SequenceError":false,"./internal/operators/timeout":false,"./internal/util/UnsubscriptionError":false,"./internal/observable/bindCallback":false,"./internal/observable/bindNodeCallback":false,"./internal/observable/combineLatest":"klIwv","./internal/observable/concat":false,"./internal/observable/connectable":false,"./internal/observable/defer":false,"./internal/observable/empty":"dGHVG","./internal/observable/forkJoin":false,"./internal/observable/from":"dBWag","./internal/observable/fromEvent":false,"./internal/observable/fromEventPattern":false,"./internal/observable/generate":false,"./internal/observable/iif":false,"./internal/observable/interval":false,"./internal/observable/merge":false,"./internal/observable/never":false,"./internal/observable/of":"lnQPU","./internal/observable/onErrorResumeNext":false,"./internal/observable/pairs":false,"./internal/observable/partition":false,"./internal/observable/race":false,"./internal/observable/range":false,"./internal/observable/throwError":false,"./internal/observable/timer":false,"./internal/observable/using":false,"./internal/observable/zip":false,"./internal/scheduled/scheduled":false,"./internal/types":false,"./internal/config":false,"./internal/operators/audit":false,"./internal/operators/auditTime":false,"./internal/operators/buffer":false,"./internal/operators/bufferCount":false,"./internal/operators/bufferTime":false,"./internal/operators/bufferToggle":false,"./internal/operators/bufferWhen":false,"./internal/operators/catchError":"jKP5Q","./internal/operators/combineAll":false,"./internal/operators/combineLatestAll":false,"./internal/operators/combineLatestWith":false,"./internal/operators/concatAll":false,"./internal/operators/concatMap":false,"./internal/operators/concatMapTo":false,"./internal/operators/concatWith":false,"./internal/operators/connect":false,"./internal/operators/count":false,"./internal/operators/debounce":false,"./internal/operators/debounceTime":false,"./internal/operators/defaultIfEmpty":false,"./internal/operators/delay":false,"./internal/operators/delayWhen":false,"./internal/operators/dematerialize":false,"./internal/operators/distinct":false,"./internal/operators/distinctUntilChanged":"knFKV","./internal/operators/distinctUntilKeyChanged":false,"./internal/operators/elementAt":false,"./internal/operators/endWith":false,"./internal/operators/every":false,"./internal/operators/exhaust":false,"./internal/operators/exhaustAll":false,"./internal/operators/exhaustMap":false,"./internal/operators/expand":false,"./internal/operators/filter":false,"./internal/operators/finalize":false,"./internal/operators/find":false,"./internal/operators/findIndex":false,"./internal/operators/first":"1Jl7y","./internal/operators/groupBy":false,"./internal/operators/ignoreElements":false,"./internal/operators/isEmpty":false,"./internal/operators/last":false,"./internal/operators/map":"25iUP","./internal/operators/mapTo":false,"./internal/operators/materialize":false,"./internal/operators/max":false,"./internal/operators/mergeAll":false,"./internal/operators/flatMap":false,"./internal/operators/mergeMap":"1Kzmb","./internal/operators/mergeMapTo":false,"./internal/operators/mergeScan":false,"./internal/operators/mergeWith":false,"./internal/operators/min":false,"./internal/operators/multicast":false,"./internal/operators/observeOn":false,"./internal/operators/onErrorResumeNextWith":false,"./internal/operators/pairwise":false,"./internal/operators/pluck":false,"./internal/operators/publish":false,"./internal/operators/publishBehavior":false,"./internal/operators/publishLast":false,"./internal/operators/publishReplay":"6ioy7","./internal/operators/raceWith":false,"./internal/operators/reduce":false,"./internal/operators/repeat":false,"./internal/operators/repeatWhen":false,"./internal/operators/retry":false,"./internal/operators/retryWhen":false,"./internal/operators/refCount":"6LyQe","./internal/operators/sample":false,"./internal/operators/sampleTime":false,"./internal/operators/scan":false,"./internal/operators/sequenceEqual":false,"./internal/operators/share":false,"./internal/operators/shareReplay":false,"./internal/operators/single":false,"./internal/operators/skip":false,"./internal/operators/skipLast":false,"./internal/operators/skipUntil":false,"./internal/operators/skipWhile":false,"./internal/operators/startWith":"kMx2y","./internal/operators/subscribeOn":false,"./internal/operators/switchAll":false,"./internal/operators/switchMap":"jbzg2","./internal/operators/switchMapTo":false,"./internal/operators/switchScan":false,"./internal/operators/take":false,"./internal/operators/takeLast":false,"./internal/operators/takeUntil":false,"./internal/operators/takeWhile":false,"./internal/operators/tap":"dVdZH","./internal/operators/throttle":false,"./internal/operators/throttleTime":false,"./internal/operators/throwIfEmpty":false,"./internal/operators/timeInterval":false,"./internal/operators/timeoutWith":false,"./internal/operators/timestamp":false,"./internal/operators/toArray":"occyH","./internal/operators/window":false,"./internal/operators/windowCount":false,"./internal/operators/windowTime":false,"./internal/operators/windowToggle":false,"./internal/operators/windowWhen":false,"./internal/operators/withLatestFrom":false,"./internal/operators/zipAll":false,"./internal/operators/zipWith":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Jvxr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Observable", ()=>Observable);
var _subscriber = require("./Subscriber");
var _subscription = require("./Subscription");
var _observable = require("./symbol/observable");
var _pipe = require("./util/pipe");
var _config = require("./config");
var _isFunction = require("./util/isFunction");
var _errorContext = require("./util/errorContext");
var Observable = function() {
    function Observable(subscribe) {
        if (subscribe) this._subscribe = subscribe;
    }
    Observable.prototype.lift = function(operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function(observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new (0, _subscriber.SafeSubscriber)(observerOrNext, error, complete);
        (0, _errorContext.errorContext)(function() {
            var _a = _this, operator = _a.operator, source = _a.source;
            subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
        });
        return subscriber;
    };
    Observable.prototype._trySubscribe = function(sink) {
        try {
            return this._subscribe(sink);
        } catch (err) {
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function(next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
            var subscriber = new (0, _subscriber.SafeSubscriber)({
                next: function(value) {
                    try {
                        next(value);
                    } catch (err) {
                        reject(err);
                        subscriber.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve
            });
            _this.subscribe(subscriber);
        });
    };
    Observable.prototype._subscribe = function(subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable.prototype[0, _observable.observable] = function() {
        return this;
    };
    Observable.prototype.pipe = function() {
        var operations = [];
        for(var _i = 0; _i < arguments.length; _i++)operations[_i] = arguments[_i];
        return (0, _pipe.pipeFromArray)(operations)(this);
    };
    Observable.prototype.toPromise = function(promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
            var value;
            _this.subscribe(function(x) {
                return value = x;
            }, function(err) {
                return reject(err);
            }, function() {
                return resolve(value);
            });
        });
    };
    Observable.create = function(subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}();
function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : (0, _config.config).Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
    return value && (0, _isFunction.isFunction)(value.next) && (0, _isFunction.isFunction)(value.error) && (0, _isFunction.isFunction)(value.complete);
}
function isSubscriber(value) {
    return value && value instanceof (0, _subscriber.Subscriber) || isObserver(value) && (0, _subscription.isSubscription)(value);
}

},{"./Subscriber":"1VFFQ","./Subscription":"lFyhg","./symbol/observable":"byHtV","./util/pipe":"1GN6U","./config":"fX0gC","./util/isFunction":"dEyyK","./util/errorContext":"gU38l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1VFFQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Subscriber", ()=>Subscriber);
parcelHelpers.export(exports, "SafeSubscriber", ()=>SafeSubscriber);
parcelHelpers.export(exports, "EMPTY_OBSERVER", ()=>EMPTY_OBSERVER);
var _tslib = require("tslib");
var _isFunction = require("./util/isFunction");
var _subscription = require("./Subscription");
var _config = require("./config");
var _reportUnhandledError = require("./util/reportUnhandledError");
var _noop = require("./util/noop");
var _notificationFactories = require("./NotificationFactories");
var _timeoutProvider = require("./scheduler/timeoutProvider");
var _errorContext = require("./util/errorContext");
var Subscriber = function(_super) {
    (0, _tslib.__extends)(Subscriber, _super);
    function Subscriber(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
            _this.destination = destination;
            if ((0, _subscription.isSubscription)(destination)) destination.add(_this);
        } else _this.destination = EMPTY_OBSERVER;
        return _this;
    }
    Subscriber.create = function(next, error, complete) {
        return new SafeSubscriber(next, error, complete);
    };
    Subscriber.prototype.next = function(value) {
        if (this.isStopped) handleStoppedNotification((0, _notificationFactories.nextNotification)(value), this);
        else this._next(value);
    };
    Subscriber.prototype.error = function(err) {
        if (this.isStopped) handleStoppedNotification((0, _notificationFactories.errorNotification)(err), this);
        else {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function() {
        if (this.isStopped) handleStoppedNotification((0, _notificationFactories.COMPLETE_NOTIFICATION), this);
        else {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function() {
        if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
        }
    };
    Subscriber.prototype._next = function(value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function(err) {
        try {
            this.destination.error(err);
        } finally{
            this.unsubscribe();
        }
    };
    Subscriber.prototype._complete = function() {
        try {
            this.destination.complete();
        } finally{
            this.unsubscribe();
        }
    };
    return Subscriber;
}((0, _subscription.Subscription));
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
    function ConsumerObserver(partialObserver) {
        this.partialObserver = partialObserver;
    }
    ConsumerObserver.prototype.next = function(value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) try {
            partialObserver.next(value);
        } catch (error) {
            handleUnhandledError(error);
        }
    };
    ConsumerObserver.prototype.error = function(err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) try {
            partialObserver.error(err);
        } catch (error) {
            handleUnhandledError(error);
        }
        else handleUnhandledError(err);
    };
    ConsumerObserver.prototype.complete = function() {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) try {
            partialObserver.complete();
        } catch (error) {
            handleUnhandledError(error);
        }
    };
    return ConsumerObserver;
}();
var SafeSubscriber = function(_super) {
    (0, _tslib.__extends)(SafeSubscriber, _super);
    function SafeSubscriber(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if ((0, _isFunction.isFunction)(observerOrNext) || !observerOrNext) partialObserver = {
            next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,
            error: error !== null && error !== void 0 ? error : undefined,
            complete: complete !== null && complete !== void 0 ? complete : undefined
        };
        else {
            var context_1;
            if (_this && (0, _config.config).useDeprecatedNextContext) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function() {
                    return _this.unsubscribe();
                };
                partialObserver = {
                    next: observerOrNext.next && bind(observerOrNext.next, context_1),
                    error: observerOrNext.error && bind(observerOrNext.error, context_1),
                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
                };
            } else partialObserver = observerOrNext;
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
    }
    return SafeSubscriber;
}(Subscriber);
function handleUnhandledError(error) {
    if ((0, _config.config).useDeprecatedSynchronousErrorHandling) (0, _errorContext.captureError)(error);
    else (0, _reportUnhandledError.reportUnhandledError)(error);
}
function defaultErrorHandler(err) {
    throw err;
}
function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = (0, _config.config).onStoppedNotification;
    onStoppedNotification && (0, _timeoutProvider.timeoutProvider).setTimeout(function() {
        return onStoppedNotification(notification, subscriber);
    });
}
var EMPTY_OBSERVER = {
    closed: true,
    next: (0, _noop.noop),
    error: defaultErrorHandler,
    complete: (0, _noop.noop)
};

},{"tslib":"lRdW5","./util/isFunction":"dEyyK","./Subscription":"lFyhg","./config":"fX0gC","./util/reportUnhandledError":"aVM3K","./util/noop":"l8uEm","./NotificationFactories":"hwqFj","./scheduler/timeoutProvider":"1FR9J","./util/errorContext":"gU38l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__esDecorate", ()=>__esDecorate);
parcelHelpers.export(exports, "__runInitializers", ()=>__runInitializers);
parcelHelpers.export(exports, "__propKey", ()=>__propKey);
parcelHelpers.export(exports, "__setFunctionName", ()=>__setFunctionName);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
parcelHelpers.export(exports, "__classPrivateFieldIn", ()=>__classPrivateFieldIn);
parcelHelpers.export(exports, "__addDisposableResource", ()=>__addDisposableResource);
parcelHelpers.export(exports, "__disposeResources", ()=>__disposeResources);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) env.stack.push({
        async: true
    });
    return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function __disposeResources(env) {
    function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    function next() {
        while(env.stack.length){
            var rec = env.stack.pop();
            try {
                var result = rec.dispose && rec.dispose.call(rec.value);
                if (rec.async) return Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                });
            } catch (e) {
                fail(e);
            }
        }
        if (env.hasError) throw env.error;
    }
    return next();
}
exports.default = {
    __extends: __extends,
    __assign: __assign,
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __classPrivateFieldIn: __classPrivateFieldIn,
    __addDisposableResource: __addDisposableResource,
    __disposeResources: __disposeResources
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dEyyK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
function isFunction(value) {
    return typeof value === "function";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFyhg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Subscription", ()=>Subscription);
parcelHelpers.export(exports, "EMPTY_SUBSCRIPTION", ()=>EMPTY_SUBSCRIPTION);
parcelHelpers.export(exports, "isSubscription", ()=>isSubscription);
var _tslib = require("tslib");
var _isFunction = require("./util/isFunction");
var _unsubscriptionError = require("./util/UnsubscriptionError");
var _arrRemove = require("./util/arrRemove");
var Subscription = function() {
    function Subscription(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
    }
    Subscription.prototype.unsubscribe = function() {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) try {
                    for(var _parentage_1 = (0, _tslib.__values)(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()){
                        var parent_1 = _parentage_1_1.value;
                        parent_1.remove(this);
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally{
                    try {
                        if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                    } finally{
                        if (e_1) throw e_1.error;
                    }
                }
                else _parentage.remove(this);
            }
            var initialFinalizer = this.initialTeardown;
            if ((0, _isFunction.isFunction)(initialFinalizer)) try {
                initialFinalizer();
            } catch (e) {
                errors = e instanceof (0, _unsubscriptionError.UnsubscriptionError) ? e.errors : [
                    e
                ];
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
                this._finalizers = null;
                try {
                    for(var _finalizers_1 = (0, _tslib.__values)(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()){
                        var finalizer = _finalizers_1_1.value;
                        try {
                            execFinalizer(finalizer);
                        } catch (err) {
                            errors = errors !== null && errors !== void 0 ? errors : [];
                            if (err instanceof (0, _unsubscriptionError.UnsubscriptionError)) errors = (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], (0, _tslib.__read)(errors)), (0, _tslib.__read)(err.errors));
                            else errors.push(err);
                        }
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally{
                    try {
                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                    } finally{
                        if (e_2) throw e_2.error;
                    }
                }
            }
            if (errors) throw new (0, _unsubscriptionError.UnsubscriptionError)(errors);
        }
    };
    Subscription.prototype.add = function(teardown) {
        var _a;
        if (teardown && teardown !== this) {
            if (this.closed) execFinalizer(teardown);
            else {
                if (teardown instanceof Subscription) {
                    if (teardown.closed || teardown._hasParent(this)) return;
                    teardown._addParent(this);
                }
                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
            }
        }
    };
    Subscription.prototype._hasParent = function(parent) {
        var _parentage = this._parentage;
        return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
    };
    Subscription.prototype._addParent = function(parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [
            _parentage,
            parent
        ] : parent;
    };
    Subscription.prototype._removeParent = function(parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) this._parentage = null;
        else if (Array.isArray(_parentage)) (0, _arrRemove.arrRemove)(_parentage, parent);
    };
    Subscription.prototype.remove = function(teardown) {
        var _finalizers = this._finalizers;
        _finalizers && (0, _arrRemove.arrRemove)(_finalizers, teardown);
        if (teardown instanceof Subscription) teardown._removeParent(this);
    };
    Subscription.EMPTY = function() {
        var empty = new Subscription();
        empty.closed = true;
        return empty;
    }();
    return Subscription;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
    return value instanceof Subscription || value && "closed" in value && (0, _isFunction.isFunction)(value.remove) && (0, _isFunction.isFunction)(value.add) && (0, _isFunction.isFunction)(value.unsubscribe);
}
function execFinalizer(finalizer) {
    if ((0, _isFunction.isFunction)(finalizer)) finalizer();
    else finalizer.unsubscribe();
}

},{"tslib":"lRdW5","./util/isFunction":"dEyyK","./util/UnsubscriptionError":"GSF7Z","./util/arrRemove":"dLHeW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"GSF7Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnsubscriptionError", ()=>UnsubscriptionError);
var _createErrorClass = require("./createErrorClass");
var UnsubscriptionError = (0, _createErrorClass.createErrorClass)(function(_super) {
    return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
            return i + 1 + ") " + err.toString();
        }).join("\n  ") : "";
        this.name = "UnsubscriptionError";
        this.errors = errors;
    };
});

},{"./createErrorClass":"i1v8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i1v8Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createErrorClass", ()=>createErrorClass);
function createErrorClass(createImpl) {
    var _super = function(instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dLHeW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arrRemove", ()=>arrRemove);
function arrRemove(arr, item) {
    if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fX0gC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "config", ()=>config);
var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: undefined,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aVM3K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reportUnhandledError", ()=>reportUnhandledError);
var _config = require("../config");
var _timeoutProvider = require("../scheduler/timeoutProvider");
function reportUnhandledError(err) {
    (0, _timeoutProvider.timeoutProvider).setTimeout(function() {
        var onUnhandledError = (0, _config.config).onUnhandledError;
        if (onUnhandledError) onUnhandledError(err);
        else throw err;
    });
}

},{"../config":"fX0gC","../scheduler/timeoutProvider":"1FR9J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1FR9J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeoutProvider", ()=>timeoutProvider);
var _tslib = require("tslib");
var timeoutProvider = {
    setTimeout: function(handler, timeout) {
        var args = [];
        for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
        var delegate = timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) return delegate.setTimeout.apply(delegate, (0, _tslib.__spreadArray)([
            handler,
            timeout
        ], (0, _tslib.__read)(args)));
        return setTimeout.apply(void 0, (0, _tslib.__spreadArray)([
            handler,
            timeout
        ], (0, _tslib.__read)(args)));
    },
    clearTimeout: function(handle) {
        var delegate = timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: undefined
};

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l8uEm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "noop", ()=>noop);
function noop() {}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hwqFj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "COMPLETE_NOTIFICATION", ()=>COMPLETE_NOTIFICATION);
parcelHelpers.export(exports, "errorNotification", ()=>errorNotification);
parcelHelpers.export(exports, "nextNotification", ()=>nextNotification);
parcelHelpers.export(exports, "createNotification", ()=>createNotification);
var COMPLETE_NOTIFICATION = function() {
    return createNotification("C", undefined, undefined);
}();
function errorNotification(error) {
    return createNotification("E", undefined, error);
}
function nextNotification(value) {
    return createNotification("N", value, undefined);
}
function createNotification(kind, value, error) {
    return {
        kind: kind,
        value: value,
        error: error
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gU38l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "errorContext", ()=>errorContext);
parcelHelpers.export(exports, "captureError", ()=>captureError);
var _config = require("../config");
var context = null;
function errorContext(cb) {
    if ((0, _config.config).useDeprecatedSynchronousErrorHandling) {
        var isRoot = !context;
        if (isRoot) context = {
            errorThrown: false,
            error: null
        };
        cb();
        if (isRoot) {
            var _a = context, errorThrown = _a.errorThrown, error = _a.error;
            context = null;
            if (errorThrown) throw error;
        }
    } else cb();
}
function captureError(err) {
    if ((0, _config.config).useDeprecatedSynchronousErrorHandling && context) {
        context.errorThrown = true;
        context.error = err;
    }
}

},{"../config":"fX0gC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"byHtV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "observable", ()=>observable);
var observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GN6U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pipe", ()=>pipe);
parcelHelpers.export(exports, "pipeFromArray", ()=>pipeFromArray);
var _identity = require("./identity");
function pipe() {
    var fns = [];
    for(var _i = 0; _i < arguments.length; _i++)fns[_i] = arguments[_i];
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (fns.length === 0) return 0, _identity.identity;
    if (fns.length === 1) return fns[0];
    return function piped(input) {
        return fns.reduce(function(prev, fn) {
            return fn(prev);
        }, input);
    };
}

},{"./identity":"8Xfg6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Xfg6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity);
function identity(x) {
    return x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Vb8A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConnectableObservable", ()=>ConnectableObservable);
var _tslib = require("tslib");
var _observable = require("../Observable");
var _subscription = require("../Subscription");
var _refCount = require("../operators/refCount");
var _operatorSubscriber = require("../operators/OperatorSubscriber");
var _lift = require("../util/lift");
var ConnectableObservable = function(_super) {
    (0, _tslib.__extends)(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._subject = null;
        _this._refCount = 0;
        _this._connection = null;
        if ((0, _lift.hasLift)(source)) _this.lift = source.lift;
        return _this;
    }
    ConnectableObservable.prototype._subscribe = function(subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function() {
        var subject = this._subject;
        if (!subject || subject.isStopped) this._subject = this.subjectFactory();
        return this._subject;
    };
    ConnectableObservable.prototype._teardown = function() {
        this._refCount = 0;
        var _connection = this._connection;
        this._subject = this._connection = null;
        _connection === null || _connection === void 0 || _connection.unsubscribe();
    };
    ConnectableObservable.prototype.connect = function() {
        var _this = this;
        var connection = this._connection;
        if (!connection) {
            connection = this._connection = new (0, _subscription.Subscription)();
            var subject_1 = this.getSubject();
            connection.add(this.source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subject_1, undefined, function() {
                _this._teardown();
                subject_1.complete();
            }, function(err) {
                _this._teardown();
                subject_1.error(err);
            }, function() {
                return _this._teardown();
            })));
            if (connection.closed) {
                this._connection = null;
                connection = (0, _subscription.Subscription).EMPTY;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function() {
        return (0, _refCount.refCount)()(this);
    };
    return ConnectableObservable;
}((0, _observable.Observable));

},{"tslib":"lRdW5","../Observable":"4Jvxr","../Subscription":"lFyhg","../operators/refCount":"6LyQe","../operators/OperatorSubscriber":"96z9b","../util/lift":"7CiSs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6LyQe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "refCount", ()=>refCount);
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
function refCount() {
    return (0, _lift.operate)(function(source, subscriber) {
        var connection = null;
        source._refCount++;
        var refCounter = (0, _operatorSubscriber.createOperatorSubscriber)(subscriber, undefined, undefined, undefined, function() {
            if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                connection = null;
                return;
            }
            var sharedConnection = source._connection;
            var conn = connection;
            connection = null;
            if (sharedConnection && (!conn || sharedConnection === conn)) sharedConnection.unsubscribe();
            subscriber.unsubscribe();
        });
        source.subscribe(refCounter);
        if (!refCounter.closed) connection = source.connect();
    });
}

},{"../util/lift":"7CiSs","./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7CiSs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasLift", ()=>hasLift);
parcelHelpers.export(exports, "operate", ()=>operate);
var _isFunction = require("./isFunction");
function hasLift(source) {
    return (0, _isFunction.isFunction)(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
    return function(source) {
        if (hasLift(source)) return source.lift(function(liftedSource) {
            try {
                return init(liftedSource, this);
            } catch (err) {
                this.error(err);
            }
        });
        throw new TypeError("Unable to lift unknown Observable type");
    };
}

},{"./isFunction":"dEyyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"96z9b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createOperatorSubscriber", ()=>createOperatorSubscriber);
parcelHelpers.export(exports, "OperatorSubscriber", ()=>OperatorSubscriber);
var _tslib = require("tslib");
var _subscriber = require("../Subscriber");
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
    (0, _tslib.__extends)(OperatorSubscriber, _super);
    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext ? function(value) {
            try {
                onNext(value);
            } catch (err) {
                destination.error(err);
            }
        } : _super.prototype._next;
        _this._error = onError ? function(err) {
            try {
                onError(err);
            } catch (err) {
                destination.error(err);
            } finally{
                this.unsubscribe();
            }
        } : _super.prototype._error;
        _this._complete = onComplete ? function() {
            try {
                onComplete();
            } catch (err) {
                destination.error(err);
            } finally{
                this.unsubscribe();
            }
        } : _super.prototype._complete;
        return _this;
    }
    OperatorSubscriber.prototype.unsubscribe = function() {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 || _a.call(this));
        }
    };
    return OperatorSubscriber;
}((0, _subscriber.Subscriber));

},{"tslib":"lRdW5","../Subscriber":"1VFFQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"94RSe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Subject", ()=>Subject);
parcelHelpers.export(exports, "AnonymousSubject", ()=>AnonymousSubject);
var _tslib = require("tslib");
var _observable = require("./Observable");
var _subscription = require("./Subscription");
var _objectUnsubscribedError = require("./util/ObjectUnsubscribedError");
var _arrRemove = require("./util/arrRemove");
var _errorContext = require("./util/errorContext");
var Subject = function(_super) {
    (0, _tslib.__extends)(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype.lift = function(operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype._throwIfClosed = function() {
        if (this.closed) throw new (0, _objectUnsubscribedError.ObjectUnsubscribedError)();
    };
    Subject.prototype.next = function(value) {
        var _this = this;
        (0, _errorContext.errorContext)(function() {
            var e_1, _a;
            _this._throwIfClosed();
            if (!_this.isStopped) {
                if (!_this.currentObservers) _this.currentObservers = Array.from(_this.observers);
                try {
                    for(var _b = (0, _tslib.__values)(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()){
                        var observer = _c.value;
                        observer.next(value);
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally{
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally{
                        if (e_1) throw e_1.error;
                    }
                }
            }
        });
    };
    Subject.prototype.error = function(err) {
        var _this = this;
        (0, _errorContext.errorContext)(function() {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.hasError = _this.isStopped = true;
                _this.thrownError = err;
                var observers = _this.observers;
                while(observers.length)observers.shift().error(err);
            }
        });
    };
    Subject.prototype.complete = function() {
        var _this = this;
        (0, _errorContext.errorContext)(function() {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.isStopped = true;
                var observers = _this.observers;
                while(observers.length)observers.shift().complete();
            }
        });
    };
    Subject.prototype.unsubscribe = function() {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject.prototype, "observed", {
        get: function() {
            var _a;
            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
    });
    Subject.prototype._trySubscribe = function(subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject.prototype._subscribe = function(subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
    };
    Subject.prototype._innerSubscribe = function(subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) return 0, _subscription.EMPTY_SUBSCRIPTION;
        this.currentObservers = null;
        observers.push(subscriber);
        return new (0, _subscription.Subscription)(function() {
            _this.currentObservers = null;
            (0, _arrRemove.arrRemove)(observers, subscriber);
        });
    };
    Subject.prototype._checkFinalizedStatuses = function(subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) subscriber.error(thrownError);
        else if (isStopped) subscriber.complete();
    };
    Subject.prototype.asObservable = function() {
        var observable = new (0, _observable.Observable)();
        observable.source = this;
        return observable;
    };
    Subject.create = function(destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}((0, _observable.Observable));
var AnonymousSubject = function(_super) {
    (0, _tslib.__extends)(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function(value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 || _b.call(_a, value);
    };
    AnonymousSubject.prototype.error = function(err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 || _b.call(_a, err);
    };
    AnonymousSubject.prototype.complete = function() {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 || _b.call(_a);
    };
    AnonymousSubject.prototype._subscribe = function(subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : (0, _subscription.EMPTY_SUBSCRIPTION);
    };
    return AnonymousSubject;
}(Subject);

},{"tslib":"lRdW5","./Observable":"4Jvxr","./Subscription":"lFyhg","./util/ObjectUnsubscribedError":"6Gcwa","./util/arrRemove":"dLHeW","./util/errorContext":"gU38l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Gcwa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ObjectUnsubscribedError", ()=>ObjectUnsubscribedError);
var _createErrorClass = require("./createErrorClass");
var ObjectUnsubscribedError = (0, _createErrorClass.createErrorClass)(function(_super) {
    return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = "ObjectUnsubscribedError";
        this.message = "object unsubscribed";
    };
});

},{"./createErrorClass":"i1v8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4s6yS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BehaviorSubject", ()=>BehaviorSubject);
var _tslib = require("tslib");
var _subject = require("./Subject");
var BehaviorSubject = function(_super) {
    (0, _tslib.__extends)(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function() {
            return this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function(subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function() {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) throw thrownError;
        this._throwIfClosed();
        return _value;
    };
    BehaviorSubject.prototype.next = function(value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}((0, _subject.Subject));

},{"tslib":"lRdW5","./Subject":"94RSe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3RRP9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ReplaySubject", ()=>ReplaySubject);
var _tslib = require("tslib");
var _subject = require("./Subject");
var _dateTimestampProvider = require("./scheduler/dateTimestampProvider");
var ReplaySubject = function(_super) {
    (0, _tslib.__extends)(ReplaySubject, _super);
    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) _bufferSize = Infinity;
        if (_windowTime === void 0) _windowTime = Infinity;
        if (_timestampProvider === void 0) _timestampProvider = (0, _dateTimestampProvider.dateTimestampProvider);
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
    }
    ReplaySubject.prototype.next = function(value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
            _buffer.push(value);
            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function(subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for(var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2)subscriber.next(copy[i]);
        this._checkFinalizedStatuses(subscriber);
        return subscription;
    };
    ReplaySubject.prototype._trimBuffer = function() {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
            var now = _timestampProvider.now();
            var last = 0;
            for(var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2)last = i;
            last && _buffer.splice(0, last + 1);
        }
    };
    return ReplaySubject;
}((0, _subject.Subject));

},{"tslib":"lRdW5","./Subject":"94RSe","./scheduler/dateTimestampProvider":"9VL6k","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9VL6k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dateTimestampProvider", ()=>dateTimestampProvider);
var dateTimestampProvider = {
    now: function() {
        return (dateTimestampProvider.delegate || Date).now();
    },
    delegate: undefined
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ercvV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asapScheduler", ()=>asapScheduler);
parcelHelpers.export(exports, "asap", ()=>asap);
var _asapAction = require("./AsapAction");
var _asapScheduler = require("./AsapScheduler");
var asapScheduler = new (0, _asapScheduler.AsapScheduler)((0, _asapAction.AsapAction));
var asap = asapScheduler;

},{"./AsapAction":"b2ORt","./AsapScheduler":"bjk5t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b2ORt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AsapAction", ()=>AsapAction);
var _tslib = require("tslib");
var _asyncAction = require("./AsyncAction");
var _immediateProvider = require("./immediateProvider");
var AsapAction = function(_super) {
    (0, _tslib.__extends)(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) delay = 0;
        if (delay !== null && delay > 0) return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = (0, _immediateProvider.immediateProvider).setImmediate(scheduler.flush.bind(scheduler, undefined)));
    };
    AsapAction.prototype.recycleAsyncId = function(scheduler, id, delay) {
        var _a;
        if (delay === void 0) delay = 0;
        if (delay != null ? delay > 0 : this.delay > 0) return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        var actions = scheduler.actions;
        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
            (0, _immediateProvider.immediateProvider).clearImmediate(id);
            if (scheduler._scheduled === id) scheduler._scheduled = undefined;
        }
        return undefined;
    };
    return AsapAction;
}((0, _asyncAction.AsyncAction));

},{"tslib":"lRdW5","./AsyncAction":"26t3B","./immediateProvider":"b9A4P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"26t3B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AsyncAction", ()=>AsyncAction);
var _tslib = require("tslib");
var _action = require("./Action");
var _intervalProvider = require("./intervalProvider");
var _arrRemove = require("../util/arrRemove");
var AsyncAction = function(_super) {
    (0, _tslib.__extends)(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function(state, delay) {
        var _a;
        if (delay === void 0) delay = 0;
        if (this.closed) return this;
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) this.id = this.recycleAsyncId(scheduler, id, delay);
        this.pending = true;
        this.delay = delay;
        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function(scheduler, _id, delay) {
        if (delay === void 0) delay = 0;
        return (0, _intervalProvider.intervalProvider).setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function(_scheduler, id, delay) {
        if (delay === void 0) delay = 0;
        if (delay != null && this.delay === delay && this.pending === false) return id;
        if (id != null) (0, _intervalProvider.intervalProvider).clearInterval(id);
        return undefined;
    };
    AsyncAction.prototype.execute = function(state, delay) {
        if (this.closed) return new Error("executing a cancelled action");
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) return error;
        else if (this.pending === false && this.id != null) this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    };
    AsyncAction.prototype._execute = function(state, _delay) {
        var errored = false;
        var errorValue;
        try {
            this.work(state);
        } catch (e) {
            errored = true;
            errorValue = e ? e : new Error("Scheduled action threw falsy error");
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype.unsubscribe = function() {
        if (!this.closed) {
            var _a = this, id = _a.id, scheduler = _a.scheduler;
            var actions = scheduler.actions;
            this.work = this.state = this.scheduler = null;
            this.pending = false;
            (0, _arrRemove.arrRemove)(actions, this);
            if (id != null) this.id = this.recycleAsyncId(scheduler, id, null);
            this.delay = null;
            _super.prototype.unsubscribe.call(this);
        }
    };
    return AsyncAction;
}((0, _action.Action));

},{"tslib":"lRdW5","./Action":"iPCnX","./intervalProvider":"1Kd8E","../util/arrRemove":"dLHeW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iPCnX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Action", ()=>Action);
var _tslib = require("tslib");
var _subscription = require("../Subscription");
var Action = function(_super) {
    (0, _tslib.__extends)(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function(state, delay) {
        if (delay === void 0) delay = 0;
        return this;
    };
    return Action;
}((0, _subscription.Subscription));

},{"tslib":"lRdW5","../Subscription":"lFyhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Kd8E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "intervalProvider", ()=>intervalProvider);
var _tslib = require("tslib");
var intervalProvider = {
    setInterval: function(handler, timeout) {
        var args = [];
        for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
        var delegate = intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) return delegate.setInterval.apply(delegate, (0, _tslib.__spreadArray)([
            handler,
            timeout
        ], (0, _tslib.__read)(args)));
        return setInterval.apply(void 0, (0, _tslib.__spreadArray)([
            handler,
            timeout
        ], (0, _tslib.__read)(args)));
    },
    clearInterval: function(handle) {
        var delegate = intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
    },
    delegate: undefined
};

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b9A4P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "immediateProvider", ()=>immediateProvider);
var _tslib = require("tslib");
var _immediate = require("../util/Immediate");
var setImmediate = (0, _immediate.Immediate).setImmediate, clearImmediate = (0, _immediate.Immediate).clearImmediate;
var immediateProvider = {
    setImmediate: function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args)));
    },
    clearImmediate: function(handle) {
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
    },
    delegate: undefined
};

},{"tslib":"lRdW5","../util/Immediate":"jFxbC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jFxbC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Immediate", ()=>Immediate);
parcelHelpers.export(exports, "TestTools", ()=>TestTools);
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
    if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
    }
    return false;
}
var Immediate = {
    setImmediate: function(cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) resolved = Promise.resolve();
        resolved.then(function() {
            return findAndClearHandle(handle) && cb();
        });
        return handle;
    },
    clearImmediate: function(handle) {
        findAndClearHandle(handle);
    }
};
var TestTools = {
    pending: function() {
        return Object.keys(activeHandles).length;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjk5t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AsapScheduler", ()=>AsapScheduler);
var _tslib = require("tslib");
var _asyncScheduler = require("./AsyncScheduler");
var AsapScheduler = function(_super) {
    (0, _tslib.__extends)(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function(action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = undefined;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) break;
        }while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
            while((action = actions[0]) && action.id === flushId && actions.shift())action.unsubscribe();
            throw error;
        }
    };
    return AsapScheduler;
}((0, _asyncScheduler.AsyncScheduler));

},{"tslib":"lRdW5","./AsyncScheduler":"c1rfP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c1rfP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AsyncScheduler", ()=>AsyncScheduler);
var _tslib = require("tslib");
var _scheduler = require("../Scheduler");
var AsyncScheduler = function(_super) {
    (0, _tslib.__extends)(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) now = (0, _scheduler.Scheduler).now;
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        return _this;
    }
    AsyncScheduler.prototype.flush = function(action) {
        var actions = this.actions;
        if (this._active) {
            actions.push(action);
            return;
        }
        var error;
        this._active = true;
        do {
            if (error = action.execute(action.state, action.delay)) break;
        }while (action = actions.shift());
        this._active = false;
        if (error) {
            while(action = actions.shift())action.unsubscribe();
            throw error;
        }
    };
    return AsyncScheduler;
}((0, _scheduler.Scheduler));

},{"tslib":"lRdW5","../Scheduler":"90yvc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"90yvc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Scheduler", ()=>Scheduler);
var _dateTimestampProvider = require("./scheduler/dateTimestampProvider");
var Scheduler = function() {
    function Scheduler(schedulerActionCtor, now) {
        if (now === void 0) now = Scheduler.now;
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
    }
    Scheduler.prototype.schedule = function(work, delay, state) {
        if (delay === void 0) delay = 0;
        return new this.schedulerActionCtor(this, work).schedule(state, delay);
    };
    Scheduler.now = (0, _dateTimestampProvider.dateTimestampProvider).now;
    return Scheduler;
}();

},{"./scheduler/dateTimestampProvider":"9VL6k","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6sMsY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "firstValueFrom", ()=>firstValueFrom);
var _emptyError = require("./util/EmptyError");
var _subscriber = require("./Subscriber");
function firstValueFrom(source, config) {
    var hasConfig = typeof config === "object";
    return new Promise(function(resolve, reject) {
        var subscriber = new (0, _subscriber.SafeSubscriber)({
            next: function(value) {
                resolve(value);
                subscriber.unsubscribe();
            },
            error: reject,
            complete: function() {
                if (hasConfig) resolve(config.defaultValue);
                else reject(new (0, _emptyError.EmptyError)());
            }
        });
        source.subscribe(subscriber);
    });
}

},{"./util/EmptyError":"6OnNQ","./Subscriber":"1VFFQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6OnNQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EmptyError", ()=>EmptyError);
var _createErrorClass = require("./createErrorClass");
var EmptyError = (0, _createErrorClass.createErrorClass)(function(_super) {
    return function EmptyErrorImpl() {
        _super(this);
        this.name = "EmptyError";
        this.message = "no elements in sequence";
    };
});

},{"./createErrorClass":"i1v8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"klIwv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "combineLatest", ()=>combineLatest);
parcelHelpers.export(exports, "combineLatestInit", ()=>combineLatestInit);
var _observable = require("../Observable");
var _argsArgArrayOrObject = require("../util/argsArgArrayOrObject");
var _from = require("./from");
var _identity = require("../util/identity");
var _mapOneOrManyArgs = require("../util/mapOneOrManyArgs");
var _args = require("../util/args");
var _createObject = require("../util/createObject");
var _operatorSubscriber = require("../operators/OperatorSubscriber");
var _executeSchedule = require("../util/executeSchedule");
function combineLatest() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    var scheduler = (0, _args.popScheduler)(args);
    var resultSelector = (0, _args.popResultSelector)(args);
    var _a = (0, _argsArgArrayOrObject.argsArgArrayOrObject)(args), observables = _a.args, keys = _a.keys;
    if (observables.length === 0) return (0, _from.from)([], scheduler);
    var result = new (0, _observable.Observable)(combineLatestInit(observables, scheduler, keys ? function(values) {
        return (0, _createObject.createObject)(keys, values);
    } : (0, _identity.identity)));
    return resultSelector ? result.pipe((0, _mapOneOrManyArgs.mapOneOrManyArgs)(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) valueTransform = (0, _identity.identity);
    return function(subscriber) {
        maybeSchedule(scheduler, function() {
            var length = observables.length;
            var values = new Array(length);
            var active = length;
            var remainingFirstValues = length;
            var _loop_1 = function(i) {
                maybeSchedule(scheduler, function() {
                    var source = (0, _from.from)(observables[i], scheduler);
                    var hasFirstValue = false;
                    source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
                        values[i] = value;
                        if (!hasFirstValue) {
                            hasFirstValue = true;
                            remainingFirstValues--;
                        }
                        if (!remainingFirstValues) subscriber.next(valueTransform(values.slice()));
                    }, function() {
                        if (!--active) subscriber.complete();
                    }));
                }, subscriber);
            };
            for(var i = 0; i < length; i++)_loop_1(i);
        }, subscriber);
    };
}
function maybeSchedule(scheduler, execute, subscription) {
    if (scheduler) (0, _executeSchedule.executeSchedule)(subscription, scheduler, execute);
    else execute();
}

},{"../Observable":"4Jvxr","../util/argsArgArrayOrObject":"sN5w7","./from":"dBWag","../util/identity":"8Xfg6","../util/mapOneOrManyArgs":"hlLvg","../util/args":"i1opM","../util/createObject":"1ntWm","../operators/OperatorSubscriber":"96z9b","../util/executeSchedule":"lF0MM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"sN5w7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "argsArgArrayOrObject", ()=>argsArgArrayOrObject);
var isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
function argsArgArrayOrObject(args) {
    if (args.length === 1) {
        var first_1 = args[0];
        if (isArray(first_1)) return {
            args: first_1,
            keys: null
        };
        if (isPOJO(first_1)) {
            var keys = getKeys(first_1);
            return {
                args: keys.map(function(key) {
                    return first_1[key];
                }),
                keys: keys
            };
        }
    }
    return {
        args: args,
        keys: null
    };
}
function isPOJO(obj) {
    return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dBWag":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "from", ()=>from);
var _scheduled = require("../scheduled/scheduled");
var _innerFrom = require("./innerFrom");
function from(input, scheduler) {
    return scheduler ? (0, _scheduled.scheduled)(input, scheduler) : (0, _innerFrom.innerFrom)(input);
}

},{"../scheduled/scheduled":"l8eo2","./innerFrom":"27e4p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l8eo2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduled", ()=>scheduled);
var _scheduleObservable = require("./scheduleObservable");
var _schedulePromise = require("./schedulePromise");
var _scheduleArray = require("./scheduleArray");
var _scheduleIterable = require("./scheduleIterable");
var _scheduleAsyncIterable = require("./scheduleAsyncIterable");
var _isInteropObservable = require("../util/isInteropObservable");
var _isPromise = require("../util/isPromise");
var _isArrayLike = require("../util/isArrayLike");
var _isIterable = require("../util/isIterable");
var _isAsyncIterable = require("../util/isAsyncIterable");
var _throwUnobservableError = require("../util/throwUnobservableError");
var _isReadableStreamLike = require("../util/isReadableStreamLike");
var _scheduleReadableStreamLike = require("./scheduleReadableStreamLike");
function scheduled(input, scheduler) {
    if (input != null) {
        if ((0, _isInteropObservable.isInteropObservable)(input)) return (0, _scheduleObservable.scheduleObservable)(input, scheduler);
        if ((0, _isArrayLike.isArrayLike)(input)) return (0, _scheduleArray.scheduleArray)(input, scheduler);
        if ((0, _isPromise.isPromise)(input)) return (0, _schedulePromise.schedulePromise)(input, scheduler);
        if ((0, _isAsyncIterable.isAsyncIterable)(input)) return (0, _scheduleAsyncIterable.scheduleAsyncIterable)(input, scheduler);
        if ((0, _isIterable.isIterable)(input)) return (0, _scheduleIterable.scheduleIterable)(input, scheduler);
        if ((0, _isReadableStreamLike.isReadableStreamLike)(input)) return (0, _scheduleReadableStreamLike.scheduleReadableStreamLike)(input, scheduler);
    }
    throw (0, _throwUnobservableError.createInvalidObservableTypeError)(input);
}

},{"./scheduleObservable":"g2JIf","./schedulePromise":"aQruY","./scheduleArray":"e4o4N","./scheduleIterable":"1884S","./scheduleAsyncIterable":"bCUem","../util/isInteropObservable":"7Yp6b","../util/isPromise":"aVkee","../util/isArrayLike":"i81jv","../util/isIterable":"cGlpL","../util/isAsyncIterable":"fuDY5","../util/throwUnobservableError":"Il45E","../util/isReadableStreamLike":"bnSKo","./scheduleReadableStreamLike":"6KcBM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g2JIf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduleObservable", ()=>scheduleObservable);
var _innerFrom = require("../observable/innerFrom");
var _observeOn = require("../operators/observeOn");
var _subscribeOn = require("../operators/subscribeOn");
function scheduleObservable(input, scheduler) {
    return (0, _innerFrom.innerFrom)(input).pipe((0, _subscribeOn.subscribeOn)(scheduler), (0, _observeOn.observeOn)(scheduler));
}

},{"../observable/innerFrom":"27e4p","../operators/observeOn":"21OcU","../operators/subscribeOn":"3SFol","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"27e4p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "innerFrom", ()=>innerFrom);
parcelHelpers.export(exports, "fromInteropObservable", ()=>fromInteropObservable);
parcelHelpers.export(exports, "fromArrayLike", ()=>fromArrayLike);
parcelHelpers.export(exports, "fromPromise", ()=>fromPromise);
parcelHelpers.export(exports, "fromIterable", ()=>fromIterable);
parcelHelpers.export(exports, "fromAsyncIterable", ()=>fromAsyncIterable);
parcelHelpers.export(exports, "fromReadableStreamLike", ()=>fromReadableStreamLike);
var _tslib = require("tslib");
var _isArrayLike = require("../util/isArrayLike");
var _isPromise = require("../util/isPromise");
var _observable = require("../Observable");
var _isInteropObservable = require("../util/isInteropObservable");
var _isAsyncIterable = require("../util/isAsyncIterable");
var _throwUnobservableError = require("../util/throwUnobservableError");
var _isIterable = require("../util/isIterable");
var _isReadableStreamLike = require("../util/isReadableStreamLike");
var _isFunction = require("../util/isFunction");
var _reportUnhandledError = require("../util/reportUnhandledError");
var _observable1 = require("../symbol/observable");
function innerFrom(input) {
    if (input instanceof (0, _observable.Observable)) return input;
    if (input != null) {
        if ((0, _isInteropObservable.isInteropObservable)(input)) return fromInteropObservable(input);
        if ((0, _isArrayLike.isArrayLike)(input)) return fromArrayLike(input);
        if ((0, _isPromise.isPromise)(input)) return fromPromise(input);
        if ((0, _isAsyncIterable.isAsyncIterable)(input)) return fromAsyncIterable(input);
        if ((0, _isIterable.isIterable)(input)) return fromIterable(input);
        if ((0, _isReadableStreamLike.isReadableStreamLike)(input)) return fromReadableStreamLike(input);
    }
    throw (0, _throwUnobservableError.createInvalidObservableTypeError)(input);
}
function fromInteropObservable(obj) {
    return new (0, _observable.Observable)(function(subscriber) {
        var obs = obj[0, _observable1.observable]();
        if ((0, _isFunction.isFunction)(obs.subscribe)) return obs.subscribe(subscriber);
        throw new TypeError("Provided object does not correctly implement Symbol.observable");
    });
}
function fromArrayLike(array) {
    return new (0, _observable.Observable)(function(subscriber) {
        for(var i = 0; i < array.length && !subscriber.closed; i++)subscriber.next(array[i]);
        subscriber.complete();
    });
}
function fromPromise(promise) {
    return new (0, _observable.Observable)(function(subscriber) {
        promise.then(function(value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function(err) {
            return subscriber.error(err);
        }).then(null, (0, _reportUnhandledError.reportUnhandledError));
    });
}
function fromIterable(iterable) {
    return new (0, _observable.Observable)(function(subscriber) {
        var e_1, _a;
        try {
            for(var iterable_1 = (0, _tslib.__values)(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()){
                var value = iterable_1_1.value;
                subscriber.next(value);
                if (subscriber.closed) return;
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        subscriber.complete();
    });
}
function fromAsyncIterable(asyncIterable) {
    return new (0, _observable.Observable)(function(subscriber) {
        process(asyncIterable, subscriber).catch(function(err) {
            return subscriber.error(err);
        });
    });
}
function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable((0, _isReadableStreamLike.readableStreamLikeToAsyncGenerator)(readableStream));
}
function process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var value, e_2_1;
        return (0, _tslib.__generator)(this, function(_b) {
            switch(_b.label){
                case 0:
                    _b.trys.push([
                        0,
                        5,
                        6,
                        11
                    ]);
                    asyncIterable_1 = (0, _tslib.__asyncValues)(asyncIterable);
                    _b.label = 1;
                case 1:
                    return [
                        4,
                        asyncIterable_1.next()
                    ];
                case 2:
                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [
                        3,
                        4
                    ];
                    value = asyncIterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) return [
                        2
                    ];
                    _b.label = 3;
                case 3:
                    return [
                        3,
                        1
                    ];
                case 4:
                    return [
                        3,
                        11
                    ];
                case 5:
                    e_2_1 = _b.sent();
                    e_2 = {
                        error: e_2_1
                    };
                    return [
                        3,
                        11
                    ];
                case 6:
                    _b.trys.push([
                        6,
                        ,
                        9,
                        10
                    ]);
                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [
                        3,
                        8
                    ];
                    return [
                        4,
                        _a.call(asyncIterable_1)
                    ];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8:
                    return [
                        3,
                        10
                    ];
                case 9:
                    if (e_2) throw e_2.error;
                    return [
                        7
                    ];
                case 10:
                    return [
                        7
                    ];
                case 11:
                    subscriber.complete();
                    return [
                        2
                    ];
            }
        });
    });
}

},{"tslib":"lRdW5","../util/isArrayLike":"i81jv","../util/isPromise":"aVkee","../Observable":"4Jvxr","../util/isInteropObservable":"7Yp6b","../util/isAsyncIterable":"fuDY5","../util/throwUnobservableError":"Il45E","../util/isIterable":"cGlpL","../util/isReadableStreamLike":"bnSKo","../util/isFunction":"dEyyK","../util/reportUnhandledError":"aVM3K","../symbol/observable":"byHtV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i81jv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isArrayLike", ()=>isArrayLike);
var isArrayLike = function(x) {
    return x && typeof x.length === "number" && typeof x !== "function";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aVkee":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
var _isFunction = require("./isFunction");
function isPromise(value) {
    return (0, _isFunction.isFunction)(value === null || value === void 0 ? void 0 : value.then);
}

},{"./isFunction":"dEyyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Yp6b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isInteropObservable", ()=>isInteropObservable);
var _observable = require("../symbol/observable");
var _isFunction = require("./isFunction");
function isInteropObservable(input) {
    return (0, _isFunction.isFunction)(input[0, _observable.observable]);
}

},{"../symbol/observable":"byHtV","./isFunction":"dEyyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fuDY5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isAsyncIterable", ()=>isAsyncIterable);
var _isFunction = require("./isFunction");
function isAsyncIterable(obj) {
    return Symbol.asyncIterator && (0, _isFunction.isFunction)(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

},{"./isFunction":"dEyyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Il45E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createInvalidObservableTypeError", ()=>createInvalidObservableTypeError);
function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cGlpL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isIterable", ()=>isIterable);
var _iterator = require("../symbol/iterator");
var _isFunction = require("./isFunction");
function isIterable(input) {
    return (0, _isFunction.isFunction)(input === null || input === void 0 ? void 0 : input[0, _iterator.iterator]);
}

},{"../symbol/iterator":"l85ff","./isFunction":"dEyyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l85ff":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSymbolIterator", ()=>getSymbolIterator);
parcelHelpers.export(exports, "iterator", ()=>iterator);
function getSymbolIterator() {
    if (typeof Symbol !== "function" || !Symbol.iterator) return "@@iterator";
    return Symbol.iterator;
}
var iterator = getSymbolIterator();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bnSKo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "readableStreamLikeToAsyncGenerator", ()=>readableStreamLikeToAsyncGenerator);
parcelHelpers.export(exports, "isReadableStreamLike", ()=>isReadableStreamLike);
var _tslib = require("tslib");
var _isFunction = require("./isFunction");
function readableStreamLikeToAsyncGenerator(readableStream) {
    return (0, _tslib.__asyncGenerator)(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return (0, _tslib.__generator)(this, function(_b) {
            switch(_b.label){
                case 0:
                    reader = readableStream.getReader();
                    _b.label = 1;
                case 1:
                    _b.trys.push([
                        1,
                        ,
                        9,
                        10
                    ]);
                    _b.label = 2;
                case 2:
                    return [
                        4,
                        (0, _tslib.__await)(reader.read())
                    ];
                case 3:
                    _a = _b.sent(), value = _a.value, done = _a.done;
                    if (!done) return [
                        3,
                        5
                    ];
                    return [
                        4,
                        (0, _tslib.__await)(void 0)
                    ];
                case 4:
                    return [
                        2,
                        _b.sent()
                    ];
                case 5:
                    return [
                        4,
                        (0, _tslib.__await)(value)
                    ];
                case 6:
                    return [
                        4,
                        _b.sent()
                    ];
                case 7:
                    _b.sent();
                    return [
                        3,
                        2
                    ];
                case 8:
                    return [
                        3,
                        10
                    ];
                case 9:
                    reader.releaseLock();
                    return [
                        7
                    ];
                case 10:
                    return [
                        2
                    ];
            }
        });
    });
}
function isReadableStreamLike(obj) {
    return (0, _isFunction.isFunction)(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

},{"tslib":"lRdW5","./isFunction":"dEyyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"21OcU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "observeOn", ()=>observeOn);
var _executeSchedule = require("../util/executeSchedule");
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
function observeOn(scheduler, delay) {
    if (delay === void 0) delay = 0;
    return (0, _lift.operate)(function(source, subscriber) {
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            return (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
                return subscriber.next(value);
            }, delay);
        }, function() {
            return (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
                return subscriber.complete();
            }, delay);
        }, function(err) {
            return (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
                return subscriber.error(err);
            }, delay);
        }));
    });
}

},{"../util/executeSchedule":"lF0MM","../util/lift":"7CiSs","./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lF0MM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeSchedule", ()=>executeSchedule);
function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) delay = 0;
    if (repeat === void 0) repeat = false;
    var scheduleSubscription = scheduler.schedule(function() {
        work();
        if (repeat) parentSubscription.add(this.schedule(null, delay));
        else this.unsubscribe();
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) return scheduleSubscription;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3SFol":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subscribeOn", ()=>subscribeOn);
var _lift = require("../util/lift");
function subscribeOn(scheduler, delay) {
    if (delay === void 0) delay = 0;
    return (0, _lift.operate)(function(source, subscriber) {
        subscriber.add(scheduler.schedule(function() {
            return source.subscribe(subscriber);
        }, delay));
    });
}

},{"../util/lift":"7CiSs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aQruY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "schedulePromise", ()=>schedulePromise);
var _innerFrom = require("../observable/innerFrom");
var _observeOn = require("../operators/observeOn");
var _subscribeOn = require("../operators/subscribeOn");
function schedulePromise(input, scheduler) {
    return (0, _innerFrom.innerFrom)(input).pipe((0, _subscribeOn.subscribeOn)(scheduler), (0, _observeOn.observeOn)(scheduler));
}

},{"../observable/innerFrom":"27e4p","../operators/observeOn":"21OcU","../operators/subscribeOn":"3SFol","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e4o4N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduleArray", ()=>scheduleArray);
var _observable = require("../Observable");
function scheduleArray(input, scheduler) {
    return new (0, _observable.Observable)(function(subscriber) {
        var i = 0;
        return scheduler.schedule(function() {
            if (i === input.length) subscriber.complete();
            else {
                subscriber.next(input[i++]);
                if (!subscriber.closed) this.schedule();
            }
        });
    });
}

},{"../Observable":"4Jvxr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1884S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduleIterable", ()=>scheduleIterable);
var _observable = require("../Observable");
var _iterator = require("../symbol/iterator");
var _isFunction = require("../util/isFunction");
var _executeSchedule = require("../util/executeSchedule");
function scheduleIterable(input, scheduler) {
    return new (0, _observable.Observable)(function(subscriber) {
        var iterator;
        (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
            iterator = input[0, _iterator.iterator]();
            (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
                var _a;
                var value;
                var done;
                try {
                    _a = iterator.next(), value = _a.value, done = _a.done;
                } catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) subscriber.complete();
                else subscriber.next(value);
            }, 0, true);
        });
        return function() {
            return (0, _isFunction.isFunction)(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();
        };
    });
}

},{"../Observable":"4Jvxr","../symbol/iterator":"l85ff","../util/isFunction":"dEyyK","../util/executeSchedule":"lF0MM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bCUem":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduleAsyncIterable", ()=>scheduleAsyncIterable);
var _observable = require("../Observable");
var _executeSchedule = require("../util/executeSchedule");
function scheduleAsyncIterable(input, scheduler) {
    if (!input) throw new Error("Iterable cannot be null");
    return new (0, _observable.Observable)(function(subscriber) {
        (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
            var iterator = input[Symbol.asyncIterator]();
            (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
                iterator.next().then(function(result) {
                    if (result.done) subscriber.complete();
                    else subscriber.next(result.value);
                });
            }, 0, true);
        });
    });
}

},{"../Observable":"4Jvxr","../util/executeSchedule":"lF0MM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6KcBM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduleReadableStreamLike", ()=>scheduleReadableStreamLike);
var _scheduleAsyncIterable = require("./scheduleAsyncIterable");
var _isReadableStreamLike = require("../util/isReadableStreamLike");
function scheduleReadableStreamLike(input, scheduler) {
    return (0, _scheduleAsyncIterable.scheduleAsyncIterable)((0, _isReadableStreamLike.readableStreamLikeToAsyncGenerator)(input), scheduler);
}

},{"./scheduleAsyncIterable":"bCUem","../util/isReadableStreamLike":"bnSKo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hlLvg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapOneOrManyArgs", ()=>mapOneOrManyArgs);
var _tslib = require("tslib");
var _map = require("../operators/map");
var isArray = Array.isArray;
function callOrApply(fn, args) {
    return isArray(args) ? fn.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
    return (0, _map.map)(function(args) {
        return callOrApply(fn, args);
    });
}

},{"tslib":"lRdW5","../operators/map":"25iUP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"25iUP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "map", ()=>map);
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
function map(project, thisArg) {
    return (0, _lift.operate)(function(source, subscriber) {
        var index = 0;
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            subscriber.next(project.call(thisArg, value, index++));
        }));
    });
}

},{"../util/lift":"7CiSs","./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i1opM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popResultSelector", ()=>popResultSelector);
parcelHelpers.export(exports, "popScheduler", ()=>popScheduler);
parcelHelpers.export(exports, "popNumber", ()=>popNumber);
var _isFunction = require("./isFunction");
var _isScheduler = require("./isScheduler");
function last(arr) {
    return arr[arr.length - 1];
}
function popResultSelector(args) {
    return (0, _isFunction.isFunction)(last(args)) ? args.pop() : undefined;
}
function popScheduler(args) {
    return (0, _isScheduler.isScheduler)(last(args)) ? args.pop() : undefined;
}
function popNumber(args, defaultValue) {
    return typeof last(args) === "number" ? args.pop() : defaultValue;
}

},{"./isFunction":"dEyyK","./isScheduler":"67Brk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"67Brk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isScheduler", ()=>isScheduler);
var _isFunction = require("./isFunction");
function isScheduler(value) {
    return value && (0, _isFunction.isFunction)(value.schedule);
}

},{"./isFunction":"dEyyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ntWm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createObject", ()=>createObject);
function createObject(keys, values) {
    return keys.reduce(function(result, key, i) {
        return result[key] = values[i], result;
    }, {});
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5g0IT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat", ()=>concat);
var _concatAll = require("../operators/concatAll");
var _args = require("../util/args");
var _from = require("./from");
function concat() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    return (0, _concatAll.concatAll)()((0, _from.from)(args, (0, _args.popScheduler)(args)));
}

},{"../operators/concatAll":"77QLf","../util/args":"i1opM","./from":"dBWag","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"77QLf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concatAll", ()=>concatAll);
var _mergeAll = require("./mergeAll");
function concatAll() {
    return (0, _mergeAll.mergeAll)(1);
}

},{"./mergeAll":"iAqyw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iAqyw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mergeAll", ()=>mergeAll);
var _mergeMap = require("./mergeMap");
var _identity = require("../util/identity");
function mergeAll(concurrent) {
    if (concurrent === void 0) concurrent = Infinity;
    return (0, _mergeMap.mergeMap)((0, _identity.identity), concurrent);
}

},{"./mergeMap":"1Kzmb","../util/identity":"8Xfg6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Kzmb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mergeMap", ()=>mergeMap);
var _map = require("./map");
var _innerFrom = require("../observable/innerFrom");
var _lift = require("../util/lift");
var _mergeInternals = require("./mergeInternals");
var _isFunction = require("../util/isFunction");
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) concurrent = Infinity;
    if ((0, _isFunction.isFunction)(resultSelector)) return mergeMap(function(a, i) {
        return (0, _map.map)(function(b, ii) {
            return resultSelector(a, b, i, ii);
        })((0, _innerFrom.innerFrom)(project(a, i)));
    }, concurrent);
    else if (typeof resultSelector === "number") concurrent = resultSelector;
    return (0, _lift.operate)(function(source, subscriber) {
        return (0, _mergeInternals.mergeInternals)(source, subscriber, project, concurrent);
    });
}

},{"./map":"25iUP","../observable/innerFrom":"27e4p","../util/lift":"7CiSs","./mergeInternals":"izBBV","../util/isFunction":"dEyyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"izBBV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mergeInternals", ()=>mergeInternals);
var _innerFrom = require("../observable/innerFrom");
var _executeSchedule = require("../util/executeSchedule");
var _operatorSubscriber = require("./OperatorSubscriber");
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function() {
        if (isComplete && !buffer.length && !active) subscriber.complete();
    };
    var outerNext = function(value) {
        return active < concurrent ? doInnerSub(value) : buffer.push(value);
    };
    var doInnerSub = function(value) {
        expand && subscriber.next(value);
        active++;
        var innerComplete = false;
        (0, _innerFrom.innerFrom)(project(value, index++)).subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(innerValue) {
            onBeforeNext === null || onBeforeNext === void 0 || onBeforeNext(innerValue);
            if (expand) outerNext(innerValue);
            else subscriber.next(innerValue);
        }, function() {
            innerComplete = true;
        }, undefined, function() {
            if (innerComplete) try {
                active--;
                var _loop_1 = function() {
                    var bufferedValue = buffer.shift();
                    if (innerSubScheduler) (0, _executeSchedule.executeSchedule)(subscriber, innerSubScheduler, function() {
                        return doInnerSub(bufferedValue);
                    });
                    else doInnerSub(bufferedValue);
                };
                while(buffer.length && active < concurrent)_loop_1();
                checkComplete();
            } catch (err) {
                subscriber.error(err);
            }
        }));
    };
    source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, outerNext, function() {
        isComplete = true;
        checkComplete();
    }));
    return function() {
        additionalFinalizer === null || additionalFinalizer === void 0 || additionalFinalizer();
    };
}

},{"../observable/innerFrom":"27e4p","../util/executeSchedule":"lF0MM","./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dGHVG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY", ()=>EMPTY);
parcelHelpers.export(exports, "empty", ()=>empty);
var _observable = require("../Observable");
var EMPTY = new (0, _observable.Observable)(function(subscriber) {
    return subscriber.complete();
});
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new (0, _observable.Observable)(function(subscriber) {
        return scheduler.schedule(function() {
            return subscriber.complete();
        });
    });
}

},{"../Observable":"4Jvxr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lnQPU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "of", ()=>of);
var _args = require("../util/args");
var _from = require("./from");
function of() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    var scheduler = (0, _args.popScheduler)(args);
    return (0, _from.from)(args, scheduler);
}

},{"../util/args":"i1opM","./from":"dBWag","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jKP5Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "catchError", ()=>catchError);
var _innerFrom = require("../observable/innerFrom");
var _operatorSubscriber = require("./OperatorSubscriber");
var _lift = require("../util/lift");
function catchError(selector) {
    return (0, _lift.operate)(function(source, subscriber) {
        var innerSub = null;
        var syncUnsub = false;
        var handledResult;
        innerSub = source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, undefined, undefined, function(err) {
            handledResult = (0, _innerFrom.innerFrom)(selector(err, catchError(selector)(source)));
            if (innerSub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            } else syncUnsub = true;
        }));
        if (syncUnsub) {
            innerSub.unsubscribe();
            innerSub = null;
            handledResult.subscribe(subscriber);
        }
    });
}

},{"../observable/innerFrom":"27e4p","./OperatorSubscriber":"96z9b","../util/lift":"7CiSs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2umbm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "connect", ()=>connect);
var _subject = require("../Subject");
var _innerFrom = require("../observable/innerFrom");
var _lift = require("../util/lift");
var _fromSubscribable = require("../observable/fromSubscribable");
var DEFAULT_CONFIG = {
    connector: function() {
        return new (0, _subject.Subject)();
    }
};
function connect(selector, config) {
    if (config === void 0) config = DEFAULT_CONFIG;
    var connector = config.connector;
    return (0, _lift.operate)(function(source, subscriber) {
        var subject = connector();
        (0, _innerFrom.innerFrom)(selector((0, _fromSubscribable.fromSubscribable)(subject))).subscribe(subscriber);
        subscriber.add(source.subscribe(subject));
    });
}

},{"../Subject":"94RSe","../observable/innerFrom":"27e4p","../util/lift":"7CiSs","../observable/fromSubscribable":"bDY0K","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bDY0K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromSubscribable", ()=>fromSubscribable);
var _observable = require("../Observable");
function fromSubscribable(subscribable) {
    return new (0, _observable.Observable)(function(subscriber) {
        return subscribable.subscribe(subscriber);
    });
}

},{"../Observable":"4Jvxr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"03Bwx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultIfEmpty", ()=>defaultIfEmpty);
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
function defaultIfEmpty(defaultValue) {
    return (0, _lift.operate)(function(source, subscriber) {
        var hasValue = false;
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            hasValue = true;
            subscriber.next(value);
        }, function() {
            if (!hasValue) subscriber.next(defaultValue);
            subscriber.complete();
        }));
    });
}

},{"../util/lift":"7CiSs","./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"knFKV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distinctUntilChanged", ()=>distinctUntilChanged);
var _identity = require("../util/identity");
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
function distinctUntilChanged(comparator, keySelector) {
    if (keySelector === void 0) keySelector = (0, _identity.identity);
    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
    return (0, _lift.operate)(function(source, subscriber) {
        var previousKey;
        var first = true;
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            var currentKey = keySelector(value);
            if (first || !comparator(previousKey, currentKey)) {
                first = false;
                previousKey = currentKey;
                subscriber.next(value);
            }
        }));
    });
}
function defaultCompare(a, b) {
    return a === b;
}

},{"../util/identity":"8Xfg6","../util/lift":"7CiSs","./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gA0i5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filter", ()=>filter);
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
function filter(predicate, thisArg) {
    return (0, _lift.operate)(function(source, subscriber) {
        var index = 0;
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            return predicate.call(thisArg, value, index++) && subscriber.next(value);
        }));
    });
}

},{"../util/lift":"7CiSs","./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Jl7y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "first", ()=>first);
var _emptyError = require("../util/EmptyError");
var _filter = require("./filter");
var _take = require("./take");
var _defaultIfEmpty = require("./defaultIfEmpty");
var _throwIfEmpty = require("./throwIfEmpty");
var _identity = require("../util/identity");
function first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function(source) {
        return source.pipe(predicate ? (0, _filter.filter)(function(v, i) {
            return predicate(v, i, source);
        }) : (0, _identity.identity), (0, _take.take)(1), hasDefaultValue ? (0, _defaultIfEmpty.defaultIfEmpty)(defaultValue) : (0, _throwIfEmpty.throwIfEmpty)(function() {
            return new (0, _emptyError.EmptyError)();
        }));
    };
}

},{"../util/EmptyError":"6OnNQ","./filter":"gA0i5","./take":"jxxom","./defaultIfEmpty":"03Bwx","./throwIfEmpty":"1CMQN","../util/identity":"8Xfg6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jxxom":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "take", ()=>take);
var _empty = require("../observable/empty");
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
function take(count) {
    return count <= 0 ? function() {
        return 0, _empty.EMPTY;
    } : (0, _lift.operate)(function(source, subscriber) {
        var seen = 0;
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            if (++seen <= count) {
                subscriber.next(value);
                if (count <= seen) subscriber.complete();
            }
        }));
    });
}

},{"../observable/empty":"dGHVG","../util/lift":"7CiSs","./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1CMQN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "throwIfEmpty", ()=>throwIfEmpty);
var _emptyError = require("../util/EmptyError");
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
function throwIfEmpty(errorFactory) {
    if (errorFactory === void 0) errorFactory = defaultErrorFactory;
    return (0, _lift.operate)(function(source, subscriber) {
        var hasValue = false;
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            hasValue = true;
            subscriber.next(value);
        }, function() {
            return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
        }));
    });
}
function defaultErrorFactory() {
    return new (0, _emptyError.EmptyError)();
}

},{"../util/EmptyError":"6OnNQ","../util/lift":"7CiSs","./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjWSV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multicast", ()=>multicast);
var _connectableObservable = require("../observable/ConnectableObservable");
var _isFunction = require("../util/isFunction");
var _connect = require("./connect");
function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory = (0, _isFunction.isFunction)(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function() {
        return subjectOrSubjectFactory;
    };
    if ((0, _isFunction.isFunction)(selector)) return (0, _connect.connect)(selector, {
        connector: subjectFactory
    });
    return function(source) {
        return new (0, _connectableObservable.ConnectableObservable)(source, subjectFactory);
    };
}

},{"../observable/ConnectableObservable":"6Vb8A","../util/isFunction":"dEyyK","./connect":"2umbm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ioy7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "publishReplay", ()=>publishReplay);
var _replaySubject = require("../ReplaySubject");
var _multicast = require("./multicast");
var _isFunction = require("../util/isFunction");
function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
    if (selectorOrScheduler && !(0, _isFunction.isFunction)(selectorOrScheduler)) timestampProvider = selectorOrScheduler;
    var selector = (0, _isFunction.isFunction)(selectorOrScheduler) ? selectorOrScheduler : undefined;
    return function(source) {
        return (0, _multicast.multicast)(new (0, _replaySubject.ReplaySubject)(bufferSize, windowTime, timestampProvider), selector)(source);
    };
}

},{"../ReplaySubject":"3RRP9","./multicast":"bjWSV","../util/isFunction":"dEyyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8K6iO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reduce", ()=>reduce);
var _scanInternals = require("./scanInternals");
var _lift = require("../util/lift");
function reduce(accumulator, seed) {
    return (0, _lift.operate)((0, _scanInternals.scanInternals)(accumulator, seed, arguments.length >= 2, false, true));
}

},{"./scanInternals":"7fn6o","../util/lift":"7CiSs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7fn6o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scanInternals", ()=>scanInternals);
var _operatorSubscriber = require("./OperatorSubscriber");
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function(source, subscriber) {
        var hasState = hasSeed;
        var state = seed;
        var index = 0;
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            var i = index++;
            state = hasState ? accumulator(state, value, i) : (hasState = true, value);
            emitOnNext && subscriber.next(state);
        }, emitBeforeComplete && function() {
            hasState && subscriber.next(state);
            subscriber.complete();
        }));
    };
}

},{"./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kMx2y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "startWith", ()=>startWith);
var _concat = require("../observable/concat");
var _args = require("../util/args");
var _lift = require("../util/lift");
function startWith() {
    var values = [];
    for(var _i = 0; _i < arguments.length; _i++)values[_i] = arguments[_i];
    var scheduler = (0, _args.popScheduler)(values);
    return (0, _lift.operate)(function(source, subscriber) {
        (scheduler ? (0, _concat.concat)(values, source, scheduler) : (0, _concat.concat)(values, source)).subscribe(subscriber);
    });
}

},{"../observable/concat":"5g0IT","../util/args":"i1opM","../util/lift":"7CiSs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jbzg2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "switchMap", ()=>switchMap);
var _innerFrom = require("../observable/innerFrom");
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
function switchMap(project, resultSelector) {
    return (0, _lift.operate)(function(source, subscriber) {
        var innerSubscriber = null;
        var index = 0;
        var isComplete = false;
        var checkComplete = function() {
            return isComplete && !innerSubscriber && subscriber.complete();
        };
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            innerSubscriber === null || innerSubscriber === void 0 || innerSubscriber.unsubscribe();
            var innerIndex = 0;
            var outerIndex = index++;
            (0, _innerFrom.innerFrom)(project(value, outerIndex)).subscribe(innerSubscriber = (0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(innerValue) {
                return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
            }, function() {
                innerSubscriber = null;
                checkComplete();
            }));
        }, function() {
            isComplete = true;
            checkComplete();
        }));
    });
}

},{"../observable/innerFrom":"27e4p","../util/lift":"7CiSs","./OperatorSubscriber":"96z9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dVdZH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tap", ()=>tap);
var _isFunction = require("../util/isFunction");
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
var _identity = require("../util/identity");
function tap(observerOrNext, error, complete) {
    var tapObserver = (0, _isFunction.isFunction)(observerOrNext) || error || complete ? {
        next: observerOrNext,
        error: error,
        complete: complete
    } : observerOrNext;
    return tapObserver ? (0, _lift.operate)(function(source, subscriber) {
        var _a;
        (_a = tapObserver.subscribe) === null || _a === void 0 || _a.call(tapObserver);
        var isUnsub = true;
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            var _a;
            (_a = tapObserver.next) === null || _a === void 0 || _a.call(tapObserver, value);
            subscriber.next(value);
        }, function() {
            var _a;
            isUnsub = false;
            (_a = tapObserver.complete) === null || _a === void 0 || _a.call(tapObserver);
            subscriber.complete();
        }, function(err) {
            var _a;
            isUnsub = false;
            (_a = tapObserver.error) === null || _a === void 0 || _a.call(tapObserver, err);
            subscriber.error(err);
        }, function() {
            var _a, _b;
            if (isUnsub) (_a = tapObserver.unsubscribe) === null || _a === void 0 || _a.call(tapObserver);
            (_b = tapObserver.finalize) === null || _b === void 0 || _b.call(tapObserver);
        }));
    }) : (0, _identity.identity);
}

},{"../util/isFunction":"dEyyK","../util/lift":"7CiSs","./OperatorSubscriber":"96z9b","../util/identity":"8Xfg6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"occyH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toArray", ()=>toArray);
var _reduce = require("./reduce");
var _lift = require("../util/lift");
var arrReducer = function(arr, value) {
    return arr.push(value), arr;
};
function toArray() {
    return (0, _lift.operate)(function(source, subscriber) {
        (0, _reduce.reduce)(arrReducer, [])(source).subscribe(subscriber);
    });
}

},{"./reduce":"8K6iO","../util/lift":"7CiSs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gnxBn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterEvents", ()=>(0, _filterEventsJs.filterEvents));
parcelHelpers.export(exports, "isKeyringPair", ()=>(0, _isKeyringPairJs.isKeyringPair));
parcelHelpers.export(exports, "l", ()=>(0, _loggingJs.l));
var _filterEventsJs = require("./filterEvents.js");
var _isKeyringPairJs = require("./isKeyringPair.js");
var _loggingJs = require("./logging.js");
var _decorateJs = require("./decorate.js");
parcelHelpers.exportAll(_decorateJs, exports);

},{"./filterEvents.js":"a7ljv","./isKeyringPair.js":"zbWpQ","./logging.js":false,"./decorate.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a7ljv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterEvents", ()=>filterEvents);
var _util = require("@polkadot/util");
var _loggingJs = require("./logging.js");
function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {
    // extrinsics to hashes
    for (const [txIndex, x] of extrinsics.entries()){
        if (x.hash.eq(txHash)) return {
            blockNumber: (0, _util.isCompact)(header.number) ? header.number.unwrap() : header.number,
            events: allEvents.filter(({ phase })=>phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),
            txIndex
        };
    }
    // if we do get the block after finalized, it _should_ be there
    // only warn on filtering with isInBlock (finalization finalizes after)
    if (status.isInBlock) {
        const allHashes = extrinsics.map((x)=>x.hash.toHex());
        (0, _loggingJs.l).warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(", ")}`);
    }
    return {};
}

},{"@polkadot/util":"3HnHw","./logging.js":"fpxQ9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fpxQ9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "l", ()=>l);
var _util = require("@polkadot/util");
const l = /*#__PURE__*/ (0, _util.logger)("api/util");

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"zbWpQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isKeyringPair", ()=>isKeyringPair);
var _util = require("@polkadot/util");
function isKeyringPair(account) {
    return (0, _util.isFunction)(account.sign);
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dOghB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This is a section decorator which keeps all type information.
 */ parcelHelpers.export(exports, "decorateDeriveSections", ()=>decorateDeriveSections);
var _apiDerive = require("@polkadot/api-derive");
function decorateDeriveSections(decorateMethod, derives) {
    const getKeys = (s)=>Object.keys(derives[s]);
    const creator = (s, m)=>decorateMethod(derives[s][m]);
    const result = {};
    const names = Object.keys(derives);
    for(let i = 0, count = names.length; i < count; i++)(0, _apiDerive.lazyDeriveSection)(result, names[i], getKeys, creator);
    return result;
}

},{"@polkadot/api-derive":"5hNo3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5hNo3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"akTr1","./bundle.js":"etoDJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"akTr1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"gPb2C","./packageInfo.js":"bD5x4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gPb2C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = [];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"etoDJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lazyDeriveSection", ()=>(0, _indexJs.lazyDeriveSection));
/** @internal */ parcelHelpers.export(exports, "getAvailableDerives", ()=>getAvailableDerives);
var _indexJs = require("./util/index.js");
var _deriveJs = require("./derive.js");
parcelHelpers.exportAll(_deriveJs, exports);
var _indexJs1 = require("./type/index.js");
parcelHelpers.exportAll(_indexJs1, exports);
const checks = {
    allianceMotion: {
        instances: [
            "allianceMotion"
        ],
        methods: []
    },
    bagsList: {
        instances: [
            "voterBagsList",
            "voterList",
            "bagsList"
        ],
        methods: [],
        withDetect: true
    },
    contracts: {
        instances: [
            "contracts"
        ],
        methods: []
    },
    council: {
        instances: [
            "council"
        ],
        methods: [],
        withDetect: true
    },
    crowdloan: {
        instances: [
            "crowdloan"
        ],
        methods: []
    },
    democracy: {
        instances: [
            "democracy"
        ],
        methods: []
    },
    elections: {
        instances: [
            "phragmenElection",
            "electionsPhragmen",
            "elections",
            "council"
        ],
        methods: [],
        withDetect: true
    },
    imOnline: {
        instances: [
            "imOnline"
        ],
        methods: []
    },
    membership: {
        instances: [
            "membership"
        ],
        methods: []
    },
    parachains: {
        instances: [
            "parachains",
            "registrar"
        ],
        methods: []
    },
    session: {
        instances: [
            "session"
        ],
        methods: []
    },
    society: {
        instances: [
            "society"
        ],
        methods: []
    },
    staking: {
        instances: [
            "staking"
        ],
        methods: [
            "erasRewardPoints"
        ]
    },
    technicalCommittee: {
        instances: [
            "technicalCommittee"
        ],
        methods: [],
        withDetect: true
    },
    treasury: {
        instances: [
            "treasury"
        ],
        methods: []
    }
};
function getModuleInstances(api, specName, moduleName) {
    return api.registry.getModuleInstances(specName, moduleName) || [];
}
/**
 * Returns an object that will inject `api` into all the functions inside
 * `allSections`, and keep the object architecture of `allSections`.
 */ /** @internal */ function injectFunctions(instanceId, api, derives) {
    const result = {};
    const names = Object.keys(derives);
    const keys = Object.keys(api.query);
    const specName = api.runtimeVersion.specName;
    const filterKeys = (q)=>keys.includes(q);
    const filterInstances = (q)=>getModuleInstances(api, specName, q).some(filterKeys);
    const filterMethods = (all)=>(m)=>all.some((q)=>keys.includes(q) && api.query[q][m]);
    const getKeys = (s)=>Object.keys(derives[s]);
    const creator = (s, m)=>derives[s][m](instanceId, api);
    const isIncluded = (c)=>!checks[c] || checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances);
    for(let i = 0, count = names.length; i < count; i++){
        const name = names[i];
        isIncluded(name) && (0, _indexJs.lazyDeriveSection)(result, name, getKeys, creator);
    }
    return result;
}
function getAvailableDerives(instanceId, api, custom = {}) {
    return {
        ...injectFunctions(instanceId, api, (0, _deriveJs.derive)),
        ...injectFunctions(instanceId, api, custom)
    };
}

},{"./util/index.js":"cN7tY","./derive.js":"l831w","./type/index.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cN7tY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "drr", ()=>(0, _rpcCore.drr));
parcelHelpers.export(exports, "memo", ()=>(0, _rpcCore.memo));
var _rpcCore = require("@polkadot/rpc-core");
var _approvalFlagsToBoolsJs = require("./approvalFlagsToBools.js");
parcelHelpers.exportAll(_approvalFlagsToBoolsJs, exports);
var _blockNumberJs = require("./blockNumber.js");
parcelHelpers.exportAll(_blockNumberJs, exports);
var _cacheJs = require("./cache.js");
parcelHelpers.exportAll(_cacheJs, exports);
var _cacheImplJs = require("./cacheImpl.js");
parcelHelpers.exportAll(_cacheImplJs, exports);
var _firstJs = require("./first.js");
parcelHelpers.exportAll(_firstJs, exports);
var _lazyJs = require("./lazy.js");
parcelHelpers.exportAll(_lazyJs, exports);

},{"@polkadot/rpc-core":"8DbiP","./approvalFlagsToBools.js":false,"./blockNumber.js":"40yRm","./cache.js":"71fW9","./cacheImpl.js":false,"./first.js":"xmW8w","./lazy.js":"jmKEw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8DbiP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"lMXp3","./bundle.js":"7rPNR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lMXp3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"l8Dv7","./packageInfo.js":"3xOtl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l8Dv7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageInfo = require("@polkadot/rpc-provider/packageInfo");
var _packageInfo1 = require("@polkadot/types/packageInfo");
exports.default = [
    (0, _packageInfo.packageInfo),
    (0, _packageInfo1.packageInfo)
];

},{"@polkadot/rpc-provider/packageInfo":"bkNCg","@polkadot/types/packageInfo":"cIucp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7rPNR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
/**
 * @name Rpc
 * @summary The API may use a HTTP or WebSockets provider.
 * @description It allows for querying a Polkadot Client Node.
 * WebSockets provider is recommended since HTTP provider only supports basic querying.
 *
 * ```mermaid
 * graph LR;
 *   A[Api] --> |WebSockets| B[WsProvider];
 *   B --> |endpoint| C[ws://127.0.0.1:9944]
 * ```
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Rpc from '@polkadot/rpc-core';
 * import { WsProvider } from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const rpc = new Rpc(provider);
 * ```
 */ parcelHelpers.export(exports, "RpcCore", ()=>RpcCore);
var _rxjs = require("rxjs");
var _types = require("@polkadot/types");
var _util = require("@polkadot/util");
var _indexJs = require("./util/index.js");
var _packageInfoJs = require("./packageInfo.js");
parcelHelpers.exportAll(_indexJs, exports);
const l = (0, _util.logger)("rpc-core");
const EMPTY_META = {
    fallback: undefined,
    modifier: {
        isOptional: true
    },
    type: {
        asMap: {
            linked: {
                isTrue: false
            }
        },
        isMap: false
    }
};
/** @internal */ function logErrorMessage(method, { noErrorLog, params, type }, error) {
    if (noErrorLog) return;
    l.error(`${method}(${params.map(({ isOptional, name, type })=>`${name}${isOptional ? "?" : ""}: ${type}`).join(", ")}): ${type}:: ${error.message}`);
}
function isTreatAsHex(key) {
    // :code is problematic - it does not have the length attached, which is
    // unlike all other storage entries where it is indeed properly encoded
    return [
        "0x3a636f6465"
    ].includes(key.toHex());
}
class RpcCore {
    __internal__instanceId;
    __internal__isPedantic;
    __internal__registryDefault;
    __internal__storageCache = new Map();
    __internal__storageCacheHits = 0;
    __internal__storageCacheSize = 0;
    __internal__getBlockRegistry;
    __internal__getBlockHash;
    mapping = new Map();
    provider;
    sections = [];
    /**
     * @constructor
     * Default constructor for the core RPC handler
     * @param  {ProviderInterface} provider An API provider using any of the supported providers (HTTP, SC or WebSocket)
     */ constructor(instanceId, registry, { isPedantic = true, provider, userRpc = {} }){
        if (!provider || !(0, _util.isFunction)(provider.send)) throw new Error("Expected Provider to API create");
        this.__internal__instanceId = instanceId;
        this.__internal__isPedantic = isPedantic;
        this.__internal__registryDefault = registry;
        this.provider = provider;
        const sectionNames = Object.keys((0, _types.rpcDefinitions));
        // these are the base keys (i.e. part of jsonrpc)
        this.sections.push(...sectionNames);
        // decorate all interfaces, defined and user on this instance
        this.addUserInterfaces(userRpc);
    }
    /**
     * @description Returns the connected status of a provider
     */ get isConnected() {
        return this.provider.isConnected;
    }
    /**
     * @description Manually connect from the attached provider
     */ connect() {
        return this.provider.connect();
    }
    /**
     * @description Manually disconnect from the attached provider
     */ disconnect() {
        return this.provider.disconnect();
    }
    /**
     * @description Returns the underlying core stats, including those from teh provider
     */ get stats() {
        const stats = this.provider.stats;
        return stats ? {
            ...stats,
            core: {
                cacheHits: this.__internal__storageCacheHits,
                cacheSize: this.__internal__storageCacheSize
            }
        } : undefined;
    }
    /**
     * @description Sets a registry swap (typically from Api)
     */ setRegistrySwap(registrySwap) {
        this.__internal__getBlockRegistry = (0, _util.memoize)(registrySwap, {
            getInstanceId: ()=>this.__internal__instanceId
        });
    }
    /**
     * @description Sets a function to resolve block hash from block number
     */ setResolveBlockHash(resolveBlockHash) {
        this.__internal__getBlockHash = (0, _util.memoize)(resolveBlockHash, {
            getInstanceId: ()=>this.__internal__instanceId
        });
    }
    addUserInterfaces(userRpc) {
        // add any extra user-defined sections
        this.sections.push(...Object.keys(userRpc).filter((k)=>!this.sections.includes(k)));
        for(let s = 0, scount = this.sections.length; s < scount; s++){
            const section = this.sections[s];
            const defs = (0, _util.objectSpread)({}, (0, _types.rpcDefinitions)[section], userRpc[section]);
            const methods = Object.keys(defs);
            for(let m = 0, mcount = methods.length; m < mcount; m++){
                const method = methods[m];
                const def = defs[method];
                const jsonrpc = def.endpoint || `${section}_${method}`;
                if (!this.mapping.has(jsonrpc)) {
                    const isSubscription = !!def.pubsub;
                    if (!this[section]) this[section] = {};
                    this.mapping.set(jsonrpc, (0, _util.objectSpread)({}, def, {
                        isSubscription,
                        jsonrpc,
                        method,
                        section
                    }));
                    (0, _util.lazyMethod)(this[section], method, ()=>isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def));
                }
            }
        }
    }
    _memomize(creator, def) {
        const memoOpts = {
            getInstanceId: ()=>this.__internal__instanceId
        };
        const memoized = (0, _util.memoize)(creator(true), memoOpts);
        memoized.raw = (0, _util.memoize)(creator(false), memoOpts);
        memoized.meta = def;
        return memoized;
    }
    _formatResult(isScale, registry, blockHash, method, def, params, result) {
        return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
    }
    _createMethodSend(section, method, def) {
        const rpcName = def.endpoint || `${section}_${method}`;
        const hashIndex = def.params.findIndex(({ isHistoric })=>isHistoric);
        let memoized = null;
        // execute the RPC call, doing a registry swap for historic as applicable
        const callWithRegistry = async (isScale, values)=>{
            const blockId = hashIndex === -1 ? null : values[hashIndex];
            const blockHash = blockId && def.params[hashIndex].type === "BlockNumber" ? await this.__internal__getBlockHash?.(blockId) : blockId;
            const { registry } = isScale && blockHash && this.__internal__getBlockRegistry ? await this.__internal__getBlockRegistry((0, _util.u8aToU8a)(blockHash)) : {
                registry: this.__internal__registryDefault
            };
            const params = this._formatParams(registry, null, def, values);
            // only cache .at(<blockHash>) queries, e.g. where valid blockHash was supplied
            const result = await this.provider.send(rpcName, params.map((p)=>p.toJSON()), !!blockHash);
            return this._formatResult(isScale, registry, blockHash, method, def, params, result);
        };
        const creator = (isScale)=>(...values)=>{
                const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
                return new (0, _rxjs.Observable)((observer)=>{
                    callWithRegistry(isScale, values).then((value)=>{
                        observer.next(value);
                        observer.complete();
                    }).catch((error)=>{
                        logErrorMessage(method, def, error);
                        observer.error(error);
                        observer.complete();
                    });
                    return ()=>{
                        // delete old results from cache
                        if (isScale) memoized?.unmemoize(...values);
                        else memoized?.raw.unmemoize(...values);
                    };
                }).pipe(// eslint-disable-next-line deprecation/deprecation
                (0, _rxjs.publishReplay)(1), isDelayed ? (0, _indexJs.refCountDelay)() // Unsubscribe after delay
                 : (0, _rxjs.refCount)());
            };
        memoized = this._memomize(creator, def);
        return memoized;
    }
    // create a subscriptor, it subscribes once and resolves with the id as subscribe
    _createSubscriber({ paramsJson, subName, subType, update }, errorHandler) {
        return new Promise((resolve, reject)=>{
            this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch((error)=>{
                errorHandler(error);
                reject(error);
            });
        });
    }
    _createMethodSubscribe(section, method, def) {
        const [updateType, subMethod, unsubMethod] = def.pubsub;
        const subName = `${section}_${subMethod}`;
        const unsubName = `${section}_${unsubMethod}`;
        const subType = `${section}_${updateType}`;
        let memoized = null;
        const creator = (isScale)=>(...values)=>{
                return new (0, _rxjs.Observable)((observer)=>{
                    // Have at least an empty promise, as used in the unsubscribe
                    let subscriptionPromise = Promise.resolve(null);
                    const registry = this.__internal__registryDefault;
                    const errorHandler = (error)=>{
                        logErrorMessage(method, def, error);
                        observer.error(error);
                    };
                    try {
                        const params = this._formatParams(registry, null, def, values);
                        const update = (error, result)=>{
                            if (error) {
                                logErrorMessage(method, def, error);
                                return;
                            }
                            try {
                                observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
                            } catch (error) {
                                observer.error(error);
                            }
                        };
                        subscriptionPromise = this._createSubscriber({
                            paramsJson: params.map((p)=>p.toJSON()),
                            subName,
                            subType,
                            update
                        }, errorHandler);
                    } catch (error) {
                        errorHandler(error);
                    }
                    // Teardown logic
                    return ()=>{
                        // Delete from cache, so old results don't hang around
                        if (isScale) memoized?.unmemoize(...values);
                        else memoized?.raw.unmemoize(...values);
                        // Unsubscribe from provider
                        subscriptionPromise.then((subscriptionId)=>(0, _util.isNull)(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch((error)=>logErrorMessage(method, def, error));
                    };
                }).pipe((0, _indexJs.drr)());
            };
        memoized = this._memomize(creator, def);
        return memoized;
    }
    _formatParams(registry, blockHash, def, inputs) {
        const count = inputs.length;
        const reqCount = def.params.filter(({ isOptional })=>!isOptional).length;
        if (count < reqCount || count > def.params.length) throw new Error(`Expected ${def.params.length} parameters${reqCount === def.params.length ? "" : ` (${def.params.length - reqCount} optional)`}, ${count} found instead`);
        const params = new Array(count);
        for(let i = 0; i < count; i++)params[i] = registry.createTypeUnsafe(def.params[i].type, [
            inputs[i]
        ], {
            blockHash
        });
        return params;
    }
    _formatOutput(registry, blockHash, method, rpc, params, result) {
        if (rpc.type === "StorageData") {
            const key = params[0];
            return this._formatStorageData(registry, blockHash, key, result);
        } else if (rpc.type === "StorageChangeSet") {
            const keys = params[0];
            return keys ? this._formatStorageSet(registry, result.block, keys, result.changes) : registry.createType("StorageChangeSet", result);
        } else if (rpc.type === "Vec<StorageChangeSet>") {
            const jsonSet = result;
            const count = jsonSet.length;
            const mapped = new Array(count);
            for(let i = 0; i < count; i++){
                const { block, changes } = jsonSet[i];
                mapped[i] = [
                    registry.createType("BlockHash", block),
                    this._formatStorageSet(registry, block, params[0], changes)
                ];
            }
            // we only query at a specific block, not a range - flatten
            return method === "queryStorageAt" ? mapped[0][1] : mapped;
        }
        return registry.createTypeUnsafe(rpc.type, [
            result
        ], {
            blockHash
        });
    }
    _formatStorageData(registry, blockHash, key, value) {
        const isEmpty = (0, _util.isNull)(value);
        // we convert to Uint8Array since it maps to the raw encoding, all
        // data will be correctly encoded (incl. numbers, excl. :code)
        const input = isEmpty ? null : isTreatAsHex(key) ? value : (0, _util.u8aToU8a)(value);
        return this._newType(registry, blockHash, key, input, isEmpty);
    }
    _formatStorageSet(registry, blockHash, keys, changes) {
        // For StorageChangeSet, the changes has the [key, value] mappings
        const count = keys.length;
        const withCache = count !== 1;
        const values = new Array(count);
        // multiple return values (via state.storage subscription), decode the
        // values one at a time, all based on the supplied query types
        for(let i = 0; i < count; i++)values[i] = this._formatStorageSetEntry(registry, blockHash, keys[i], changes, withCache, i);
        return values;
    }
    _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
        const hexKey = key.toHex();
        const found = changes.find(([key])=>key === hexKey);
        const isNotFound = (0, _util.isUndefined)(found);
        // if we don't find the value, this is our fallback
        //   - in the case of an array of values, fill the hole from the cache
        //   - if a single result value, don't fill - it is not an update hole
        //   - fallback to an empty option in all cases
        if (isNotFound && withCache) {
            const cached = this.__internal__storageCache.get(hexKey);
            if (cached) {
                this.__internal__storageCacheHits++;
                return cached;
            }
        }
        const value = isNotFound ? null : found[1];
        const isEmpty = (0, _util.isNull)(value);
        const input = isEmpty || isTreatAsHex(key) ? value : (0, _util.u8aToU8a)(value);
        const codec = this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
        // store the retrieved result - the only issue with this cache is that there is no
        // clearing of it, so very long running processes (not just a couple of hours, longer)
        // will increase memory beyond what is allowed.
        this.__internal__storageCache.set(hexKey, codec);
        this.__internal__storageCacheSize++;
        return codec;
    }
    _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
        // single return value (via state.getStorage), decode the value based on the
        // outputType that we have specified. Fallback to Raw on nothing
        const type = key.outputType || "Raw";
        const meta = key.meta || EMPTY_META;
        const entryNum = entryIndex === -1 ? "" : ` entry ${entryIndex}:`;
        try {
            return registry.createTypeUnsafe(type, [
                isEmpty ? meta.fallback ? type.includes("Linkage<") ? (0, _util.u8aConcat)((0, _util.hexToU8a)(meta.fallback.toHex()), new Uint8Array(2)) : (0, _util.hexToU8a)(meta.fallback.toHex()) : undefined : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [
                    input
                ], {
                    blockHash,
                    isPedantic: this.__internal__isPedantic
                }) : input
            ], {
                blockHash,
                isFallback: isEmpty && !!meta.fallback,
                isOptional: meta.modifier.isOptional,
                isPedantic: this.__internal__isPedantic && !meta.modifier.isOptional
            });
        } catch (error) {
            throw new Error(`Unable to decode storage ${key.section || "unknown"}.${key.method || "unknown"}:${entryNum}: ${error.message}`);
        }
    }
}

},{"rxjs":"lLy7s","@polkadot/types":"fnDGk","@polkadot/util":"3HnHw","./util/index.js":"6dxRh","./packageInfo.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fnDGk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"1v6yX","./bundle.js":"6NAac","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1v6yX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"gUxEK","./packageInfo.js":"cIucp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gUxEK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageInfo = require("@polkadot/types-codec/packageInfo");
var _packageInfo1 = require("@polkadot/types-create/packageInfo");
exports.default = [
    (0, _packageInfo.packageInfo),
    (0, _packageInfo1.packageInfo)
];

},{"@polkadot/types-codec/packageInfo":"2E3zV","@polkadot/types-create/packageInfo":"cUwPM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2E3zV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $1ed217d034207ea4$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/types-codec/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/types-codec",
    path: $1ed217d034207ea4$import_meta && "file:///node_modules/@polkadot/types-codec/packageInfo.js" ? new URL("file:///node_modules/@polkadot/types-codec/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/types-codec/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "10.11.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cUwPM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $96642f2809a73f8a$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/types-create/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/types-create",
    path: $96642f2809a73f8a$import_meta && "file:///node_modules/@polkadot/types-create/packageInfo.js" ? new URL("file:///node_modules/@polkadot/types-create/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/types-create/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "10.11.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6NAac":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypeDefInfo", ()=>(0, _typesCreate.TypeDefInfo));
parcelHelpers.export(exports, "convertSiV0toV1", ()=>(0, _indexJs.convertSiV0toV1));
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
parcelHelpers.export(exports, "unwrapStorageType", ()=>(0, _indexJs1.unwrapStorageType));
parcelHelpers.export(exports, "rpcDefinitions", ()=>(0, _jsonrpcJsDefault.default));
parcelHelpers.export(exports, "typeDefinitions", ()=>_definitionsJs);
var _definitionsJs = require("./interfaces/definitions.js");
var _jsonrpcJs = require("./interfaces/jsonrpc.js");
var _jsonrpcJsDefault = parcelHelpers.interopDefault(_jsonrpcJs);
var _typesCreate = require("@polkadot/types-create");
var _indexJs = require("./metadata/PortableRegistry/index.js");
var _packageInfoJs = require("./packageInfo.js");
var _indexJs1 = require("./util/index.js");
var _indexJs2 = require("./codec/index.js");
parcelHelpers.exportAll(_indexJs2, exports);
var _indexJs3 = require("./create/index.js");
parcelHelpers.exportAll(_indexJs3, exports);
var _indexTypesJs = require("./index.types.js");
parcelHelpers.exportAll(_indexTypesJs, exports);
var _indexJs4 = require("./metadata/index.js");
parcelHelpers.exportAll(_indexJs4, exports);

},{"./interfaces/definitions.js":"44OZI","./interfaces/jsonrpc.js":"WQpKM","@polkadot/types-create":false,"./metadata/PortableRegistry/index.js":false,"./packageInfo.js":false,"./util/index.js":false,"./codec/index.js":"iQbAh","./create/index.js":"7qdxB","./index.types.js":"b4BtA","./metadata/index.js":"5EZrK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"44OZI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assetConversion", ()=>(0, _definitionsJsDefault.default));
parcelHelpers.export(exports, "assets", ()=>(0, _definitionsJsDefault1.default));
parcelHelpers.export(exports, "aura", ()=>(0, _definitionsJsDefault2.default));
parcelHelpers.export(exports, "authorship", ()=>(0, _definitionsJsDefault3.default));
parcelHelpers.export(exports, "babe", ()=>(0, _definitionsJsDefault4.default));
parcelHelpers.export(exports, "balances", ()=>(0, _definitionsJsDefault5.default));
parcelHelpers.export(exports, "beefy", ()=>(0, _definitionsJsDefault6.default));
parcelHelpers.export(exports, "benchmark", ()=>(0, _definitionsJsDefault7.default));
parcelHelpers.export(exports, "blockbuilder", ()=>(0, _definitionsJsDefault8.default));
parcelHelpers.export(exports, "collective", ()=>(0, _definitionsJsDefault9.default));
parcelHelpers.export(exports, "consensus", ()=>(0, _definitionsJsDefault10.default));
parcelHelpers.export(exports, "contracts", ()=>(0, _definitionsJsDefault11.default));
parcelHelpers.export(exports, "democracy", ()=>(0, _definitionsJsDefault12.default));
parcelHelpers.export(exports, "dev", ()=>(0, _definitionsJsDefault13.default));
parcelHelpers.export(exports, "discovery", ()=>(0, _definitionsJsDefault14.default));
parcelHelpers.export(exports, "elections", ()=>(0, _definitionsJsDefault15.default));
parcelHelpers.export(exports, "engine", ()=>(0, _definitionsJsDefault16.default));
parcelHelpers.export(exports, "evm", ()=>(0, _definitionsJsDefault17.default));
parcelHelpers.export(exports, "extrinsics", ()=>(0, _definitionsJsDefault18.default));
parcelHelpers.export(exports, "fungibles", ()=>(0, _definitionsJsDefault19.default));
parcelHelpers.export(exports, "genericAsset", ()=>(0, _definitionsJsDefault20.default));
parcelHelpers.export(exports, "gilt", ()=>(0, _definitionsJsDefault21.default));
parcelHelpers.export(exports, "grandpa", ()=>(0, _definitionsJsDefault22.default));
parcelHelpers.export(exports, "identity", ()=>(0, _definitionsJsDefault23.default));
parcelHelpers.export(exports, "imOnline", ()=>(0, _definitionsJsDefault24.default));
parcelHelpers.export(exports, "lottery", ()=>(0, _definitionsJsDefault25.default));
parcelHelpers.export(exports, "mmr", ()=>(0, _definitionsJsDefault26.default));
parcelHelpers.export(exports, "nfts", ()=>(0, _definitionsJsDefault27.default));
parcelHelpers.export(exports, "nompools", ()=>(0, _definitionsJsDefault28.default));
parcelHelpers.export(exports, "offences", ()=>(0, _definitionsJsDefault29.default));
parcelHelpers.export(exports, "pow", ()=>(0, _definitionsJsDefault30.default));
parcelHelpers.export(exports, "proxy", ()=>(0, _definitionsJsDefault31.default));
parcelHelpers.export(exports, "recovery", ()=>(0, _definitionsJsDefault32.default));
parcelHelpers.export(exports, "scheduler", ()=>(0, _definitionsJsDefault33.default));
parcelHelpers.export(exports, "session", ()=>(0, _definitionsJsDefault34.default));
parcelHelpers.export(exports, "society", ()=>(0, _definitionsJsDefault35.default));
parcelHelpers.export(exports, "staking", ()=>(0, _definitionsJsDefault36.default));
parcelHelpers.export(exports, "support", ()=>(0, _definitionsJsDefault37.default));
parcelHelpers.export(exports, "syncstate", ()=>(0, _definitionsJsDefault38.default));
parcelHelpers.export(exports, "system", ()=>(0, _definitionsJsDefault39.default));
parcelHelpers.export(exports, "treasury", ()=>(0, _definitionsJsDefault40.default));
parcelHelpers.export(exports, "txpayment", ()=>(0, _definitionsJsDefault41.default));
parcelHelpers.export(exports, "txqueue", ()=>(0, _definitionsJsDefault42.default));
parcelHelpers.export(exports, "uniques", ()=>(0, _definitionsJsDefault43.default));
parcelHelpers.export(exports, "utility", ()=>(0, _definitionsJsDefault44.default));
parcelHelpers.export(exports, "vesting", ()=>(0, _definitionsJsDefault45.default));
parcelHelpers.export(exports, "attestations", ()=>(0, _definitionsJsDefault46.default));
parcelHelpers.export(exports, "bridges", ()=>(0, _definitionsJsDefault47.default));
parcelHelpers.export(exports, "claims", ()=>(0, _definitionsJsDefault48.default));
parcelHelpers.export(exports, "crowdloan", ()=>(0, _definitionsJsDefault49.default));
parcelHelpers.export(exports, "cumulus", ()=>(0, _definitionsJsDefault50.default));
parcelHelpers.export(exports, "finality", ()=>(0, _definitionsJsDefault51.default));
parcelHelpers.export(exports, "parachains", ()=>(0, _definitionsJsDefault52.default));
parcelHelpers.export(exports, "poll", ()=>(0, _definitionsJsDefault53.default));
parcelHelpers.export(exports, "purchase", ()=>(0, _definitionsJsDefault54.default));
parcelHelpers.export(exports, "xcm", ()=>(0, _definitionsJsDefault55.default));
parcelHelpers.export(exports, "contractsAbi", ()=>(0, _definitionsJsDefault56.default));
parcelHelpers.export(exports, "eth", ()=>(0, _definitionsJsDefault57.default));
parcelHelpers.export(exports, "nimbus", ()=>(0, _definitionsJsDefault58.default));
parcelHelpers.export(exports, "ormlOracle", ()=>(0, _definitionsJsDefault59.default));
parcelHelpers.export(exports, "ormlTokens", ()=>(0, _definitionsJsDefault60.default));
parcelHelpers.export(exports, "rpc", ()=>(0, _definitionsJsDefault61.default));
parcelHelpers.export(exports, "author", ()=>(0, _definitionsJsDefault62.default));
parcelHelpers.export(exports, "chain", ()=>(0, _definitionsJsDefault63.default));
parcelHelpers.export(exports, "childstate", ()=>(0, _definitionsJsDefault64.default));
parcelHelpers.export(exports, "offchain", ()=>(0, _definitionsJsDefault65.default));
parcelHelpers.export(exports, "payment", ()=>(0, _definitionsJsDefault66.default));
parcelHelpers.export(exports, "state", ()=>(0, _definitionsJsDefault67.default));
var _essentialsJs = require("./essentials.js");
parcelHelpers.exportAll(_essentialsJs, exports);
var _definitionsJs = require("./assetConversion/definitions.js");
var _definitionsJsDefault = parcelHelpers.interopDefault(_definitionsJs);
var _definitionsJs1 = require("./assets/definitions.js");
var _definitionsJsDefault1 = parcelHelpers.interopDefault(_definitionsJs1);
var _definitionsJs2 = require("./aura/definitions.js");
var _definitionsJsDefault2 = parcelHelpers.interopDefault(_definitionsJs2);
var _definitionsJs3 = require("./authorship/definitions.js");
var _definitionsJsDefault3 = parcelHelpers.interopDefault(_definitionsJs3);
var _definitionsJs4 = require("./babe/definitions.js");
var _definitionsJsDefault4 = parcelHelpers.interopDefault(_definitionsJs4);
var _definitionsJs5 = require("./balances/definitions.js");
var _definitionsJsDefault5 = parcelHelpers.interopDefault(_definitionsJs5);
var _definitionsJs6 = require("./beefy/definitions.js");
var _definitionsJsDefault6 = parcelHelpers.interopDefault(_definitionsJs6);
var _definitionsJs7 = require("./benchmark/definitions.js");
var _definitionsJsDefault7 = parcelHelpers.interopDefault(_definitionsJs7);
var _definitionsJs8 = require("./blockbuilder/definitions.js");
var _definitionsJsDefault8 = parcelHelpers.interopDefault(_definitionsJs8);
var _definitionsJs9 = require("./collective/definitions.js");
var _definitionsJsDefault9 = parcelHelpers.interopDefault(_definitionsJs9);
var _definitionsJs10 = require("./consensus/definitions.js");
var _definitionsJsDefault10 = parcelHelpers.interopDefault(_definitionsJs10);
var _definitionsJs11 = require("./contracts/definitions.js");
var _definitionsJsDefault11 = parcelHelpers.interopDefault(_definitionsJs11);
var _definitionsJs12 = require("./democracy/definitions.js");
var _definitionsJsDefault12 = parcelHelpers.interopDefault(_definitionsJs12);
var _definitionsJs13 = require("./dev/definitions.js");
var _definitionsJsDefault13 = parcelHelpers.interopDefault(_definitionsJs13);
var _definitionsJs14 = require("./discovery/definitions.js");
var _definitionsJsDefault14 = parcelHelpers.interopDefault(_definitionsJs14);
var _definitionsJs15 = require("./elections/definitions.js");
var _definitionsJsDefault15 = parcelHelpers.interopDefault(_definitionsJs15);
var _definitionsJs16 = require("./engine/definitions.js");
var _definitionsJsDefault16 = parcelHelpers.interopDefault(_definitionsJs16);
var _definitionsJs17 = require("./evm/definitions.js");
var _definitionsJsDefault17 = parcelHelpers.interopDefault(_definitionsJs17);
var _definitionsJs18 = require("./extrinsics/definitions.js");
var _definitionsJsDefault18 = parcelHelpers.interopDefault(_definitionsJs18);
var _definitionsJs19 = require("./fungibles/definitions.js");
var _definitionsJsDefault19 = parcelHelpers.interopDefault(_definitionsJs19);
var _definitionsJs20 = require("./genericAsset/definitions.js");
var _definitionsJsDefault20 = parcelHelpers.interopDefault(_definitionsJs20);
var _definitionsJs21 = require("./gilt/definitions.js");
var _definitionsJsDefault21 = parcelHelpers.interopDefault(_definitionsJs21);
var _definitionsJs22 = require("./grandpa/definitions.js");
var _definitionsJsDefault22 = parcelHelpers.interopDefault(_definitionsJs22);
var _definitionsJs23 = require("./identity/definitions.js");
var _definitionsJsDefault23 = parcelHelpers.interopDefault(_definitionsJs23);
var _definitionsJs24 = require("./imOnline/definitions.js");
var _definitionsJsDefault24 = parcelHelpers.interopDefault(_definitionsJs24);
var _definitionsJs25 = require("./lottery/definitions.js");
var _definitionsJsDefault25 = parcelHelpers.interopDefault(_definitionsJs25);
var _definitionsJs26 = require("./mmr/definitions.js");
var _definitionsJsDefault26 = parcelHelpers.interopDefault(_definitionsJs26);
var _definitionsJs27 = require("./nfts/definitions.js");
var _definitionsJsDefault27 = parcelHelpers.interopDefault(_definitionsJs27);
var _definitionsJs28 = require("./nompools/definitions.js");
var _definitionsJsDefault28 = parcelHelpers.interopDefault(_definitionsJs28);
var _definitionsJs29 = require("./offences/definitions.js");
var _definitionsJsDefault29 = parcelHelpers.interopDefault(_definitionsJs29);
var _definitionsJs30 = require("./pow/definitions.js");
var _definitionsJsDefault30 = parcelHelpers.interopDefault(_definitionsJs30);
var _definitionsJs31 = require("./proxy/definitions.js");
var _definitionsJsDefault31 = parcelHelpers.interopDefault(_definitionsJs31);
var _definitionsJs32 = require("./recovery/definitions.js");
var _definitionsJsDefault32 = parcelHelpers.interopDefault(_definitionsJs32);
var _definitionsJs33 = require("./scheduler/definitions.js");
var _definitionsJsDefault33 = parcelHelpers.interopDefault(_definitionsJs33);
var _definitionsJs34 = require("./session/definitions.js");
var _definitionsJsDefault34 = parcelHelpers.interopDefault(_definitionsJs34);
var _definitionsJs35 = require("./society/definitions.js");
var _definitionsJsDefault35 = parcelHelpers.interopDefault(_definitionsJs35);
var _definitionsJs36 = require("./staking/definitions.js");
var _definitionsJsDefault36 = parcelHelpers.interopDefault(_definitionsJs36);
var _definitionsJs37 = require("./support/definitions.js");
var _definitionsJsDefault37 = parcelHelpers.interopDefault(_definitionsJs37);
var _definitionsJs38 = require("./syncstate/definitions.js");
var _definitionsJsDefault38 = parcelHelpers.interopDefault(_definitionsJs38);
var _definitionsJs39 = require("./system/definitions.js");
var _definitionsJsDefault39 = parcelHelpers.interopDefault(_definitionsJs39);
var _definitionsJs40 = require("./treasury/definitions.js");
var _definitionsJsDefault40 = parcelHelpers.interopDefault(_definitionsJs40);
var _definitionsJs41 = require("./txpayment/definitions.js");
var _definitionsJsDefault41 = parcelHelpers.interopDefault(_definitionsJs41);
var _definitionsJs42 = require("./txqueue/definitions.js");
var _definitionsJsDefault42 = parcelHelpers.interopDefault(_definitionsJs42);
var _definitionsJs43 = require("./uniques/definitions.js");
var _definitionsJsDefault43 = parcelHelpers.interopDefault(_definitionsJs43);
var _definitionsJs44 = require("./utility/definitions.js");
var _definitionsJsDefault44 = parcelHelpers.interopDefault(_definitionsJs44);
var _definitionsJs45 = require("./vesting/definitions.js");
var _definitionsJsDefault45 = parcelHelpers.interopDefault(_definitionsJs45);
var _definitionsJs46 = require("./attestations/definitions.js");
var _definitionsJsDefault46 = parcelHelpers.interopDefault(_definitionsJs46);
var _definitionsJs47 = require("./bridges/definitions.js");
var _definitionsJsDefault47 = parcelHelpers.interopDefault(_definitionsJs47);
var _definitionsJs48 = require("./claims/definitions.js");
var _definitionsJsDefault48 = parcelHelpers.interopDefault(_definitionsJs48);
var _definitionsJs49 = require("./crowdloan/definitions.js");
var _definitionsJsDefault49 = parcelHelpers.interopDefault(_definitionsJs49);
var _definitionsJs50 = require("./cumulus/definitions.js");
var _definitionsJsDefault50 = parcelHelpers.interopDefault(_definitionsJs50);
var _definitionsJs51 = require("./finality/definitions.js");
var _definitionsJsDefault51 = parcelHelpers.interopDefault(_definitionsJs51);
var _definitionsJs52 = require("./parachains/definitions.js");
var _definitionsJsDefault52 = parcelHelpers.interopDefault(_definitionsJs52);
var _definitionsJs53 = require("./poll/definitions.js");
var _definitionsJsDefault53 = parcelHelpers.interopDefault(_definitionsJs53);
var _definitionsJs54 = require("./purchase/definitions.js");
var _definitionsJsDefault54 = parcelHelpers.interopDefault(_definitionsJs54);
var _definitionsJs55 = require("./xcm/definitions.js");
var _definitionsJsDefault55 = parcelHelpers.interopDefault(_definitionsJs55);
var _definitionsJs56 = require("./contractsAbi/definitions.js");
var _definitionsJsDefault56 = parcelHelpers.interopDefault(_definitionsJs56);
var _definitionsJs57 = require("./eth/definitions.js");
var _definitionsJsDefault57 = parcelHelpers.interopDefault(_definitionsJs57);
var _definitionsJs58 = require("./nimbus/definitions.js");
var _definitionsJsDefault58 = parcelHelpers.interopDefault(_definitionsJs58);
var _definitionsJs59 = require("./ormlOracle/definitions.js");
var _definitionsJsDefault59 = parcelHelpers.interopDefault(_definitionsJs59);
var _definitionsJs60 = require("./ormlTokens/definitions.js");
var _definitionsJsDefault60 = parcelHelpers.interopDefault(_definitionsJs60);
var _definitionsJs61 = require("./rpc/definitions.js");
var _definitionsJsDefault61 = parcelHelpers.interopDefault(_definitionsJs61);
var _definitionsJs62 = require("./author/definitions.js");
var _definitionsJsDefault62 = parcelHelpers.interopDefault(_definitionsJs62);
var _definitionsJs63 = require("./chain/definitions.js");
var _definitionsJsDefault63 = parcelHelpers.interopDefault(_definitionsJs63);
var _definitionsJs64 = require("./childstate/definitions.js");
var _definitionsJsDefault64 = parcelHelpers.interopDefault(_definitionsJs64);
var _definitionsJs65 = require("./offchain/definitions.js");
var _definitionsJsDefault65 = parcelHelpers.interopDefault(_definitionsJs65);
var _definitionsJs66 = require("./payment/definitions.js");
var _definitionsJsDefault66 = parcelHelpers.interopDefault(_definitionsJs66);
var _definitionsJs67 = require("./state/definitions.js");
var _definitionsJsDefault67 = parcelHelpers.interopDefault(_definitionsJs67);

},{"./essentials.js":"1etId","./assetConversion/definitions.js":"it0iu","./assets/definitions.js":"6Jchk","./aura/definitions.js":"7oRb1","./authorship/definitions.js":"e6dra","./babe/definitions.js":"3SOFg","./balances/definitions.js":"hkwTy","./beefy/definitions.js":"3hA2R","./benchmark/definitions.js":"fdaW0","./blockbuilder/definitions.js":"kKaWs","./collective/definitions.js":"deutg","./consensus/definitions.js":"deoP9","./contracts/definitions.js":"jTpo2","./democracy/definitions.js":"lbBfn","./dev/definitions.js":"206dY","./discovery/definitions.js":"8l8G5","./elections/definitions.js":"7432Q","./engine/definitions.js":"8IgZM","./evm/definitions.js":"hshdN","./extrinsics/definitions.js":"3jfHp","./fungibles/definitions.js":"6mmCc","./genericAsset/definitions.js":"03qFj","./gilt/definitions.js":"cghBp","./grandpa/definitions.js":"cVXOr","./identity/definitions.js":"1WVt1","./imOnline/definitions.js":"i0Bt2","./lottery/definitions.js":"acY4d","./mmr/definitions.js":"gutES","./nfts/definitions.js":"6cHeU","./nompools/definitions.js":"8BZbl","./offences/definitions.js":"hmPgW","./pow/definitions.js":"jrFKv","./proxy/definitions.js":"fKFwr","./recovery/definitions.js":"gtDUv","./scheduler/definitions.js":"dT5Rh","./session/definitions.js":"dWl4R","./society/definitions.js":"7KBk2","./staking/definitions.js":"6HHiX","./support/definitions.js":"lyZLt","./syncstate/definitions.js":"PEQ39","./system/definitions.js":"l4H65","./treasury/definitions.js":"3e69H","./txpayment/definitions.js":"iNbEd","./txqueue/definitions.js":"fCot4","./uniques/definitions.js":"lOumW","./utility/definitions.js":"buWug","./vesting/definitions.js":"ioJDd","./attestations/definitions.js":"bzheC","./bridges/definitions.js":"hWXsW","./claims/definitions.js":"iGvqz","./crowdloan/definitions.js":"aDOdR","./cumulus/definitions.js":"jSZGb","./finality/definitions.js":"41cWe","./parachains/definitions.js":"htNih","./poll/definitions.js":"8EFaw","./purchase/definitions.js":"1GK22","./xcm/definitions.js":"a37to","./contractsAbi/definitions.js":"5CyRS","./eth/definitions.js":"h4sbM","./nimbus/definitions.js":"eMBA0","./ormlOracle/definitions.js":"kTf8P","./ormlTokens/definitions.js":"grkrk","./rpc/definitions.js":"dIscT","./author/definitions.js":"hkDY6","./chain/definitions.js":"iLEm8","./childstate/definitions.js":"4gxGw","./offchain/definitions.js":"CTv6V","./payment/definitions.js":"5fFfa","./state/definitions.js":"8p1Cg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1etId":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "metadata", ()=>(0, _definitionsJsDefault.default));
parcelHelpers.export(exports, "runtime", ()=>(0, _definitionsJsDefault1.default));
parcelHelpers.export(exports, "scaleInfo", ()=>(0, _definitionsJsDefault2.default));
var _definitionsJs = require("./metadata/definitions.js");
var _definitionsJsDefault = parcelHelpers.interopDefault(_definitionsJs);
var _definitionsJs1 = require("./runtime/definitions.js");
var _definitionsJsDefault1 = parcelHelpers.interopDefault(_definitionsJs1);
var _definitionsJs2 = require("./scaleInfo/definitions.js");
var _definitionsJsDefault2 = parcelHelpers.interopDefault(_definitionsJs2);

},{"./metadata/definitions.js":"8EArQ","./runtime/definitions.js":"cRjlK","./scaleInfo/definitions.js":"f4f2A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8EArQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AllHashers", ()=>(0, _hashersJs.AllHashers));
var _hashersJs = require("./hashers.js");
var _runtimeJs = require("./runtime.js");
var _v9Js = require("./v9.js");
var _v10Js = require("./v10.js");
var _v11Js = require("./v11.js");
var _v12Js = require("./v12.js");
var _v13Js = require("./v13.js");
var _v14Js = require("./v14.js");
var _v15Js = require("./v15.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        // all known
        ...(0, _v9Js.v9),
        ...(0, _v10Js.v10),
        ...(0, _v11Js.v11),
        ...(0, _v12Js.v12),
        ...(0, _v13Js.v13),
        ...(0, _v14Js.v14),
        ...(0, _v15Js.v15),
        // latest mappings
        // NOTE: For v15, we only added the runtime defintions,
        // hence latest for most pointing to the previous V14
        ErrorMetadataLatest: "ErrorMetadataV14",
        EventMetadataLatest: "EventMetadataV14",
        ExtrinsicMetadataLatest: "ExtrinsicMetadataV15",
        FunctionArgumentMetadataLatest: "FunctionArgumentMetadataV14",
        FunctionMetadataLatest: "FunctionMetadataV14",
        MetadataLatest: "MetadataV15",
        PalletCallMetadataLatest: "PalletCallMetadataV14",
        PalletConstantMetadataLatest: "PalletConstantMetadataV14",
        PalletErrorMetadataLatest: "PalletErrorMetadataV14",
        PalletEventMetadataLatest: "PalletEventMetadataV14",
        PalletMetadataLatest: "PalletMetadataV15",
        PalletStorageMetadataLatest: "PalletStorageMetadataV14",
        PortableType: "PortableTypeV14",
        RuntimeApiMetadataLatest: "RuntimeApiMetadataV15",
        SignedExtensionMetadataLatest: "SignedExtensionMetadataV14",
        StorageEntryMetadataLatest: "StorageEntryMetadataV14",
        StorageEntryModifierLatest: "StorageEntryModifierV14",
        StorageEntryTypeLatest: "StorageEntryTypeV14",
        StorageHasher: "StorageHasherV14",
        // additional types
        OpaqueMetadata: "Opaque<Bytes>",
        // the enum containing all the mappings
        MetadataAll: {
            _enum: {
                V0: "DoNotConstruct<MetadataV0>",
                V1: "DoNotConstruct<MetadataV1>",
                V2: "DoNotConstruct<MetadataV2>",
                V3: "DoNotConstruct<MetadataV3>",
                V4: "DoNotConstruct<MetadataV4>",
                V5: "DoNotConstruct<MetadataV5>",
                V6: "DoNotConstruct<MetadataV6>",
                V7: "DoNotConstruct<MetadataV7>",
                V8: "DoNotConstruct<MetadataV8>",
                // First version on Kusama in V9, dropping will be problematic
                V9: "MetadataV9",
                V10: "MetadataV10",
                V11: "MetadataV11",
                V12: "MetadataV12",
                V13: "MetadataV13",
                V14: "MetadataV14",
                V15: "MetadataV15"
            }
        }
    }
};

},{"./hashers.js":false,"./runtime.js":"eP8ul","./v9.js":"8vbmG","./v10.js":"86uC8","./v11.js":"eIvft","./v12.js":"2ZO5t","./v13.js":"kL6QY","./v14.js":"9P96S","./v15.js":"6UuHC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kav2J":[function(require,module,exports) {
/* eslint-disable sort-keys */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AllHashers", ()=>AllHashers);
const AllHashers = {
    Blake2_128: null,
    Blake2_256: null,
    Blake2_128Concat: null,
    Twox128: null,
    Twox256: null,
    Twox64Concat: null,
    // new in v11
    Identity: null
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eP8ul":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const META_V1_TO_V2 = {
    metadata: {
        description: "Returns the metadata of a runtime",
        params: [],
        type: "OpaqueMetadata"
    }
};
const runtime = {
    Metadata: [
        {
            methods: {
                metadata_at_version: {
                    description: "Returns the metadata at a given version.",
                    params: [
                        {
                            name: "version",
                            type: "u32"
                        }
                    ],
                    type: "Option<OpaqueMetadata>"
                },
                metadata_versions: {
                    description: "Returns the supported metadata versions.",
                    params: [],
                    type: "Vec<u32>"
                },
                ...META_V1_TO_V2
            },
            version: 2
        },
        {
            methods: {
                ...META_V1_TO_V2
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8vbmG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v9", ()=>v9);
const v9 = {
    // v9
    ErrorMetadataV9: {
        name: "Text",
        docs: "Vec<Text>"
    },
    EventMetadataV9: {
        name: "Text",
        args: "Vec<Type>",
        docs: "Vec<Text>"
    },
    FunctionArgumentMetadataV9: {
        name: "Text",
        type: "Type"
    },
    FunctionMetadataV9: {
        name: "Text",
        args: "Vec<FunctionArgumentMetadataV9>",
        docs: "Vec<Text>"
    },
    MetadataV9: {
        modules: "Vec<ModuleMetadataV9>"
    },
    ModuleConstantMetadataV9: {
        name: "Text",
        type: "Type",
        value: "Bytes",
        docs: "Vec<Text>"
    },
    ModuleMetadataV9: {
        name: "Text",
        storage: "Option<StorageMetadataV9>",
        calls: "Option<Vec<FunctionMetadataV9>>",
        events: "Option<Vec<EventMetadataV9>>",
        constants: "Vec<ModuleConstantMetadataV9>",
        errors: "Vec<ErrorMetadataV9>"
    },
    StorageEntryMetadataV9: {
        name: "Text",
        modifier: "StorageEntryModifierV9",
        type: "StorageEntryTypeV9",
        fallback: "Bytes",
        docs: "Vec<Text>"
    },
    StorageEntryModifierV9: {
        _enum: [
            "Optional",
            "Default",
            "Required"
        ]
    },
    StorageEntryTypeV9: {
        _enum: {
            Plain: "Type",
            Map: {
                hasher: "StorageHasherV9",
                key: "Type",
                value: "Type",
                linked: "bool"
            },
            DoubleMap: {
                hasher: "StorageHasherV9",
                key1: "Type",
                key2: "Type",
                value: "Type",
                key2Hasher: "StorageHasherV9"
            }
        }
    },
    StorageHasherV9: {
        _enum: {
            Blake2_128: null,
            Blake2_256: null,
            Twox128: null,
            Twox256: null,
            Twox64Concat: null
        }
    },
    StorageMetadataV9: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV9>"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"86uC8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v10", ()=>v10);
const v10 = {
    // v10
    ErrorMetadataV10: "ErrorMetadataV9",
    EventMetadataV10: "EventMetadataV9",
    FunctionArgumentMetadataV10: "FunctionArgumentMetadataV9",
    FunctionMetadataV10: "FunctionMetadataV9",
    MetadataV10: {
        modules: "Vec<ModuleMetadataV10>"
    },
    ModuleConstantMetadataV10: "ModuleConstantMetadataV9",
    ModuleMetadataV10: {
        name: "Text",
        storage: "Option<StorageMetadataV10>",
        calls: "Option<Vec<FunctionMetadataV10>>",
        events: "Option<Vec<EventMetadataV10>>",
        constants: "Vec<ModuleConstantMetadataV10>",
        errors: "Vec<ErrorMetadataV10>"
    },
    StorageEntryModifierV10: "StorageEntryModifierV9",
    StorageEntryMetadataV10: {
        name: "Text",
        modifier: "StorageEntryModifierV10",
        type: "StorageEntryTypeV10",
        fallback: "Bytes",
        docs: "Vec<Text>"
    },
    StorageEntryTypeV10: {
        _enum: {
            Plain: "Type",
            Map: {
                hasher: "StorageHasherV10",
                key: "Type",
                value: "Type",
                linked: "bool"
            },
            DoubleMap: {
                hasher: "StorageHasherV10",
                key1: "Type",
                key2: "Type",
                value: "Type",
                key2Hasher: "StorageHasherV10"
            }
        }
    },
    StorageMetadataV10: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV10>"
    },
    StorageHasherV10: {
        _enum: {
            Blake2_128: null,
            Blake2_256: null,
            Blake2_128Concat: null,
            Twox128: null,
            Twox256: null,
            Twox64Concat: null
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eIvft":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v11", ()=>v11);
var _hashersJs = require("./hashers.js");
const v11 = {
    // v11
    ErrorMetadataV11: "ErrorMetadataV10",
    EventMetadataV11: "EventMetadataV10",
    ExtrinsicMetadataV11: {
        version: "u8",
        signedExtensions: "Vec<Text>"
    },
    FunctionArgumentMetadataV11: "FunctionArgumentMetadataV10",
    FunctionMetadataV11: "FunctionMetadataV10",
    MetadataV11: {
        modules: "Vec<ModuleMetadataV11>",
        extrinsic: "ExtrinsicMetadataV11"
    },
    ModuleConstantMetadataV11: "ModuleConstantMetadataV10",
    ModuleMetadataV11: {
        name: "Text",
        storage: "Option<StorageMetadataV11>",
        calls: "Option<Vec<FunctionMetadataV11>>",
        events: "Option<Vec<EventMetadataV11>>",
        constants: "Vec<ModuleConstantMetadataV11>",
        errors: "Vec<ErrorMetadataV11>"
    },
    StorageEntryModifierV11: "StorageEntryModifierV10",
    StorageEntryMetadataV11: {
        name: "Text",
        modifier: "StorageEntryModifierV11",
        type: "StorageEntryTypeV11",
        fallback: "Bytes",
        docs: "Vec<Text>"
    },
    StorageEntryTypeV11: {
        _enum: {
            Plain: "Type",
            Map: {
                hasher: "StorageHasherV11",
                key: "Type",
                value: "Type",
                linked: "bool"
            },
            DoubleMap: {
                hasher: "StorageHasherV11",
                key1: "Type",
                key2: "Type",
                value: "Type",
                key2Hasher: "StorageHasherV11"
            }
        }
    },
    StorageMetadataV11: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV11>"
    },
    StorageHasherV11: {
        _enum: (0, _hashersJs.AllHashers)
    }
};

},{"./hashers.js":"kav2J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ZO5t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v12", ()=>v12);
const v12 = {
    // v12
    ErrorMetadataV12: "ErrorMetadataV11",
    EventMetadataV12: "EventMetadataV11",
    ExtrinsicMetadataV12: "ExtrinsicMetadataV11",
    FunctionArgumentMetadataV12: "FunctionArgumentMetadataV11",
    FunctionMetadataV12: "FunctionMetadataV11",
    MetadataV12: {
        modules: "Vec<ModuleMetadataV12>",
        extrinsic: "ExtrinsicMetadataV12"
    },
    ModuleConstantMetadataV12: "ModuleConstantMetadataV11",
    ModuleMetadataV12: {
        name: "Text",
        storage: "Option<StorageMetadataV12>",
        calls: "Option<Vec<FunctionMetadataV12>>",
        events: "Option<Vec<EventMetadataV12>>",
        constants: "Vec<ModuleConstantMetadataV12>",
        errors: "Vec<ErrorMetadataV12>",
        index: "u8"
    },
    StorageEntryModifierV12: "StorageEntryModifierV11",
    StorageEntryMetadataV12: "StorageEntryMetadataV11",
    StorageEntryTypeV12: "StorageEntryTypeV11",
    StorageMetadataV12: "StorageMetadataV11",
    StorageHasherV12: "StorageHasherV11"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kL6QY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v13", ()=>v13);
const v13 = {
    // v13
    ErrorMetadataV13: "ErrorMetadataV12",
    EventMetadataV13: "EventMetadataV12",
    ExtrinsicMetadataV13: "ExtrinsicMetadataV12",
    FunctionArgumentMetadataV13: "FunctionArgumentMetadataV12",
    FunctionMetadataV13: "FunctionMetadataV12",
    MetadataV13: {
        modules: "Vec<ModuleMetadataV13>",
        extrinsic: "ExtrinsicMetadataV13"
    },
    ModuleConstantMetadataV13: "ModuleConstantMetadataV12",
    ModuleMetadataV13: {
        name: "Text",
        storage: "Option<StorageMetadataV13>",
        calls: "Option<Vec<FunctionMetadataV13>>",
        events: "Option<Vec<EventMetadataV13>>",
        constants: "Vec<ModuleConstantMetadataV13>",
        errors: "Vec<ErrorMetadataV13>",
        index: "u8"
    },
    StorageEntryModifierV13: "StorageEntryModifierV12",
    StorageEntryMetadataV13: {
        name: "Text",
        modifier: "StorageEntryModifierV13",
        type: "StorageEntryTypeV13",
        fallback: "Bytes",
        docs: "Vec<Text>"
    },
    StorageEntryTypeV13: {
        _enum: {
            Plain: "Type",
            Map: {
                hasher: "StorageHasherV13",
                key: "Type",
                value: "Type",
                linked: "bool"
            },
            DoubleMap: {
                hasher: "StorageHasherV13",
                key1: "Type",
                key2: "Type",
                value: "Type",
                key2Hasher: "StorageHasherV13"
            },
            NMap: {
                keyVec: "Vec<Type>",
                hashers: "Vec<StorageHasherV13>",
                value: "Type"
            }
        }
    },
    StorageMetadataV13: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV13>"
    },
    StorageHasherV13: "StorageHasherV12"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9P96S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v14", ()=>v14);
var _v1Js = require("../scaleInfo/v1.js");
const v14 = {
    // registry
    PortableTypeV14: {
        id: "Si1LookupTypeId",
        type: "Si1Type"
    },
    // compatibility with earlier layouts, i.e. don't break previous users
    ErrorMetadataV14: {
        ...(0, _v1Js.Si1Variant),
        args: "Vec<Type>"
    },
    EventMetadataV14: {
        ...(0, _v1Js.Si1Variant),
        args: "Vec<Type>"
    },
    FunctionArgumentMetadataV14: {
        name: "Text",
        type: "Type",
        typeName: "Option<Type>"
    },
    FunctionMetadataV14: {
        ...(0, _v1Js.Si1Variant),
        args: "Vec<FunctionArgumentMetadataV14>"
    },
    // V14
    ExtrinsicMetadataV14: {
        type: "SiLookupTypeId",
        version: "u8",
        signedExtensions: "Vec<SignedExtensionMetadataV14>"
    },
    MetadataV14: {
        lookup: "PortableRegistry",
        pallets: "Vec<PalletMetadataV14>",
        extrinsic: "ExtrinsicMetadataV14",
        type: "SiLookupTypeId"
    },
    PalletCallMetadataV14: {
        type: "SiLookupTypeId"
    },
    PalletConstantMetadataV14: {
        name: "Text",
        type: "SiLookupTypeId",
        value: "Bytes",
        docs: "Vec<Text>"
    },
    PalletErrorMetadataV14: {
        type: "SiLookupTypeId"
    },
    PalletEventMetadataV14: {
        type: "SiLookupTypeId"
    },
    PalletMetadataV14: {
        name: "Text",
        storage: "Option<PalletStorageMetadataV14>",
        calls: "Option<PalletCallMetadataV14>",
        events: "Option<PalletEventMetadataV14>",
        constants: "Vec<PalletConstantMetadataV14>",
        errors: "Option<PalletErrorMetadataV14>",
        index: "u8"
    },
    PalletStorageMetadataV14: {
        prefix: "Text",
        // NOTE: Renamed from entries
        items: "Vec<StorageEntryMetadataV14>"
    },
    SignedExtensionMetadataV14: {
        identifier: "Text",
        type: "SiLookupTypeId",
        additionalSigned: "SiLookupTypeId"
    },
    StorageEntryMetadataV14: {
        name: "Text",
        modifier: "StorageEntryModifierV14",
        type: "StorageEntryTypeV14",
        fallback: "Bytes",
        docs: "Vec<Text>"
    },
    StorageEntryModifierV14: "StorageEntryModifierV13",
    StorageEntryTypeV14: {
        _enum: {
            Plain: "SiLookupTypeId",
            Map: {
                hashers: "Vec<StorageHasherV14>",
                key: "SiLookupTypeId",
                value: "SiLookupTypeId"
            }
        }
    },
    StorageHasherV14: "StorageHasherV13"
};

},{"../scaleInfo/v1.js":"c1dpM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c1dpM":[function(require,module,exports) {
/* eslint-disable sort-keys */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Si1Variant", ()=>Si1Variant);
parcelHelpers.export(exports, "v1", ()=>v1);
const Si1Variant = {
    name: "Text",
    fields: "Vec<Si1Field>",
    index: "u8",
    docs: "Vec<Text>"
};
const v1 = {
    Si1Field: {
        name: "Option<Text>",
        type: "Si1LookupTypeId",
        typeName: "Option<Text>",
        docs: "Vec<Text>"
    },
    Si1LookupTypeId: "Compact<u32>",
    Si1Path: "Si0Path",
    Si1Type: {
        path: "Si1Path",
        params: "Vec<Si1TypeParameter>",
        def: "Si1TypeDef",
        docs: "Vec<Text>"
    },
    Si1TypeDef: {
        _enum: {
            Composite: "Si1TypeDefComposite",
            Variant: "Si1TypeDefVariant",
            Sequence: "Si1TypeDefSequence",
            Array: "Si1TypeDefArray",
            Tuple: "Si1TypeDefTuple",
            Primitive: "Si1TypeDefPrimitive",
            Compact: "Si1TypeDefCompact",
            BitSequence: "Si1TypeDefBitSequence",
            // NOTE: This is specific to the implementation for pre-v14 metadata
            // compatibility (always keep this as the last entry in the enum)
            HistoricMetaCompat: "Type"
        }
    },
    Si1TypeDefArray: {
        len: "u32",
        type: "Si1LookupTypeId"
    },
    Si1TypeDefBitSequence: {
        bitStoreType: "Si1LookupTypeId",
        bitOrderType: "Si1LookupTypeId"
    },
    Si1TypeDefCompact: {
        type: "Si1LookupTypeId"
    },
    Si1TypeDefComposite: {
        fields: "Vec<Si1Field>"
    },
    Si1TypeDefPrimitive: "Si0TypeDefPrimitive",
    Si1TypeDefSequence: {
        type: "Si1LookupTypeId"
    },
    Si1TypeDefTuple: "Vec<Si1LookupTypeId>",
    Si1TypeParameter: {
        name: "Text",
        type: "Option<Si1LookupTypeId>"
    },
    Si1TypeDefVariant: {
        variants: "Vec<Si1Variant>"
    },
    Si1Variant
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6UuHC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v15", ()=>v15);
const v15 = {
    // new/adjusted in v15
    CustomMetadata15: {
        map: "BTreeMap<Text, CustomValueMetadata15>"
    },
    CustomValueMetadata15: {
        type: "SiLookupTypeId",
        value: "Bytes"
    },
    ExtrinsicMetadataV15: {
        version: "u8",
        addressType: "SiLookupTypeId",
        callType: "SiLookupTypeId",
        signatureType: "SiLookupTypeId",
        extraType: "SiLookupTypeId",
        signedExtensions: "Vec<SignedExtensionMetadataV14>"
    },
    OuterEnums15: {
        callType: "SiLookupTypeId",
        eventType: "SiLookupTypeId",
        errorType: "SiLookupTypeId"
    },
    PalletMetadataV15: {
        name: "Text",
        storage: "Option<PalletStorageMetadataV14>",
        calls: "Option<PalletCallMetadataV14>",
        events: "Option<PalletEventMetadataV14>",
        constants: "Vec<PalletConstantMetadataV14>",
        errors: "Option<PalletErrorMetadataV14>",
        index: "u8",
        docs: "Vec<Text>"
    },
    RuntimeApiMetadataV15: {
        name: "Text",
        methods: "Vec<RuntimeApiMethodMetadataV15>",
        docs: "Vec<Text>"
    },
    RuntimeApiMethodMetadataV15: {
        name: "Text",
        inputs: "Vec<RuntimeApiMethodParamMetadataV15>",
        output: "SiLookupTypeId",
        docs: "Vec<Text>"
    },
    RuntimeApiMethodParamMetadataV15: {
        name: "Text",
        type: "SiLookupTypeId"
    },
    // actual v15 definition
    MetadataV15: {
        lookup: "PortableRegistry",
        pallets: "Vec<PalletMetadataV15>",
        extrinsic: "ExtrinsicMetadataV15",
        type: "SiLookupTypeId",
        apis: "Vec<RuntimeApiMetadataV15>",
        outerEnums: "OuterEnums15",
        custom: "CustomMetadata15"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cRjlK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "knownOrigins", ()=>knownOrigins);
var _runtimeJs = require("./runtime.js");
const numberTypes = {
    Fixed64: "Int<64, Fixed64>",
    FixedI64: "Int<64, FixedI64>",
    FixedU64: "UInt<64, FixedU64>",
    Fixed128: "Int<128, Fixed128>",
    FixedI128: "Int<128, FixedI128>",
    FixedU128: "UInt<128, FixedU128>",
    I32F32: "Int<64, I32F32>",
    U32F32: "UInt<64, U32F32>",
    PerU16: "UInt<16, PerU16>",
    Perbill: "UInt<32, Perbill>",
    Percent: "UInt<8, Percent>",
    Permill: "UInt<32, Permill>",
    Perquintill: "UInt<64, Perquintill>"
};
const knownOrigins = {
    //
    // (1) Defaults from Substrate
    //
    Council: "CollectiveOrigin",
    System: "SystemOrigin",
    TechnicalCommittee: "CollectiveOrigin",
    //
    // (2) Defaults from Polkadot
    //
    Xcm: "XcmOrigin",
    XcmPallet: "XcmOrigin",
    //
    // (3) Defaults from Acala
    //
    Authority: "AuthorityOrigin",
    GeneralCouncil: "CollectiveOrigin"
};
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        ...numberTypes,
        AccountId: "AccountId32",
        AccountId20: "GenericEthereumAccountId",
        AccountId32: "GenericAccountId32",
        AccountId33: "GenericAccountId33",
        AccountIdOf: "AccountId",
        AccountIndex: "GenericAccountIndex",
        Address: "MultiAddress",
        AssetId: "u32",
        Balance: "UInt<128, Balance>",
        BalanceOf: "Balance",
        Block: "GenericBlock",
        BlockNumber: "u32",
        BlockNumberFor: "BlockNumber",
        BlockNumberOf: "BlockNumber",
        Call: "GenericCall",
        CallHash: "Hash",
        CallHashOf: "CallHash",
        ChangesTrieConfiguration: {
            digestInterval: "u32",
            digestLevels: "u32"
        },
        ChangesTrieSignal: {
            _enum: {
                NewConfiguration: "Option<ChangesTrieConfiguration>"
            }
        },
        ConsensusEngineId: "GenericConsensusEngineId",
        CodecHash: "Hash",
        CrateVersion: {
            major: "u16",
            minor: "u8",
            patch: "u8"
        },
        Digest: {
            logs: "Vec<DigestItem>"
        },
        DigestItem: {
            _enum: {
                Other: "Bytes",
                AuthoritiesChange: "Vec<AuthorityId>",
                ChangesTrieRoot: "Hash",
                SealV0: "SealV0",
                Consensus: "Consensus",
                Seal: "Seal",
                PreRuntime: "PreRuntime",
                ChangesTrieSignal: "ChangesTrieSignal",
                RuntimeEnvironmentUpdated: "Null" // 8
            }
        },
        ExtrinsicsWeight: {
            normal: "Weight",
            operational: "Weight"
        },
        H32: "[u8; 4; H32]",
        H64: "[u8; 8; H64]",
        H128: "[u8; 16; H128]",
        H160: "[u8; 20; H160]",
        H256: "[u8; 32; H256]",
        H512: "[u8; 64; H512]",
        H1024: "[u8; 128; H1024]",
        H2048: "[u8; 256; H2048]",
        Hash: "H256",
        Header: {
            parentHash: "Hash",
            number: "Compact<BlockNumber>",
            stateRoot: "Hash",
            extrinsicsRoot: "Hash",
            digest: "Digest"
        },
        HeaderPartial: {
            parentHash: "Hash",
            // since we only parse JSON with this, having non-compact works
            number: "BlockNumber"
        },
        IndicesLookupSource: "GenericLookupSource",
        Index: "u32",
        Justification: "(ConsensusEngineId, EncodedJustification)",
        EncodedJustification: "Bytes",
        Justifications: "Vec<Justification>",
        KeyValue: "(StorageKey, StorageData)",
        KeyTypeId: "u32",
        LockIdentifier: "[u8; 8]",
        LookupSource: "MultiAddress",
        LookupTarget: "AccountId",
        ModuleId: "LockIdentifier",
        MultiAddress: "GenericMultiAddress",
        MultiSigner: {
            _enum: {
                Ed25519: "[u8; 32]",
                Sr25519: "[u8; 32]",
                Ecdsa: "[u8; 33]"
            }
        },
        Moment: "UInt<64, Moment>",
        OpaqueCall: "Bytes",
        Origin: "DoNotConstruct<Origin>",
        OriginCaller: {
            _enum: {
                // this should be dynamically built from the actual modules, based on index
                System: "SystemOrigin"
            }
        },
        PalletId: "LockIdentifier",
        PalletsOrigin: "OriginCaller",
        PalletVersion: {
            major: "u16",
            minor: "u8",
            patch: "u8"
        },
        Pays: {
            _enum: [
                "Yes",
                "No"
            ]
        },
        Phantom: "Null",
        PhantomData: "Null",
        Releases: {
            _enum: [
                "V1",
                "V2",
                "V3",
                "V4",
                "V5",
                "V6",
                "V7",
                "V8",
                "V9",
                "V10"
            ]
        },
        RuntimeCall: "Call",
        RuntimeEvent: "Event",
        RuntimeDbWeight: {
            read: "Weight",
            write: "Weight"
        },
        SignedBlock: "SignedBlockWithJustifications",
        SignedBlockWithJustification: {
            block: "Block",
            justification: "Option<EncodedJustification>"
        },
        SignedBlockWithJustifications: {
            block: "Block",
            justifications: "Option<Justifications>"
        },
        Slot: "u64",
        SlotDuration: "u64",
        StorageData: "Bytes",
        StorageInfo: {
            palletName: "Bytes",
            storage_name: "Bytes",
            prefix: "Bytes",
            maxValues: "Option<u32>",
            maxSize: "Option<u32>"
        },
        StorageProof: {
            trieNodes: "Vec<Bytes>"
        },
        TransactionPriority: "u64",
        TransactionLongevity: "u64",
        TransactionTag: "Bytes",
        TransactionInfo: {
            _alias: {
                dataSize: "size"
            },
            chunkRoot: "H256",
            contentHash: "H256",
            dataSize: "u32",
            blockChunks: "u32"
        },
        TransactionStorageProof: {
            chunk: "Vec<u8>",
            proof: "Vec<Vec<u8>>"
        },
        ValidatorId: "AccountId",
        ValidatorIdOf: "ValidatorId",
        WeightV0: "u32",
        WeightV1: "u64",
        WeightV2: {
            refTime: "Compact<u64>",
            proofSize: "Compact<u64>"
        },
        Weight: "WeightV2",
        WeightMultiplier: "Fixed64",
        // digest
        PreRuntime: "(ConsensusEngineId, Bytes)",
        SealV0: "(u64, Signature)",
        Seal: "(ConsensusEngineId, Bytes)",
        Consensus: "(ConsensusEngineId, Bytes)"
    }
};

},{"./runtime.js":"fMO27","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fMO27":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const CORE_V1_TO_V4 = {
    execute_block: {
        description: "Execute the given block.",
        params: [
            {
                name: "block",
                type: "Block"
            }
        ],
        type: "Null"
    }
};
const CORE_V1_TO_V2 = {
    version: {
        description: "Returns the version of the runtime.",
        params: [],
        type: "RuntimeVersionPre3"
    }
};
const CORE_V2_TO_V4 = {
    initialize_block: {
        description: "Initialize a block with the given header.",
        params: [
            {
                name: "header",
                type: "Header"
            }
        ],
        type: "Null"
    }
};
const runtime = {
    Core: [
        {
            methods: {
                version: {
                    description: "Returns the version of the runtime.",
                    params: [],
                    type: "RuntimeVersion"
                },
                ...CORE_V1_TO_V4,
                ...CORE_V2_TO_V4
            },
            version: 4
        },
        {
            methods: {
                version: {
                    description: "Returns the version of the runtime.",
                    params: [],
                    type: "RuntimeVersionPre4"
                },
                ...CORE_V1_TO_V4,
                ...CORE_V2_TO_V4
            },
            version: 3
        },
        {
            methods: {
                ...CORE_V1_TO_V2,
                ...CORE_V1_TO_V4,
                ...CORE_V2_TO_V4
            },
            version: 2
        },
        {
            methods: {
                initialise_block: {
                    description: "Initialize a block with the given header.",
                    params: [
                        {
                            name: "header",
                            type: "Header"
                        }
                    ],
                    type: "Null"
                },
                ...CORE_V1_TO_V2,
                ...CORE_V1_TO_V4
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f4f2A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _v0Js = require("./v0.js");
var _v1Js = require("./v1.js");
/* eslint-disable sort-keys */ exports.default = {
    rpc: {},
    types: {
        ...(0, _v0Js.v0),
        ...(0, _v1Js.v1),
        // latest mappings
        SiField: "Si1Field",
        SiLookupTypeId: "Si1LookupTypeId",
        SiPath: "Si1Path",
        SiType: "Si1Type",
        SiTypeDef: "Si1TypeDef",
        SiTypeDefArray: "Si1TypeDefArray",
        SiTypeDefBitSequence: "Si1TypeDefBitSequence",
        SiTypeDefCompact: "Si1TypeDefCompact",
        SiTypeDefComposite: "Si1TypeDefComposite",
        SiTypeDefPrimitive: "Si1TypeDefPrimitive",
        SiTypeDefSequence: "Si1TypeDefSequence",
        SiTypeDefTuple: "Si1TypeDefTuple",
        SiTypeParameter: "Si1TypeParameter",
        SiTypeDefVariant: "Si1TypeDefVariant",
        SiVariant: "Si1Variant"
    }
};

},{"./v0.js":"jHbzU","./v1.js":"c1dpM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jHbzU":[function(require,module,exports) {
/* eslint-disable sort-keys */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v0", ()=>v0);
const v0 = {
    Si0Field: {
        name: "Option<Text>",
        type: "Si0LookupTypeId",
        typeName: "Option<Text>",
        docs: "Vec<Text>"
    },
    Si0LookupTypeId: "u32",
    Si0Path: "Vec<Text>",
    Si0Type: {
        path: "Si0Path",
        params: "Vec<Si0LookupTypeId>",
        def: "Si0TypeDef"
    },
    Si0TypeDef: {
        _enum: {
            Composite: "Si0TypeDefComposite",
            Variant: "Si0TypeDefVariant",
            Sequence: "Si0TypeDefSequence",
            Array: "Si0TypeDefArray",
            Tuple: "Si0TypeDefTuple",
            Primitive: "Si0TypeDefPrimitive",
            Compact: "Si0TypeDefCompact",
            Phantom: "Si0TypeDefPhantom",
            BitSequence: "Si0TypeDefBitSequence"
        }
    },
    Si0TypeDefArray: {
        len: "u32",
        type: "Si0LookupTypeId"
    },
    Si0TypeDefBitSequence: {
        bitStoreType: "Si0LookupTypeId",
        bitOrderType: "Si0LookupTypeId"
    },
    Si0TypeDefCompact: {
        type: "Si0LookupTypeId"
    },
    Si0TypeDefComposite: {
        fields: "Vec<Si0Field>"
    },
    Si0TypeDefPhantom: "Null",
    Si0TypeDefVariant: {
        variants: "Vec<Si0Variant>"
    },
    Si0TypeDefPrimitive: {
        _enum: [
            "Bool",
            "Char",
            "Str",
            "U8",
            "U16",
            "U32",
            "U64",
            "U128",
            "U256",
            "I8",
            "I16",
            "I32",
            "I64",
            "I128",
            "I256"
        ]
    },
    Si0TypeDefSequence: {
        type: "Si0LookupTypeId"
    },
    Si0TypeDefTuple: "Vec<Si0LookupTypeId>",
    Si0TypeParameter: {
        name: "Text",
        type: "Option<Si0LookupTypeId>"
    },
    Si0Variant: {
        name: "Text",
        fields: "Vec<Si0Field>",
        index: "Option<u8>",
        discriminant: "Option<u64>",
        docs: "Vec<Text>"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"it0iu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        TAssetConversion: "Option<MultiLocation>"
    }
};

},{"./runtime.js":"hdr8n","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hdr8n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    AssetConversionApi: [
        {
            methods: {
                get_reserves: {
                    description: "Get pool reserves",
                    params: [
                        {
                            name: "asset1",
                            type: "XcmV3MultiLocation"
                        },
                        {
                            name: "asset2",
                            type: "XcmV3MultiLocation"
                        }
                    ],
                    type: "Option<(Balance,Balance)>"
                },
                quote_price_exact_tokens_for_tokens: {
                    description: "Quote price: exact tokens for tokens",
                    params: [
                        {
                            name: "asset1",
                            type: "XcmV3MultiLocation"
                        },
                        {
                            name: "asset2",
                            type: "XcmV3MultiLocation"
                        },
                        {
                            name: "amount",
                            type: "u128"
                        },
                        {
                            name: "include_fee",
                            type: "bool"
                        }
                    ],
                    type: "Option<(Balance)>"
                },
                quote_price_tokens_for_exact_tokens: {
                    description: "Quote price: tokens for exact tokens",
                    params: [
                        {
                            name: "asset1",
                            type: "XcmV3MultiLocation"
                        },
                        {
                            name: "asset2",
                            type: "XcmV3MultiLocation"
                        },
                        {
                            name: "amount",
                            type: "u128"
                        },
                        {
                            name: "include_fee",
                            type: "bool"
                        }
                    ],
                    type: "Option<(Balance)>"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Jchk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        AssetApprovalKey: {
            owner: "AccountId",
            delegate: "AccountId"
        },
        AssetApproval: {
            amount: "TAssetBalance",
            deposit: "TAssetDepositBalance"
        },
        AssetBalance: {
            balance: "TAssetBalance",
            isFrozen: "bool",
            isSufficient: "bool"
        },
        AssetDestroyWitness: {
            accounts: "Compact<u32>",
            sufficients: "Compact<u32>",
            approvals: "Compact<u32>"
        },
        AssetDetails: {
            owner: "AccountId",
            issuer: "AccountId",
            admin: "AccountId",
            freezer: "AccountId",
            supply: "TAssetBalance",
            deposit: "TAssetDepositBalance",
            minBalance: "TAssetBalance",
            isSufficient: "bool",
            accounts: "u32",
            sufficients: "u32",
            approvals: "u32",
            isFrozen: "bool"
        },
        AssetMetadata: {
            deposit: "TAssetDepositBalance",
            name: "Vec<u8>",
            symbol: "Vec<u8>",
            decimals: "u8",
            isFrozen: "bool"
        },
        TAssetBalance: "u64",
        TAssetDepositBalance: "BalanceOf"
    }
};

},{"./runtime.js":"clx6v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"clx6v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    AssetsApi: [
        {
            methods: {
                account_balances: {
                    description: "Return the current set of authorities.",
                    params: [
                        {
                            name: "account",
                            type: "AccountId"
                        }
                    ],
                    type: "Vec<(u32, TAssetBalance)>"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oRb1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        RawAuraPreDigest: {
            slotNumber: "u64"
        }
    }
};

},{"./runtime.js":"95Cy1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"95Cy1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    AuraApi: [
        {
            methods: {
                authorities: {
                    description: "Return the current set of authorities.",
                    params: [],
                    type: "Vec<AuthorityId>"
                },
                slot_duration: {
                    description: "Returns the slot duration for Aura.",
                    params: [],
                    type: "SlotDuration"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e6dra":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        UncleEntryItem: {
            _enum: {
                InclusionHeight: "BlockNumber",
                Uncle: "(Hash, Option<AccountId>)"
            }
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3SOFg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    runtime: (0, _runtimeJs.runtime),
    types: {
        AllowedSlots: {
            _enum: [
                "PrimarySlots",
                "PrimaryAndSecondaryPlainSlots",
                "PrimaryAndSecondaryVRFSlots"
            ]
        },
        BabeAuthorityWeight: "u64",
        BabeEpochConfiguration: {
            c: "(u64, u64)",
            allowedSlots: "AllowedSlots"
        },
        BabeBlockWeight: "u32",
        BabeEquivocationProof: {
            offender: "AuthorityId",
            slotNumber: "SlotNumber",
            firstHeader: "Header",
            secondHeader: "Header"
        },
        BabeGenesisConfiguration: {
            slotDuration: "u64",
            epochLength: "u64",
            c: "(u64, u64)",
            genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
            randomness: "Randomness",
            allowedSlots: "AllowedSlots"
        },
        BabeGenesisConfigurationV1: {
            slotDuration: "u64",
            epochLength: "u64",
            c: "(u64, u64)",
            genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
            randomness: "Randomness",
            secondarySlots: "bool"
        },
        BabeWeight: "u64",
        MaybeRandomness: "Option<Randomness>",
        MaybeVrf: "Option<VrfData>",
        Epoch: {
            epochIndex: "u64",
            startSlot: "Slot",
            duration: "u64",
            authorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
            randomness: "Hash",
            config: "BabeEpochConfiguration"
        },
        EpochAuthorship: {
            primary: "Vec<u64>",
            secondary: "Vec<u64>",
            secondary_vrf: "Vec<u64>"
        },
        NextConfigDescriptor: {
            _enum: {
                V0: "Null",
                V1: "NextConfigDescriptorV1"
            }
        },
        NextConfigDescriptorV1: {
            c: "(u64, u64)",
            allowedSlots: "AllowedSlots"
        },
        OpaqueKeyOwnershipProof: "Bytes",
        Randomness: "Hash",
        RawBabePreDigest: {
            _enum: {
                Phantom: "Null",
                Primary: "RawBabePreDigestPrimary",
                SecondaryPlain: "RawBabePreDigestSecondaryPlain",
                SecondaryVRF: "RawBabePreDigestSecondaryVRF"
            }
        },
        RawBabePreDigestPrimary: {
            authorityIndex: "u32",
            slotNumber: "SlotNumber",
            vrfOutput: "VrfOutput",
            vrfProof: "VrfProof"
        },
        RawBabePreDigestSecondaryPlain: {
            authorityIndex: "u32",
            slotNumber: "SlotNumber"
        },
        RawBabePreDigestSecondaryVRF: {
            authorityIndex: "u32",
            slotNumber: "SlotNumber",
            vrfOutput: "VrfOutput",
            vrfProof: "VrfProof"
        },
        RawBabePreDigestTo159: {
            _enum: {
                Primary: "RawBabePreDigestPrimaryTo159",
                Secondary: "RawBabePreDigestSecondaryTo159"
            }
        },
        RawBabePreDigestPrimaryTo159: {
            authorityIndex: "u32",
            slotNumber: "SlotNumber",
            weight: "BabeBlockWeight",
            vrfOutput: "VrfOutput",
            vrfProof: "VrfProof"
        },
        RawBabePreDigestSecondaryTo159: {
            authorityIndex: "u32",
            slotNumber: "SlotNumber",
            weight: "BabeBlockWeight"
        },
        // a cross old/new compatible version of the digest, that is _only_ useful
        // for partial parsing and extraction of the author. This assumes that all
        // entries has the authorityIndex in the first position - and that it is all
        // we are interested in
        RawBabePreDigestCompat: {
            _enum: {
                Zero: "u32",
                One: "u32",
                Two: "u32",
                Three: "u32"
            }
        },
        SlotNumber: "u64",
        VrfData: "[u8; 32]",
        VrfOutput: "[u8; 32]",
        VrfProof: "[u8; 64]"
    }
};

},{"./rpc.js":"9lMXz","./runtime.js":"8wQr4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9lMXz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    epochAuthorship: {
        description: "Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore",
        isUnsafe: true,
        params: [],
        type: "HashMap<AuthorityId, EpochAuthorship>"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8wQr4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const V1_V2_SHARED = {
    current_epoch: {
        description: "Returns information regarding the current epoch.",
        params: [],
        type: "Epoch"
    },
    current_epoch_start: {
        description: "Returns the slot that started the current epoch.",
        params: [],
        type: "Slot"
    },
    generate_key_ownership_proof: {
        description: "Generates a proof of key ownership for the given authority in the current epoch.",
        params: [
            {
                name: "slot",
                type: "Slot"
            },
            {
                name: "authorityId",
                type: "AuthorityId"
            }
        ],
        type: "Option<OpaqueKeyOwnershipProof>"
    },
    next_epoch: {
        description: "Returns information regarding the next epoch (which was already previously announced).",
        params: [],
        type: "Epoch"
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: "Submits an unsigned extrinsic to report an equivocation.",
        params: [
            {
                name: "equivocationProof",
                type: "BabeEquivocationProof"
            },
            {
                name: "keyOwnerProof",
                type: "OpaqueKeyOwnershipProof"
            }
        ],
        type: "Option<Null>"
    }
};
const runtime = {
    BabeApi: [
        {
            methods: {
                configuration: {
                    description: "Return the genesis configuration for BABE. The configuration is only read on genesis.",
                    params: [],
                    type: "BabeGenesisConfiguration"
                },
                ...V1_V2_SHARED
            },
            version: 2
        },
        {
            methods: {
                configuration: {
                    description: "Return the configuration for BABE. Version 1.",
                    params: [],
                    type: "BabeGenesisConfigurationV1"
                },
                ...V1_V2_SHARED
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hkwTy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        AccountData: {
            free: "Balance",
            reserved: "Balance",
            miscFrozen: "Balance",
            feeFrozen: "Balance"
        },
        BalanceLockTo212: {
            id: "LockIdentifier",
            amount: "Balance",
            until: "BlockNumber",
            reasons: "WithdrawReasons"
        },
        BalanceLock: {
            id: "LockIdentifier",
            amount: "Balance",
            reasons: "Reasons"
        },
        BalanceStatus: {
            _enum: [
                "Free",
                "Reserved"
            ]
        },
        Reasons: {
            _enum: [
                "Fee",
                "Misc",
                "All"
            ]
        },
        ReserveData: {
            id: "ReserveIdentifier",
            amount: "Balance"
        },
        ReserveIdentifier: "[u8; 8]",
        VestingSchedule: {
            offset: "Balance",
            perBlock: "Balance",
            startingBlock: "BlockNumber"
        },
        WithdrawReasons: {
            _set: {
                TransactionPayment: 1,
                Transfer: 2,
                Reserve: 4,
                Fee: 8,
                Tip: 16
            }
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3hA2R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    runtime: (0, _runtimeJs.runtime),
    types: {
        BeefyAuthoritySet: {
            id: "u64",
            len: "u32",
            root: "H256"
        },
        BeefyCommitment: {
            payload: "BeefyPayload",
            blockNumber: "BlockNumber",
            validatorSetId: "ValidatorSetId"
        },
        BeefyId: "[u8; 33]",
        BeefyEquivocationProof: {
            first: "BeefyVoteMessage",
            second: "BeefyVoteMessage"
        },
        BeefySignedCommitment: {
            commitment: "BeefyCommitment",
            signatures: "Vec<Option<EcdsaSignature>>"
        },
        BeefyVersionedFinalityProof: {
            _enum: {
                V0: "Null",
                V1: "BeefySignedCommitment"
            }
        },
        BeefyNextAuthoritySet: {
            id: "u64",
            len: "u32",
            root: "H256"
        },
        BeefyPayload: "Vec<(BeefyPayloadId, Bytes)>",
        BeefyPayloadId: "[u8;2]",
        BeefyVoteMessage: {
            commitment: "BeefyCommitment",
            id: "AuthorityId",
            signature: "Signature"
        },
        MmrRootHash: "H256",
        ValidatorSetId: "u64",
        ValidatorSet: {
            validators: "Vec<AuthorityId>",
            id: "ValidatorSetId"
        }
    }
};

},{"./rpc.js":"TSsQ1","./runtime.js":"6RXlq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"TSsQ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    getFinalizedHead: {
        description: "Returns hash of the latest BEEFY finalized block as seen by this client.",
        params: [],
        type: "H256"
    },
    subscribeJustifications: {
        description: "Returns the block most recently finalized by BEEFY, alongside its justification.",
        params: [],
        pubsub: [
            "justifications",
            "subscribeJustifications",
            "unsubscribeJustifications"
        ],
        type: "BeefyVersionedFinalityProof"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6RXlq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const BEEFY_V1_V3 = {
    beefy_genesis: {
        description: "Return the block number where BEEFY consensus is enabled/started",
        params: [],
        type: "Option<BlockNumber>"
    },
    generate_key_ownership_proof: {
        description: "Generates a proof of key ownership for the given authority in the given set.",
        params: [
            {
                name: "setId",
                type: "ValidatorSetId"
            },
            {
                name: "authorityId",
                type: "AuthorityId"
            }
        ],
        type: "Option<OpaqueKeyOwnershipProof>"
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: "Submits an unsigned extrinsic to report an equivocation.",
        params: [
            {
                name: "equivocationProof",
                type: "BeefyEquivocationProof"
            },
            {
                name: "keyOwnerProof",
                type: "OpaqueKeyOwnershipProof"
            }
        ],
        type: "Option<Null>"
    },
    validator_set: {
        description: "Return the current active BEEFY validator set",
        params: [],
        type: "Option<ValidatorSet>"
    }
};
const BEEFY_MMR_V1 = {
    authority_set_proof: {
        description: "Return the currently active BEEFY authority set proof.",
        params: [],
        type: "BeefyAuthoritySet"
    },
    next_authority_set_proof: {
        description: "Return the next/queued BEEFY authority set proof.",
        params: [],
        type: "BeefyNextAuthoritySet"
    }
};
const runtime = {
    BeefyApi: [
        {
            methods: BEEFY_V1_V3,
            version: 3
        },
        {
            methods: BEEFY_V1_V3,
            version: 2
        },
        {
            methods: BEEFY_V1_V3,
            version: 1
        }
    ],
    BeefyMmrApi: [
        {
            methods: BEEFY_MMR_V1,
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fdaW0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        BenchmarkBatch: {
            pallet: "Text",
            instance: "Text",
            benchmark: "Text",
            results: "Vec<BenchmarkResult>"
        },
        BenchmarkConfig: {
            pallet: "Bytes",
            benchmark: "Bytes",
            selectedComponents: "Vec<(BenchmarkParameter, u32)>",
            verify: "bool",
            internalRepeats: "u32"
        },
        BenchmarkList: {
            pallet: "Bytes",
            instance: "Bytes",
            benchmarks: "Vec<BenchmarkMetadata>"
        },
        BenchmarkMetadata: {
            name: "Bytes",
            components: "Vec<(BenchmarkParameter, u32, u32)>"
        },
        BenchmarkParameter: {
            _enum: [
                "a",
                "b",
                "c",
                "d",
                "e",
                "f",
                "g",
                "h",
                "i",
                "j",
                "k",
                "l",
                "m",
                "n",
                "o",
                "p",
                "q",
                "r",
                "s",
                "t",
                "u",
                "v",
                "w",
                "x",
                "y",
                "z"
            ]
        },
        BenchmarkResult: {
            components: "Vec<(BenchmarkParameter, u32)>",
            extrinsicTime: "u128",
            storageRootTime: "u128",
            reads: "u32",
            repeatReads: "u32",
            writes: "u32",
            repeatWrites: "u32",
            proofSize: "u32",
            benchKeys: "Vec<(Vec<u8>, u32, u32, bool)>"
        }
    }
};

},{"./runtime.js":"aSpJe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aSpJe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    Benchmark: [
        {
            methods: {
                benchmark_metadata: {
                    description: "Get the benchmark metadata available for this runtime.",
                    params: [
                        {
                            name: "extra",
                            type: "bool"
                        }
                    ],
                    type: "(Vec<BenchmarkList>, Vec<StorageInfo>)"
                },
                dispatch_benchmark: {
                    description: "Dispatch the given benchmark.",
                    params: [
                        {
                            name: "config",
                            type: "BenchmarkConfig"
                        }
                    ],
                    type: "Result<Vec<BenchmarkBatch>, Text>"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kKaWs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        CheckInherentsResult: {
            okay: "bool",
            fatalError: "bool",
            errors: "InherentData"
        },
        InherentData: {
            data: "BTreeMap<InherentIdentifier, Bytes>"
        },
        InherentIdentifier: "[u8; 8]"
    }
};

},{"./runtime.js":"12EEU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"12EEU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const BB_V2_TO_V4 = {
    // this was removed after V4
    random_seed: {
        description: "Generate a random seed.",
        params: [],
        type: "Hash"
    }
};
const BB_V2_TO_V5 = {
    apply_extrinsic: {
        description: "Apply the given extrinsic.",
        params: [
            {
                name: "extrinsic",
                type: "Extrinsic"
            }
        ],
        type: "ApplyExtrinsicResultPre6"
    }
};
const BB_V2_TO_V6 = {
    check_inherents: {
        description: "Check that the inherents are valid.",
        params: [
            {
                name: "block",
                type: "Block"
            },
            {
                name: "data",
                type: "InherentData"
            }
        ],
        type: "CheckInherentsResult"
    },
    inherent_extrinsics: {
        description: "Generate inherent extrinsics.",
        params: [
            {
                name: "inherent",
                type: "InherentData"
            }
        ],
        type: "Vec<Extrinsic>"
    }
};
const BB_V3_TO_V6 = {
    // renamed in v3 from finalize_block
    finalize_block: {
        description: "Finish the current block.",
        params: [],
        type: "Header"
    }
};
const runtime = {
    BlockBuilder: [
        {
            methods: {
                apply_extrinsic: {
                    description: "Apply the given extrinsic.",
                    params: [
                        {
                            name: "extrinsic",
                            type: "Extrinsic"
                        }
                    ],
                    type: "ApplyExtrinsicResult"
                },
                ...BB_V2_TO_V6,
                ...BB_V3_TO_V6
            },
            version: 6
        },
        {
            methods: {
                // apply_extrinsic result changed in 6
                ...BB_V2_TO_V5,
                ...BB_V2_TO_V6,
                ...BB_V3_TO_V6
            },
            version: 5
        },
        {
            methods: {
                // random_seed removed
                ...BB_V2_TO_V4,
                ...BB_V2_TO_V5,
                ...BB_V2_TO_V6,
                ...BB_V3_TO_V6
            },
            version: 4
        },
        {
            methods: {
                // finalize_block renamed
                ...BB_V2_TO_V4,
                ...BB_V2_TO_V6,
                ...BB_V3_TO_V6
            },
            version: 3
        },
        {
            methods: {
                finalise_block: {
                    description: "Finish the current block.",
                    params: [],
                    type: "Header"
                },
                ...BB_V2_TO_V4,
                ...BB_V2_TO_V6
            },
            version: 2
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"deutg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        CollectiveOrigin: {
            _enum: {
                Members: "(MemberCount, MemberCount)",
                Member: "AccountId"
            }
        },
        MemberCount: "u32",
        ProposalIndex: "u32",
        VotesTo230: {
            index: "ProposalIndex",
            threshold: "MemberCount",
            ayes: "Vec<AccountId>",
            nays: "Vec<AccountId>"
        },
        Votes: {
            index: "ProposalIndex",
            threshold: "MemberCount",
            ayes: "Vec<AccountId>",
            nays: "Vec<AccountId>",
            end: "BlockNumber"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"deoP9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        AuthorityId: "AccountId",
        RawVRFOutput: "[u8; 32]"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jTpo2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    runtime: (0, _runtimeJs.runtime),
    types: {
        AliveContractInfo: {
            trieId: "TrieId",
            storageSize: "u32",
            pairCount: "u32",
            codeHash: "CodeHash",
            rentAllowance: "Balance",
            rentPaid: "Balance",
            deductBlock: "BlockNumber",
            lastWrite: "Option<BlockNumber>",
            _reserved: "Option<Null>"
        },
        CodeHash: "Hash",
        CodeSource: {
            _enum: {
                Upload: "Bytes",
                Existing: "Hash"
            }
        },
        CodeUploadRequest: {
            origin: "AccountId",
            code: "Bytes",
            storageDepositLimit: "Option<Balance>"
        },
        CodeUploadResult: "Result<CodeUploadResultValue, DispatchError>",
        CodeUploadResultValue: {
            codeHash: "CodeHash",
            deposit: "Balance"
        },
        ContractCallRequest: {
            origin: "AccountId",
            dest: "AccountId",
            value: "Balance",
            gasLimit: "u64",
            storageDepositLimit: "Option<Balance>",
            inputData: "Bytes"
        },
        ContractExecResultSuccessTo255: {
            status: "u8",
            data: "Raw"
        },
        ContractExecResultTo255: {
            _enum: {
                Success: "ContractExecResultSuccessTo255",
                Error: "Null"
            }
        },
        ContractExecResultSuccessTo260: {
            flags: "ContractReturnFlags",
            data: "Bytes",
            gasConsumed: "u64"
        },
        ContractExecResultTo260: {
            _enum: {
                Success: "ContractExecResultSuccessTo260",
                Error: "Null"
            }
        },
        ContractExecResultOk: {
            flags: "ContractReturnFlags",
            data: "Bytes"
        },
        ContractExecResultResult: "Result<ContractExecResultOk, DispatchError>",
        ContractExecResultTo267: {
            gasConsumed: "u64",
            debugMessage: "Text",
            result: "ContractExecResultResult"
        },
        ContractExecResult: {
            gasConsumed: "Weight",
            gasRequired: "Weight",
            storageDeposit: "StorageDeposit",
            debugMessage: "Text",
            result: "ContractExecResultResult"
        },
        ContractExecResultU64: {
            gasConsumed: "u64",
            gasRequired: "u64",
            storageDeposit: "StorageDeposit",
            debugMessage: "Text",
            result: "ContractExecResultResult"
        },
        ContractInfo: {
            _enum: {
                Alive: "AliveContractInfo",
                Tombstone: "TombstoneContractInfo"
            }
        },
        ContractCallFlags: {
            _set: {
                _bitLength: 32,
                ForwardInput: 1,
                CloneInput: 2,
                TailCall: 4,
                AllowReentry: 8
            }
        },
        ContractReturnFlags: {
            _set: {
                _bitLength: 32,
                Revert: 1
            }
        },
        ContractStorageKey: "[u8; 32]",
        DeletedContract: {
            pairCount: "u32",
            trieId: "TrieId"
        },
        ExecReturnValue: {
            flags: "ContractReturnFlags",
            data: "Bytes"
        },
        Gas: "u64",
        HostFnWeightsTo264: {
            caller: "Weight",
            address: "Weight",
            gasLeft: "Weight",
            balance: "Weight",
            valueTransferred: "Weight",
            minimumBalance: "Weight",
            tombstoneDeposit: "Weight",
            rentAllowance: "Weight",
            blockNumber: "Weight",
            now: "Weight",
            weightToFee: "Weight",
            gas: "Weight",
            input: "Weight",
            inputPerByte: "Weight",
            return: "Weight",
            returnPerByte: "Weight",
            terminate: "Weight",
            restoreTo: "Weight",
            restoreToPerDelta: "Weight",
            random: "Weight",
            depositEvent: "Weight",
            depositEventPerTopic: "Weight",
            depositEventPerByte: "Weight",
            setRentAllowance: "Weight",
            setStorage: "Weight",
            setStoragePerByte: "Weight",
            clearStorage: "Weight",
            getStorage: "Weight",
            getStoragePerByte: "Weight",
            transfer: "Weight",
            call: "Weight",
            callTransferSurcharge: "Weight",
            callPerInputByte: "Weight",
            callPerOutputByte: "Weight",
            instantiate: "Weight",
            instantiatePerInputByte: "Weight",
            instantiatePerOutputByte: "Weight",
            hashSha2256: "Weight",
            hashSha2256PerByte: "Weight",
            hashKeccak256: "Weight",
            hashKeccak256PerByte: "Weight",
            hashBlake2256: "Weight",
            hashBlake2256PerByte: "Weight",
            hashBlake2128: "Weight",
            hashBlake2128PerByte: "Weight"
        },
        HostFnWeights: {
            caller: "Weight",
            address: "Weight",
            gasLeft: "Weight",
            balance: "Weight",
            valueTransferred: "Weight",
            minimumBalance: "Weight",
            tombstoneDeposit: "Weight",
            rentAllowance: "Weight",
            blockNumber: "Weight",
            now: "Weight",
            weightToFee: "Weight",
            gas: "Weight",
            input: "Weight",
            inputPerByte: "Weight",
            return: "Weight",
            returnPerByte: "Weight",
            terminate: "Weight",
            terminatePerCodeByte: "Weight",
            restoreTo: "Weight",
            restoreToPerCallerCodeByte: "Weight",
            restoreToPerTombstoneCodeByte: "Weight",
            restoreToPerDelta: "Weight",
            random: "Weight",
            depositEvent: "Weight",
            depositEventPerTopic: "Weight",
            depositEventPerByte: "Weight",
            setRentAllowance: "Weight",
            setStorage: "Weight",
            setStoragePerByte: "Weight",
            clearStorage: "Weight",
            getStorage: "Weight",
            getStoragePerByte: "Weight",
            transfer: "Weight",
            call: "Weight",
            callPerCodeByte: "Weight",
            callTransferSurcharge: "Weight",
            callPerInputByte: "Weight",
            callPerOutputByte: "Weight",
            instantiate: "Weight",
            instantiatePerCodeByte: "Weight",
            instantiatePerInputByte: "Weight",
            instantiatePerOutputByte: "Weight",
            instantiatePerSaltByte: "Weight",
            hashSha2256: "Weight",
            hashSha2256PerByte: "Weight",
            hashKeccak256: "Weight",
            hashKeccak256PerByte: "Weight",
            hashBlake2256: "Weight",
            hashBlake2256PerByte: "Weight",
            hashBlake2128: "Weight",
            hashBlake2128PerByte: "Weight",
            rentParams: "Weight"
        },
        InstantiateRequestV1: {
            origin: "AccountId",
            value: "Balance",
            gasLimit: "Gas",
            code: "Bytes",
            data: "Bytes",
            salt: "Bytes"
        },
        InstantiateRequestV2: {
            _fallback: "InstantiateRequestV1",
            origin: "AccountId",
            value: "Balance",
            gasLimit: "Gas",
            storageDepositLimit: "Option<Balance>",
            code: "Bytes",
            data: "Bytes",
            salt: "Bytes"
        },
        InstantiateRequest: {
            _fallback: "InstantiateRequestV2",
            origin: "AccountId",
            value: "Balance",
            gasLimit: "Gas",
            storageDepositLimit: "Option<Balance>",
            code: "CodeSource",
            data: "Bytes",
            salt: "Bytes"
        },
        ContractInstantiateResultTo267: "Result<InstantiateReturnValueTo267, Null>",
        ContractInstantiateResultTo299: "Result<InstantiateReturnValueOk, Null>",
        ContractInstantiateResult: {
            gasConsumed: "WeightV2",
            gasRequired: "WeightV2",
            storageDeposit: "StorageDeposit",
            debugMessage: "Text",
            result: "InstantiateReturnValue"
        },
        ContractInstantiateResultU64: {
            // only this one can fail, the current version (above) _should_ be correctly
            // versioned now, aka no more deprecated RPCs involved, only runtime calls
            _fallback: "ContractInstantiateResultTo299",
            gasConsumed: "u64",
            gasRequired: "u64",
            storageDeposit: "StorageDeposit",
            debugMessage: "Text",
            result: "InstantiateReturnValue"
        },
        InstantiateReturnValueTo267: {
            result: "ExecReturnValue",
            accountId: "AccountId",
            rentProjection: "Option<RentProjection>"
        },
        InstantiateReturnValueOk: {
            result: "ExecReturnValue",
            accountId: "AccountId"
        },
        InstantiateReturnValue: "Result<InstantiateReturnValueOk, DispatchError>",
        InstructionWeights: {
            i64const: "u32",
            i64load: "u32",
            i64store: "u32",
            select: "u32",
            rIf: "u32",
            br: "u32",
            brIf: "u32",
            brIable: "u32",
            brIablePerEntry: "u32",
            call: "u32",
            callIndirect: "u32",
            callIndirectPerParam: "u32",
            localGet: "u32",
            localSet: "u32",
            local_tee: "u32",
            globalGet: "u32",
            globalSet: "u32",
            memoryCurrent: "u32",
            memoryGrow: "u32",
            i64clz: "u32",
            i64ctz: "u32",
            i64popcnt: "u32",
            i64eqz: "u32",
            i64extendsi32: "u32",
            i64extendui32: "u32",
            i32wrapi64: "u32",
            i64eq: "u32",
            i64ne: "u32",
            i64lts: "u32",
            i64ltu: "u32",
            i64gts: "u32",
            i64gtu: "u32",
            i64les: "u32",
            i64leu: "u32",
            i64ges: "u32",
            i64geu: "u32",
            i64add: "u32",
            i64sub: "u32",
            i64mul: "u32",
            i64divs: "u32",
            i64divu: "u32",
            i64rems: "u32",
            i64remu: "u32",
            i64and: "u32",
            i64or: "u32",
            i64xor: "u32",
            i64shl: "u32",
            i64shrs: "u32",
            i64shru: "u32",
            i64rotl: "u32",
            i64rotr: "u32"
        },
        LimitsTo264: {
            eventTopics: "u32",
            stackHeight: "u32",
            globals: "u32",
            parameters: "u32",
            memoryPages: "u32",
            tableSize: "u32",
            brTableSize: "u32",
            subjectLen: "u32",
            codeSize: "u32"
        },
        Limits: {
            eventTopics: "u32",
            stackHeight: "u32",
            globals: "u32",
            parameters: "u32",
            memoryPages: "u32",
            tableSize: "u32",
            brTableSize: "u32",
            subjectLen: "u32"
        },
        PrefabWasmModule: {
            scheduleVersion: "Compact<u32>",
            initial: "Compact<u32>",
            maximum: "Compact<u32>",
            refcount: "Compact<u64>",
            _reserved: "Option<Null>",
            code: "Bytes",
            originalCodeLen: "u32"
        },
        RentProjection: {
            _enum: {
                EvictionAt: "BlockNumber",
                NoEviction: "Null"
            }
        },
        ScheduleTo212: {
            version: "u32",
            putCodePerByteCost: "Gas",
            growMemCost: "Gas",
            regularOpCost: "Gas",
            returnDataPerByteCost: "Gas",
            eventDataPerByteCost: "Gas",
            eventPerTopicCost: "Gas",
            eventBaseCost: "Gas",
            sandboxDataReadCost: "Gas",
            sandboxDataWriteCost: "Gas",
            maxEventTopics: "u32",
            maxStackHeight: "u32",
            maxMemoryPages: "u32",
            enablePrintln: "bool",
            maxSubjectLen: "u32"
        },
        ScheduleTo258: {
            version: "u32",
            putCodePerByteCost: "Gas",
            growMemCost: "Gas",
            regularOpCost: "Gas",
            returnDataPerByteCost: "Gas",
            eventDataPerByteCost: "Gas",
            eventPerTopicCost: "Gas",
            eventBaseCost: "Gas",
            sandboxDataReadCost: "Gas",
            sandboxDataWriteCost: "Gas",
            transferCost: "Gas",
            maxEventTopics: "u32",
            maxStackHeight: "u32",
            maxMemoryPages: "u32",
            enablePrintln: "bool",
            maxSubjectLen: "u32"
        },
        ScheduleTo264: {
            version: "u32",
            enablePrintln: "bool",
            limits: "LimitsTo264",
            instructionWeights: "InstructionWeights",
            hostFnWeights: "HostFnWeightsTo264"
        },
        Schedule: {
            version: "u32",
            enablePrintln: "bool",
            limits: "Limits",
            instructionWeights: "InstructionWeights",
            hostFnWeights: "HostFnWeights"
        },
        SeedOf: "Hash",
        StorageDeposit: {
            _enum: {
                Refund: "Balance",
                Charge: "Balance"
            }
        },
        TombstoneContractInfo: "Hash",
        TrieId: "Bytes"
    }
};

},{"./rpc.js":"2SnMw","./runtime.js":"KvWWg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SnMw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    call: {
        deprecated: "Use the runtime interface `api.call.contractsApi.call` instead",
        description: "Executes a call to a contract",
        params: [
            {
                name: "callRequest",
                type: "ContractCallRequest"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "ContractExecResult"
    },
    getStorage: {
        deprecated: "Use the runtime interface `api.call.contractsApi.getStorage` instead",
        description: "Returns the value under a specified storage key in a contract",
        params: [
            {
                name: "address",
                type: "AccountId"
            },
            {
                name: "key",
                type: "H256"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Option<Bytes>"
    },
    instantiate: {
        deprecated: "Use the runtime interface `api.call.contractsApi.instantiate` instead",
        description: "Instantiate a new contract",
        params: [
            {
                name: "request",
                type: "InstantiateRequestV1"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "ContractInstantiateResult"
    },
    rentProjection: {
        deprecated: "Not available in newer versions of the contracts interfaces",
        description: "Returns the projected time a given contract will be able to sustain paying its rent",
        params: [
            {
                name: "address",
                type: "AccountId"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Option<BlockNumber>"
    },
    uploadCode: {
        deprecated: "Use the runtime interface `api.call.contractsApi.uploadCode` instead",
        description: "Upload new code without instantiating a contract from it",
        // The RPC here is terribly misnamed - somebody forgot how the RPCs
        // are actually done, ie. <module>_<camelCasedMethod>
        endpoint: "contracts_upload_code",
        params: [
            {
                name: "uploadRequest",
                type: "CodeUploadRequest"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "CodeUploadResult"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"KvWWg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const SHARED_V1_V2 = {
    get_storage: {
        description: "Query a given storage key in a given contract.",
        params: [
            {
                name: "address",
                type: "AccountId"
            },
            {
                name: "key",
                type: "Bytes"
            }
        ],
        type: "Option<Bytes>"
    },
    upload_code: {
        description: "Upload new code without instantiating a contract from it.",
        params: [
            {
                name: "origin",
                type: "AccountId"
            },
            {
                name: "code",
                type: "Bytes"
            },
            {
                name: "storageDepositLimit",
                type: "Option<Balance>"
            }
        ],
        type: "CodeUploadResult"
    }
};
const runtime = {
    ContractsApi: [
        {
            methods: {
                call: {
                    description: "Perform a call from a specified account to a given contract.",
                    params: [
                        {
                            name: "origin",
                            type: "AccountId"
                        },
                        {
                            name: "dest",
                            type: "AccountId"
                        },
                        {
                            name: "value",
                            type: "Balance"
                        },
                        {
                            name: "gasLimit",
                            type: "Option<WeightV2>"
                        },
                        {
                            name: "storageDepositLimit",
                            type: "Option<Balance>"
                        },
                        {
                            name: "inputData",
                            type: "Vec<u8>"
                        }
                    ],
                    type: "ContractExecResult"
                },
                instantiate: {
                    description: "Instantiate a new contract.",
                    params: [
                        {
                            name: "origin",
                            type: "AccountId"
                        },
                        {
                            name: "value",
                            type: "Balance"
                        },
                        {
                            name: "gasLimit",
                            type: "Option<WeightV2>"
                        },
                        {
                            name: "storageDepositLimit",
                            type: "Option<Balance>"
                        },
                        {
                            name: "code",
                            type: "CodeSource"
                        },
                        {
                            name: "data",
                            type: "Bytes"
                        },
                        {
                            name: "salt",
                            type: "Bytes"
                        }
                    ],
                    type: "ContractInstantiateResult"
                },
                ...SHARED_V1_V2
            },
            version: 2
        },
        {
            methods: {
                call: {
                    description: "Perform a call from a specified account to a given contract.",
                    params: [
                        {
                            name: "origin",
                            type: "AccountId"
                        },
                        {
                            name: "dest",
                            type: "AccountId"
                        },
                        {
                            name: "value",
                            type: "Balance"
                        },
                        {
                            name: "gasLimit",
                            type: "u64"
                        },
                        {
                            name: "storageDepositLimit",
                            type: "Option<Balance>"
                        },
                        {
                            name: "inputData",
                            type: "Vec<u8>"
                        }
                    ],
                    type: "ContractExecResultU64"
                },
                instantiate: {
                    description: "Instantiate a new contract.",
                    params: [
                        {
                            name: "origin",
                            type: "AccountId"
                        },
                        {
                            name: "value",
                            type: "Balance"
                        },
                        {
                            name: "gasLimit",
                            type: "u64"
                        },
                        {
                            name: "storageDepositLimit",
                            type: "Option<Balance>"
                        },
                        {
                            name: "code",
                            type: "CodeSource"
                        },
                        {
                            name: "data",
                            type: "Bytes"
                        },
                        {
                            name: "salt",
                            type: "Bytes"
                        }
                    ],
                    type: "ContractInstantiateResultU64"
                },
                ...SHARED_V1_V2
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lbBfn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AllConvictions", ()=>AllConvictions);
const AllConvictions = [
    // 0.1x votes, unlocked.
    "None",
    // 1x votes, locked for an enactment period following a successful vote.
    "Locked1x",
    // 2x votes, locked for 2x enactment periods following a successful vote.
    "Locked2x",
    // 3x votes, locked for 4x...
    "Locked3x",
    // 4x votes, locked for 8x...
    "Locked4x",
    // 5x votes, locked for 16x...
    "Locked5x",
    // 6x votes, locked for 32x...
    "Locked6x"
];
exports.default = {
    rpc: {},
    types: {
        AccountVote: {
            _enum: {
                Standard: "AccountVoteStandard",
                Split: "AccountVoteSplit"
            }
        },
        AccountVoteSplit: {
            aye: "Balance",
            nay: "Balance"
        },
        AccountVoteStandard: {
            vote: "Vote",
            balance: "Balance"
        },
        Conviction: {
            _enum: AllConvictions
        },
        Delegations: {
            votes: "Balance",
            capital: "Balance"
        },
        PreimageStatus: {
            _enum: {
                Missing: "BlockNumber",
                Available: "PreimageStatusAvailable"
            }
        },
        PreimageStatusAvailable: {
            data: "Bytes",
            provider: "AccountId",
            deposit: "Balance",
            since: "BlockNumber",
            expiry: "Option<BlockNumber>"
        },
        PriorLock: "(BlockNumber, Balance)",
        PropIndex: "u32",
        Proposal: "Call",
        ProxyState: {
            _enum: {
                Open: "AccountId",
                Active: "AccountId"
            }
        },
        ReferendumIndex: "u32",
        ReferendumInfoTo239: {
            end: "BlockNumber",
            proposalHash: "Hash",
            threshold: "VoteThreshold",
            delay: "BlockNumber"
        },
        ReferendumInfo: {
            _enum: {
                Ongoing: "ReferendumStatus",
                Finished: "ReferendumInfoFinished"
            }
        },
        ReferendumInfoFinished: {
            approved: "bool",
            end: "BlockNumber"
        },
        ReferendumStatus: {
            end: "BlockNumber",
            proposalHash: "Hash",
            threshold: "VoteThreshold",
            delay: "BlockNumber",
            tally: "Tally"
        },
        Tally: {
            ayes: "Balance",
            nays: "Balance",
            turnout: "Balance"
        },
        Voting: {
            _enum: {
                Direct: "VotingDirect",
                Delegating: "VotingDelegating"
            }
        },
        VotingDirect: {
            votes: "Vec<VotingDirectVote>",
            delegations: "Delegations",
            prior: "PriorLock"
        },
        VotingDirectVote: "(ReferendumIndex, AccountVote)",
        VotingDelegating: {
            balance: "Balance",
            target: "AccountId",
            conviction: "Conviction",
            delegations: "Delegations",
            prior: "PriorLock"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"206dY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    types: {
        BlockStats: {
            witnessLen: "u64",
            witnessCompactLen: "u64",
            blockLen: "u64",
            blockNumExtrinsics: "u64"
        }
    }
};

},{"./rpc.js":"b427p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b427p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    getBlockStats: {
        description: "Reexecute the specified `block_hash` and gather statistics while doing so",
        isUnsafe: true,
        params: [
            {
                isHistoric: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Option<BlockStats>"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8l8G5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {}
};

},{"./runtime.js":"2flQR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2flQR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    AuthorityDiscoveryApi: [
        {
            methods: {
                authorities: {
                    description: "Retrieve authority identifiers of the current and next authority set.",
                    params: [],
                    type: "Vec<AuthorityId>"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7432Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        ApprovalFlag: "u32",
        DefunctVoter: {
            who: "AccountId",
            voteCount: "Compact<u32>",
            candidateCount: "Compact<u32>"
        },
        Renouncing: {
            _enum: {
                Member: "Null",
                RunnerUp: "Null",
                Candidate: "Compact<u32>"
            }
        },
        SetIndex: "u32",
        Vote: "GenericVote",
        VoteIndex: "u32",
        VoterInfo: {
            lastActive: "VoteIndex",
            lastWin: "VoteIndex",
            pot: "Balance",
            stake: "Balance"
        },
        VoteThreshold: {
            _enum: [
                "Super Majority Approve",
                "Super Majority Against",
                "Simple Majority"
            ]
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8IgZM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    types: {
        CreatedBlock: {
            _alias: {
                blockHash: "hash"
            },
            blockHash: "BlockHash",
            aux: "ImportedAux"
        },
        ImportedAux: {
            headerOnly: "bool",
            clearJustificationRequests: "bool",
            needsJustification: "bool",
            badJustification: "bool",
            needsFinalityProof: "bool",
            isNewBest: "bool"
        }
    }
};

},{"./rpc.js":"031Qb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"031Qb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    createBlock: {
        description: "Instructs the manual-seal authorship task to create a new block",
        params: [
            {
                name: "createEmpty",
                type: "bool"
            },
            {
                name: "finalize",
                type: "bool"
            },
            {
                isOptional: true,
                name: "parentHash",
                type: "BlockHash"
            }
        ],
        type: "CreatedBlock"
    },
    finalizeBlock: {
        description: "Instructs the manual-seal authorship task to finalize a block",
        params: [
            {
                name: "hash",
                type: "BlockHash"
            },
            {
                isOptional: true,
                name: "justification",
                type: "Justification"
            }
        ],
        type: "bool"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hshdN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        EvmAccount: {
            nonce: "u256",
            balance: "u256"
        },
        EvmCallInfo: {
            exitReason: "ExitReason",
            value: "Bytes",
            usedGas: "U256",
            logs: "Vec<EvmLog>"
        },
        EvmCreateInfo: {
            exitReason: "ExitReason",
            value: "H160",
            usedGas: "U256",
            logs: "Vec<EvmLog>"
        },
        EvmCallInfoV2: {
            exitReason: "ExitReason",
            value: "Bytes",
            usedGas: "U256",
            weightInfo: "Option<EvmWeightInfo>",
            logs: "Vec<EvmLog>"
        },
        EvmCreateInfoV2: {
            exitReason: "ExitReason",
            value: "H160",
            usedGas: "U256",
            weightInfo: "Option<EvmWeightInfo>",
            logs: "Vec<EvmLog>"
        },
        EvmLog: {
            address: "H160",
            topics: "Vec<H256>",
            data: "Bytes"
        },
        EvmVicinity: {
            gasPrice: "u256",
            origin: "H160"
        },
        EvmWeightInfo: {
            refTimeLimit: "Option<u64>",
            proofSizeLimit: "Option<u64>",
            refTimeUsage: "Option<u64>",
            proofSizeUsage: "Option<u64>"
        },
        ExitError: {
            _enum: {
                StackUnderflow: "Null",
                StackOverflow: "Null",
                InvalidJump: "Null",
                InvalidRange: "Null",
                DesignatedInvalid: "Null",
                CallTooDeep: "Null",
                CreateCollision: "Null",
                CreateContractLimit: "Null",
                OutOfOffset: "Null",
                OutOfGas: "Null",
                OutOfFund: "Null",
                PCUnderflow: "Null",
                CreateEmpty: "Null",
                Other: "Text"
            }
        },
        ExitFatal: {
            _enum: {
                NotSupported: "Null",
                UnhandledInterrupt: "Null",
                CallErrorAsFatal: "ExitError",
                Other: "Text"
            }
        },
        ExitReason: {
            _enum: {
                Succeed: "ExitSucceed",
                Error: "ExitError",
                Revert: "ExitRevert",
                Fatal: "ExitFatal"
            }
        },
        ExitRevert: {
            _enum: [
                "Reverted"
            ]
        },
        ExitSucceed: {
            _enum: [
                "Stopped",
                "Returned",
                "Suicided"
            ]
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3jfHp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        Extrinsic: "GenericExtrinsic",
        ExtrinsicEra: "GenericExtrinsicEra",
        ExtrinsicPayload: "GenericExtrinsicPayload",
        ExtrinsicSignature: "MultiSignature",
        ExtrinsicV4: "GenericExtrinsicV4",
        ExtrinsicPayloadV4: "GenericExtrinsicPayloadV4",
        ExtrinsicSignatureV4: "GenericExtrinsicSignatureV4",
        ExtrinsicUnknown: "GenericExtrinsicUnknown",
        ExtrinsicPayloadUnknown: "GenericExtrinsicPayloadUnknown",
        // eras
        Era: "ExtrinsicEra",
        ImmortalEra: "GenericImmortalEra",
        MortalEra: "GenericMortalEra",
        // signatures & signer
        AnySignature: "H512",
        MultiSignature: {
            _enum: {
                Ed25519: "Ed25519Signature",
                Sr25519: "Sr25519Signature",
                Ecdsa: "EcdsaSignature"
            }
        },
        Signature: "H512",
        SignerPayload: "GenericSignerPayload",
        EcdsaSignature: "[u8; 65]",
        Ed25519Signature: "H512",
        Sr25519Signature: "H512"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6mmCc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        FungiblesAccessError: {
            _enum: [
                "AssetIdConversionFailed",
                "AmountToBalanceConversionFailed"
            ]
        }
    }
};

},{"./runtime.js":"bUA1D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bUA1D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    FungiblesApi: [
        {
            methods: {
                query_account_balances: {
                    description: "Returns the list of all `MultiAsset` that an `AccountId` has",
                    params: [
                        {
                            name: "account",
                            type: "AccountId"
                        }
                    ],
                    type: "Result<Vec<XcmV3MultiAsset>, FungiblesAccessError>"
                }
            },
            version: 1
        },
        {
            methods: {
                query_account_balances: {
                    description: "Returns the list of all `MultiAsset` that an `AccountId` has",
                    params: [
                        {
                            name: "account",
                            type: "AccountId"
                        }
                    ],
                    type: "Result<XcmVersionedMultiAssets, FungiblesAccessError>"
                }
            },
            version: 2
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"03qFj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        AssetOptions: {
            initalIssuance: "Compact<Balance>",
            permissions: "PermissionLatest"
        },
        Owner: {
            _enum: {
                None: "Null",
                Address: "AccountId"
            }
        },
        PermissionsV1: {
            update: "Owner",
            mint: "Owner",
            burn: "Owner"
        },
        PermissionVersions: {
            _enum: {
                V1: "PermissionsV1"
            }
        },
        PermissionLatest: "PermissionsV1"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cghBp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        ActiveGilt: {
            proportion: "Perquintill",
            amount: "Balance",
            who: "AccountId",
            expiry: "BlockNumber"
        },
        ActiveGiltsTotal: {
            frozen: "Balance",
            proportion: "Perquintill",
            index: "ActiveIndex",
            target: "Perquintill"
        },
        ActiveIndex: "u32",
        GiltBid: {
            amount: "Balance",
            who: "AccountId"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cVXOr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    runtime: (0, _runtimeJs.runtime),
    types: {
        AuthorityIndex: "u64",
        AuthorityList: "Vec<NextAuthority>",
        AuthoritySet: {
            currentAuthorities: "AuthorityList",
            setId: "u64",
            pendingStandardChanges: "ForkTreePendingChange",
            pendingForcedChanges: "Vec<PendingChange>",
            authoritySetChanges: "AuthoritySetChanges"
        },
        ForkTreePendingChange: {
            roots: "Vec<ForkTreePendingChangeNode>",
            bestFinalizedNumber: "Option<BlockNumber>"
        },
        ForkTreePendingChangeNode: {
            hash: "BlockHash",
            number: "BlockNumber",
            data: "PendingChange",
            children: "Vec<ForkTreePendingChangeNode>"
        },
        AuthoritySetChange: "(U64, BlockNumber)",
        AuthoritySetChanges: "Vec<AuthoritySetChange>",
        AuthorityWeight: "u64",
        DelayKind: {
            _enum: {
                Finalized: "Null",
                Best: "DelayKindBest"
            }
        },
        DelayKindBest: {
            medianLastFinalized: "BlockNumber"
        },
        EncodedFinalityProofs: "Bytes",
        GrandpaEquivocation: {
            _enum: {
                Prevote: "GrandpaEquivocationValue",
                Precommit: "GrandpaEquivocationValue"
            }
        },
        GrandpaEquivocationProof: {
            setId: "SetId",
            equivocation: "GrandpaEquivocation"
        },
        GrandpaEquivocationValue: {
            roundNumber: "u64",
            identity: "AuthorityId",
            first: "(GrandpaPrevote, AuthoritySignature)",
            second: "(GrandpaPrevote, AuthoritySignature)"
        },
        GrandpaPrevote: {
            targetHash: "Hash",
            targetNumber: "BlockNumber"
        },
        GrandpaCommit: {
            targetHash: "BlockHash",
            targetNumber: "BlockNumber",
            precommits: "Vec<GrandpaSignedPrecommit>"
        },
        GrandpaPrecommit: {
            targetHash: "BlockHash",
            targetNumber: "BlockNumber"
        },
        GrandpaSignedPrecommit: {
            precommit: "GrandpaPrecommit",
            signature: "AuthoritySignature",
            id: "AuthorityId"
        },
        GrandpaJustification: {
            round: "u64",
            commit: "GrandpaCommit",
            votesAncestries: "Vec<Header>"
        },
        JustificationNotification: "Bytes",
        KeyOwnerProof: "MembershipProof",
        NextAuthority: "(AuthorityId, AuthorityWeight)",
        PendingChange: {
            nextAuthorities: "AuthorityList",
            delay: "BlockNumber",
            canonHeight: "BlockNumber",
            canonHash: "BlockHash",
            delayKind: "DelayKind"
        },
        PendingPause: {
            scheduledAt: "BlockNumber",
            delay: "BlockNumber"
        },
        PendingResume: {
            scheduledAt: "BlockNumber",
            delay: "BlockNumber"
        },
        Precommits: {
            currentWeight: "u32",
            missing: "BTreeSet<AuthorityId>"
        },
        Prevotes: {
            currentWeight: "u32",
            missing: "BTreeSet<AuthorityId>"
        },
        ReportedRoundStates: {
            setId: "u32",
            best: "RoundState",
            background: "Vec<RoundState>"
        },
        RoundState: {
            round: "u32",
            totalWeight: "u32",
            thresholdWeight: "u32",
            prevotes: "Prevotes",
            precommits: "Precommits"
        },
        SetId: "u64",
        StoredPendingChange: {
            scheduledAt: "BlockNumber",
            delay: "BlockNumber",
            nextAuthorities: "AuthorityList"
        },
        StoredState: {
            _enum: {
                Live: "Null",
                PendingPause: "PendingPause",
                Paused: "Null",
                PendingResume: "PendingResume"
            }
        }
    }
};

},{"./rpc.js":"4E0am","./runtime.js":"474kj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4E0am":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    proveFinality: {
        description: "Prove finality for the given block number, returning the Justification for the last block in the set.",
        params: [
            {
                name: "blockNumber",
                type: "BlockNumber"
            }
        ],
        type: "Option<EncodedFinalityProofs>"
    },
    roundState: {
        description: "Returns the state of the current best round state as well as the ongoing background rounds",
        params: [],
        type: "ReportedRoundStates"
    },
    subscribeJustifications: {
        description: "Subscribes to grandpa justifications",
        params: [],
        pubsub: [
            "justifications",
            "subscribeJustifications",
            "unsubscribeJustifications"
        ],
        type: "JustificationNotification"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"474kj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const GRANDPA_V2_V3 = {
    generate_key_ownership_proof: {
        description: "Generates a proof of key ownership for the given authority in the given set.",
        params: [
            {
                name: "setId",
                type: "SetId"
            },
            {
                name: "authorityId",
                type: "AuthorityId"
            }
        ],
        type: "Option<OpaqueKeyOwnershipProof>"
    },
    grandpa_authorities: {
        description: "Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.",
        params: [],
        type: "AuthorityList"
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: "Submits an unsigned extrinsic to report an equivocation.",
        params: [
            {
                name: "equivocationProof",
                type: "GrandpaEquivocationProof"
            },
            {
                name: "keyOwnerProof",
                type: "OpaqueKeyOwnershipProof"
            }
        ],
        type: "Option<Null>"
    }
};
const runtime = {
    GrandpaApi: [
        {
            methods: {
                current_set_id: {
                    description: "Get current GRANDPA authority set id.",
                    params: [],
                    type: "SetId"
                },
                ...GRANDPA_V2_V3
            },
            version: 3
        },
        {
            methods: GRANDPA_V2_V3,
            version: 2
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1WVt1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        IdentityFields: {
            _set: {
                _bitLength: 64,
                // Mapped here to 32 bits, in Rust these are 64-bit values
                Display: 1,
                Legal: 2,
                Web: 4,
                Riot: 8,
                Email: 16,
                PgpFingerprint: 32,
                Image: 64,
                Twitter: 128
            }
        },
        IdentityInfoAdditional: "(Data, Data)",
        IdentityInfoTo198: {
            additional: "Vec<IdentityInfoAdditional>",
            display: "Data",
            legal: "Data",
            web: "Data",
            riot: "Data",
            email: "Data",
            pgpFingerprint: "Option<H160>",
            image: "Data"
        },
        IdentityInfo: {
            _fallback: "IdentityInfoTo198",
            additional: "Vec<IdentityInfoAdditional>",
            display: "Data",
            legal: "Data",
            web: "Data",
            riot: "Data",
            email: "Data",
            pgpFingerprint: "Option<H160>",
            image: "Data",
            twitter: "Data"
        },
        IdentityJudgement: {
            _enum: {
                Unknown: "Null",
                FeePaid: "Balance",
                Reasonable: "Null",
                KnownGood: "Null",
                OutOfDate: "Null",
                LowQuality: "Null",
                Erroneous: "Null"
            }
        },
        RegistrationJudgement: "(RegistrarIndex, IdentityJudgement)",
        RegistrationTo198: {
            judgements: "Vec<RegistrationJudgement>",
            deposit: "Balance",
            info: "IdentityInfoTo198"
        },
        Registration: {
            _fallback: "RegistrationTo198",
            judgements: "Vec<RegistrationJudgement>",
            deposit: "Balance",
            info: "IdentityInfo"
        },
        RegistrarIndex: "u32",
        RegistrarInfo: {
            account: "AccountId",
            fee: "Balance",
            fields: "IdentityFields"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i0Bt2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        AuthIndex: "u32",
        AuthoritySignature: "Signature",
        Heartbeat: {
            blockNumber: "BlockNumber",
            networkState: "OpaqueNetworkState",
            sessionIndex: "SessionIndex",
            authorityIndex: "AuthIndex",
            validatorsLen: "u32"
        },
        HeartbeatTo244: {
            blockNumber: "BlockNumber",
            networkState: "OpaqueNetworkState",
            sessionIndex: "SessionIndex",
            authorityIndex: "AuthIndex"
        },
        OpaqueMultiaddr: "Opaque<Bytes>",
        OpaquePeerId: "Opaque<Bytes>",
        OpaqueNetworkState: {
            peerId: "OpaquePeerId",
            externalAddresses: "Vec<OpaqueMultiaddr>"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"acY4d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        CallIndex: "(u8, u8)",
        LotteryConfig: {
            price: "Balance",
            start: "BlockNumber",
            length: "BlockNumber",
            delay: "BlockNumber",
            repeat: "bool"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gutES":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    runtime: (0, _runtimeJs.runtime),
    types: {
        MmrBatchProof: {
            leafIndices: "Vec<MmrLeafIndex>",
            leafCount: "MmrNodeIndex",
            items: "Vec<Hash>"
        },
        MmrEncodableOpaqueLeaf: "Bytes",
        MmrError: {
            _enum: [
                "Push",
                "GetRoot",
                "Commit",
                "GenerateProof",
                "Verify",
                "LeafNotFound",
                " PalletNotIncluded",
                "InvalidLeafIndex"
            ]
        },
        MmrHash: "Hash",
        MmrLeafBatchProof: {
            blockHash: "BlockHash",
            leaves: "Bytes",
            proof: "Bytes"
        },
        MmrLeafIndex: "u64",
        MmrLeafProof: {
            blockHash: "BlockHash",
            leaf: "Bytes",
            proof: "Bytes"
        },
        MmrNodeIndex: "u64",
        MmrProof: {
            leafIndex: "MmrLeafIndex",
            leafCount: "MmrNodeIndex",
            items: "Vec<Hash>"
        }
    }
};

},{"./rpc.js":"1FDZJ","./runtime.js":"4bUy3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1FDZJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    generateProof: {
        description: "Generate MMR proof for the given block numbers.",
        params: [
            {
                name: "blockNumbers",
                type: "Vec<u64>"
            },
            {
                isOptional: true,
                name: "bestKnownBlockNumber",
                type: "u64"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "MmrLeafBatchProof"
    },
    root: {
        description: "Get the MMR root hash for the current best block.",
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "MmrHash"
    },
    verifyProof: {
        description: "Verify an MMR proof",
        params: [
            {
                name: "proof",
                type: "MmrLeafBatchProof"
            }
        ],
        type: "bool"
    },
    verifyProofStateless: {
        description: "Verify an MMR proof statelessly given an mmr_root",
        params: [
            {
                name: "root",
                type: "MmrHash"
            },
            {
                name: "proof",
                type: "MmrLeafBatchProof"
            }
        ],
        type: "bool"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4bUy3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const MMR_V2 = {
    generate_proof: {
        description: "Generate MMR proof for the given block numbers.",
        params: [
            {
                name: "blockNumbers",
                type: "Vec<BlockNumber>"
            },
            {
                name: "bestKnownBlockNumber",
                type: "Option<BlockNumber>"
            }
        ],
        type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
    },
    root: {
        description: "Return the on-chain MMR root hash.",
        params: [],
        type: "Result<Hash, MmrError>"
    },
    verify_proof: {
        description: "Verify MMR proof against on-chain MMR.",
        params: [
            {
                name: "leaves",
                type: "Vec<MmrEncodableOpaqueLeaf>"
            },
            {
                name: "proof",
                type: "MmrBatchProof"
            }
        ],
        type: "Result<(), MmrError>"
    },
    verify_proof_stateless: {
        description: "Verify MMR proof against given root hash.",
        params: [
            {
                name: "root",
                type: "Hash"
            },
            {
                name: "leaves",
                type: "Vec<MmrEncodableOpaqueLeaf>"
            },
            {
                name: "proof",
                type: "MmrBatchProof"
            }
        ],
        type: "Result<(), MmrError>"
    }
};
const MMR_V1 = {
    generate_batch_proof: {
        description: "Generate MMR proof for a series of leaves under given indices.",
        params: [
            {
                name: "leafIndices",
                type: "Vec<MmrLeafIndex>"
            }
        ],
        type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
    },
    generate_proof: {
        description: "Generate MMR proof for a leaf under given index.",
        params: [
            {
                name: "leafIndex",
                type: "MmrLeafIndex"
            }
        ],
        type: "Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>"
    },
    mmr_root: {
        description: "Return the on-chain MMR root hash.",
        params: [],
        type: "Result<Hash, MmrError>"
    },
    verify_batch_proof: {
        description: "Verify MMR proof against on-chain MMR for a batch of leaves.",
        params: [
            {
                name: "leaves",
                type: "Vec<MmrEncodableOpaqueLeaf>"
            },
            {
                name: "proof",
                type: "MmrBatchProof"
            }
        ],
        type: "Result<(), MmrError>"
    },
    verify_batch_proof_stateless: {
        description: "Verify MMR proof against given root hash or a batch of leaves.",
        params: [
            {
                name: "root",
                type: "Hash"
            },
            {
                name: "leaves",
                type: "Vec<MmrEncodableOpaqueLeaf>"
            },
            {
                name: "proof",
                type: "MmrBatchProof"
            }
        ],
        type: "Result<(), MmrError>"
    },
    verify_proof: {
        description: "Verify MMR proof against on-chain MMR.",
        params: [
            {
                name: "leaf",
                type: "MmrEncodableOpaqueLeaf"
            },
            {
                name: "proof",
                type: "MmrProof"
            }
        ],
        type: "Result<(), MmrError>"
    },
    verify_proof_stateless: {
        description: "Verify MMR proof against given root hash.",
        params: [
            {
                name: "root",
                type: "Hash"
            },
            {
                name: "leaf",
                type: "MmrEncodableOpaqueLeaf"
            },
            {
                name: "proof",
                type: "MmrProof"
            }
        ],
        type: "Result<(), MmrError>"
    }
};
const runtime = {
    MmrApi: [
        {
            methods: MMR_V2,
            version: 2
        },
        {
            methods: MMR_V1,
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6cHeU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        NftCollectionId: "u32",
        NftItemId: "u32"
    }
};

},{"./runtime.js":"cTJFO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cTJFO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    NftsApi: [
        {
            methods: {
                attribute: {
                    description: "An attribute",
                    params: [
                        {
                            name: "collection",
                            type: "NftCollectionId"
                        },
                        {
                            name: "item",
                            type: "NftItemId"
                        },
                        {
                            name: "key",
                            type: "Bytes"
                        }
                    ],
                    type: "Option<Bytes>"
                },
                collection_attribute: {
                    description: "A collection attribute",
                    params: [
                        {
                            name: "collection",
                            type: "NftCollectionId"
                        },
                        {
                            name: "key",
                            type: "Bytes"
                        }
                    ],
                    type: "Option<Bytes>"
                },
                collection_owner: {
                    description: "A collection owner",
                    params: [
                        {
                            name: "collection",
                            type: "NftCollectionId"
                        }
                    ],
                    type: "Option<AccountId>"
                },
                custom_attribute: {
                    description: "A custom attribute",
                    params: [
                        {
                            name: "account",
                            type: "AccountId"
                        },
                        {
                            name: "collection",
                            type: "NftCollectionId"
                        },
                        {
                            name: "item",
                            type: "NftItemId"
                        },
                        {
                            name: "key",
                            type: "Bytes"
                        }
                    ],
                    type: "Option<Bytes>"
                },
                owner: {
                    description: "Collection owner",
                    params: [
                        {
                            name: "collection",
                            type: "NftCollectionId"
                        },
                        {
                            name: "item",
                            type: "NftItemId"
                        }
                    ],
                    type: "Option<AccountId>"
                },
                system_attribute: {
                    description: "System attribute",
                    params: [
                        {
                            name: "collection",
                            type: "NftCollectionId"
                        },
                        {
                            name: "item",
                            type: "NftItemId"
                        },
                        {
                            name: "key",
                            type: "Bytes"
                        }
                    ],
                    type: "Option<Bytes>"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8BZbl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        NpApiError: {
            _enum: [
                "MemberNotFound",
                "OverflowInPendingRewards"
            ]
        },
        NpPoolId: "u32"
    }
};

},{"./runtime.js":"iARNC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iARNC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    NominationPoolsApi: [
        {
            methods: {
                balance_to_points: {
                    description: "Returns the equivalent points of `new_funds` for a given pool.",
                    params: [
                        {
                            name: "poolId",
                            type: "NpPoolId"
                        },
                        {
                            name: "newFunds",
                            type: "Balance"
                        }
                    ],
                    type: "Balance"
                },
                pending_rewards: {
                    description: "Returns the pending rewards for the given member.",
                    params: [
                        {
                            name: "member",
                            type: "AccountId"
                        }
                    ],
                    type: "Balance"
                },
                points_to_balance: {
                    description: "Returns the equivalent balance of `points` for a given pool.",
                    params: [
                        {
                            name: "poolId",
                            type: "NpPoolId"
                        },
                        {
                            name: "points",
                            type: "Balance"
                        }
                    ],
                    type: "Balance"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hmPgW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        DeferredOffenceOf: "(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)",
        Kind: "[u8; 16]",
        OffenceDetails: {
            offender: "Offender",
            reporters: "Vec<Reporter>"
        },
        Offender: "IdentificationTuple",
        OpaqueTimeSlot: "Bytes",
        ReportIdOf: "Hash",
        Reporter: "AccountId"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jrFKv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {}
};

},{"./runtime.js":"jATWx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jATWx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    DifficultyApi: [
        {
            methods: {
                difficulty: {
                    description: "Return the target difficulty of the next block.",
                    params: [],
                    // This is Difficulty in the original, however this is chain-specific
                    type: "Raw"
                }
            },
            version: 1
        }
    ],
    TimestampApi: [
        {
            methods: {
                timestamp: {
                    description: "API necessary for timestamp-based difficulty adjustment algorithms.",
                    params: [],
                    type: "Moment"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fKFwr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        ProxyDefinition: {
            delegate: "AccountId",
            proxyType: "ProxyType",
            delay: "BlockNumber"
        },
        ProxyType: {
            _enum: [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking"
            ]
        },
        ProxyAnnouncement: {
            real: "AccountId",
            callHash: "Hash",
            height: "BlockNumber"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gtDUv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        ActiveRecovery: {
            created: "BlockNumber",
            deposit: "Balance",
            friends: "Vec<AccountId>"
        },
        RecoveryConfig: {
            delayPeriod: "BlockNumber",
            deposit: "Balance",
            friends: "Vec<AccountId>",
            threshold: "u16"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dT5Rh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        Period: "(BlockNumber, u32)",
        Priority: "u8",
        SchedulePeriod: "Period",
        SchedulePriority: "Priority",
        Scheduled: {
            maybeId: "Option<Bytes>",
            priority: "SchedulePriority",
            call: "Call",
            maybePeriodic: "Option<SchedulePeriod>",
            origin: "PalletsOrigin"
        },
        ScheduledTo254: {
            maybeId: "Option<Bytes>",
            priority: "SchedulePriority",
            call: "Call",
            maybePeriodic: "Option<SchedulePeriod>"
        },
        TaskAddress: "(BlockNumber, u32)"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dWl4R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
const keyTypes = {
    // key for beefy
    BeefyKey: "[u8; 33]",
    // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
    Keys: "SessionKeys4",
    SessionKeys1: "(AccountId)",
    SessionKeys2: "(AccountId, AccountId)",
    SessionKeys3: "(AccountId, AccountId, AccountId)",
    SessionKeys4: "(AccountId, AccountId, AccountId, AccountId)",
    SessionKeys5: "(AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys6: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys6B: "(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys7: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys7B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys8: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys8B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys9: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys9B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys10: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys10B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)"
};
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        ...keyTypes,
        FullIdentification: "Exposure",
        IdentificationTuple: "(ValidatorId, FullIdentification)",
        MembershipProof: {
            session: "SessionIndex",
            trieNodes: "Vec<Bytes>",
            validatorCount: "ValidatorCount"
        },
        SessionIndex: "u32",
        ValidatorCount: "u32"
    }
};

},{"./runtime.js":"90WzH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"90WzH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    SessionKeys: [
        {
            methods: {
                decode_session_keys: {
                    description: "Decode the given public session keys.",
                    params: [
                        {
                            name: "encoded",
                            type: "Bytes"
                        }
                    ],
                    type: "Option<Vec<(Bytes, KeyTypeId)>>"
                },
                generate_session_keys: {
                    description: "Generate a set of session keys with optionally using the given seed.",
                    params: [
                        {
                            name: "seed",
                            type: "Option<Bytes>"
                        }
                    ],
                    type: "Bytes"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7KBk2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        Bid: {
            who: "AccountId",
            kind: "BidKind",
            value: "Balance"
        },
        BidKind: {
            _enum: {
                Deposit: "Balance",
                Vouch: "(AccountId, Balance)"
            }
        },
        // a society-specific Judgement (not the same as identity Judgement)
        SocietyJudgement: {
            _enum: [
                "Rebid",
                "Reject",
                "Approve"
            ]
        },
        // a society-specific Vote
        SocietyVote: {
            _enum: [
                "Skeptic",
                "Reject",
                "Approve"
            ]
        },
        StrikeCount: "u32",
        VouchingStatus: {
            _enum: [
                "Vouching",
                "Banned"
            ]
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HHiX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
const deprecated = {
    Points: "u32",
    EraPoints: {
        total: "Points",
        individual: "Vec<Points>"
    }
};
const phragmen = {
    CompactAssignments: "CompactAssignmentsWith16",
    CompactAssignmentsWith16: {
        votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
        votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
        votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
        votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
        votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
        votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
        votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
        votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
        votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
        votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
        votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
        votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
        votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
        votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
        votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
        votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
    },
    CompactAssignmentsWith24: {
        votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
        votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
        votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
        votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
        votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
        votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
        votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
        votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
        votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
        votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
        votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
        votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
        votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
        votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
        votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
        votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>",
        votes17: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>",
        votes18: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>",
        votes19: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>",
        votes20: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>",
        votes21: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>",
        votes22: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>",
        votes23: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>",
        votes24: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"
    },
    CompactAssignmentsTo265: "CompactAssignmentsWith16",
    CompactAssignmentsTo257: {
        votes1: "Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>",
        votes2: "Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>",
        votes3: "Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>",
        votes4: "Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>",
        votes5: "Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>",
        votes6: "Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>",
        votes7: "Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>",
        votes8: "Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>",
        votes9: "Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>",
        votes10: "Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>",
        votes11: "Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>",
        votes12: "Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>",
        votes13: "Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>",
        votes14: "Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>",
        votes15: "Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>",
        votes16: "Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>"
    },
    CompactScore: "(ValidatorIndex, OffchainAccuracy)",
    CompactScoreCompact: "(ValidatorIndexCompact, OffchainAccuracyCompact)",
    ElectionCompute: {
        // in previous versions the last entry was "AuthorityId"
        // (since no data attached, and it is via SCALE can rename)
        _enum: [
            "OnChain",
            "Signed",
            "Unsigned"
        ]
    },
    ElectionPhase: {
        _enum: {
            Off: null,
            Signed: null,
            Unsigned: "(bool, BlockNumber)",
            Emergency: null
        }
    },
    ElectionResult: {
        compute: "ElectionCompute",
        slotStake: "Balance",
        electedStashes: "Vec<AccountId>",
        exposures: "Vec<(AccountId, Exposure)>"
    },
    ElectionScore: "[u128; 3]",
    ElectionSize: {
        validators: "Compact<ValidatorIndex>",
        nominators: "Compact<NominatorIndex>"
    },
    ElectionStatus: {
        _enum: {
            Close: "Null",
            Open: "BlockNumber"
        }
    },
    ExtendedBalance: "u128",
    RawSolution: "RawSolutionWith16",
    RawSolutionWith16: {
        compact: "CompactAssignmentsWith16",
        score: "ElectionScore",
        round: "u32"
    },
    RawSolutionWith24: {
        compact: "CompactAssignmentsWith24",
        score: "ElectionScore",
        round: "u32"
    },
    RawSolutionTo265: "RawSolutionWith16",
    ReadySolution: {
        supports: "SolutionSupports",
        score: "ElectionScore",
        compute: "ElectionCompute"
    },
    RoundSnapshot: {
        voters: "Vec<(AccountId, VoteWeight, Vec<AccountId>)>",
        targets: "Vec<AccountId>"
    },
    SeatHolder: {
        who: "AccountId",
        stake: "Balance",
        deposit: "Balance"
    },
    SignedSubmission: {
        _fallback: "SignedSubmissionTo276",
        who: "AccountId",
        deposit: "Balance",
        solution: "RawSolution",
        reward: "Balance"
    },
    SignedSubmissionTo276: {
        who: "AccountId",
        deposit: "Balance",
        solution: "RawSolution"
    },
    SignedSubmissionOf: "SignedSubmission",
    SolutionOrSnapshotSize: {
        voters: "Compact<u32>",
        targets: "Compact<u32>"
    },
    SolutionSupport: {
        total: "ExtendedBalance",
        voters: "Vec<(AccountId, ExtendedBalance)>"
    },
    SolutionSupports: "Vec<(AccountId, SolutionSupport)>",
    Supports: "SolutionSupports",
    SubmissionIndicesOf: "BTreeMap<ElectionScore, u32>",
    Voter: {
        votes: "Vec<AccountId>",
        stake: "Balance",
        deposit: "Balance"
    },
    VoteWeight: "u64"
};
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        ...deprecated,
        ...phragmen,
        ActiveEraInfo: {
            index: "EraIndex",
            start: "Option<Moment>"
        },
        EraIndex: "u32",
        EraRewardPoints: {
            total: "RewardPoint",
            individual: "BTreeMap<AccountId, RewardPoint>"
        },
        EraRewards: {
            total: "u32",
            rewards: "Vec<u32>"
        },
        Exposure: {
            total: "Compact<Balance>",
            own: "Compact<Balance>",
            others: "Vec<IndividualExposure>"
        },
        Forcing: {
            _enum: [
                "NotForcing",
                "ForceNew",
                "ForceNone",
                "ForceAlways"
            ]
        },
        IndividualExposure: {
            who: "AccountId",
            value: "Compact<Balance>"
        },
        KeyType: "AccountId",
        MomentOf: "Moment",
        Nominations: {
            targets: "Vec<AccountId>",
            submittedIn: "EraIndex",
            suppressed: "bool"
        },
        NominatorIndex: "u32",
        NominatorIndexCompact: "Compact<NominatorIndex>",
        OffchainAccuracy: "PerU16",
        OffchainAccuracyCompact: "Compact<OffchainAccuracy>",
        PhragmenScore: "[u128; 3]",
        Points: "u32",
        RewardDestination: {
            _enum: {
                Staked: "Null",
                Stash: "Null",
                Controller: "Null",
                Account: "AccountId",
                None: "Null"
            }
        },
        RewardPoint: "u32",
        SlashJournalEntry: {
            who: "AccountId",
            amount: "Balance",
            ownSlash: "Balance"
        },
        SlashingSpansTo204: {
            spanIndex: "SpanIndex",
            lastStart: "EraIndex",
            prior: "Vec<EraIndex>"
        },
        SlashingSpans: {
            spanIndex: "SpanIndex",
            lastStart: "EraIndex",
            lastNonzeroSlash: "EraIndex",
            prior: "Vec<EraIndex>"
        },
        SpanIndex: "u32",
        SpanRecord: {
            slashed: "Balance",
            paidOut: "Balance"
        },
        StakingLedgerTo223: {
            stash: "AccountId",
            total: "Compact<Balance>",
            active: "Compact<Balance>",
            unlocking: "Vec<UnlockChunk>"
        },
        StakingLedgerTo240: {
            _fallback: "StakingLedgerTo223",
            stash: "AccountId",
            total: "Compact<Balance>",
            active: "Compact<Balance>",
            unlocking: "Vec<UnlockChunk>",
            lastReward: "Option<EraIndex>"
        },
        StakingLedger: {
            stash: "AccountId",
            total: "Compact<Balance>",
            active: "Compact<Balance>",
            unlocking: "Vec<UnlockChunk>",
            claimedRewards: "Vec<EraIndex>"
        },
        UnappliedSlashOther: "(AccountId, Balance)",
        UnappliedSlash: {
            validator: "AccountId",
            own: "Balance",
            others: "Vec<UnappliedSlashOther>",
            reporters: "Vec<AccountId>",
            payout: "Balance"
        },
        UnlockChunk: {
            value: "Compact<Balance>",
            era: "Compact<BlockNumber>"
        },
        ValidatorIndex: "u16",
        ValidatorIndexCompact: "Compact<ValidatorIndex>",
        ValidatorPrefs: "ValidatorPrefsWithBlocked",
        ValidatorPrefsWithCommission: {
            commission: "Compact<Perbill>"
        },
        ValidatorPrefsWithBlocked: {
            commission: "Compact<Perbill>",
            blocked: "bool"
        },
        ValidatorPrefsTo196: {
            validatorPayment: "Compact<Balance>"
        },
        ValidatorPrefsTo145: {
            unstakeThreshold: "Compact<u32>",
            validatorPayment: "Compact<Balance>"
        }
    }
};

},{"./runtime.js":"eHgAt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eHgAt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    StakingApi: [
        {
            methods: {
                nominations_quota: {
                    description: "Returns the nominations quota for a nominator with a given balance.",
                    params: [
                        {
                            name: "balance",
                            type: "Balance"
                        }
                    ],
                    type: "u32"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lyZLt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        WeightToFeeCoefficient: {
            coeffInteger: "Balance",
            coeffFrac: "Perbill",
            negative: "bool",
            degree: "u8"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"PEQ39":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    types: {}
};

},{"./rpc.js":"cGB7P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cGB7P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    genSyncSpec: {
        description: "Returns the json-serialized chainspec running the node, with a sync state.",
        endpoint: "sync_state_genSyncSpec",
        params: [
            {
                name: "raw",
                type: "bool"
            }
        ],
        type: "Json"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l4H65":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    runtime: (0, _runtimeJs.runtime),
    types: {
        AccountInfo: "AccountInfoWithTripleRefCount",
        AccountInfoWithRefCountU8: {
            nonce: "Index",
            refcount: "u8",
            data: "AccountData"
        },
        AccountInfoWithRefCount: {
            _fallback: "AccountInfoWithRefCountU8",
            nonce: "Index",
            refcount: "RefCount",
            data: "AccountData"
        },
        AccountInfoWithDualRefCount: {
            _fallback: "AccountInfoWithRefCount",
            nonce: "Index",
            consumers: "RefCount",
            providers: "RefCount",
            data: "AccountData"
        },
        // original naming
        AccountInfoWithProviders: "AccountInfoWithDualRefCount",
        AccountInfoWithTripleRefCount: {
            _fallback: "AccountInfoWithDualRefCount",
            nonce: "Index",
            consumers: "RefCount",
            providers: "RefCount",
            sufficients: "RefCount",
            data: "AccountData"
        },
        ApplyExtrinsicResult: "Result<DispatchOutcome, TransactionValidityError>",
        ApplyExtrinsicResultPre6: "Result<DispatchOutcomePre6, TransactionValidityError>",
        ArithmeticError: {
            _enum: [
                "Underflow",
                "Overflow",
                "DivisionByZero"
            ]
        },
        BlockLength: {
            max: "PerDispatchClassU32"
        },
        BlockWeights: {
            baseBlock: "Weight",
            maxBlock: "Weight",
            perClass: "PerDispatchClassWeightsPerClass"
        },
        ChainProperties: "GenericChainProperties",
        ChainType: {
            _enum: {
                Development: "Null",
                Local: "Null",
                Live: "Null",
                Custom: "Text"
            }
        },
        ConsumedWeight: "PerDispatchClassWeight",
        DigestOf: "Digest",
        DispatchClass: {
            _enum: [
                "Normal",
                "Operational",
                "Mandatory"
            ]
        },
        DispatchError: {
            _enum: {
                Other: "Null",
                CannotLookup: "Null",
                BadOrigin: "Null",
                Module: "DispatchErrorModule",
                ConsumerRemaining: "Null",
                NoProviders: "Null",
                TooManyConsumers: "Null",
                Token: "TokenError",
                Arithmetic: "ArithmeticError",
                Transactional: "TransactionalError",
                Exhausted: "Null",
                Corruption: "Null",
                Unavailable: "Null"
            }
        },
        DispatchErrorPre6: {
            _enum: {
                Other: "Null",
                CannotLookup: "Null",
                BadOrigin: "Null",
                Module: "DispatchErrorModulePre6",
                ConsumerRemaining: "Null",
                NoProviders: "Null",
                TooManyConsumers: "Null",
                Token: "TokenError",
                Arithmetic: "ArithmeticError",
                Transactional: "TransactionalError"
            }
        },
        DispatchErrorPre6First: {
            // The enum was modified mid-flight, affecting asset chains -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            _enum: {
                Other: "Null",
                CannotLookup: "Null",
                BadOrigin: "Null",
                Module: "DispatchErrorModulePre6",
                ConsumerRemaining: "Null",
                NoProviders: "Null",
                Token: "TokenError",
                Arithmetic: "ArithmeticError",
                Transactional: "TransactionalError"
            }
        },
        DispatchErrorModuleU8: {
            index: "u8",
            error: "u8"
        },
        DispatchErrorModuleU8a: {
            index: "u8",
            error: "[u8; 4]"
        },
        DispatchErrorModule: "DispatchErrorModuleU8a",
        DispatchErrorModulePre6: "DispatchErrorModuleU8",
        DispatchErrorTo198: {
            module: "Option<u8>",
            error: "u8"
        },
        DispatchInfo: {
            weight: "Weight",
            class: "DispatchClass",
            paysFee: "Pays"
        },
        DispatchInfoTo190: {
            weight: "Weight",
            class: "DispatchClass"
        },
        DispatchInfoTo244: {
            weight: "Weight",
            class: "DispatchClass",
            paysFee: "bool"
        },
        DispatchOutcome: "Result<(), DispatchError>",
        DispatchOutcomePre6: "Result<(), DispatchErrorPre6>",
        DispatchResult: "Result<(), DispatchError>",
        DispatchResultOf: "DispatchResult",
        DispatchResultTo198: "Result<(), Text>",
        Event: "GenericEvent",
        EventId: "[u8; 2]",
        EventIndex: "u32",
        EventRecord: {
            phase: "Phase",
            event: "Event",
            topics: "Vec<Hash>"
        },
        Health: {
            peers: "u64",
            isSyncing: "bool",
            shouldHavePeers: "bool"
        },
        InvalidTransaction: {
            _enum: {
                Call: "Null",
                Payment: "Null",
                Future: "Null",
                Stale: "Null",
                BadProof: "Null",
                AncientBirthBlock: "Null",
                ExhaustsResources: "Null",
                Custom: "u8",
                BadMandatory: "Null",
                MandatoryDispatch: "Null",
                BadSigner: "Null"
            }
        },
        Key: "Bytes",
        LastRuntimeUpgradeInfo: {
            specVersion: "Compact<u32>",
            specName: "Text"
        },
        NetworkState: {
            peerId: "Text",
            listenedAddresses: "Vec<Text>",
            externalAddresses: "Vec<Text>",
            connectedPeers: "HashMap<Text, Peer>",
            notConnectedPeers: "HashMap<Text, NotConnectedPeer>",
            averageDownloadPerSec: "u64",
            averageUploadPerSec: "u64",
            peerset: "NetworkStatePeerset"
        },
        NetworkStatePeerset: {
            messageQueue: "u64",
            nodes: "HashMap<Text, NetworkStatePeersetInfo>"
        },
        NetworkStatePeersetInfo: {
            connected: "bool",
            reputation: "i32"
        },
        NodeRole: {
            _enum: {
                Full: "Null",
                LightClient: "Null",
                Authority: "Null",
                UnknownRole: "u8"
            }
        },
        NotConnectedPeer: {
            knownAddresses: "Vec<Text>",
            latestPingTime: "Option<PeerPing>",
            versionString: "Option<Text>"
        },
        Peer: {
            enabled: "bool",
            endpoint: "PeerEndpoint",
            knownAddresses: "Vec<Text>",
            latestPingTime: "PeerPing",
            open: "bool",
            versionString: "Text"
        },
        PeerEndpoint: {
            listening: "PeerEndpointAddr"
        },
        PeerEndpointAddr: {
            _alias: {
                localAddr: "local_addr",
                sendBackAddr: "send_back_addr"
            },
            localAddr: "Text",
            sendBackAddr: "Text"
        },
        PeerPing: {
            nanos: "u64",
            secs: "u64"
        },
        PeerInfo: {
            peerId: "Text",
            roles: "Text",
            protocolVersion: "u32",
            bestHash: "Hash",
            bestNumber: "BlockNumber"
        },
        PerDispatchClassU32: {
            normal: "u32",
            operational: "u32",
            mandatory: "u32"
        },
        PerDispatchClassWeight: {
            normal: "Weight",
            operational: "Weight",
            mandatory: "Weight"
        },
        PerDispatchClassWeightsPerClass: {
            normal: "WeightPerClass",
            operational: "WeightPerClass",
            mandatory: "WeightPerClass"
        },
        Phase: {
            _enum: {
                ApplyExtrinsic: "u32",
                Finalization: "Null",
                Initialization: "Null"
            }
        },
        RawOrigin: {
            _enum: {
                Root: "Null",
                Signed: "AccountId",
                None: "Null"
            }
        },
        RefCount: "u32",
        RefCountTo259: "u8",
        SyncState: {
            startingBlock: "BlockNumber",
            currentBlock: "BlockNumber",
            highestBlock: "Option<BlockNumber>"
        },
        SystemOrigin: "RawOrigin",
        TokenError: {
            _enum: [
                "NoFunds",
                "WouldDie",
                "BelowMinimum",
                "CannotCreate",
                "UnknownAsset",
                "Frozen",
                "Unsupported",
                // these are dropped, but still in older versions
                // (if this adjusts, will need to take a re-look)
                "Underflow",
                "Overflow"
            ]
        },
        TransactionValidityError: {
            _enum: {
                Invalid: "InvalidTransaction",
                Unknown: "UnknownTransaction"
            }
        },
        TransactionalError: {
            _enum: [
                "LimitReached",
                "NoLayer"
            ]
        },
        UnknownTransaction: {
            _enum: {
                CannotLookup: "Null",
                NoUnsignedValidator: "Null",
                Custom: "u8"
            }
        },
        WeightPerClass: {
            baseExtrinsic: "Weight",
            maxExtrinsic: "Option<Weight>",
            maxTotal: "Option<Weight>",
            reserved: "Option<Weight>"
        }
    }
};

},{"./rpc.js":"gyb28","./runtime.js":"1FVI1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gyb28":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    accountNextIndex: {
        alias: [
            "account_nextIndex"
        ],
        description: "Retrieves the next accountIndex as available on the node",
        params: [
            {
                name: "accountId",
                type: "AccountId"
            }
        ],
        type: "Index"
    },
    addLogFilter: {
        description: "Adds the supplied directives to the current log filter",
        isUnsafe: true,
        params: [
            {
                name: "directives",
                type: "Text"
            }
        ],
        type: "Null"
    },
    addReservedPeer: {
        description: "Adds a reserved peer",
        isUnsafe: true,
        params: [
            {
                name: "peer",
                type: "Text"
            }
        ],
        type: "Text"
    },
    chain: {
        description: "Retrieves the chain",
        params: [],
        type: "Text"
    },
    chainType: {
        description: "Retrieves the chain type",
        params: [],
        type: "ChainType"
    },
    dryRun: {
        alias: [
            "system_dryRunAt"
        ],
        description: "Dry run an extrinsic at a given block",
        isUnsafe: true,
        params: [
            {
                name: "extrinsic",
                type: "Bytes"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "ApplyExtrinsicResult"
    },
    health: {
        description: "Return health status of the node",
        noErrorLog: true,
        params: [],
        type: "Health"
    },
    localListenAddresses: {
        description: "The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example",
        params: [],
        type: "Vec<Text>"
    },
    localPeerId: {
        description: "Returns the base58-encoded PeerId of the node",
        params: [],
        type: "Text"
    },
    name: {
        description: "Retrieves the node name",
        params: [],
        type: "Text"
    },
    networkState: {
        alias: [
            "system_unstable_networkState"
        ],
        description: "Returns current state of the network",
        isUnsafe: true,
        params: [],
        type: "NetworkState"
    },
    nodeRoles: {
        description: "Returns the roles the node is running as",
        params: [],
        type: "Vec<NodeRole>"
    },
    peers: {
        description: "Returns the currently connected peers",
        isUnsafe: true,
        params: [],
        type: "Vec<PeerInfo>"
    },
    properties: {
        description: "Get a custom set of properties as a JSON object, defined in the chain spec",
        params: [],
        type: "ChainProperties"
    },
    removeReservedPeer: {
        description: "Remove a reserved peer",
        isUnsafe: true,
        params: [
            {
                name: "peerId",
                type: "Text"
            }
        ],
        type: "Text"
    },
    reservedPeers: {
        description: "Returns the list of reserved peers",
        params: [],
        type: "Vec<Text>"
    },
    resetLogFilter: {
        description: "Resets the log filter to Substrate defaults",
        isUnsafe: true,
        params: [],
        type: "Null"
    },
    syncState: {
        description: "Returns the state of the syncing of the node",
        params: [],
        type: "SyncState"
    },
    version: {
        description: "Retrieves the version of the node",
        params: [],
        type: "Text"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1FVI1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    AccountNonceApi: [
        {
            methods: {
                account_nonce: {
                    description: "The API to query account nonce (aka transaction index)",
                    params: [
                        {
                            name: "accountId",
                            type: "AccountId"
                        }
                    ],
                    type: "Index"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3e69H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        Bounty: {
            proposer: "AccountId",
            value: "Balance",
            fee: "Balance",
            curatorDeposit: "Balance",
            bond: "Balance",
            status: "BountyStatus"
        },
        BountyIndex: "u32",
        BountyStatus: {
            _enum: {
                Proposed: "Null",
                Approved: "Null",
                Funded: "Null",
                CuratorProposed: "BountyStatusCuratorProposed",
                Active: "BountyStatusActive",
                PendingPayout: "BountyStatusPendingPayout"
            }
        },
        BountyStatusActive: {
            curator: "AccountId",
            updateDue: "BlockNumber"
        },
        BountyStatusCuratorProposed: {
            curator: "AccountId"
        },
        BountyStatusPendingPayout: {
            curator: "AccountId",
            beneficiary: "AccountId",
            unlockAt: "BlockNumber"
        },
        OpenTip: {
            reason: "Hash",
            who: "AccountId",
            finder: "AccountId",
            deposit: "Balance",
            closes: "Option<BlockNumber>",
            tips: "Vec<OpenTipTip>",
            findersFee: "bool"
        },
        OpenTipTo225: {
            reason: "Hash",
            who: "AccountId",
            finder: "Option<OpenTipFinderTo225>",
            closes: "Option<BlockNumber>",
            tips: "Vec<OpenTipTip>"
        },
        OpenTipFinderTo225: "(AccountId, Balance)",
        OpenTipTip: "(AccountId, Balance)",
        TreasuryProposal: {
            proposer: "AccountId",
            value: "Balance",
            beneficiary: "AccountId",
            bond: "Balance"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iNbEd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        Multiplier: "Fixed128"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCot4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        TransactionSource: {
            _enum: [
                "InBlock",
                "Local",
                "External"
            ]
        },
        TransactionValidity: "Result<ValidTransaction, TransactionValidityError>",
        ValidTransaction: {
            priority: "TransactionPriority",
            requires: "Vec<TransactionTag>",
            provides: "Vec<TransactionTag>",
            longevity: "TransactionLongevity",
            propagate: "bool"
        }
    }
};

},{"./runtime.js":"jgWWl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jgWWl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    TaggedTransactionQueue: [
        {
            methods: {
                validate_transaction: {
                    description: "Validate the transaction.",
                    params: [
                        {
                            name: "source",
                            type: "TransactionSource"
                        },
                        {
                            name: "tx",
                            type: "Extrinsic"
                        },
                        {
                            name: "blockHash",
                            type: "BlockHash"
                        }
                    ],
                    type: "TransactionValidity"
                }
            },
            version: 3
        },
        {
            methods: {
                validate_transaction: {
                    description: "Validate the transaction.",
                    params: [
                        {
                            name: "source",
                            type: "TransactionSource"
                        },
                        {
                            name: "tx",
                            type: "Extrinsic"
                        }
                    ],
                    type: "TransactionValidity"
                }
            },
            version: 2
        },
        {
            methods: {
                validate_transaction: {
                    description: "Validate the transaction.",
                    params: [
                        {
                            name: "tx",
                            type: "Extrinsic"
                        }
                    ],
                    type: "TransactionValidity"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lOumW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        ClassId: "u32",
        InstanceId: "u32",
        DepositBalance: "Balance",
        DepositBalanceOf: "Balance",
        ClassDetails: {
            owner: "AccountId",
            issuer: "AccountId",
            admin: "AccountId",
            freezer: "AccountId",
            totalDeposit: "DepositBalance",
            freeHolding: "bool",
            instances: "u32",
            instanceMetadatas: "u32",
            attributes: "u32",
            isFrozen: "bool"
        },
        DestroyWitness: {
            instances: "Compact<u32>",
            instanceMetadatas: "Compact<u32>",
            attributes: "Compact<u32>"
        },
        InstanceDetails: {
            owner: "AccountId",
            approved: "Option<AccountId>",
            isFrozen: "bool",
            deposit: "DepositBalance"
        },
        ClassMetadata: {
            deposit: "DepositBalance",
            data: "Vec<u8>",
            isFrozen: "bool"
        },
        InstanceMetadata: {
            deposit: "DepositBalance",
            data: "Vec<u8>",
            isFrozen: "bool"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"buWug":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        Multisig: {
            when: "Timepoint",
            deposit: "Balance",
            depositor: "AccountId",
            approvals: "Vec<AccountId>"
        },
        Timepoint: {
            height: "BlockNumber",
            index: "u32"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ioJDd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        VestingInfo: {
            locked: "Balance",
            perBlock: "Balance",
            startingBlock: "BlockNumber"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bzheC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        BlockAttestations: {
            receipt: "CandidateReceipt",
            valid: "Vec<AccountId>",
            invalid: "Vec<AccountId>"
        },
        IncludedBlocks: {
            actualNumber: "BlockNumber",
            session: "SessionIndex",
            randomSeed: "H256",
            activeParachains: "Vec<ParaId>",
            paraBlocks: "Vec<Hash>"
        },
        MoreAttestations: {}
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hWXsW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        BridgedBlockHash: "H256",
        BridgedBlockNumber: "BlockNumber",
        BridgedHeader: "Header",
        BridgeMessageId: "(LaneId, MessageNonce)",
        CallOrigin: {
            _enum: {
                SourceRoot: "Null",
                TargetAccount: "(AccountId, MultiSigner, MultiSignature)",
                SourceAccount: "AccountId"
            }
        },
        ChainId: "[u8; 4]",
        DeliveredMessages: {
            begin: "MessageNonce",
            end: "MessageNonce",
            // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
            dispatchResults: "BitVec"
        },
        DispatchFeePayment: {
            _enum: [
                "AtSourceChain",
                "AtTargetChain"
            ]
        },
        InboundLaneData: {
            relayers: "Vec<UnrewardedRelayer>",
            lastConfirmedNonce: "MessageNonce"
        },
        InboundRelayer: "AccountId",
        InitializationData: {
            header: "Header",
            authorityList: "AuthorityList",
            setId: "SetId",
            isHalted: "bool"
        },
        LaneId: "[u8; 4]",
        MessageData: {
            payload: "Bytes",
            fee: "Balance"
        },
        MessagesDeliveryProofOf: {
            bridgedHeaderHash: "BlockHash",
            storageProof: "Vec<Bytes>",
            lane: "LaneId"
        },
        MessageKey: {
            laneId: "LaneId",
            nonce: "MessageNonce"
        },
        MessageNonce: "u64",
        MessagesProofOf: {
            bridgedHeaderHash: "BridgedBlockHash",
            storageProof: "Vec<Bytes>",
            lane: "LaneId",
            noncesStart: "MessageNonce",
            noncesEnd: "MessageNonce"
        },
        OperatingMode: {
            _enum: [
                "Normal",
                "RejectingOutboundMessages",
                "Halted"
            ]
        },
        OutboundLaneData: {
            oldestUnprunedNonce: "MessageNonce",
            latestReceivedNonce: "MessageNonce",
            latestGeneratedNonce: "MessageNonce"
        },
        OutboundMessageFee: "Balance",
        OutboundPayload: {
            specVersion: "u32",
            weight: "Weight",
            origin: "CallOrigin",
            dispatchFeePayment: "DispatchFeePayment",
            call: "Bytes"
        },
        Parameter: "Null",
        RelayerId: "AccountId",
        UnrewardedRelayer: {
            relayer: "RelayerId",
            messages: "DeliveredMessages"
        },
        UnrewardedRelayersState: {
            unrewardedRelayer_Entries: "MessageNonce",
            messagesInOldestEntry: "MessageNonce",
            totalMessages: "MessageNonce"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iGvqz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        StatementKind: {
            _enum: [
                "Regular",
                "Saft"
            ]
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aDOdR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        FundIndex: "u32",
        LastContribution: {
            _enum: {
                Never: "Null",
                PreEnding: "u32",
                Ending: "BlockNumber"
            }
        },
        FundInfo: {
            depositor: "AccountId",
            verifier: "Option<MultiSigner>",
            deposit: "Balance",
            raised: "Balance",
            end: "BlockNumber",
            cap: "Balance",
            lastContribution: "LastContribution",
            firstPeriod: "LeasePeriod",
            lastPeriod: "LeasePeriod",
            trieIndex: "TrieIndex"
        },
        TrieIndex: "u32"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jSZGb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
const dmpQueue = {
    CollationInfo: {
        upwardMessages: "Vec<UpwardMessage>",
        horizontalMessages: "Vec<OutboundHrmpMessage>",
        newValidationCode: "Option<ValidationCode>",
        processedDownwardMessages: "u32",
        hrmpWatermark: "RelayBlockNumber",
        headData: "HeadData"
    },
    CollationInfoV1: {
        upwardMessages: "Vec<UpwardMessage>",
        horizontalMessages: "Vec<OutboundHrmpMessage>",
        newValidationCode: "Option<ValidationCode>",
        processedDownwardMessages: "u32",
        hrmpWatermark: "RelayBlockNumber"
    },
    ConfigData: {
        maxIndividual: "Weight"
    },
    MessageId: "[u8; 32]",
    OverweightIndex: "u64",
    PageCounter: "u32",
    PageIndexData: {
        beginUsed: "PageCounter",
        endUsed: "PageCounter",
        overweightCount: "OverweightIndex"
    }
};
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: dmpQueue
};

},{"./runtime.js":"bTYzM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bTYzM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    CollectCollationInfo: [
        {
            methods: {
                collect_collation_info: {
                    description: "Collect information about a collation.",
                    params: [
                        {
                            name: "header",
                            type: "Header"
                        }
                    ],
                    type: "CollationInfo"
                }
            },
            version: 2
        },
        {
            methods: {
                collect_collation_info: {
                    description: "Collect information about a collation.",
                    params: [],
                    type: "CollationInfoV1"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"41cWe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {}
};

},{"./runtime.js":"fuz2t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fuz2t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const finalityV1 = {
    methods: {
        best_finalized: {
            description: "Returns number and hash of the best finalized header known to the bridge module.",
            params: [],
            type: "(BlockNumber, Hash)"
        }
    },
    version: 1
};
const runtime = {
    KusamaFinalityApi: [
        finalityV1
    ],
    PolkadotFinalityApi: [
        finalityV1
    ],
    RococoFinalityApi: [
        finalityV1
    ],
    WestendFinalityApi: [
        finalityV1
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"htNih":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hrmpJs = require("./hrmp.js");
var _hrmpJsDefault = parcelHelpers.interopDefault(_hrmpJs);
var _runtimeJs = require("./runtime.js");
var _slotsJs = require("./slots.js");
var _slotsJsDefault = parcelHelpers.interopDefault(_slotsJs);
const proposeTypes = {
    ParachainProposal: {
        proposer: "AccountId",
        genesisHead: "HeadData",
        validators: "Vec<ValidatorId>",
        name: "Bytes",
        balance: "Balance"
    },
    RegisteredParachainInfo: {
        validators: "Vec<ValidatorId>",
        proposer: "AccountId"
    }
};
const cumulusTypes = {
    ServiceQuality: {
        _enum: [
            "Ordered",
            "Fast"
        ]
    }
};
const disputeTypes = {
    DisputeLocation: {
        _enum: [
            "Local",
            "Remote"
        ]
    },
    DisputeResult: {
        _enum: [
            "Valid",
            "Invalid"
        ]
    },
    DisputeState: {
        validatorsFor: "BitVec",
        validatorsAgainst: "BitVec",
        start: "BlockNumber",
        concludedAt: "Option<BlockNumber>"
    },
    DisputeStatement: {
        _enum: {
            Valid: "ValidDisputeStatementKind",
            Invalid: "InvalidDisputeStatementKind"
        }
    },
    DisputeStatementSet: {
        candidateHash: "CandidateHash",
        session: "SessionIndex",
        statements: "Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>"
    },
    ExecutorParam: {
        _enum: {
            Phantom: "Null",
            MaxMemoryPages: "u32",
            StackLogicalMax: "u32",
            StackNativeMax: "u32",
            PrecheckingMaxMemory: "u64",
            PvfPrepTimeout: "(PvfPrepTimeoutKind, u64)",
            PvfExecTimeout: "(PvfExecTimeoutKind, u64)"
        }
    },
    ExecutorParamsHash: "Hash",
    ExecutorParams: "Vec<ExecutorParam>",
    ExplicitDisputeStatement: {
        valid: "bool",
        candidateHash: "CandidateHash",
        session: "SessionIndex"
    },
    InvalidDisputeStatementKind: {
        _enum: [
            "Explicit"
        ]
    },
    MultiDisputeStatementSet: "Vec<DisputeStatementSet>",
    PvfExecTimeoutKind: {
        _enum: [
            "Backing",
            "Approval"
        ]
    },
    PvfPrepTimeoutKind: {
        _enum: [
            "Precheck",
            "Lenient"
        ]
    },
    ValidDisputeStatementKind: {
        _enum: {
            Explicit: "Null",
            BackingSeconded: "Hash",
            BackingValid: "Hash",
            ApprovalChecking: "Null"
        }
    }
};
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {
        ...cumulusTypes,
        ...disputeTypes,
        ...(0, _hrmpJsDefault.default),
        ...proposeTypes,
        ...(0, _slotsJsDefault.default),
        AbridgedCandidateReceipt: {
            parachainIndex: "ParaId",
            relayParent: "Hash",
            headData: "HeadData",
            collator: "CollatorId",
            signature: "CollatorSignature",
            povBlockHash: "Hash",
            commitments: "CandidateCommitments"
        },
        AbridgedHostConfiguration: {
            maxCodeSize: "u32",
            maxHeadDataSize: "u32",
            maxUpwardQueueCount: "u32",
            maxUpwardQueueSize: "u32",
            maxUpwardMessageSize: "u32",
            maxUpwardMessageNumPerCandidate: "u32",
            hrmpMaxMessageNumPerCandidate: "u32",
            validationUpgradeFrequency: "BlockNumber",
            validationUpgradeDelay: "BlockNumber"
        },
        AbridgedHrmpChannel: {
            maxCapacity: "u32",
            maxTotalSize: "u32",
            maxMessageSize: "u32",
            msgCount: "u32",
            totalSize: "u32",
            mqcHead: "Option<Hash>"
        },
        AssignmentId: "AccountId",
        AssignmentKind: {
            _enum: {
                Parachain: "Null",
                Parathread: "(CollatorId, u32)"
            }
        },
        AttestedCandidate: {
            candidate: "AbridgedCandidateReceipt",
            validityVotes: "Vec<ValidityAttestation>",
            validatorIndices: "BitVec"
        },
        AuthorityDiscoveryId: "AccountId",
        AvailabilityBitfield: "BitVec",
        AvailabilityBitfieldRecord: {
            bitfield: "AvailabilityBitfield",
            submittedTt: "BlockNumber"
        },
        BackedCandidate: {
            candidate: "CommittedCandidateReceipt",
            validityVotes: "Vec<ValidityAttestation>",
            validatorIndices: "BitVec"
        },
        BufferedSessionChange: {
            applyAt: "BlockNumber",
            validators: "Vec<ValidatorId>",
            queued: "Vec<ValidatorId>",
            sessionIndex: "SessionIndex"
        },
        CandidateCommitments: {
            upwardMessages: "Vec<UpwardMessage>",
            horizontalMessages: "Vec<OutboundHrmpMessage>",
            newValidationCode: "Option<ValidationCode>",
            headData: "HeadData",
            processedDownwardMessages: "u32",
            hrmpWatermark: "BlockNumber"
        },
        CandidateDescriptor: {
            paraId: "ParaId",
            relayParent: "RelayChainHash",
            collatorId: "CollatorId",
            persistedValidationDataHash: "Hash",
            povHash: "Hash",
            erasureRoot: "Hash",
            signature: "CollatorSignature",
            paraHead: "Hash",
            validationCodeHash: "ValidationCodeHash"
        },
        CandidateEvent: {
            _enum: {
                CandidateBacked: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
                CandidateIncluded: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
                CandidateTimedOut: "(CandidateReceipt, HeadData, CoreIndex)"
            }
        },
        CandidateHash: "Hash",
        CandidateInfo: {
            who: "AccountId",
            deposit: "Balance"
        },
        CandidatePendingAvailability: {
            core: "CoreIndex",
            hash: "CandidateHash",
            descriptor: "CandidateDescriptor",
            availabilityVotes: "BitVec",
            backers: "BitVec",
            relayParentNumber: "BlockNumber",
            backedInNumber: "BlockNumber",
            backingGroup: "GroupIndex"
        },
        CandidateReceipt: {
            descriptor: "CandidateDescriptor",
            commitmentsHash: "Hash"
        },
        GlobalValidationData: {
            maxCodeSize: "u32",
            maxHeadDataSize: "u32",
            blockNumber: "BlockNumber"
        },
        CollatorId: "H256",
        CollatorSignature: "Signature",
        CommittedCandidateReceipt: {
            descriptor: "CandidateDescriptor",
            commitments: "CandidateCommitments"
        },
        CoreAssignment: {
            core: "CoreIndex",
            paraId: "ParaId",
            kind: "AssignmentKind",
            groupIdx: "GroupIndex"
        },
        CoreIndex: "u32",
        CoreOccupied: {
            _enum: {
                Parathread: "ParathreadEntry",
                Parachain: "Null"
            }
        },
        CoreState: {
            _enum: {
                Occupied: "OccupiedCore",
                Scheduled: "ScheduledCore",
                Free: "Null"
            }
        },
        DisputeProof: {
            timeSlot: "DisputesTimeSlot",
            kind: "SlashingOffenceKind",
            validatorIndex: "ValidatorIndex",
            validatorId: "ValidatorId"
        },
        DisputesTimeSlot: {
            sessionIndex: "SessionIndex",
            candidateHash: "CandidateHash"
        },
        DoubleVoteReport: {
            identity: "ValidatorId",
            first: "(Statement, ValidatorSignature)",
            second: "(Statement, ValidatorSignature)",
            proof: "MembershipProof",
            signingContext: "SigningContext"
        },
        DownwardMessage: "Bytes",
        GroupIndex: "u32",
        GroupRotationInfo: {
            sessionStartBlock: "BlockNumber",
            groupRotationFrequency: "BlockNumber",
            now: "BlockNumber"
        },
        GlobalValidationSchedule: {
            maxCodeSize: "u32",
            maxHeadDataSize: "u32",
            blockNumber: "BlockNumber"
        },
        HeadData: "Bytes",
        HostConfiguration: {
            maxCodeSize: "u32",
            maxHeadDataSize: "u32",
            maxUpwardQueueCount: "u32",
            maxUpwardQueueSize: "u32",
            maxUpwardMessageSize: "u32",
            maxUpwardMessageNumPerCandidate: "u32",
            hrmpMaxMessageNumPerCandidate: "u32",
            validationUpgradeFrequency: "BlockNumber",
            validationUpgradeDelay: "BlockNumber",
            maxPovSize: "u32",
            maxDownwardMessageSize: "u32",
            preferredDispatchableUpwardMessagesStepWeight: "Weight",
            hrmpMaxParachainOutboundChannels: "u32",
            hrmpMaxParathreadOutboundChannels: "u32",
            hrmpOpenRequestTtl: "u32",
            hrmpSenderDeposit: "Balance",
            hrmpRecipientDeposit: "Balance",
            hrmpChannelMaxCapacity: "u32",
            hrmpChannelMaxTotalSize: "u32",
            hrmpMaxParachainInboundChannels: "u32",
            hrmpMaxParathreadInboundChannels: "u32",
            hrmpChannelMaxMessageSize: "u32",
            codeRetentionPeriod: "BlockNumber",
            parathreadCores: "u32",
            parathreadRetries: "u32",
            groupRotationFrequency: "BlockNumber",
            chainAvailabilityPeriod: "BlockNumber",
            threadAvailabilityPeriod: "BlockNumber",
            schedulingLookahead: "u32",
            maxValidatorsPerCore: "Option<u32>",
            maxValidators: "Option<u32>",
            disputePeriod: "SessionIndex",
            disputePostConclusionAcceptancePeriod: "BlockNumber",
            disputeMaxSpamSlots: "u32",
            disputeConclusionByTimeOutPeriod: "BlockNumber",
            noShowSlots: "u32",
            nDelayTranches: "u32",
            zerothDelayTrancheWidth: "u32",
            neededApprovals: "u32",
            relayVrfModuloSamples: "u32"
        },
        InboundDownwardMessage: {
            pubSentAt: "BlockNumber",
            pubMsg: "DownwardMessage"
        },
        InboundHrmpMessage: {
            sentAt: "BlockNumber",
            data: "Bytes"
        },
        InboundHrmpMessages: "Vec<InboundHrmpMessage>",
        LocalValidationData: {
            parentHead: "HeadData",
            balance: "Balance",
            codeUpgradeAllowed: "Option<BlockNumber>"
        },
        MessageIngestionType: {
            downwardMessages: "Vec<InboundDownwardMessage>",
            horizontalMessages: "BTreeMap<ParaId, InboundHrmpMessages>"
        },
        MessageQueueChain: "RelayChainHash",
        OccupiedCore: {
            nextUpOnAvailable: "Option<ScheduledCore>",
            occupiedSince: "BlockNumber",
            timeOutAt: "BlockNumber",
            nextUpOnTimeOut: "Option<ScheduledCore>",
            availability: "BitVec",
            groupResponsible: "GroupIndex",
            candidateHash: "CandidateHash",
            candidateDescriptor: "CandidateDescriptor"
        },
        OccupiedCoreAssumption: {
            _enum: [
                "Included,",
                "TimedOut",
                "Free"
            ]
        },
        OutboundHrmpMessage: {
            recipient: "u32",
            data: "Bytes"
        },
        PendingSlashes: {
            _alias: {
                slashKeys: "keys"
            },
            slashKeys: "BTreeMap<ValidatorIndex, ValidatorId>",
            kind: "SlashingOffenceKind"
        },
        ParachainDispatchOrigin: {
            _enum: [
                "Signed",
                "Parachain",
                "Root"
            ]
        },
        ParachainInherentData: {
            validationData: "PersistedValidationData",
            relayChainState: "StorageProof",
            downwardMessages: "Vec<InboundDownwardMessage>",
            horizontalMessages: "BTreeMap<ParaId, VecInboundHrmpMessage>"
        },
        ParachainsInherentData: {
            bitfields: "SignedAvailabilityBitfields",
            backedCandidates: "Vec<BackedCandidate>",
            disputes: "MultiDisputeStatementSet",
            parentHeader: "Header"
        },
        ParaGenesisArgs: {
            genesisHead: "Bytes",
            validationCode: "Bytes",
            parachain: "bool"
        },
        ParaId: "u32",
        ParaInfo: {
            manager: "AccountId",
            deposit: "Balance",
            locked: "bool"
        },
        ParaLifecycle: {
            _enum: [
                "Onboarding",
                "Parathread",
                "Parachain",
                "UpgradingToParachain",
                "DowngradingToParathread",
                "OutgoingParathread",
                "OutgoingParachain"
            ]
        },
        ParaPastCodeMeta: {
            upgradeTimes: "Vec<ReplacementTimes>",
            lastPruned: "Option<BlockNumber>"
        },
        ParaScheduling: {
            _enum: [
                "Always",
                "Dynamic"
            ]
        },
        ParathreadClaim: "(ParaId, CollatorId)",
        ParathreadClaimQueue: {
            queue: "Vec<QueuedParathread>",
            nextCoreOffset: "u32"
        },
        ParathreadEntry: {
            claim: "ParathreadClaim",
            retries: "u32"
        },
        ParaValidatorIndex: "u32",
        PersistedValidationData: {
            parentHead: "HeadData",
            relayParentNumber: "RelayChainBlockNumber",
            relayParentStorageRoot: "Hash",
            maxPovSize: "u32"
        },
        PvfCheckStatement: {
            accept: "bool",
            subject: "ValidationCodeHash",
            sessionIndex: "SessionIndex",
            validatorIndex: "ParaValidatorIndex"
        },
        QueuedParathread: {
            claim: "ParathreadEntry",
            coreOffset: "u32"
        },
        RelayBlockNumber: "u32",
        RelayChainBlockNumber: "RelayBlockNumber",
        RelayHash: "Hash",
        RelayChainHash: "RelayHash",
        Remark: "[u8; 32]",
        ReplacementTimes: {
            expectedAt: "BlockNumber",
            activatedAt: "BlockNumber"
        },
        Retriable: {
            _enum: {
                Never: "Null",
                WithRetries: "u32"
            }
        },
        ScheduledCore: {
            paraId: "ParaId",
            collator: "Option<CollatorId>"
        },
        Scheduling: {
            _enum: [
                "Always",
                "Dynamic"
            ]
        },
        ScrapedOnChainVotes: {
            session: "SessionIndex",
            backingValidatorsPerCandidate: "Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>",
            disputes: "MultiDisputeStatementSet"
        },
        SessionInfo: {
            activeValidatorIndices: "Vec<ParaValidatorIndex>",
            randomSeed: "[u8; 32]",
            disputePeriod: "SessionIndex",
            validators: "Vec<ValidatorId>",
            discoveryKeys: "Vec<AuthorityDiscoveryId>",
            assignmentKeys: "Vec<AssignmentId>",
            validatorGroups: "Vec<Vec<ValidatorIndex>>",
            nCores: "u32",
            zerothDelayTrancheWidth: "u32",
            relayVrfModuloSamples: "u32",
            nDelayTranches: "u32",
            noShowSlots: "u32",
            neededApprovals: "u32"
        },
        OldV1SessionInfo: {
            validators: "Vec<ValidatorId>",
            discoveryKeys: "Vec<AuthorityDiscoveryId>",
            assignmentKeys: "Vec<AssignmentId>",
            validatorGroups: "Vec<Vec<ParaValidatorIndex>>",
            nCores: "u32",
            zerothDelayTrancheWidth: "u32",
            relayVrfModuloSamples: "u32",
            nDelayTranches: "u32",
            noShowSlots: "u32",
            neededApprovals: "u32"
        },
        SessionInfoValidatorGroup: "Vec<ParaValidatorIndex>",
        SignedAvailabilityBitfield: {
            payload: "BitVec",
            validatorIndex: "ParaValidatorIndex",
            signature: "ValidatorSignature"
        },
        SignedAvailabilityBitfields: "Vec<SignedAvailabilityBitfield>",
        SigningContext: {
            sessionIndex: "SessionIndex",
            parentHash: "Hash"
        },
        SlashingOffenceKind: {
            _enum: [
                "ForInvalid",
                "AgainstValid"
            ]
        },
        Statement: {
            _enum: {
                Never: "Null",
                Candidate: "Hash",
                Valid: "Hash",
                Invalid: "Hash"
            }
        },
        TransientValidationData: {
            maxCodeSize: "u32",
            maxHeadDataSize: "u32",
            balance: "Balance",
            codeUpgradeAllowed: "Option<BlockNumber>",
            dmqLength: "u32"
        },
        UpgradeGoAhead: {
            _enum: [
                "Abort",
                "GoAhead"
            ]
        },
        UpgradeRestriction: {
            _enum: [
                "Present"
            ]
        },
        UpwardMessage: "Bytes",
        ValidationFunctionParams: {
            maxCodeSize: "u32",
            relayChainHeight: "RelayChainBlockNumber",
            codeUpgradeAllowed: "Option<RelayChainBlockNumber>"
        },
        ValidationCode: "Bytes",
        ValidationCodeHash: "Hash",
        ValidationData: {
            persisted: "PersistedValidationData",
            transient: "TransientValidationData"
        },
        ValidationDataType: {
            validationData: "ValidationData",
            relayChainState: "Vec<Bytes>"
        },
        ValidatorSignature: "Signature",
        ValidityAttestation: {
            _enum: {
                Never: "Null",
                Implicit: "ValidatorSignature",
                Explicit: "ValidatorSignature"
            }
        },
        MessagingStateSnapshot: {
            relayDispatchQueueSize: "(u32, u32)",
            egressChannels: "Vec<MessagingStateSnapshotEgressEntry>"
        },
        MessagingStateSnapshotEgressEntry: "(ParaId, AbridgedHrmpChannel)",
        SystemInherentData: "ParachainInherentData",
        VecInboundHrmpMessage: "Vec<InboundHrmpMessage>"
    }
};

},{"./hrmp.js":"jE64Y","./runtime.js":"f1A0S","./slots.js":"9EiiW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jE64Y":[function(require,module,exports) {
/* eslint-disable sort-keys */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    HrmpChannel: {
        maxCapacity: "u32",
        maxTotalSize: "u32",
        maxMessageSize: "u32",
        msgCount: "u32",
        totalSize: "u32",
        mqcHead: "Option<Hash>",
        senderDeposit: "Balance",
        recipientDeposit: "Balance"
    },
    HrmpChannelId: {
        sender: "u32",
        receiver: "u32"
    },
    HrmpOpenChannelRequest: {
        confirmed: "bool",
        age: "SessionIndex",
        senderDeposit: "Balance",
        maxMessageSize: "u32",
        maxCapacity: "u32",
        maxTotalSize: "u32"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f1A0S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const PH_V1_TO_V2 = {
    assumed_validation_data: {
        description: "Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            },
            {
                name: "hash",
                type: "Hash"
            }
        ],
        type: "Option<(PersistedValidationData, ValidationCodeHash)>"
    },
    availability_cores: {
        description: "Yields information on all availability cores as relevant to the child block.",
        params: [],
        type: "Vec<CoreState>"
    },
    candidate_events: {
        description: "Get a vector of events concerning candidates that occurred within a block.",
        params: [],
        type: "Vec<CandidateEvent>"
    },
    candidate_pending_availability: {
        description: "Get the receipt of a candidate pending availability.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            }
        ],
        type: "Option<CommittedCandidateReceipt>"
    },
    check_validation_outputs: {
        description: "Checks if the given validation outputs pass the acceptance criteria.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            },
            {
                name: "outputs",
                type: "CandidateCommitments"
            }
        ],
        type: "bool"
    },
    dmq_contents: {
        description: "Get all the pending inbound messages in the downward message queue for a para.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            }
        ],
        type: "Vec<InboundDownwardMessage>"
    },
    inbound_hrmp_channels_contents: {
        description: "Get the contents of all channels addressed to the given recipient.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            }
        ],
        type: "Vec<InboundHrmpMessage>"
    },
    on_chain_votes: {
        description: "Scrape dispute relevant from on-chain, backing votes and resolved disputes.",
        params: [],
        type: "Option<ScrapedOnChainVotes>"
    },
    persisted_validation_data: {
        description: "Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            },
            {
                name: "assumption",
                type: "OccupiedCoreAssumption"
            }
        ],
        type: "Option<PersistedValidationData>"
    },
    session_index_for_child: {
        description: "Returns the session index expected at a child of the block.",
        params: [],
        type: "SessionIndex"
    },
    validation_code: {
        description: "Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            },
            {
                name: "assumption",
                type: "OccupiedCoreAssumption"
            }
        ],
        type: "ValidationCode"
    },
    validation_code_by_hash: {
        description: "Get the validation code from its hash.",
        params: [
            {
                name: "hash",
                type: "ValidationCodeHash"
            }
        ],
        type: "Option<ValidationCode>"
    },
    validator_groups: {
        description: "Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on",
        params: [],
        type: "(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)"
    },
    validators: {
        description: "Get the current validators.",
        params: [],
        type: "Vec<ValidatorId>"
    }
};
const PH_V2_TO_V3 = {
    pvfs_require_precheck: {
        description: "Returns code hashes of PVFs that require pre-checking by validators in the active set.",
        params: [],
        type: "Vec<ValidationCodeHash>"
    },
    session_info: {
        description: "Get the session info for the given session, if stored.",
        params: [
            {
                name: "index",
                type: "SessionIndex"
            }
        ],
        type: "Option<SessionInfo>"
    },
    submit_pvf_check_statement: {
        description: "Submits a PVF pre-checking statement into the transaction pool.",
        params: [
            {
                name: "stmt",
                type: "PvfCheckStatement"
            },
            {
                name: "signature",
                type: "ValidatorSignature"
            }
        ],
        type: "Null"
    },
    validation_code_hash: {
        description: "Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            },
            {
                name: "assumption",
                type: "OccupiedCoreAssumption"
            }
        ],
        type: "Option<ValidationCodeHash>"
    }
};
const PH_V3 = {
    disputes: {
        description: "Returns all onchain disputes.",
        params: [],
        type: "Vec<(SessionIndex, CandidateHash, DisputeState)>"
    }
};
const PH_V4 = {
    session_executor_params: {
        description: "Returns execution parameters for the session.",
        params: [
            {
                name: "sessionIndex",
                type: "SessionIndex"
            }
        ],
        type: "Option<ExecutorParams>"
    }
};
const PH_V5 = {
    key_ownership_proof: {
        description: "Returns a merkle proof of a validator session key",
        params: [
            {
                name: "validatorId",
                type: "ValidatorId"
            }
        ],
        type: "Option<OpaqueKeyOwnershipProof>"
    },
    submit_report_dispute_lost: {
        description: "Submit an unsigned extrinsic to slash validators who lost a dispute about a candidate of a past session",
        params: [
            {
                name: "disputeProof",
                type: "DisputeProof"
            },
            {
                name: "keyOwnershipProof",
                type: "OpaqueKeyOwnershipProof"
            }
        ],
        type: "Option<Null>"
    },
    unapplied_slashes: {
        description: "Returns a list of validators that lost a past session dispute and need to be slashed",
        params: [],
        type: "Vec<(SessionIndex, CandidateHash, PendingSlashes)>"
    }
};
const runtime = {
    ParachainHost: [
        {
            methods: {
                ...PH_V1_TO_V2,
                ...PH_V2_TO_V3,
                ...PH_V3,
                ...PH_V4,
                ...PH_V5
            },
            version: 5
        },
        {
            methods: {
                ...PH_V1_TO_V2,
                ...PH_V2_TO_V3,
                ...PH_V3,
                ...PH_V4
            },
            version: 4
        },
        {
            methods: {
                ...PH_V1_TO_V2,
                ...PH_V2_TO_V3,
                ...PH_V3
            },
            version: 3
        },
        {
            methods: {
                ...PH_V1_TO_V2,
                ...PH_V2_TO_V3
            },
            version: 2
        },
        {
            methods: {
                session_info: {
                    description: "Get the session info for the given session, if stored.",
                    params: [
                        {
                            name: "index",
                            type: "SessionIndex"
                        }
                    ],
                    type: "Option<OldV1SessionInfo>"
                },
                ...PH_V1_TO_V2
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9EiiW":[function(require,module,exports) {
/* eslint-disable sort-keys */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const SlotRange10 = {
    _enum: [
        "ZeroZero",
        "ZeroOne",
        "ZeroTwo",
        "ZeroThree",
        "OneOne",
        "OneTwo",
        "OneThree",
        "TwoTwo",
        "TwoThree",
        "ThreeThree"
    ]
};
const SlotRange = {
    _enum: [
        "ZeroZero",
        "ZeroOne",
        "ZeroTwo",
        "ZeroThree",
        "ZeroFour",
        "ZeroFive",
        "ZeroSix",
        "ZeroSeven",
        "OneOne",
        "OneTwo",
        "OneThree",
        "OneFour",
        "OneFive",
        "OneSix",
        "OneSeven",
        "TwoTwo",
        "TwoThree",
        "TwoFour",
        "TwoFive",
        "TwoSix",
        "TwoSeven",
        "ThreeThree",
        "ThreeFour",
        "ThreeFive",
        "ThreeSix",
        "ThreeSeven",
        "FourFour",
        "FourFive",
        "FourSix",
        "FourSeven",
        "FiveFive",
        "FiveSix",
        "FiveSeven",
        "SixSix",
        "SixSeven",
        "SevenSeven"
    ]
};
const oldTypes = {
    Bidder: {
        _enum: {
            New: "NewBidder",
            Existing: "ParaId"
        }
    },
    IncomingParachain: {
        _enum: {
            Unset: "NewBidder",
            Fixed: "IncomingParachainFixed",
            Deploy: "IncomingParachainDeploy"
        }
    },
    IncomingParachainDeploy: {
        code: "ValidationCode",
        initialHeadData: "HeadData"
    },
    IncomingParachainFixed: {
        codeHash: "Hash",
        codeSize: "u32",
        initialHeadData: "HeadData"
    },
    NewBidder: {
        who: "AccountId",
        sub: "SubId"
    },
    SubId: "u32"
};
exports.default = {
    ...oldTypes,
    AuctionIndex: "u32",
    LeasePeriod: "BlockNumber",
    LeasePeriodOf: "BlockNumber",
    SlotRange10,
    SlotRange,
    WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
    WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
    WinningDataEntry: "Option<(AccountId, ParaId, BalanceOf)>",
    WinnersData10: "Vec<WinnersDataTuple10>",
    WinnersData: "Vec<WinnersDataTuple>",
    WinnersDataTuple10: "(AccountId, ParaId, BalanceOf, SlotRange10)",
    WinnersDataTuple: "(AccountId, ParaId, BalanceOf, SlotRange)"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8EFaw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        Approvals: "[bool; 4]"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GK22":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    rpc: {},
    types: {
        AccountStatus: {
            validity: "AccountValidity",
            freeBalance: "Balance",
            lockedBalance: "Balance",
            signature: "Vec<u8>",
            vat: "Permill"
        },
        AccountValidity: {
            _enum: [
                "Invalid",
                "Initiated",
                "Pending",
                "ValidLow",
                "ValidHigh",
                "Completed"
            ]
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a37to":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typesCreate = require("@polkadot/types-create");
var _v0Js = require("./v0.js");
var _v1Js = require("./v1.js");
var _v2Js = require("./v2.js");
const XCM_LATEST = "V2";
const xcm = {
    XcmOrigin: {
        _enum: {
            Xcm: "MultiLocation"
        }
    },
    XcmpMessageFormat: {
        _enum: [
            "ConcatenatedVersionedXcm",
            "ConcatenatedEncodedBlob",
            "Signals"
        ]
    },
    XcmAssetId: {
        _enum: {
            Concrete: "MultiLocation",
            Abstract: "Bytes"
        }
    },
    InboundStatus: {
        _enum: [
            "Ok",
            "Suspended"
        ]
    },
    OutboundStatus: {
        _enum: [
            "Ok",
            "Suspended"
        ]
    },
    MultiAssets: "Vec<MultiAsset>"
};
const location = {
    BodyId: {
        _enum: {
            Unit: "Null",
            Named: "Vec<u8>",
            Index: "Compact<u32>",
            Executive: "Null",
            Technical: "Null",
            Legislative: "Null",
            Judicial: "Null"
        }
    },
    BodyPart: {
        _enum: {
            Voice: "Null",
            Members: "Compact<u32>",
            Fraction: {
                nom: "Compact<u32>",
                denom: "Compact<u32>"
            },
            AtLeastProportion: {
                nom: "Compact<u32>",
                denom: "Compact<u32>"
            },
            MoreThanProportion: {
                nom: "Compact<u32>",
                denom: "Compact<u32>"
            }
        }
    },
    InteriorMultiLocation: "Junctions",
    NetworkId: {
        _enum: {
            Any: "Null",
            Named: "Vec<u8>",
            Polkadot: "Null",
            Kusama: "Null"
        }
    }
};
exports.default = {
    rpc: {},
    types: {
        ...location,
        ...xcm,
        ...(0, _v0Js.v0),
        ...(0, _v1Js.v1),
        ...(0, _v2Js.v2),
        ...(0, _typesCreate.mapXcmTypes)(XCM_LATEST),
        DoubleEncodedCall: {
            encoded: "Vec<u8>"
        },
        XcmOriginKind: {
            _enum: [
                "Native",
                "SovereignAccount",
                "Superuser",
                "Xcm"
            ]
        },
        Outcome: {
            _enum: {
                Complete: "Weight",
                Incomplete: "(Weight, XcmErrorV0)",
                Error: "XcmErrorV0"
            }
        },
        QueryId: "u64",
        QueryStatus: {
            _enum: {
                Pending: {
                    responder: "VersionedMultiLocation",
                    maybeNotify: "Option<(u8, u8)>",
                    timeout: "BlockNumber"
                },
                Ready: {
                    response: "VersionedResponse",
                    at: "BlockNumber"
                }
            }
        },
        QueueConfigData: {
            suspendThreshold: "u32",
            dropThreshold: "u32",
            resumeThreshold: "u32",
            thresholdWeight: "Weight",
            weightRestrictDecay: "Weight"
        },
        VersionMigrationStage: {
            _enum: {
                MigrateSupportedVersion: "Null",
                MigrateVersionNotifiers: "Null",
                NotifyCurrentTargets: "Option<Bytes>",
                MigrateAndNotifyOldTargets: "Null"
            }
        },
        VersionedMultiAsset: {
            _enum: {
                V0: "MultiAssetV0",
                V1: "MultiAssetV1",
                V2: "MultiAssetV2"
            }
        },
        VersionedMultiAssets: {
            _enum: {
                V0: "Vec<MultiAssetV0>",
                V1: "MultiAssetsV1",
                V2: "MultiAssetsV2"
            }
        },
        VersionedMultiLocation: {
            _enum: {
                V0: "MultiLocationV0",
                V1: "MultiLocationV1",
                V2: "MultiLocationV2"
            }
        },
        VersionedResponse: {
            V0: "ResponseV0",
            V1: "ResponseV1",
            V2: "ResponseV2"
        },
        VersionedXcm: {
            _enum: {
                V0: "XcmV0",
                V1: "XcmV1",
                V2: "XcmV2"
            }
        },
        XcmVersion: "u32"
    }
};

},{"@polkadot/types-create":"cr6lO","./v0.js":"elguL","./v1.js":"gCO3S","./v2.js":"3C8Gn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cr6lO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"iLOTL","./bundle.js":"17mH9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iLOTL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"fWTcD","./packageInfo.js":"cUwPM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fWTcD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageInfo = require("@polkadot/types-codec/packageInfo");
exports.default = [
    (0, _packageInfo.packageInfo)
];

},{"@polkadot/types-codec/packageInfo":"2E3zV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"17mH9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
parcelHelpers.export(exports, "TypeDefInfo", ()=>(0, _indexJs.TypeDefInfo));
var _packageInfoJs = require("./packageInfo.js");
var _indexJs = require("./types/index.js");
var _exportsJs = require("./exports.js");
parcelHelpers.exportAll(_exportsJs, exports);

},{"./packageInfo.js":false,"./types/index.js":"5QFWK","./exports.js":"89L7Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5QFWK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _augmentRegistryJs = require("./augmentRegistry.js");
var _lookupJs = require("./lookup.js");
parcelHelpers.exportAll(_lookupJs, exports);
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);

},{"./augmentRegistry.js":"7CKPf","./lookup.js":false,"./types.js":"44zv9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7CKPf":[function(require,module,exports) {
var _registry = require("@polkadot/types-codec/types/registry");

},{"@polkadot/types-codec/types/registry":"ccJK9"}],"ccJK9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"44zv9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypeDefInfo", ()=>TypeDefInfo);
var TypeDefInfo;
(function(TypeDefInfo) {
    TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
    TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
    TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
    TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 3] = "DoNotConstruct";
    TypeDefInfo[TypeDefInfo["Enum"] = 4] = "Enum";
    TypeDefInfo[TypeDefInfo["HashMap"] = 5] = "HashMap";
    TypeDefInfo[TypeDefInfo["Int"] = 6] = "Int";
    TypeDefInfo[TypeDefInfo["Linkage"] = 7] = "Linkage";
    TypeDefInfo[TypeDefInfo["Null"] = 8] = "Null";
    TypeDefInfo[TypeDefInfo["Option"] = 9] = "Option";
    TypeDefInfo[TypeDefInfo["Plain"] = 10] = "Plain";
    TypeDefInfo[TypeDefInfo["Range"] = 11] = "Range";
    TypeDefInfo[TypeDefInfo["RangeInclusive"] = 12] = "RangeInclusive";
    TypeDefInfo[TypeDefInfo["Result"] = 13] = "Result";
    TypeDefInfo[TypeDefInfo["Set"] = 14] = "Set";
    TypeDefInfo[TypeDefInfo["Si"] = 15] = "Si";
    TypeDefInfo[TypeDefInfo["Struct"] = 16] = "Struct";
    TypeDefInfo[TypeDefInfo["Tuple"] = 17] = "Tuple";
    TypeDefInfo[TypeDefInfo["UInt"] = 18] = "UInt";
    TypeDefInfo[TypeDefInfo["Vec"] = 19] = "Vec";
    TypeDefInfo[TypeDefInfo["VecFixed"] = 20] = "VecFixed";
    TypeDefInfo[TypeDefInfo["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
    TypeDefInfo[TypeDefInfo["WrapperOpaque"] = 22] = "WrapperOpaque";
})(TypeDefInfo || (TypeDefInfo = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"89L7Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./create/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var _indexJs1 = require("./util/index.js");
parcelHelpers.exportAll(_indexJs1, exports);

},{"./create/index.js":"a9A9I","./util/index.js":"chdyR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a9A9I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classJs = require("./class.js");
parcelHelpers.exportAll(_classJs, exports);
var _typeJs = require("./type.js");
parcelHelpers.exportAll(_typeJs, exports);

},{"./class.js":"2iCHM","./type.js":"dBiQC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2iCHM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "constructTypeClass", ()=>constructTypeClass);
parcelHelpers.export(exports, "getTypeClass", ()=>getTypeClass);
parcelHelpers.export(exports, "createClassUnsafe", ()=>createClassUnsafe);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _indexJs = require("../types/index.js");
var _getTypeDefJs = require("../util/getTypeDef.js");
function getTypeDefType({ lookupName, type }) {
    return lookupName || type;
}
function getSubDefArray(value) {
    if (!Array.isArray(value.sub)) throw new Error(`Expected subtype as TypeDef[] in ${(0, _util.stringify)(value)}`);
    return value.sub;
}
function getSubDef(value) {
    if (!value.sub || Array.isArray(value.sub)) throw new Error(`Expected subtype as TypeDef in ${(0, _util.stringify)(value)}`);
    return value.sub;
}
function getSubType(value) {
    return getTypeDefType(getSubDef(value));
}
function getTypeClassMap(value) {
    const subs = getSubDefArray(value);
    const map = {};
    for(let i = 0, count = subs.length; i < count; i++){
        const sub = subs[i];
        if (!sub.name) throw new Error(`No name found in definition ${(0, _util.stringify)(sub)}`);
        map[sub.name] = getTypeDefType(sub);
    }
    return map;
}
function getTypeClassArray(value) {
    return getSubDefArray(value).map(getTypeDefType);
}
function createInt(Clazz, { displayName, length }) {
    if (!(0, _util.isNumber)(length)) throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
    return Clazz.with(length, displayName);
}
function createHashMap(Clazz, value) {
    const [keyType, valueType] = getTypeClassArray(value);
    return Clazz.with(keyType, valueType);
}
function createWithSub(Clazz, value) {
    return Clazz.with(getSubType(value));
}
const infoMapping = {
    [(0, _indexJs.TypeDefInfo).BTreeMap]: (_registry, value)=>createHashMap((0, _typesCodec.BTreeMap), value),
    [(0, _indexJs.TypeDefInfo).BTreeSet]: (_registry, value)=>createWithSub((0, _typesCodec.BTreeSet), value),
    [(0, _indexJs.TypeDefInfo).Compact]: (_registry, value)=>createWithSub((0, _typesCodec.Compact), value),
    [(0, _indexJs.TypeDefInfo).DoNotConstruct]: (_registry, value)=>(0, _typesCodec.DoNotConstruct).with(value.displayName || value.type),
    [(0, _indexJs.TypeDefInfo).Enum]: (_registry, value)=>{
        const subs = getSubDefArray(value);
        return (0, _typesCodec.Enum).with(subs.every(({ type })=>type === "Null") ? subs.reduce((out, { index, name }, count)=>{
            if (!name) throw new Error("No name found in sub definition");
            out[name] = index || count;
            return out;
        }, {}) : getTypeClassMap(value));
    },
    [(0, _indexJs.TypeDefInfo).HashMap]: (_registry, value)=>createHashMap((0, _typesCodec.HashMap), value),
    [(0, _indexJs.TypeDefInfo).Int]: (_registry, value)=>createInt((0, _typesCodec.Int), value),
    // We have circular deps between Linkage & Struct
    [(0, _indexJs.TypeDefInfo).Linkage]: (_registry, value)=>{
        const type = `Option<${getSubType(value)}>`;
        // eslint-disable-next-line sort-keys
        const Clazz = (0, _typesCodec.Struct).with({
            previous: type,
            next: type
        });
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        Clazz.prototype.toRawType = function() {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
            return `Linkage<${this.next.toRawType(true)}>`;
        };
        return Clazz;
    },
    [(0, _indexJs.TypeDefInfo).Null]: (_registry, _value)=>(0, _typesCodec.Null),
    [(0, _indexJs.TypeDefInfo).Option]: (_registry, value)=>{
        if (!value.sub || Array.isArray(value.sub)) throw new Error("Expected type information for Option");
        // NOTE This is opt-in (unhandled), not by default
        // if (value.sub.type === 'bool') {
        //   return OptionBool;
        // }
        return createWithSub((0, _typesCodec.Option), value);
    },
    [(0, _indexJs.TypeDefInfo).Plain]: (registry, value)=>registry.getOrUnknown(value.type),
    [(0, _indexJs.TypeDefInfo).Range]: (_registry, value)=>createWithSub((0, _typesCodec.Range), value),
    [(0, _indexJs.TypeDefInfo).RangeInclusive]: (_registry, value)=>createWithSub((0, _typesCodec.RangeInclusive), value),
    [(0, _indexJs.TypeDefInfo).Result]: (_registry, value)=>{
        const [Ok, Err] = getTypeClassArray(value);
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        return (0, _typesCodec.Result).with({
            Err,
            Ok
        });
    },
    [(0, _indexJs.TypeDefInfo).Set]: (_registry, value)=>(0, _typesCodec.CodecSet).with(getSubDefArray(value).reduce((result, { index, name })=>{
            if (!name || !(0, _util.isNumber)(index)) throw new Error("No name found in sub definition");
            result[name] = index;
            return result;
        }, {}), value.length),
    [(0, _indexJs.TypeDefInfo).Si]: (registry, value)=>getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
    [(0, _indexJs.TypeDefInfo).Struct]: (_registry, value)=>(0, _typesCodec.Struct).with(getTypeClassMap(value), value.alias),
    [(0, _indexJs.TypeDefInfo).Tuple]: (_registry, value)=>(0, _typesCodec.Tuple).with(getTypeClassArray(value)),
    [(0, _indexJs.TypeDefInfo).UInt]: (_registry, value)=>createInt((0, _typesCodec.UInt), value),
    [(0, _indexJs.TypeDefInfo).Vec]: (_registry, { sub })=>{
        if (!sub || Array.isArray(sub)) throw new Error("Expected type information for vector");
        return sub.type === "u8" ? (0, _typesCodec.Bytes) : (0, _typesCodec.Vec).with(getTypeDefType(sub));
    },
    [(0, _indexJs.TypeDefInfo).VecFixed]: (_registry, { displayName, length, sub })=>{
        if (!(0, _util.isNumber)(length) || !sub || Array.isArray(sub)) throw new Error("Expected length & type information for fixed vector");
        return sub.type === "u8" ? (0, _typesCodec.U8aFixed).with(length * 8, displayName) : (0, _typesCodec.VecFixed).with(getTypeDefType(sub), length);
    },
    [(0, _indexJs.TypeDefInfo).WrapperKeepOpaque]: (_registry, value)=>createWithSub((0, _typesCodec.WrapperKeepOpaque), value),
    [(0, _indexJs.TypeDefInfo).WrapperOpaque]: (_registry, value)=>createWithSub((0, _typesCodec.WrapperOpaque), value)
};
function constructTypeClass(registry, typeDef) {
    try {
        const Type = infoMapping[typeDef.info](registry, typeDef);
        if (!Type) throw new Error("No class created");
        // don't clobber any existing
        if (!Type.__fallbackType && typeDef.fallbackType) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore ...this is the only place we we actually assign this...
        Type.__fallbackType = typeDef.fallbackType;
        return Type;
    } catch (error) {
        throw new Error(`Unable to construct class from ${(0, _util.stringify)(typeDef)}: ${error.message}`);
    }
}
function getTypeClass(registry, typeDef) {
    return registry.getUnsafe(typeDef.type, false, typeDef);
}
function createClassUnsafe(registry, type) {
    return(// just retrieve via name, no creation via typeDef
    registry.getUnsafe(type) || // we don't have an existing type, create the class via typeDef
    getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : (0, _getTypeDefJs.getTypeDef)(type)));
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","../types/index.js":"5QFWK","../util/getTypeDef.js":"gN0Rn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gvW09":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"eokNv","./bundle.js":"fE7OG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eokNv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"jMv0A","./packageInfo.js":"2E3zV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jMv0A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = [];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fE7OG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
var _packageInfoJs = require("./packageInfo.js");
var _indexJs = require("./abstract/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var _indexJs1 = require("./base/index.js");
parcelHelpers.exportAll(_indexJs1, exports);
var _indexJs2 = require("./extended/index.js");
parcelHelpers.exportAll(_indexJs2, exports);
var _indexJs3 = require("./native/index.js");
parcelHelpers.exportAll(_indexJs3, exports);
var _indexJs4 = require("./primitive/index.js");
parcelHelpers.exportAll(_indexJs4, exports);
var _indexJs5 = require("./utils/index.js");
parcelHelpers.exportAll(_indexJs5, exports);

},{"./packageInfo.js":false,"./abstract/index.js":"cwpNr","./base/index.js":"9y2cS","./extended/index.js":"lWoC7","./native/index.js":"gMGnS","./primitive/index.js":"9yjSC","./utils/index.js":"OTOl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cwpNr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractArray", ()=>(0, _arrayJs.AbstractArray));
parcelHelpers.export(exports, "AbstractBase", ()=>(0, _baseJs.AbstractBase));
parcelHelpers.export(exports, "AbstractInt", ()=>(0, _intJs.AbstractInt));
var _arrayJs = require("./Array.js");
var _baseJs = require("./Base.js");
var _intJs = require("./Int.js");

},{"./Array.js":false,"./Base.js":"4Xnx9","./Int.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3VJuv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name AbstractArray
 * @description
 * This manages codec arrays. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 * @noInheritDoc
 */ parcelHelpers.export(exports, "AbstractArray", ()=>AbstractArray);
var _util = require("@polkadot/util");
var _compareArrayJs = require("../utils/compareArray.js");
class AbstractArray extends Array {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    /**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */ static get [Symbol.species]() {
        return Array;
    }
    constructor(registry, length){
        super(length);
        this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        // We need to loop through all entries since they may have a variable length themselves,
        // e.g. when a Vec or Compact is contained withing, it has a variable length based on data
        const count = this.length;
        let total = (0, _util.compactToU8a)(count).length;
        for(let i = 0; i < count; i++)total += this[i].encodedLength;
        return total;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */ get isEmpty() {
        return this.length === 0;
    }
    /**
     * @description The length of the value
     */ get length() {
        // only included here since we ignore inherited docs
        return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return (0, _compareArrayJs.compareArray)(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            inner: this.inspectInner(),
            outer: [
                (0, _util.compactToU8a)(this.length)
            ]
        };
    }
    /**
     * @internal
     * @description Internal per-item inspection of internal values
     */ inspectInner() {
        const count = this.length;
        const inner = new Array(count);
        for(let i = 0; i < count; i++)inner[i] = this[i].inspect();
        return inner;
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */ toArray() {
        return Array.from(this);
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        return (0, _util.u8aToHex)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        const count = this.length;
        const result = new Array(count);
        for(let i = 0; i < count; i++)result[i] = this[i] && this[i].toHuman(isExtended);
        return result;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        const count = this.length;
        const result = new Array(count);
        for(let i = 0; i < count; i++)// We actually log inside the U8a decoding and use JSON.stringify(...), which
        // means that the Vec may be partially populated (same applies to toHuman, same check)
        result[i] = this[i] && this[i].toJSON();
        return result;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        const count = this.length;
        const result = new Array(count);
        for(let i = 0; i < count; i++)result[i] = this[i] && this[i].toPrimitive();
        return result;
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        const count = this.length;
        const result = new Array(count);
        for(let i = 0; i < count; i++)result[i] = this[i].toString();
        return `[${result.join(", ")}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        const encoded = this.toU8aInner();
        return isBare ? (0, _util.u8aConcatStrict)(encoded) : (0, _util.u8aConcatStrict)([
            (0, _util.compactToU8a)(this.length),
            ...encoded
        ]);
    }
    /**
     * @internal
     * @description Internal per-item SCALE encoding of contained values
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8aInner(isBare) {
        const count = this.length;
        const encoded = new Array(count);
        for(let i = 0; i < count; i++)encoded[i] = this[i].toU8a(isBare);
        return encoded;
    }
}

},{"@polkadot/util":"3HnHw","../utils/compareArray.js":"aVGtj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aVGtj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareArray", ()=>compareArray);
var _util = require("@polkadot/util");
var _utilJs = require("./util.js");
function compareArray(a, b) {
    if (Array.isArray(b)) return a.length === b.length && (0, _util.isUndefined)(a.find((v, index)=>(0, _utilJs.hasEq)(v) ? !v.eq(b[index]) : v !== b[index]));
    return false;
}

},{"@polkadot/util":"3HnHw","./util.js":"c7QwJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c7QwJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasEq", ()=>hasEq);
var _util = require("@polkadot/util");
function hasEq(o) {
    return (0, _util.isFunction)(o.eq);
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Xnx9":[function(require,module,exports) {
/**
 * @name Base
 * @description A type extends the Base class, when it holds a value
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractBase", ()=>AbstractBase);
class AbstractBase {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__raw;
    constructor(registry, value, initialU8aLength){
        this.initialU8aLength = initialU8aLength;
        this.__internal__raw = value;
        this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description returns the inner (wrapped value)
     */ get inner() {
        return this.__internal__raw;
    }
    /**
     * @description Checks if the value is an empty value
     */ get isEmpty() {
        return this.__internal__raw.isEmpty;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return this.__internal__raw.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return this.__internal__raw.inspect();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */ toHex(isLe) {
        return this.__internal__raw.toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        return this.__internal__raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.__internal__raw.toJSON();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.__internal__raw.toPrimitive();
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return this.__internal__raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        return this.__internal__raw.toU8a(isBare);
    }
    /**
     * @description Returns the inner wrapped value (equivalent to valueOf)
     */ unwrap() {
        return this.__internal__raw;
    }
    /**
     * @description Returns the inner wrapped value
     */ valueOf() {
        return this.__internal__raw;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"93VT5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_UINT_BITS", ()=>DEFAULT_UINT_BITS);
/**
 * @name AbstractInt
 * @ignore
 * @noInheritDoc
 */ parcelHelpers.export(exports, "AbstractInt", ()=>AbstractInt);
var _util = require("@polkadot/util");
const DEFAULT_UINT_BITS = 64;
const MAX_NUMBER_BITS = 52;
const MUL_P = new (0, _util.BN)(10000);
const FORMATTERS = [
    [
        "Perquintill",
        (0, _util.BN_QUINTILL)
    ],
    [
        "Perbill",
        (0, _util.BN_BILLION)
    ],
    [
        "Permill",
        (0, _util.BN_MILLION)
    ],
    [
        "Percent",
        (0, _util.BN_HUNDRED)
    ]
];
function isToBn(value) {
    return (0, _util.isFunction)(value.toBn);
}
function toPercentage(value, divisor) {
    return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
}
/** @internal */ function decodeAbstractInt(value, isNegative) {
    if ((0, _util.isNumber)(value)) {
        if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) throw new Error("Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1");
        return value;
    } else if ((0, _util.isString)(value)) {
        if ((0, _util.isHex)(value, -1, true)) return (0, _util.hexToBn)(value, {
            isLe: false,
            isNegative
        }).toString();
        if (value.includes(".") || value.includes(",") || value.includes("e")) throw new Error("String should not contain decimal points or scientific notation");
        return value;
    } else if ((0, _util.isBn)(value) || (0, _util.isBigInt)(value)) return value.toString();
    else if ((0, _util.isObject)(value)) {
        if (isToBn(value)) return value.toBn().toString();
        // Allow the construction from an object with a single top-level key. This means that
        // single key objects can be treated equivalently to numbers, assuming they meet the
        // specific requirements. (This is useful in Weights 1.5 where Objects are compact)
        const keys = Object.keys(value);
        if (keys.length !== 1) throw new Error("Unable to construct number from multi-key object");
        return decodeAbstractInt(value[keys[0]], isNegative);
    } else if (!value) return 0;
    throw new Error(`Unable to create BN from unknown type ${typeof value}`);
}
class AbstractInt extends (0, _util.BN) {
    registry;
    encodedLength;
    isUnsigned;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__bitLength;
    constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false){
        // Construct via a string/number, which will be passed in the BN constructor.
        // It would be ideal to actually return a BN, but there is an issue:
        // https://github.com/indutny/bn.js/issues/206
        super(// shortcut isU8a as used in SCALE decoding
        (0, _util.isU8a)(value) ? bitLength <= 48 ? (0, _util.u8aToNumber)(value.subarray(0, bitLength / 8), {
            isNegative: isSigned
        }) : (0, _util.u8aToBn)(value.subarray(0, bitLength / 8), {
            isLe: true,
            isNegative: isSigned
        }).toString() : decodeAbstractInt(value, isSigned));
        this.registry = registry;
        this.__internal__bitLength = bitLength;
        this.encodedLength = this.__internal__bitLength / 8;
        this.initialU8aLength = this.__internal__bitLength / 8;
        this.isUnsigned = !isSigned;
        const isNegative = this.isNeg();
        const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
        if (isNegative && !isSigned) throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
        else if (super.bitLength() > maxBits) throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is a zero value (align elsewhere)
     */ get isEmpty() {
        return this.isZero();
    }
    /**
     * @description Returns the number of bits in the value
     */ bitLength() {
        return this.__internal__bitLength;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    eq(other) {
        // Here we are actually overriding the built-in .eq to take care of both
        // number and BN inputs (no `.eqn` needed) - numbers will be converted
        return super.eq((0, _util.isHex)(other) ? (0, _util.hexToBn)(other.toString(), {
            isLe: false,
            isNegative: !this.isUnsigned
        }) : (0, _util.bnToBn)(other));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            outer: [
                this.toU8a()
            ]
        };
    }
    /**
     * @description True if this value is the max of the type
     */ isMax() {
        const u8a = this.toU8a().filter((b)=>b === 0xff);
        return u8a.length === this.__internal__bitLength / 8;
    }
    /**
     * @description Returns a BigInt representation of the number
     */ toBigInt() {
        return BigInt(this.toString());
    }
    /**
     * @description Returns the BN representation of the number. (Compatibility)
     */ toBn() {
        return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex(isLe = false) {
        // For display/JSON, this is BE, for compare, use isLe
        return (0, _util.bnToHex)(this, {
            bitLength: this.bitLength(),
            isLe,
            isNegative: !this.isUnsigned
        });
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(_isExpanded) {
        const rawType = this.toRawType();
        if (rawType === "Balance") return this.isMax() ? "everything" : (0, _util.formatBalance)(this, {
            decimals: this.registry.chainDecimals[0],
            withSi: true,
            withUnit: this.registry.chainTokens[0]
        });
        const [, divisor] = FORMATTERS.find(([type])=>type === rawType) || [];
        return divisor ? toPercentage(this, divisor) : (0, _util.formatNumber)(this);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON(onlyHex = false) {
        // FIXME this return type should by string | number, however BN returns string
        // Options here are
        //   - super.bitLength() - the actual used bits, use hex when close to MAX_SAFE_INTEGER
        //   - this.__internal__bitLength - the max used bits, use hex when larger than native Rust type
        return onlyHex || this.__internal__bitLength > 128 || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
    }
    /**
     * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
     */ toPrimitive() {
        return super.bitLength() > MAX_NUMBER_BITS ? this.toString() : this.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        // NOTE In the case of balances, which have a special meaning on the UI
        // and can be interpreted differently, return a specific value for it so
        // underlying it always matches (no matter which length it actually is)
        return this instanceof this.registry.createClassUnsafe("Balance") ? "Balance" : `${this.isUnsigned ? "u" : "i"}${this.bitLength()}`;
    }
    /**
     * @description Returns the string representation of the value
     * @param base The base to use for the conversion
     */ toString(base) {
        // only included here since we do not inherit docs
        return super.toString(base);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */ toU8a(_isBare) {
        return (0, _util.bnToU8a)(this, {
            bitLength: this.bitLength(),
            isLe: true,
            isNegative: !this.isUnsigned
        });
    }
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9y2cS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Compact", ()=>(0, _compactJs.Compact));
parcelHelpers.export(exports, "DoNotConstruct", ()=>(0, _doNotConstructJs.DoNotConstruct));
parcelHelpers.export(exports, "Enum", ()=>(0, _enumJs.Enum));
parcelHelpers.export(exports, "Int", ()=>(0, _intJs.Int));
parcelHelpers.export(exports, "Null", ()=>(0, _nullJs.Null));
parcelHelpers.export(exports, "Option", ()=>(0, _optionJs.Option));
parcelHelpers.export(exports, "Result", ()=>(0, _resultJs.Result));
parcelHelpers.export(exports, "Tuple", ()=>(0, _tupleJs.Tuple));
parcelHelpers.export(exports, "UInt", ()=>(0, _uintJs.UInt));
parcelHelpers.export(exports, "Vec", ()=>(0, _vecJs.Vec));
parcelHelpers.export(exports, "VecAny", ()=>(0, _vecAnyJs.VecAny));
parcelHelpers.export(exports, "VecFixed", ()=>(0, _vecFixedJs.VecFixed));
var _compactJs = require("./Compact.js");
var _doNotConstructJs = require("./DoNotConstruct.js");
var _enumJs = require("./Enum.js");
var _intJs = require("./Int.js");
var _nullJs = require("./Null.js");
var _optionJs = require("./Option.js");
var _resultJs = require("./Result.js");
var _tupleJs = require("./Tuple.js");
var _uintJs = require("./UInt.js");
var _vecJs = require("./Vec.js");
var _vecAnyJs = require("./VecAny.js");
var _vecFixedJs = require("./VecFixed.js");

},{"./Compact.js":"6yd8y","./DoNotConstruct.js":"5ONYx","./Enum.js":"8x85c","./Int.js":"5SyvB","./Null.js":"9GkZn","./Option.js":"gqQka","./Result.js":"hoW8i","./Tuple.js":"jkm77","./UInt.js":"7DnCN","./Vec.js":"kpQbu","./VecAny.js":false,"./VecFixed.js":"7MlTe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6yd8y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Compact
 * @description
 * A compact length-encoding codec wrapper. It performs the same function as Length, however
 * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly
 * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking
 * a number and making the compact representation thereof
 */ parcelHelpers.export(exports, "Compact", ()=>Compact);
var _util = require("@polkadot/util");
var _indexJs = require("../utils/index.js");
function decodeCompact(registry, Type, value) {
    if ((0, _util.isU8a)(value)) {
        const [decodedLength, bn] = (value[0] & 3) < 3 ? (0, _util.compactFromU8aLim)(value) : (0, _util.compactFromU8a)(value);
        return [
            new Type(registry, bn),
            decodedLength
        ];
    } else if (value instanceof Compact) {
        const raw = value.unwrap();
        return raw instanceof Type ? [
            raw,
            0
        ] : [
            new Type(registry, raw),
            0
        ];
    } else if (value instanceof Type) return [
        value,
        0
    ];
    return [
        new Type(registry, value),
        0
    ];
}
class Compact {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__Type;
    __internal__raw;
    constructor(registry, Type, value = 0, { definition, setDefinition = (0, _util.identity) } = {}){
        this.registry = registry;
        this.__internal__Type = definition || setDefinition((0, _indexJs.typeToConstructor)(registry, Type));
        const [raw, decodedLength] = decodeCompact(registry, this.__internal__Type, value);
        this.initialU8aLength = decodedLength;
        this.__internal__raw = raw;
    }
    static with(Type) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d)=>definition = d;
        return class extends Compact {
            constructor(registry, value){
                super(registry, Type, value, {
                    definition,
                    setDefinition
                });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */ get isEmpty() {
        return this.__internal__raw.isEmpty;
    }
    /**
     * @description Returns the number of bits in the value
     */ bitLength() {
        return this.__internal__raw.bitLength();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return this.__internal__raw.eq(other instanceof Compact ? other.__internal__raw : other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            outer: [
                this.toU8a()
            ]
        };
    }
    /**
     * @description Returns a BigInt representation of the number
     */ toBigInt() {
        return this.__internal__raw.toBigInt();
    }
    /**
     * @description Returns the BN representation of the number
     */ toBn() {
        return this.__internal__raw.toBn();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */ toHex(isLe) {
        return this.__internal__raw.toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        return this.__internal__raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.__internal__raw.toJSON();
    }
    /**
     * @description Returns the number representation for the value
     */ toNumber() {
        return this.__internal__raw.toNumber();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.__internal__raw.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return this.__internal__raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */ toU8a(_isBare) {
        return (0, _util.compactToU8a)(this.__internal__raw.toBn());
    }
    /**
     * @description Returns the embedded [[UInt]] or [[Moment]] value
     */ unwrap() {
        return this.__internal__raw;
    }
}

},{"@polkadot/util":"3HnHw","../utils/index.js":"OTOl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"OTOl1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareArray", ()=>(0, _compareArrayJs.compareArray));
parcelHelpers.export(exports, "compareMap", ()=>(0, _compareMapJs.compareMap));
parcelHelpers.export(exports, "compareSet", ()=>(0, _compareSetJs.compareSet));
parcelHelpers.export(exports, "decodeU8a", ()=>(0, _decodeU8AJs.decodeU8a));
parcelHelpers.export(exports, "decodeU8aStruct", ()=>(0, _decodeU8AJs.decodeU8aStruct));
parcelHelpers.export(exports, "decodeU8aVec", ()=>(0, _decodeU8AJs.decodeU8aVec));
parcelHelpers.export(exports, "sanitize", ()=>(0, _sanitizeJs.sanitize));
parcelHelpers.export(exports, "sortAsc", ()=>(0, _sortValuesJs.sortAsc));
parcelHelpers.export(exports, "sortMap", ()=>(0, _sortValuesJs.sortMap));
parcelHelpers.export(exports, "sortSet", ()=>(0, _sortValuesJs.sortSet));
parcelHelpers.export(exports, "mapToTypeMap", ()=>(0, _toConstructorsJs.mapToTypeMap));
parcelHelpers.export(exports, "typesToConstructors", ()=>(0, _toConstructorsJs.typesToConstructors));
parcelHelpers.export(exports, "typeToConstructor", ()=>(0, _toConstructorsJs.typeToConstructor));
parcelHelpers.export(exports, "typesToMap", ()=>(0, _typesToMapJs.typesToMap));
var _compareArrayJs = require("./compareArray.js");
var _compareMapJs = require("./compareMap.js");
var _compareSetJs = require("./compareSet.js");
var _decodeU8AJs = require("./decodeU8a.js");
var _sanitizeJs = require("./sanitize.js");
var _sortValuesJs = require("./sortValues.js");
var _toConstructorsJs = require("./toConstructors.js");
var _typesToMapJs = require("./typesToMap.js");

},{"./compareArray.js":"aVGtj","./compareMap.js":"lyYsC","./compareSet.js":"kM2qo","./decodeU8a.js":"kB9KK","./sanitize.js":"h150C","./sortValues.js":"6P72R","./toConstructors.js":"9kEo3","./typesToMap.js":"21OUE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lyYsC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareMap", ()=>compareMap);
var _util = require("@polkadot/util");
var _utilJs = require("./util.js");
function hasMismatch(a, b) {
    return (0, _util.isUndefined)(a) || ((0, _utilJs.hasEq)(a) ? !a.eq(b) : a !== b);
}
function notEntry(value) {
    return !Array.isArray(value) || value.length !== 2;
}
function compareMapArray(a, b) {
    // equal number of entries and each entry in the array should match
    return a.size === b.length && !b.some((e)=>notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
}
function compareMap(a, b) {
    if (Array.isArray(b)) return compareMapArray(a, b);
    else if (b instanceof Map) return compareMapArray(a, [
        ...b.entries()
    ]);
    else if ((0, _util.isObject)(b)) return compareMapArray(a, Object.entries(b));
    return false;
}

},{"@polkadot/util":"3HnHw","./util.js":"c7QwJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kM2qo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareSet", ()=>compareSet);
var _util = require("@polkadot/util");
function compareSetArray(a, b) {
    // equal number of entries and each entry in the array should match
    return a.size === b.length && !b.some((e)=>!a.has(e));
}
function compareSet(a, b) {
    if (Array.isArray(b)) return compareSetArray(a, b);
    else if (b instanceof Set) return compareSetArray(a, [
        ...b.values()
    ]);
    else if ((0, _util.isObject)(b)) return compareSetArray(a, Object.values(b));
    return false;
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kB9KK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 *
 * Given an u8a, and an array of Type constructors, decode the u8a against the
 * types, and return an array of decoded values.
 *
 * @param u8a - The u8a to decode.
 * @param result - The result array (will be returned with values pushed)
 * @param types - The array of CodecClass to decode the U8a against.
 */ parcelHelpers.export(exports, "decodeU8a", ()=>decodeU8a);
/**
 * @internal
 *
 * Split from decodeU8a since this is specialized to zip returns ... while we duplicate, this
 * is all on the hot-path, so it is not great, however there is (some) method behind the madness
 */ parcelHelpers.export(exports, "decodeU8aStruct", ()=>decodeU8aStruct);
/**
 * @internal
 *
 * Split from decodeU8a since this is specialized to 1 instance ... while we duplicate, this
 * is all on the hot-path, so it is not great, however there is (some) method behind the madness
 */ parcelHelpers.export(exports, "decodeU8aVec", ()=>decodeU8aVec);
var _util = require("@polkadot/util");
/** @internal */ function formatFailure(registry, fn, _result, { message }, u8a, i, count, Type, key) {
    let type = "";
    try {
        type = `: ${new Type(registry).toRawType()}`;
    } catch  {
    // ignore
    }
    // This is extra debugging info (we most-probably want this in in some way, shape or form,
    // but at this point not quite sure how to include and format it (it can be quite massive)
    // console.error(JSON.stringify(result, null, 2));
    return `${fn}: failed at ${(0, _util.u8aToHex)(u8a.subarray(0, 16))}\u{2026}${key ? ` on ${key}` : ""} (index ${i + 1}/${count})${type}:: ${message}`;
}
function decodeU8a(registry, result, u8a, [Types, keys]) {
    const count = result.length;
    let offset = 0;
    let i = 0;
    try {
        while(i < count){
            const value = new Types[i](registry, u8a.subarray(offset));
            offset += value.initialU8aLength || value.encodedLength;
            result[i] = value;
            i++;
        }
    } catch (error) {
        throw new Error(formatFailure(registry, "decodeU8a", result, error, u8a.subarray(offset), i, count, Types[i], keys[i]));
    }
    return [
        result,
        offset
    ];
}
function decodeU8aStruct(registry, result, u8a, [Types, keys]) {
    const count = result.length;
    let offset = 0;
    let i = 0;
    try {
        while(i < count){
            const value = new Types[i](registry, u8a.subarray(offset));
            offset += value.initialU8aLength || value.encodedLength;
            result[i] = [
                keys[i],
                value
            ];
            i++;
        }
    } catch (error) {
        throw new Error(formatFailure(registry, "decodeU8aStruct", result, error, u8a.subarray(offset), i, count, Types[i], keys[i]));
    }
    return [
        result,
        offset
    ];
}
function decodeU8aVec(registry, result, u8a, startAt, Type) {
    const count = result.length;
    let offset = startAt;
    let i = 0;
    try {
        while(i < count){
            const value = new Type(registry, u8a.subarray(offset));
            offset += value.initialU8aLength || value.encodedLength;
            result[i] = value;
            i++;
        }
    } catch (error) {
        throw new Error(formatFailure(registry, "decodeU8aVec", result, error, u8a.subarray(offset), i, count, Type));
    }
    return [
        offset,
        offset - startAt
    ];
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h150C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "trim", ()=>trim);
parcelHelpers.export(exports, "findClosing", ()=>findClosing);
parcelHelpers.export(exports, "alias", ()=>alias);
parcelHelpers.export(exports, "cleanupCompact", ()=>cleanupCompact);
parcelHelpers.export(exports, "flattenSingleTuple", ()=>flattenSingleTuple);
parcelHelpers.export(exports, "removeExtensions", ()=>removeExtensions);
parcelHelpers.export(exports, "removeColons", ()=>removeColons);
parcelHelpers.export(exports, "removeGenerics", ()=>removeGenerics);
parcelHelpers.export(exports, "removePairOf", ()=>removePairOf);
parcelHelpers.export(exports, "removeTraits", ()=>removeTraits);
parcelHelpers.export(exports, "removeWrap", ()=>removeWrap);
parcelHelpers.export(exports, "sanitize", ()=>sanitize);
const BOUNDED = [
    "BTreeMap",
    "BTreeSet",
    "HashMap",
    "Vec"
];
const ALLOWED_BOXES = BOUNDED.concat([
    "Compact",
    "DoNotConstruct",
    "Int",
    "Linkage",
    "Range",
    "RangeInclusive",
    "Result",
    "Opaque",
    "Option",
    "UInt",
    "WrapperKeepOpaque",
    "WrapperOpaque"
]);
const BOX_PRECEDING = [
    "<",
    "(",
    "[",
    '"',
    ",",
    " "
]; // start of vec, tuple, fixed array, part of struct def or in tuple
const mappings = [
    // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
    alias("<T::InherentOfflineReport as InherentOfflineReport>::Inherent", "InherentOfflineReport", false),
    alias("VecDeque<", "Vec<", false),
    // <T::Balance as HasCompact>
    cleanupCompact(),
    // Change BoundedVec<Type, Size> to Vec<Type>
    removeExtensions("Bounded", true),
    // Change WeakVec<Type> to Vec<Type>
    removeExtensions("Weak", false),
    // Remove all the trait prefixes
    removeTraits(),
    // remove PairOf<T> -> (T, T)
    removePairOf(),
    // remove boxing, `Box<Proposal>` -> `Proposal`
    removeWrap("Box<"),
    // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
    removeGenerics(),
    // alias String -> Text (compat with jsonrpc methods)
    alias("String", "Text"),
    // alias Vec<u8> -> Bytes
    alias("Vec<u8>", "Bytes"),
    alias("&\\[u8\\]", "Bytes"),
    alias("&'static\\[u8\\]", "Bytes"),
    // alias RawAddress -> Address
    alias("RawAddress", "Address"),
    // lookups, mapped to Address/AccountId as appropriate in runtime
    alias("Lookup::Source", "LookupSource"),
    alias("Lookup::Target", "LookupTarget"),
    // HACK duplication between contracts & primitives, however contracts prefixed with exec
    alias("exec::StorageKey", "ContractStorageKey"),
    // flattens tuples with one value, `(AccountId)` -> `AccountId`
    flattenSingleTuple(),
    // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
    removeColons(),
    // remove all trailing spaces - this should always be the last
    trim()
];
function trim() {
    return (value)=>value.trim();
}
function findClosing(value, start) {
    let depth = 0;
    for(let i = start, count = value.length; i < count; i++){
        if (value[i] === ">") {
            if (!depth) return i;
            depth--;
        } else if (value[i] === "<") depth++;
    }
    throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
}
function alias(src, dest, withChecks = true) {
    const from = new RegExp(`(^${src}|${BOX_PRECEDING.map((box)=>`\\${box}${src}`).join("|")})`, "g");
    const to = (src)=>{
        from.lastIndex = 0;
        return withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest;
    };
    return (value)=>value.replace(from, to);
}
function cleanupCompact() {
    return (value)=>{
        if (value.includes(" as HasCompact")) {
            for(let i = 0, count = value.length; i < count; i++)if (value[i] === "<") {
                const end = findClosing(value, i + 1) - 14;
                if (value.substring(end, end + 14) === " as HasCompact") value = `Compact<${value.substring(i + 1, end)}>`;
            }
        }
        return value;
    };
}
function flattenSingleTuple() {
    const from1 = /,\)/g;
    const from2 = /\(([^,]+)\)/;
    return (value)=>{
        from1.lastIndex = 0;
        return value// tuples may have trailing commas, e.g. (u32, BlockNumber, )
        .replace(from1, ")")// change (u32) -> u32
        .replace(from2, "$1");
    };
}
function replaceTagWith(value, matcher, replacer) {
    let index = -1;
    while(true){
        index = value.indexOf(matcher, index + 1);
        if (index === -1) return value;
        const start = index + matcher.length;
        const end = findClosing(value, start);
        value = `${value.substring(0, index)}${replacer(value.substring(start, end))}${value.substring(end + 1)}`;
    }
}
function removeExtensions(type, isSized) {
    return (value)=>{
        for(let i = 0, count = BOUNDED.length; i < count; i++){
            const tag = BOUNDED[i];
            value = replaceTagWith(value, `${type}${tag}<`, (v)=>{
                const parts = v.split(",").map((s)=>s.trim()).filter((s)=>s);
                if (isSized) parts.pop();
                return `${tag}<${parts.join(",")}>`;
            });
        }
        return value;
    };
}
function removeColons() {
    return (value)=>{
        let index = 0;
        while(index !== -1){
            index = value.indexOf("::");
            if (index === 0) value = value.substring(2);
            else if (index !== -1) {
                let start = index;
                while(start !== -1 && !BOX_PRECEDING.includes(value[start]))start--;
                value = `${value.substring(0, start + 1)}${value.substring(index + 2)}`;
            }
        }
        return value;
    };
}
function removeGenerics() {
    return (value)=>{
        for(let i = 0, count = value.length; i < count; i++)if (value[i] === "<") {
            // check against the allowed wrappers, be it Vec<..>, Option<...> ...
            const box = ALLOWED_BOXES.find((box)=>{
                const start = i - box.length;
                return start >= 0 && value.substring(start, i) === box && // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
                (start === 0 || BOX_PRECEDING.includes(value[start - 1]));
            });
            // we have not found anything, unwrap generic innards
            if (!box) {
                const end = findClosing(value, i + 1);
                value = `${value.substring(0, i)}${value.substring(end + 1)}`;
            }
        }
        return value;
    };
}
function removePairOf() {
    const replacer = (v)=>`(${v},${v})`;
    return (value)=>replaceTagWith(value, "PairOf<", replacer);
}
function removeTraits() {
    const from1 = /\s/g;
    const from2 = /(T|Self)::/g;
    const from3 = /<(T|Self)asTrait>::/g;
    const from4 = /<Tas[a-z]+::Trait>::/g;
    const from5 = /<LookupasStaticLookup>/g;
    const from6 = /::Type/g;
    return (value)=>{
        from1.lastIndex = 0;
        from2.lastIndex = 0;
        from3.lastIndex = 0;
        from4.lastIndex = 0;
        from5.lastIndex = 0;
        from6.lastIndex = 0;
        return value// remove all whitespaces
        .replace(from1, "")// anything `T::<type>` to end up as `<type>`
        .replace(from2, "")// replace `<T as Trait>::` (whitespaces were removed above)
        .replace(from3, "")// replace `<T as something::Trait>::` (whitespaces were removed above)
        .replace(from4, "")// replace <Lookup as StaticLookup>
        .replace(from5, "Lookup")// replace `<...>::Type`
        .replace(from6, "");
    };
}
function removeWrap(check) {
    const replacer = (v)=>v;
    return (value)=>replaceTagWith(value, check, replacer);
}
const sanitizeMap = new Map();
function sanitize(value) {
    const startValue = value.toString();
    const memoized = sanitizeMap.get(startValue);
    if (memoized) return memoized;
    let result = startValue;
    for(let i = 0, count = mappings.length; i < count; i++)result = mappings[i](result);
    sanitizeMap.set(startValue, result);
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6P72R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
* Sort keys/values of BTreeSet/BTreeMap in ascending order for encoding compatibility with Rust's BTreeSet/BTreeMap
* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html)
* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html)
*/ parcelHelpers.export(exports, "sortAsc", ()=>sortAsc);
parcelHelpers.export(exports, "sortSet", ()=>sortSet);
parcelHelpers.export(exports, "sortMap", ()=>sortMap);
var _util = require("@polkadot/util");
/** @internal **/ function isArrayLike(arg) {
    return arg instanceof Uint8Array || Array.isArray(arg);
}
/** @internal **/ function isEnum(arg) {
    return (0, _util.isCodec)(arg) && (0, _util.isNumber)(arg.index) && (0, _util.isCodec)(arg.value);
}
/** @internal */ function isNumberLike(arg) {
    return (0, _util.isNumber)(arg) || (0, _util.isBn)(arg) || (0, _util.isBigInt)(arg);
}
/** @internal */ function sortArray(a, b) {
    // Vec, Tuple, Bytes etc.
    let sortRes = 0;
    const minLen = Math.min(a.length, b.length);
    for(let i = 0; i < minLen; ++i){
        sortRes = sortAsc(a[i], b[i]);
        if (sortRes !== 0) return sortRes;
    }
    return a.length - b.length;
}
function sortAsc(a, b) {
    if (isNumberLike(a) && isNumberLike(b)) return (0, _util.bnToBn)(a).cmp((0, _util.bnToBn)(b));
    else if (a instanceof Map && b instanceof Map) return sortAsc(Array.from(a.values()), Array.from(b.values()));
    else if (isEnum(a) && isEnum(b)) return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
    else if (isArrayLike(a) && isArrayLike(b)) return sortArray(a, b);
    else if ((0, _util.isCodec)(a) && (0, _util.isCodec)(b)) // Text, Bool etc.
    return sortAsc(a.toU8a(true), b.toU8a(true));
    throw new Error(`Attempting to sort unrecognized values: ${(0, _util.stringify)(a)} (typeof ${typeof a}) <-> ${(0, _util.stringify)(b)} (typeof ${typeof b})`);
}
function sortSet(set) {
    return new Set(Array.from(set).sort(sortAsc));
}
function sortMap(map) {
    return new Map(Array.from(map.entries()).sort(([keyA], [keyB])=>sortAsc(keyA, keyB)));
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kEo3":[function(require,module,exports) {
/**
 * @internal
 * From a type string or class, return the associated type class
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "typeToConstructor", ()=>typeToConstructor);
/**
 * @internal
 * Takes an input array of types and returns the associated classes for it
*/ parcelHelpers.export(exports, "typesToConstructors", ()=>typesToConstructors);
/**
 * @internal
 * Takes an input map of the form `{ [string]: string | CodecClass }` and returns a map of `{ [string]: CodecClass }`
 */ parcelHelpers.export(exports, "mapToTypeMap", ()=>mapToTypeMap);
function typeToConstructor(registry, type) {
    return typeof type === "function" ? type : registry.createClassUnsafe(type);
}
function typesToConstructors(registry, types) {
    const count = types.length;
    const result = new Array(count);
    for(let i = 0; i < count; i++)result[i] = typeToConstructor(registry, types[i]);
    return result;
}
function mapToTypeMap(registry, input) {
    const entries = Object.entries(input);
    const count = entries.length;
    const output = [
        new Array(count),
        new Array(count)
    ];
    for(let i = 0; i < count; i++){
        output[1][i] = entries[i][0];
        output[0][i] = typeToConstructor(registry, entries[i][1]);
    }
    return output;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"21OUE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "typesToMap", ()=>typesToMap);
function typesToMap(registry, [Types, keys]) {
    const result = {};
    for(let i = 0, count = keys.length; i < count; i++)result[keys[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ONYx":[function(require,module,exports) {
/**
 * @name DoNotConstruct
 * @description
 * An unknown type that fails on construction with the type info
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DoNotConstruct", ()=>DoNotConstruct);
class DoNotConstruct {
    registry;
    createdAtHash;
    isStorageFallback;
    __internal__neverError;
    constructor(registry, typeName = "DoNotConstruct"){
        this.registry = registry;
        this.__internal__neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
        throw this.__internal__neverError;
    }
    static with(typeName) {
        return class extends DoNotConstruct {
            constructor(registry){
                super(registry, typeName);
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        throw this.__internal__neverError;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        throw this.__internal__neverError;
    }
    /**
     * @description Checks if the value is an empty value (always true)
     */ get isEmpty() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */ eq() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */ inspect() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */ toHex() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */ toHuman() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */ toJSON() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */ toPrimitive() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */ toRawType() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */ toString() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */ toU8a() {
        throw this.__internal__neverError;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8x85c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Enum
 * @description
 * This implements an enum, that based on the value wraps a different type. It is effectively
 * an extension to enum where the value type is determined by the actual index.
 */ parcelHelpers.export(exports, "Enum", ()=>Enum);
var _util = require("@polkadot/util");
var _indexJs = require("../utils/index.js");
var _nullJs = require("./Null.js");
function isRustEnum(def) {
    const defValues = Object.values(def);
    if (defValues.some((v)=>(0, _util.isNumber)(v))) {
        if (!defValues.every((v)=>(0, _util.isNumber)(v) && v >= 0 && v <= 255)) throw new Error("Invalid number-indexed enum definition");
        return false;
    }
    return true;
}
function extractDef(registry, _def) {
    const def = {};
    let isBasic;
    let isIndexed;
    if (Array.isArray(_def)) {
        for(let i = 0, count = _def.length; i < count; i++)def[_def[i]] = {
            Type: (0, _nullJs.Null),
            index: i
        };
        isBasic = true;
        isIndexed = false;
    } else if (isRustEnum(_def)) {
        const [Types, keys] = (0, _indexJs.mapToTypeMap)(registry, _def);
        for(let i = 0, count = keys.length; i < count; i++)def[keys[i]] = {
            Type: Types[i],
            index: i
        };
        isBasic = !Object.values(def).some(({ Type })=>Type !== (0, _nullJs.Null));
        isIndexed = false;
    } else {
        const entries = Object.entries(_def);
        for(let i = 0, count = entries.length; i < count; i++){
            const [key, index] = entries[i];
            def[key] = {
                Type: (0, _nullJs.Null),
                index
            };
        }
        isBasic = true;
        isIndexed = true;
    }
    return {
        def,
        isBasic,
        isIndexed
    };
}
function getEntryType(def, checkIdx) {
    const values = Object.values(def);
    for(let i = 0, count = values.length; i < count; i++){
        const { Type, index } = values[i];
        if (index === checkIdx) return Type;
    }
    throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(", ")}`);
}
function createFromU8a(registry, def, index, value) {
    const Type = getEntryType(def, index);
    return {
        index,
        value: new Type(registry, value)
    };
}
function createFromValue(registry, def, index = 0, value) {
    const Type = getEntryType(def, index);
    return {
        index,
        value: value instanceof Type ? value : new Type(registry, value)
    };
}
function decodeFromJSON(registry, def, key, value) {
    // JSON comes in the form of { "<type (camelCase)>": "<value for type>" }, here we
    // additionally force to lower to ensure forward compat
    const keys = Object.keys(def).map((k)=>k.toLowerCase());
    const keyLower = key.toLowerCase();
    const index = keys.indexOf(keyLower);
    if (index === -1) throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys.join(", ")}`);
    try {
        return createFromValue(registry, def, Object.values(def)[index].index, value);
    } catch (error) {
        throw new Error(`Enum(${key}):: ${error.message}`);
    }
}
function decodeEnum(registry, def, value, index) {
    // NOTE We check the index path first, before looking at values - this allows treating
    // the optional indexes before anything else, more-specific > less-specific
    if ((0, _util.isNumber)(index)) return createFromValue(registry, def, index, value);
    else if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) {
        const u8a = (0, _util.u8aToU8a)(value);
        // nested, we don't want to match isObject below
        if (u8a.length) return createFromU8a(registry, def, u8a[0], u8a.subarray(1));
    } else if (value instanceof Enum) return createFromValue(registry, def, value.index, value.value);
    else if ((0, _util.isNumber)(value)) return createFromValue(registry, def, value);
    else if ((0, _util.isString)(value)) return decodeFromJSON(registry, def, value.toString());
    else if ((0, _util.isObject)(value)) {
        const key = Object.keys(value)[0];
        return decodeFromJSON(registry, def, key, value[key]);
    }
    // Worst-case scenario, return the first with default
    return createFromValue(registry, def, Object.values(def)[0].index);
}
class Enum {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__def;
    __internal__entryIndex;
    __internal__indexes;
    __internal__isBasic;
    __internal__isIndexed;
    __internal__raw;
    constructor(registry, Types, value, index, { definition, setDefinition = (0, _util.identity) } = {}){
        const { def, isBasic, isIndexed } = definition || setDefinition(extractDef(registry, Types));
        // shortcut isU8a as used in SCALE decoding
        const decoded = (0, _util.isU8a)(value) && value.length && !(0, _util.isNumber)(index) ? createFromU8a(registry, def, value[0], value.subarray(1)) : decodeEnum(registry, def, value, index);
        this.registry = registry;
        this.__internal__def = def;
        this.__internal__isBasic = isBasic;
        this.__internal__isIndexed = isIndexed;
        this.__internal__indexes = Object.values(def).map(({ index })=>index);
        this.__internal__entryIndex = this.__internal__indexes.indexOf(decoded.index);
        this.__internal__raw = decoded.value;
        if (this.__internal__raw.initialU8aLength) this.initialU8aLength = 1 + this.__internal__raw.initialU8aLength;
    }
    static with(Types) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d)=>definition = d;
        return class extends Enum {
            static{
                const keys = Array.isArray(Types) ? Types : Object.keys(Types);
                const count = keys.length;
                const asKeys = new Array(count);
                const isKeys = new Array(count);
                for(let i = 0; i < count; i++){
                    const name = (0, _util.stringPascalCase)(keys[i]);
                    asKeys[i] = `as${name}`;
                    isKeys[i] = `is${name}`;
                }
                (0, _util.objectProperties)(this.prototype, isKeys, (_, i, self)=>self.type === keys[i]);
                (0, _util.objectProperties)(this.prototype, asKeys, (k, i, self)=>{
                    if (self.type !== keys[i]) throw new Error(`Cannot convert '${self.type}' via ${k}`);
                    return self.value;
                });
            }
            constructor(registry, value, index){
                super(registry, Types, value, index, {
                    definition,
                    setDefinition
                });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return 1 + this.__internal__raw.encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description The index of the enum value
     */ get index() {
        return this.__internal__indexes[this.__internal__entryIndex];
    }
    /**
     * @description The value of the enum
     */ get inner() {
        return this.__internal__raw;
    }
    /**
     * @description true if this is a basic enum (no values)
     */ get isBasic() {
        return this.__internal__isBasic;
    }
    /**
     * @description Checks if the value is an empty value
     */ get isEmpty() {
        return this.__internal__raw.isEmpty;
    }
    /**
     * @description Checks if the Enum points to a [[Null]] type
     */ get isNone() {
        return this.__internal__raw instanceof (0, _nullJs.Null);
    }
    /**
     * @description The available keys for this enum
     */ get defIndexes() {
        return this.__internal__indexes;
    }
    /**
     * @description The available keys for this enum
     */ get defKeys() {
        return Object.keys(this.__internal__def);
    }
    /**
     * @description The name of the type this enum value represents
     */ get type() {
        return this.defKeys[this.__internal__entryIndex];
    }
    /**
     * @description The value of the enum
     */ get value() {
        return this.__internal__raw;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        // cater for the case where we only pass the enum index
        if ((0, _util.isU8a)(other)) return !this.toU8a().some((entry, index)=>entry !== other[index]);
        else if ((0, _util.isNumber)(other)) return this.toNumber() === other;
        else if (this.__internal__isBasic && (0, _util.isString)(other)) return this.type === other;
        else if ((0, _util.isHex)(other)) return this.toHex() === other;
        else if (other instanceof Enum) return this.index === other.index && this.value.eq(other.value);
        else if ((0, _util.isObject)(other)) return this.value.eq(other[this.type]);
        // compare the actual wrapper value
        return this.value.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        if (this.__internal__isBasic) return {
            outer: [
                new Uint8Array([
                    this.index
                ])
            ]
        };
        const { inner, outer = [] } = this.__internal__raw.inspect();
        return {
            inner,
            outer: [
                new Uint8Array([
                    this.index
                ]),
                ...outer
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        return (0, _util.u8aToHex)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        return this.__internal__isBasic || this.isNone ? this.type : {
            [this.type]: this.__internal__raw.toHuman(isExtended)
        };
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.__internal__isBasic ? this.type : {
            [(0, _util.stringCamelCase)(this.type)]: this.__internal__raw.toJSON()
        };
    }
    /**
     * @description Returns the number representation for the value
     */ toNumber() {
        return this.index;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.__internal__isBasic ? this.type : {
            [(0, _util.stringCamelCase)(this.type)]: this.__internal__raw.toPrimitive()
        };
    }
    /**
     * @description Returns a raw struct representation of the enum types
     */ _toRawStruct() {
        if (this.__internal__isBasic) return this.__internal__isIndexed ? this.defKeys.reduce((out, key, index)=>{
            out[key] = this.__internal__indexes[index];
            return out;
        }, {}) : this.defKeys;
        const entries = Object.entries(this.__internal__def);
        return (0, _indexJs.typesToMap)(this.registry, entries.reduce((out, [key, { Type }], i)=>{
            out[0][i] = Type;
            out[1][i] = key;
            return out;
        }, [
            new Array(entries.length),
            new Array(entries.length)
        ]));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return (0, _util.stringify)({
            _enum: this._toRawStruct()
        });
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return this.isNone ? this.type : (0, _util.stringify)(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        return isBare ? this.__internal__raw.toU8a(isBare) : (0, _util.u8aConcatStrict)([
            new Uint8Array([
                this.index
            ]),
            this.__internal__raw.toU8a(isBare)
        ]);
    }
}

},{"@polkadot/util":"3HnHw","../utils/index.js":"OTOl1","./Null.js":"9GkZn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9GkZn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Null
 * @description
 * Implements a type that does not contain anything (apart from `null`)
 */ parcelHelpers.export(exports, "Null", ()=>Null);
var _util = require("@polkadot/util");
class Null {
    encodedLength = 0;
    isEmpty = true;
    registry;
    createdAtHash;
    initialU8aLength = 0;
    isStorageFallback;
    constructor(registry){
        this.registry = registry;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        throw new Error(".hash is not implemented on Null");
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return other instanceof Null || (0, _util.isNull)(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {};
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        return "0x";
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return null;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return null;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Null";
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return "";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */ toU8a(_isBare) {
        return new Uint8Array();
    }
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5SyvB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Int
 * @description
 * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,
 * this handles the encoding and decoding of those numbers. Upon construction
 * the bitLength is provided and any additional use keeps the number to this
 * length. This extends `BN`, so all methods available on a normal `BN` object
 * is available here.
 * @noInheritDoc
 */ parcelHelpers.export(exports, "Int", ()=>Int);
var _intJs = require("../abstract/Int.js");
class Int extends (0, _intJs.AbstractInt) {
    constructor(registry, value = 0, bitLength){
        super(registry, value, bitLength, true);
    }
    static with(bitLength, typeName) {
        return class extends Int {
            constructor(registry, value){
                super(registry, value, bitLength);
            }
            toRawType() {
                return typeName || super.toRawType();
            }
        };
    }
}

},{"../abstract/Int.js":"93VT5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gqQka":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Option
 * @description
 * An Option is an optional field. Basically the first byte indicates that there is
 * is value to follow. If the byte is `1` there is an actual value. So the Option
 * implements that - decodes, checks for optionality and wraps the required structure
 * with a value if/as required/found.
 */ parcelHelpers.export(exports, "Option", ()=>Option);
var _util = require("@polkadot/util");
var _indexJs = require("../utils/index.js");
var _nullJs = require("./Null.js");
class None extends (0, _nullJs.Null) {
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "None";
    }
}
/** @internal */ function decodeOption(registry, Type, value) {
    if (value instanceof Type) // don't re-create, use as it (which also caters for derived types)
    return value;
    else if (value instanceof Option) {
        if (value.value instanceof Type) // same instance, return it
        return value.value;
        else if (value.isNone) // internal is None, we are also none
        return new None(registry);
        // convert the actual value into known
        return new Type(registry, value.value);
    } else if ((0, _util.isNull)(value) || (0, _util.isUndefined)(value) || value === "0x" || value instanceof None) // anything empty we pass as-is
    return new None(registry);
    else if ((0, _util.isU8a)(value)) // the isU8a check happens last in the if-tree - since the wrapped value
    // may be an instance of it, so Type and Option checks go in first
    return !value.length || value[0] === 0 ? new None(registry) : new Type(registry, value.subarray(1));
    return new Type(registry, value);
}
class Option {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__Type;
    __internal__raw;
    constructor(registry, typeName, value, { definition, setDefinition = (0, _util.identity) } = {}){
        const Type = definition || setDefinition((0, _indexJs.typeToConstructor)(registry, typeName));
        const decoded = (0, _util.isU8a)(value) && value.length && !(0, _util.isCodec)(value) ? value[0] === 0 ? new None(registry) : new Type(registry, value.subarray(1)) : decodeOption(registry, Type, value);
        this.registry = registry;
        this.__internal__Type = Type;
        this.__internal__raw = decoded;
        if (decoded?.initialU8aLength) this.initialU8aLength = 1 + decoded.initialU8aLength;
    }
    static with(Type) {
        let definition;
        const setDefinition = (d)=>{
            definition = d;
            return d;
        };
        return class extends Option {
            constructor(registry, value){
                super(registry, Type, value, {
                    definition,
                    setDefinition
                });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        // boolean byte (has value, doesn't have) along with wrapped length
        return 1 + this.__internal__raw.encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the Option has no value
     */ get isEmpty() {
        return this.isNone;
    }
    /**
     * @description Checks if the Option has no value
     */ get isNone() {
        return this.__internal__raw instanceof None;
    }
    /**
     * @description Checks if the Option has a value
     */ get isSome() {
        return !this.isNone;
    }
    /**
     * @description The actual value for the Option
     */ get value() {
        return this.__internal__raw;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        if (other instanceof Option) return this.isSome === other.isSome && this.value.eq(other.value);
        return this.value.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        if (this.isNone) return {
            outer: [
                new Uint8Array([
                    0
                ])
            ]
        };
        const { inner, outer = [] } = this.__internal__raw.inspect();
        return {
            inner,
            outer: [
                new Uint8Array([
                    1
                ]),
                ...outer
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        // This attempts to align with the JSON encoding - actually in this case
        // the isSome value is correct, however the `isNone` may be problematic
        return this.isNone ? "0x" : (0, _util.u8aToHex)(this.toU8a().subarray(1));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        return this.__internal__raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.isNone ? null : this.__internal__raw.toJSON();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.isNone ? null : this.__internal__raw.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType(isBare) {
        const wrapped = this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType();
        return isBare ? wrapped : `Option<${wrapped}>`;
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return this.__internal__raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        if (isBare) return this.__internal__raw.toU8a(true);
        const u8a = new Uint8Array(this.encodedLength);
        if (this.isSome) {
            u8a.set([
                1
            ]);
            u8a.set(this.__internal__raw.toU8a(), 1);
        }
        return u8a;
    }
    /**
     * @description Returns the value that the Option represents (if available), throws if null
     */ unwrap() {
        if (this.isNone) throw new Error("Option: unwrapping a None value");
        return this.__internal__raw;
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */ unwrapOr(defaultValue) {
        return this.isSome ? this.unwrap() : defaultValue;
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */ unwrapOrDefault() {
        return this.isSome ? this.unwrap() : new this.__internal__Type(this.registry);
    }
}

},{"@polkadot/util":"3HnHw","../utils/index.js":"OTOl1","./Null.js":"9GkZn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hoW8i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Result
 * @description
 * A Result maps to the Rust Result type, that can either wrap a success or error value
 */ parcelHelpers.export(exports, "Result", ()=>Result);
var _enumJs = require("./Enum.js");
class Result extends (0, _enumJs.Enum) {
    constructor(registry, Ok, Err, value){
        // NOTE This is order-dependent, Ok (with index 0) needs to be first
        // eslint-disable-next-line sort-keys
        super(registry, {
            Ok,
            Err
        }, value);
    }
    static with(Types) {
        return class extends Result {
            constructor(registry, value){
                super(registry, Types.Ok, Types.Err, value);
            }
        };
    }
    /**
     * @description Returns the wrapper Err value (if isErr)
     */ get asErr() {
        if (!this.isErr) throw new Error("Cannot extract Err value from Ok result, check isErr first");
        return this.value;
    }
    /**
     * @description Returns the wrapper Ok value (if isOk)
     */ get asOk() {
        if (!this.isOk) throw new Error("Cannot extract Ok value from Err result, check isOk first");
        return this.value;
    }
    /**
     * @description Checks if the Result has no value
     */ get isEmpty() {
        return this.isOk && this.value.isEmpty;
    }
    /**
     * @description Checks if the Result wraps an Err value
     */ get isErr() {
        return !this.isOk;
    }
    /**
     * @description Checks if the Result wraps an Ok value
     */ get isOk() {
        return this.index === 0;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        const Types = this._toRawStruct();
        return `Result<${Types.Ok},${Types.Err}>`;
    }
}

},{"./Enum.js":"8x85c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jkm77":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Tuple
 * @description
 * A Tuple defines an anonymous fixed-length array, where each element has its
 * own type. It extends the base JS `Array` object.
 */ parcelHelpers.export(exports, "Tuple", ()=>Tuple);
var _util = require("@polkadot/util");
var _arrayJs = require("../abstract/Array.js");
var _indexJs = require("../utils/index.js");
/** @internal */ function decodeTuple(registry, result, value, Classes) {
    if (Array.isArray(value)) {
        const Types = Classes[0];
        for(let i = 0, count = Types.length; i < count; i++)try {
            const entry = value?.[i];
            result[i] = entry instanceof Types[i] ? entry : new Types[i](registry, entry);
        } catch (error) {
            throw new Error(`Tuple: failed on ${i}:: ${error.message}`);
        }
        return [
            result,
            0
        ];
    } else if ((0, _util.isHex)(value)) return (0, _indexJs.decodeU8a)(registry, result, (0, _util.u8aToU8a)(value), Classes);
    else if (!value || !result.length) {
        const Types = Classes[0];
        for(let i = 0, count = Types.length; i < count; i++)result[i] = new Types[i](registry);
        return [
            result,
            0
        ];
    }
    throw new Error(`Expected array input to Tuple decoding, found ${typeof value}: ${(0, _util.stringify)(value)}`);
}
class Tuple extends (0, _arrayJs.AbstractArray) {
    __internal__Types;
    constructor(registry, Types, value, { definition, setDefinition = (0, _util.identity) } = {}){
        const Classes = definition || setDefinition(Array.isArray(Types) ? [
            (0, _indexJs.typesToConstructors)(registry, Types),
            []
        ] : (0, _util.isFunction)(Types) || (0, _util.isString)(Types) ? [
            [
                (0, _indexJs.typeToConstructor)(registry, Types)
            ],
            []
        ] : (0, _indexJs.mapToTypeMap)(registry, Types));
        super(registry, Classes[0].length);
        this.initialU8aLength = ((0, _util.isU8a)(value) ? (0, _indexJs.decodeU8a)(registry, this, value, Classes) : decodeTuple(registry, this, value, Classes))[1];
        this.__internal__Types = Classes;
    }
    static with(Types) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d)=>definition = d;
        return class extends Tuple {
            constructor(registry, value){
                super(registry, Types, value, {
                    definition,
                    setDefinition
                });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        let total = 0;
        for(let i = 0, count = this.length; i < count; i++)total += this[i].encodedLength;
        return total;
    }
    /**
     * @description The types definition of the tuple
     */ get Types() {
        return this.__internal__Types[1].length ? this.__internal__Types[1] : this.__internal__Types[0].map((T)=>new T(this.registry).toRawType());
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            inner: this.inspectInner()
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        const types = this.__internal__Types[0].map((T)=>this.registry.getClassName(T) || new T(this.registry).toRawType());
        return `(${types.join(",")})`;
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        // Overwrite the default toString representation of Array.
        return (0, _util.stringify)(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        return (0, _util.u8aConcatStrict)(this.toU8aInner(isBare));
    }
}

},{"@polkadot/util":"3HnHw","../abstract/Array.js":"3VJuv","../utils/index.js":"OTOl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7DnCN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name UInt
 * @description
 * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,
 * this handles the encoding and decoding of those numbers. Upon construction
 * the bitLength is provided and any additional use keeps the number to this
 * length. This extends `BN`, so all methods available on a normal `BN` object
 * is available here.
 * @noInheritDoc
 */ parcelHelpers.export(exports, "UInt", ()=>UInt);
var _intJs = require("../abstract/Int.js");
class UInt extends (0, _intJs.AbstractInt) {
    static with(bitLength, typeName) {
        return class extends UInt {
            constructor(registry, value){
                super(registry, value, bitLength);
            }
            toRawType() {
                return typeName || super.toRawType();
            }
        };
    }
}

},{"../abstract/Int.js":"93VT5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kpQbu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeVec", ()=>decodeVec);
/**
 * @name Vec
 * @description
 * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
 * construction with the passed `Type` in the constructor. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 */ parcelHelpers.export(exports, "Vec", ()=>Vec);
var _util = require("@polkadot/util");
var _arrayJs = require("../abstract/Array.js");
var _indexJs = require("../utils/index.js");
const MAX_LENGTH = 65536;
const l = (0, _util.logger)("Vec");
function decodeVecLength(value) {
    if (Array.isArray(value)) return [
        value,
        value.length,
        0
    ];
    else if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) {
        const u8a = (0, _util.u8aToU8a)(value);
        const [startAt, length] = (0, _util.compactFromU8aLim)(u8a);
        if (length > MAX_LENGTH) throw new Error(`Vec length ${length.toString()} exceeds ${MAX_LENGTH}`);
        return [
            u8a,
            length,
            startAt
        ];
    } else if (!value) return [
        null,
        0,
        0
    ];
    throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof value}: ${(0, _util.stringify)(value)}`);
}
function decodeVec(registry, result, value, startAt, Type) {
    if (Array.isArray(value)) {
        const count = result.length;
        for(let i = 0; i < count; i++){
            // 26/08/2022 this is actually a false positive - after recent eslint upgdates
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const entry = value[i];
            try {
                result[i] = entry instanceof Type ? entry : new Type(registry, entry);
            } catch (error) {
                l.error(`Unable to decode on index ${i}`, error.message);
                throw error;
            }
        }
        return [
            0,
            0
        ];
    } else if (!value) return [
        0,
        0
    ];
    // we don't need more checks, we already limited it via the length decoding
    return (0, _indexJs.decodeU8aVec)(registry, result, (0, _util.u8aToU8a)(value), startAt, Type);
}
class Vec extends (0, _arrayJs.AbstractArray) {
    __internal__Type;
    constructor(registry, Type, value = [], { definition, setDefinition = (0, _util.identity) } = {}){
        const [decodeFrom, length, startAt] = decodeVecLength(value);
        super(registry, length);
        this.__internal__Type = definition || setDefinition((0, _indexJs.typeToConstructor)(registry, Type));
        this.initialU8aLength = ((0, _util.isU8a)(decodeFrom) ? (0, _indexJs.decodeU8aVec)(registry, this, decodeFrom, startAt, this.__internal__Type) : decodeVec(registry, this, decodeFrom, startAt, this.__internal__Type))[0];
    }
    static with(Type) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d)=>definition = d;
        return class extends Vec {
            constructor(registry, value){
                super(registry, Type, value, {
                    definition,
                    setDefinition
                });
            }
        };
    }
    /**
     * @description The type for the items
     */ get Type() {
        return this.__internal__Type.name;
    }
    /**
     * @description Finds the index of the value in the array
     */ indexOf(other) {
        // convert type first, this removes overhead from the eq
        const check = other instanceof this.__internal__Type ? other : new this.__internal__Type(this.registry, other);
        for(let i = 0, count = this.length; i < count; i++){
            if (check.eq(this[i])) return i;
        }
        return -1;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return `Vec<${this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType()}>`;
    }
}

},{"@polkadot/util":"3HnHw","../abstract/Array.js":"3VJuv","../utils/index.js":"OTOl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7MlTe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name VecFixed
 * @description
 * This manages codec arrays of a fixed length
 */ parcelHelpers.export(exports, "VecFixed", ()=>VecFixed);
var _util = require("@polkadot/util");
var _arrayJs = require("../abstract/Array.js");
var _indexJs = require("../utils/index.js");
var _vecJs = require("./Vec.js");
class VecFixed extends (0, _arrayJs.AbstractArray) {
    __internal__Type;
    constructor(registry, Type, length, value = [], { definition, setDefinition = (0, _util.identity) } = {}){
        super(registry, length);
        this.__internal__Type = definition || setDefinition((0, _indexJs.typeToConstructor)(registry, Type));
        this.initialU8aLength = ((0, _util.isU8a)(value) ? (0, _indexJs.decodeU8aVec)(registry, this, value, 0, this.__internal__Type) : (0, _vecJs.decodeVec)(registry, this, value, 0, this.__internal__Type))[1];
    }
    static with(Type, length) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d)=>definition = d;
        return class extends VecFixed {
            constructor(registry, value){
                super(registry, Type, length, value, {
                    definition,
                    setDefinition
                });
            }
        };
    }
    /**
     * @description The type for the items
     */ get Type() {
        return new this.__internal__Type(this.registry).toRawType();
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        let total = 0;
        for(let i = 0, count = this.length; i < count; i++)total += this[i].encodedLength;
        return total;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            inner: this.inspectInner()
        };
    }
    toU8a() {
        // we override, we don't add the length prefix for ourselves, and at the same time we
        // ignore isBare on entries, since they should be properly encoded at all times
        const encoded = this.toU8aInner();
        return encoded.length ? (0, _util.u8aConcatStrict)(encoded) : new Uint8Array([]);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return `[${this.Type};${this.length}]`;
    }
}

},{"@polkadot/util":"3HnHw","../abstract/Array.js":"3VJuv","../utils/index.js":"OTOl1","./Vec.js":"kpQbu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWoC7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BitVec", ()=>(0, _bitVecJs.BitVec));
parcelHelpers.export(exports, "BTreeMap", ()=>(0, _btreeMapJs.BTreeMap));
parcelHelpers.export(exports, "BTreeSet", ()=>(0, _btreeSetJs.BTreeSet));
parcelHelpers.export(exports, "Bytes", ()=>(0, _bytesJs.Bytes));
parcelHelpers.export(exports, "HashMap", ()=>(0, _hashMapJs.HashMap));
parcelHelpers.export(exports, "Linkage", ()=>(0, _linkageJs.Linkage));
parcelHelpers.export(exports, "CodecMap", ()=>(0, _mapJs.CodecMap));
parcelHelpers.export(exports, "Map", ()=>(0, _mapJs.CodecMap));
parcelHelpers.export(exports, "OptionBool", ()=>(0, _optionBoolJs.OptionBool));
parcelHelpers.export(exports, "Range", ()=>(0, _rangeJs.Range));
parcelHelpers.export(exports, "RangeInclusive", ()=>(0, _rangeInclusiveJs.RangeInclusive));
parcelHelpers.export(exports, "Type", ()=>(0, _typeJs.Type));
parcelHelpers.export(exports, "U8aFixed", ()=>(0, _u8AfixedJs.U8aFixed));
parcelHelpers.export(exports, "WrapperKeepOpaque", ()=>(0, _wrapperKeepOpaqueJs.WrapperKeepOpaque));
parcelHelpers.export(exports, "WrapperOpaque", ()=>(0, _wrapperOpaqueJs.WrapperOpaque));
var _bitVecJs = require("./BitVec.js");
var _btreeMapJs = require("./BTreeMap.js");
var _btreeSetJs = require("./BTreeSet.js");
var _bytesJs = require("./Bytes.js");
var _hashMapJs = require("./HashMap.js");
var _linkageJs = require("./Linkage.js");
var _mapJs = require("./Map.js");
var _optionBoolJs = require("./OptionBool.js");
var _rangeJs = require("./Range.js");
var _rangeInclusiveJs = require("./RangeInclusive.js");
var _typeJs = require("./Type.js");
var _u8AfixedJs = require("./U8aFixed.js");
var _wrapperKeepOpaqueJs = require("./WrapperKeepOpaque.js");
var _wrapperOpaqueJs = require("./WrapperOpaque.js");

},{"./BitVec.js":"fbVqP","./BTreeMap.js":"lo3j7","./BTreeSet.js":"7yOKt","./Bytes.js":"c9fmP","./HashMap.js":"5hgIJ","./Linkage.js":false,"./Map.js":false,"./OptionBool.js":"hhl9t","./Range.js":"aJaQy","./RangeInclusive.js":"3TUKZ","./Type.js":"9JZHM","./U8aFixed.js":"f9P3x","./WrapperKeepOpaque.js":"3vngl","./WrapperOpaque.js":"64KfQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fbVqP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name BitVec
 * @description
 * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this
 * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes
 */ parcelHelpers.export(exports, "BitVec", ()=>BitVec);
var _util = require("@polkadot/util");
var _rawJs = require("../native/Raw.js");
/** @internal */ function decodeBitVecU8a(value) {
    if (!value?.length) return [
        0,
        new Uint8Array()
    ];
    // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded
    const [offset, length] = (0, _util.compactFromU8aLim)(value);
    const total = offset + Math.ceil(length / 8);
    if (total > value.length) throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
    return [
        length,
        value.subarray(offset, total)
    ];
}
/** @internal */ function decodeBitVec(value) {
    if (Array.isArray(value) || (0, _util.isString)(value)) {
        const u8a = (0, _util.u8aToU8a)(value);
        return [
            u8a.length / 8,
            u8a
        ];
    }
    return decodeBitVecU8a(value);
}
class BitVec extends (0, _rawJs.Raw) {
    __internal__decodedLength;
    __internal__isMsb;
    // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
    // we are dealing with Lsb, which is the default (as of writing) BitVec format used
    // in the Polkadot code (this only affects the toHuman displays)
    constructor(registry, value, isMsb = false){
        const [decodedLength, u8a] = decodeBitVec(value);
        super(registry, u8a);
        this.__internal__decodedLength = decodedLength;
        this.__internal__isMsb = isMsb;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return this.length + (0, _util.compactToU8a)(this.__internal__decodedLength).length;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            outer: [
                (0, _util.compactToU8a)(this.__internal__decodedLength),
                super.toU8a()
            ]
        };
    }
    /**
     * @description Creates a boolean array of the bit values
     */ toBoolArray() {
        const map = [
            ...this.toU8a(true)
        ].map((v)=>[
                !!(v & 128),
                !!(v & 64),
                !!(v & 32),
                !!(v & 16),
                !!(v & 8),
                !!(v & 4),
                !!(v & 2),
                !!(v & 1)
            ]);
        const count = map.length;
        const result = new Array(8 * count);
        for(let i = 0; i < count; i++){
            const off = i * 8;
            const v = map[i];
            for(let j = 0; j < 8; j++)result[off + j] = this.__internal__isMsb ? v[j] : v[7 - j];
        }
        return result;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return `0b${[
            ...this.toU8a(true)
        ].map((d)=>`00000000${d.toString(2)}`.slice(-8)).map((s)=>this.__internal__isMsb ? s : s.split("").reverse().join("")).join("_")}`;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "BitVec";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        const bitVec = super.toU8a(isBare);
        return isBare ? bitVec : (0, _util.u8aConcatStrict)([
            (0, _util.compactToU8a)(this.__internal__decodedLength),
            bitVec
        ]);
    }
}

},{"@polkadot/util":"3HnHw","../native/Raw.js":"1rSAv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1rSAv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Raw
 * @description
 * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ
 * from other implementations where it will consume the full Uint8Array as passed to it.
 * As such it is meant to be subclassed where the wrapper takes care of the
 * actual lengths instead of used directly.
 * @noInheritDoc
 */ parcelHelpers.export(exports, "Raw", ()=>Raw);
var _util = require("@polkadot/util");
class Raw extends Uint8Array {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    /**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */ static get [Symbol.species]() {
        return Uint8Array;
    }
    constructor(registry, value, initialU8aLength){
        super((0, _util.u8aToU8a)(value));
        this.registry = registry;
        this.initialU8aLength = initialU8aLength;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return this.length;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the wrapped value contains only ASCII printable characters
     */ get isAscii() {
        return (0, _util.isAscii)(this);
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */ get isEmpty() {
        return !this.length || (0, _util.isUndefined)(this.find((b)=>!!b));
    }
    /**
     * @description Returns true if the wrapped value contains only utf8 characters
     */ get isUtf8() {
        return (0, _util.isUtf8)(this);
    }
    /**
     * @description Returns the number of bits in the value
     */ bitLength() {
        return this.length * 8;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        if (other instanceof Uint8Array) return this.length === other.length && !this.some((b, index)=>b !== other[index]);
        return this.eq((0, _util.u8aToU8a)(other));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            outer: [
                this.toU8a()
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        return (0, _util.u8aToHex)(this);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return this.toPrimitive();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.toHex();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        if (this.isAscii) {
            const text = this.toUtf8();
            // ensure we didn't end up with multibyte codepoints
            if ((0, _util.isAscii)(text)) return text;
        }
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Raw";
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */ toU8a(_isBare) {
        return Uint8Array.from(this);
    }
    /**
     * @description Returns the wrapped data as a UTF-8 string
     */ toUtf8() {
        if (!this.isUtf8) throw new Error("The character sequence is not a valid Utf8 string");
        return (0, _util.u8aToString)(this);
    }
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lo3j7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BTreeMap", ()=>BTreeMap);
var _mapJs = require("./Map.js");
class BTreeMap extends (0, _mapJs.CodecMap) {
    static with(keyType, valType) {
        return class extends BTreeMap {
            constructor(registry, value){
                super(registry, keyType, valType, value, "BTreeMap");
            }
        };
    }
}

},{"./Map.js":"jH0oY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jH0oY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CodecMap", ()=>CodecMap);
var _util = require("@polkadot/util");
var _arrayJs = require("../abstract/Array.js");
var _enumJs = require("../base/Enum.js");
var _rawJs = require("../native/Raw.js");
var _structJs = require("../native/Struct.js");
var _indexJs = require("../utils/index.js");
const l = (0, _util.logger)("Map");
/** @internal */ function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
    const output = new Map();
    const [offset, count] = (0, _util.compactFromU8aLim)(u8a);
    const types = [];
    for(let i = 0; i < count; i++)types.push(KeyClass, ValClass);
    const [values, decodedLength] = (0, _indexJs.decodeU8a)(registry, new Array(types.length), u8a.subarray(offset), [
        types,
        []
    ]);
    for(let i = 0, count = values.length; i < count; i += 2)output.set(values[i], values[i + 1]);
    return [
        KeyClass,
        ValClass,
        output,
        offset + decodedLength
    ];
}
/** @internal */ function decodeMapFromMap(registry, KeyClass, ValClass, value) {
    const output = new Map();
    for (const [key, val] of value.entries()){
        const isComplex = KeyClass.prototype instanceof (0, _arrayJs.AbstractArray) || KeyClass.prototype instanceof (0, _structJs.Struct) || KeyClass.prototype instanceof (0, _enumJs.Enum);
        try {
            output.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex && typeof key === "string" ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
        } catch (error) {
            l.error("Failed to decode key or value:", error.message);
            throw error;
        }
    }
    return [
        KeyClass,
        ValClass,
        output,
        0
    ];
}
/**
 * Decode input to pass into constructor.
 *
 * @param KeyClass - Type of the map key
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Map<any, any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonMap
 * @internal
 */ function decodeMap(registry, keyType, valType, value) {
    const KeyClass = (0, _indexJs.typeToConstructor)(registry, keyType);
    const ValClass = (0, _indexJs.typeToConstructor)(registry, valType);
    if (!value) return [
        KeyClass,
        ValClass,
        new Map(),
        0
    ];
    else if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) return decodeMapFromU8a(registry, KeyClass, ValClass, (0, _util.u8aToU8a)(value));
    else if (value instanceof Map) return decodeMapFromMap(registry, KeyClass, ValClass, value);
    else if ((0, _util.isObject)(value)) return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
    throw new Error("Map: cannot decode type");
}
class CodecMap extends Map {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__KeyClass;
    __internal__ValClass;
    __internal__type;
    constructor(registry, keyType, valType, rawValue, type = "HashMap"){
        const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
        super(type === "BTreeMap" ? (0, _indexJs.sortMap)(decoded) : decoded);
        this.registry = registry;
        this.initialU8aLength = decodedLength;
        this.__internal__KeyClass = KeyClass;
        this.__internal__ValClass = ValClass;
        this.__internal__type = type;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        let len = (0, _util.compactToU8a)(this.size).length;
        for (const [k, v] of this.entries())len += k.encodedLength + v.encodedLength;
        return len;
    }
    /**
     * @description Returns a hash of the value
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */ get isEmpty() {
        return this.size === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return (0, _indexJs.compareMap)(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        const inner = [];
        for (const [k, v] of this.entries()){
            inner.push(k.inspect());
            inner.push(v.inspect());
        }
        return {
            inner,
            outer: [
                (0, _util.compactToU8a)(this.size)
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */ toHex() {
        return (0, _util.u8aToHex)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        const json = {};
        for (const [k, v] of this.entries())json[k instanceof (0, _rawJs.Raw) && k.isAscii ? k.toUtf8() : k.toString()] = v.toHuman(isExtended);
        return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        const json = {};
        for (const [k, v] of this.entries())json[k.toString()] = v.toJSON();
        return json;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        const json = {};
        for (const [k, v] of this.entries())json[k instanceof (0, _rawJs.Raw) && k.isAscii ? k.toUtf8() : k.toString()] = v.toPrimitive();
        return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return `${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass) || new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return (0, _util.stringify)(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        const encoded = [];
        if (!isBare) encoded.push((0, _util.compactToU8a)(this.size));
        for (const [k, v] of this.entries())encoded.push(k.toU8a(isBare), v.toU8a(isBare));
        return (0, _util.u8aConcatStrict)(encoded);
    }
}

},{"@polkadot/util":"3HnHw","../abstract/Array.js":"3VJuv","../base/Enum.js":"8x85c","../native/Raw.js":"1rSAv","../native/Struct.js":"fxcsD","../utils/index.js":"OTOl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fxcsD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Struct
 * @description
 * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
 * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
 * values in the constructor and it manages the decoding. It is important that the constructor
 * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
 * it needs to decoded in the specific defined order.
 * @noInheritDoc
 */ parcelHelpers.export(exports, "Struct", ()=>Struct);
var _util = require("@polkadot/util");
var _indexJs = require("../utils/index.js");
function noopSetDefinition(d) {
    return d;
}
/** @internal */ function decodeStructFromObject(registry, [Types, keys], value, jsonMap) {
    let jsonObj;
    const typeofArray = Array.isArray(value);
    const typeofMap = value instanceof Map;
    const count = keys.length;
    if (!typeofArray && !typeofMap && !(0, _util.isObject)(value)) throw new Error(`Struct: Cannot decode value ${(0, _util.stringify)(value)} (typeof ${typeof value}), expected an input object, map or array`);
    else if (typeofArray && value.length !== count) throw new Error(`Struct: Unable to map ${(0, _util.stringify)(value)} array to object with known keys ${keys.join(", ")}`);
    const raw = new Array(count);
    for(let i = 0; i < count; i++){
        const key = keys[i];
        const jsonKey = jsonMap.get(key) || key;
        const Type = Types[i];
        let assign;
        try {
            if (typeofArray) assign = value[i];
            else if (typeofMap) assign = jsonKey && value.get(jsonKey);
            else {
                assign = jsonKey && value[jsonKey];
                if ((0, _util.isUndefined)(assign)) {
                    if ((0, _util.isUndefined)(jsonObj)) {
                        const entries = Object.entries(value);
                        jsonObj = {};
                        for(let e = 0, ecount = entries.length; e < ecount; e++)jsonObj[(0, _util.stringCamelCase)(entries[e][0])] = entries[e][1];
                    }
                    assign = jsonKey && jsonObj[jsonKey];
                }
            }
            raw[i] = [
                key,
                assign instanceof Type ? assign : new Type(registry, assign)
            ];
        } catch (error) {
            let type = Type.name;
            try {
                type = new Type(registry).toRawType();
            } catch  {
            // ignore
            }
            throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
        }
    }
    return [
        raw,
        0
    ];
}
class Struct extends Map {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__jsonMap;
    __internal__Types;
    constructor(registry, Types, value, jsonMap = new Map(), { definition, setDefinition = noopSetDefinition } = {}){
        const typeMap = definition || setDefinition((0, _indexJs.mapToTypeMap)(registry, Types));
        const [decoded, decodedLength] = (0, _util.isU8a)(value) || (0, _util.isHex)(value) ? (0, _indexJs.decodeU8aStruct)(registry, new Array(typeMap[0].length), (0, _util.u8aToU8a)(value), typeMap) : value instanceof Struct ? [
            value,
            0
        ] : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
        super(decoded);
        this.initialU8aLength = decodedLength;
        this.registry = registry;
        this.__internal__jsonMap = jsonMap;
        this.__internal__Types = typeMap;
    }
    static with(Types, jsonMap) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d)=>definition = d;
        return class extends Struct {
            static{
                const keys = Object.keys(Types);
                (0, _util.objectProperties)(this.prototype, keys, (k, _, self)=>self.get(k));
            }
            constructor(registry, value){
                super(registry, Types, value, jsonMap, {
                    definition,
                    setDefinition
                });
            }
        };
    }
    /**
     * @description The available keys for this struct
     */ get defKeys() {
        return this.__internal__Types[1];
    }
    /**
     * @description Checks if the value is an empty value
     */ get isEmpty() {
        for (const v of this.values()){
            if (!v.isEmpty) return false;
        }
        return true;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        let total = 0;
        for (const v of this.values())total += v.encodedLength;
        return total;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns the Type description of the structure
     */ get Type() {
        const result = {};
        const [Types, keys] = this.__internal__Types;
        for(let i = 0, count = keys.length; i < count; i++)result[keys[i]] = new Types[i](this.registry).toRawType();
        return result;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return (0, _indexJs.compareMap)(this, other);
    }
    /**
     * @description Returns a specific names entry in the structure
     * @param key The name of the entry to retrieve
     */ get(key) {
        return super.get(key);
    }
    /**
     * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
     */ getAtIndex(index) {
        return this.toArray()[index];
    }
    /**
     * @description Returns the a types value by name
     */ getT(key) {
        return super.get(key);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect(isBare) {
        const inner = [];
        for (const [k, v] of this.entries())inner.push({
            ...v.inspect(!isBare || (0, _util.isBoolean)(isBare) ? isBare : isBare[k]),
            name: (0, _util.stringCamelCase)(k)
        });
        return {
            inner
        };
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */ toArray() {
        return [
            ...this.values()
        ];
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        return (0, _util.u8aToHex)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        const json = {};
        for (const [k, v] of this.entries())json[k] = v.toHuman(isExtended);
        return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        const json = {};
        for (const [k, v] of this.entries())// Here we pull out the entry against the JSON mapping (if supplied)
        // since this representation goes over RPC and needs to be correct
        json[this.__internal__jsonMap.get(k) || k] = v.toJSON();
        return json;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        const json = {};
        for (const [k, v] of this.entries())json[k] = v.toPrimitive();
        return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return (0, _util.stringify)((0, _indexJs.typesToMap)(this.registry, this.__internal__Types));
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return (0, _util.stringify)(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        const encoded = [];
        for (const [k, v] of this.entries())encoded.push(v.toU8a(!isBare || (0, _util.isBoolean)(isBare) ? isBare : isBare[k]));
        return (0, _util.u8aConcatStrict)(encoded);
    }
}

},{"@polkadot/util":"3HnHw","../utils/index.js":"OTOl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7yOKt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BTreeSet", ()=>BTreeSet);
var _util = require("@polkadot/util");
var _indexJs = require("../utils/index.js");
const l = (0, _util.logger)("BTreeSet");
/** @internal */ function decodeSetFromU8a(registry, ValClass, u8a) {
    const output = new Set();
    const [offset, count] = (0, _util.compactFromU8aLim)(u8a);
    const result = new Array(count);
    const [decodedLength] = (0, _indexJs.decodeU8aVec)(registry, result, u8a, offset, ValClass);
    for(let i = 0; i < count; i++)output.add(result[i]);
    return [
        ValClass,
        output,
        decodedLength
    ];
}
/** @internal */ function decodeSetFromSet(registry, ValClass, value) {
    const output = new Set();
    value.forEach((val)=>{
        try {
            output.add(val instanceof ValClass ? val : new ValClass(registry, val));
        } catch (error) {
            l.error("Failed to decode key or value:", error.message);
            throw error;
        }
    });
    return [
        ValClass,
        output,
        0
    ];
}
/**
 * Decode input to pass into constructor.
 *
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Set<any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonSet
 * @internal
 */ function decodeSet(registry, valType, value) {
    const ValClass = (0, _indexJs.typeToConstructor)(registry, valType);
    if (!value) return [
        ValClass,
        new Set(),
        0
    ];
    else if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) return decodeSetFromU8a(registry, ValClass, (0, _util.u8aToU8a)(value));
    else if (Array.isArray(value) || value instanceof Set) return decodeSetFromSet(registry, ValClass, value);
    throw new Error("BTreeSet: cannot decode type");
}
class BTreeSet extends Set {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__ValClass;
    constructor(registry, valType, rawValue){
        const [ValClass, values, decodedLength] = decodeSet(registry, valType, rawValue);
        super((0, _indexJs.sortSet)(values));
        this.registry = registry;
        this.initialU8aLength = decodedLength;
        this.__internal__ValClass = ValClass;
    }
    static with(valType) {
        return class extends BTreeSet {
            constructor(registry, value){
                super(registry, valType, value);
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        let len = (0, _util.compactToU8a)(this.size).length;
        for (const v of this.values())len += v.encodedLength;
        return len;
    }
    /**
     * @description Returns a hash of the value
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */ get isEmpty() {
        return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */ get strings() {
        return [
            ...super.values()
        ].map((v)=>v.toString());
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return (0, _indexJs.compareSet)(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        const inner = [];
        for (const v of this.values())inner.push(v.inspect());
        return {
            inner,
            outer: [
                (0, _util.compactToU8a)(this.size)
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */ toHex() {
        return (0, _util.u8aToHex)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        const json = [];
        for (const v of this.values())json.push(v.toHuman(isExtended));
        return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        const json = [];
        for (const v of this.values())json.push(v.toJSON());
        return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return `BTreeSet<${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        const json = [];
        for (const v of this.values())json.push(v.toPrimitive());
        return json;
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return (0, _util.stringify)(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        const encoded = [];
        if (!isBare) encoded.push((0, _util.compactToU8a)(this.size));
        for (const v of this.values())encoded.push(v.toU8a(isBare));
        return (0, _util.u8aConcatStrict)(encoded);
    }
}

},{"@polkadot/util":"3HnHw","../utils/index.js":"OTOl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c9fmP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Bytes
 * @description
 * A Bytes wrapper for Vec<u8>. The significant difference between this and a normal Uint8Array
 * is that this version allows for length-encoding. (i.e. it is a variable-item codec, the same
 * as what is found in [[Text]] and [[Vec]])
 */ parcelHelpers.export(exports, "Bytes", ()=>Bytes);
var _util = require("@polkadot/util");
var _rawJs = require("../native/Raw.js");
const MAX_LENGTH = 10485760;
/** @internal */ function decodeBytesU8a(value) {
    if (!value.length) return [
        new Uint8Array(),
        0
    ];
    // handle all other Uint8Array inputs, these do have a length prefix
    const [offset, length] = (0, _util.compactFromU8aLim)(value);
    const total = offset + length;
    if (length > MAX_LENGTH) throw new Error(`Bytes length ${length.toString()} exceeds ${MAX_LENGTH}`);
    else if (total > value.length) throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
    return [
        value.subarray(offset, total),
        total
    ];
}
class Bytes extends (0, _rawJs.Raw) {
    constructor(registry, value){
        const [u8a, decodedLength] = (0, _util.isU8a)(value) && !(value instanceof (0, _rawJs.Raw)) ? decodeBytesU8a(value) : Array.isArray(value) || (0, _util.isString)(value) ? [
            (0, _util.u8aToU8a)(value),
            0
        ] : [
            value,
            0
        ];
        super(registry, u8a, decodedLength);
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return this.length + (0, _util.compactToU8a)(this.length).length;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect(isBare) {
        const clength = (0, _util.compactToU8a)(this.length);
        return {
            outer: isBare ? [
                super.toU8a()
            ] : this.length ? [
                clength,
                super.toU8a()
            ] : [
                clength
            ]
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Bytes";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        return isBare ? super.toU8a(isBare) : (0, _util.compactAddLength)(this);
    }
}

},{"@polkadot/util":"3HnHw","../native/Raw.js":"1rSAv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5hgIJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HashMap", ()=>HashMap);
var _mapJs = require("./Map.js");
class HashMap extends (0, _mapJs.CodecMap) {
    static with(keyType, valType) {
        return class extends HashMap {
            constructor(registry, value){
                super(registry, keyType, valType, value);
            }
        };
    }
}

},{"./Map.js":"jH0oY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hhl9t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name OptionBool
 * @description A specific implementation of Option<bool> than allows for single-byte encoding
 */ parcelHelpers.export(exports, "OptionBool", ()=>OptionBool);
var _util = require("@polkadot/util");
var _optionJs = require("../base/Option.js");
var _boolJs = require("../native/Bool.js");
function decodeU8a(registry, value) {
    // Encoded as -
    //  - 0 = None
    //  - 1 = True
    //  - 2 = False
    return value[0] === 0 ? null : new (0, _boolJs.bool)(registry, value[0] === 1);
}
class OptionBool extends (0, _optionJs.Option) {
    constructor(registry, value){
        super(registry, (0, _boolJs.bool), (0, _util.isU8a)(value) || (0, _util.isHex)(value) ? decodeU8a(registry, (0, _util.u8aToU8a)(value)) : value);
        this.initialU8aLength = 1;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return 1;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */ get isFalse() {
        return this.isSome ? !this.value.valueOf() : false;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */ get isTrue() {
        return this.isSome ? this.value.valueOf() : false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            outer: [
                this.toU8a()
            ]
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType(isBare) {
        return isBare ? "bool" : "Option<bool>";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        if (isBare) return super.toU8a(true);
        return this.isSome ? new Uint8Array([
            this.isTrue ? 1 : 2
        ]) : new Uint8Array([
            0
        ]);
    }
}

},{"@polkadot/util":"3HnHw","../base/Option.js":"gqQka","../native/Bool.js":"d2Fo5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d2Fo5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name bool
 * @description
 * Representation for a boolean value in the system. It extends the base JS `Boolean` class
 * @noInheritDoc
 */ parcelHelpers.export(exports, "bool", ()=>bool);
var _util = require("@polkadot/util");
class bool extends Boolean {
    registry;
    createdAtHash;
    initialU8aLength = 1;
    isStorageFallback;
    constructor(registry, value = false){
        super((0, _util.isU8a)(value) ? value[0] === 1 : value instanceof Boolean ? value.valueOf() : !!value);
        this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return 1;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value (true when it wraps false/default)
     */ get isEmpty() {
        return this.isFalse;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */ get isFalse() {
        return !this.isTrue;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */ get isTrue() {
        return this.valueOf();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            outer: [
                this.toU8a()
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        return (0, _util.u8aToHex)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.valueOf();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "bool";
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return this.toJSON().toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */ toU8a(_isBare) {
        return new Uint8Array([
            this.valueOf() ? 1 : 0
        ]);
    }
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aJaQy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Range
 * @description
 * Rust `Range<T>` representation
 */ parcelHelpers.export(exports, "Range", ()=>Range);
var _tupleJs = require("../base/Tuple.js");
class Range extends (0, _tupleJs.Tuple) {
    __internal__rangeName;
    constructor(registry, Type, value, { rangeName = "Range" } = {}){
        super(registry, [
            Type,
            Type
        ], value);
        this.__internal__rangeName = rangeName;
    }
    static with(Type) {
        return class extends Range {
            constructor(registry, value){
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description Returns the starting range value
     */ get start() {
        return this[0];
    }
    /**
     * @description Returns the ending range value
     */ get end() {
        return this[1];
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return `${this.__internal__rangeName}<${this.start.toRawType()}>`;
    }
}

},{"../base/Tuple.js":"jkm77","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3TUKZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RangeInclusive", ()=>RangeInclusive);
var _rangeJs = require("./Range.js");
class RangeInclusive extends (0, _rangeJs.Range) {
    constructor(registry, Type, value){
        super(registry, Type, value, {
            rangeName: "RangeInclusive"
        });
    }
    static with(Type) {
        return class extends RangeInclusive {
            constructor(registry, value){
                super(registry, Type, value);
            }
        };
    }
}

},{"./Range.js":"aJaQy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9JZHM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Type
 * @description
 * This is a extended version of Text, specifically to handle types. Here we rely fully
 * on what Text provides us, however we also adjust the types received from the runtime,
 * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.
 */ parcelHelpers.export(exports, "Type", ()=>Type);
var _textJs = require("../native/Text.js");
var _indexJs = require("../utils/index.js");
class Type extends (0, _textJs.Text) {
    constructor(registry, value = ""){
        super(registry, value);
        this.setOverride((0, _indexJs.sanitize)(this.toString()));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Type";
    }
}

},{"../native/Text.js":"HLBie","../utils/index.js":"OTOl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"HLBie":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Text
 * @description
 * This is a string wrapper, along with the length. It is used both for strings as well
 * as items such as documentation. It simply extends the standard JS `String` built-in
 * object, inheriting all methods exposed from `String`.
 * @noInheritDoc
 */ parcelHelpers.export(exports, "Text", ()=>Text);
var _util = require("@polkadot/util");
var _rawJs = require("./Raw.js");
const MAX_LENGTH = 131072;
/** @internal */ function decodeText(value) {
    if ((0, _util.isU8a)(value)) {
        if (!value.length) return [
            "",
            0
        ];
        // for Raw, the internal buffer does not have an internal length
        // (the same applies in e.g. Bytes, where length is added at encoding-time)
        if (value instanceof (0, _rawJs.Raw)) return [
            (0, _util.u8aToString)(value),
            0
        ];
        const [offset, length] = (0, _util.compactFromU8aLim)(value);
        const total = offset + length;
        if (length > MAX_LENGTH) throw new Error(`Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);
        else if (total > value.length) throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
        return [
            (0, _util.u8aToString)(value.subarray(offset, total)),
            total
        ];
    } else if ((0, _util.isHex)(value)) return [
        (0, _util.u8aToString)((0, _util.hexToU8a)(value)),
        0
    ];
    return [
        value ? value.toString() : "",
        0
    ];
}
class Text extends String {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__override = null;
    constructor(registry, value){
        const [str, decodedLength] = decodeText(value);
        super(str);
        this.registry = registry;
        this.initialU8aLength = decodedLength;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */ get isEmpty() {
        return this.length === 0;
    }
    /**
     * @description The length of the value
     */ get length() {
        // only included here since we ignore inherited docs
        return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return (0, _util.isString)(other) ? this.toString() === other.toString() : false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        const value = (0, _util.stringToU8a)(super.toString());
        return {
            outer: value.length ? [
                (0, _util.compactToU8a)(value.length),
                value
            ] : [
                (0, _util.compactToU8a)(value.length)
            ]
        };
    }
    /**
     * @description Set an override value for this
     */ setOverride(override) {
        this.__internal__override = override;
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        // like with Vec<u8>, when we are encoding to hex, we don't actually add
        // the length prefix (it is already implied by the actual string length)
        return (0, _util.u8aToHex)(this.toU8a(true));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Text";
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return this.__internal__override || super.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        // NOTE Here we use the super toString (we are not taking overrides into account,
        // rather encoding the original value the string was constructed with)
        const encoded = (0, _util.stringToU8a)(super.toString());
        return isBare ? encoded : (0, _util.compactAddLength)(encoded);
    }
}

},{"@polkadot/util":"3HnHw","./Raw.js":"1rSAv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f9P3x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name U8aFixed
 * @description
 * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant
 * to be used directly, rather is should be subclassed with the specific lengths.
 */ parcelHelpers.export(exports, "U8aFixed", ()=>U8aFixed);
var _util = require("@polkadot/util");
var _rawJs = require("../native/Raw.js");
/** @internal */ function decodeU8aFixed(value, bitLength) {
    const u8a = (0, _util.u8aToU8a)(value);
    const byteLength = bitLength / 8;
    if (!u8a.length) return [
        new Uint8Array(byteLength),
        0
    ];
    if ((0, _util.isU8a)(value) ? u8a.length < byteLength : u8a.length !== byteLength) throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a.length} bytes`);
    return [
        u8a.subarray(0, byteLength),
        byteLength
    ];
}
class U8aFixed extends (0, _rawJs.Raw) {
    constructor(registry, value = new Uint8Array(), bitLength = 256){
        const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
        super(registry, u8a, decodedLength);
    }
    static with(bitLength, typeName) {
        return class extends U8aFixed {
            constructor(registry, value){
                super(registry, value, bitLength);
            }
            toRawType() {
                return typeName || super.toRawType();
            }
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return `[u8;${this.length}]`;
    }
}

},{"@polkadot/util":"3HnHw","../native/Raw.js":"1rSAv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3vngl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WrapperKeepOpaque", ()=>WrapperKeepOpaque);
var _util = require("@polkadot/util");
var _rawJs = require("../native/Raw.js");
var _indexJs = require("../utils/index.js");
var _bytesJs = require("./Bytes.js");
function decodeRaw(registry, typeName, value) {
    const Type = (0, _indexJs.typeToConstructor)(registry, typeName);
    if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) try {
        const [, u8a] = (0, _util.isHex)(value) ? [
            0,
            (0, _util.u8aToU8a)(value)
        ] : value instanceof (0, _rawJs.Raw) ? [
            0,
            value.subarray()
        ] : (0, _util.compactStripLength)(value);
        return [
            Type,
            new Type(registry, u8a),
            value
        ];
    } catch  {
        return [
            Type,
            null,
            value
        ];
    }
    const instance = new Type(registry, value);
    return [
        Type,
        instance,
        (0, _util.compactAddLength)(instance.toU8a())
    ];
}
class WrapperKeepOpaque extends (0, _bytesJs.Bytes) {
    __internal__Type;
    __internal__decoded;
    __internal__opaqueName;
    constructor(registry, typeName, value, { opaqueName = "WrapperKeepOpaque" } = {}){
        const [Type, decoded, u8a] = decodeRaw(registry, typeName, value);
        super(registry, u8a);
        this.__internal__Type = Type;
        this.__internal__decoded = decoded;
        this.__internal__opaqueName = opaqueName;
    }
    static with(Type) {
        return class extends WrapperKeepOpaque {
            constructor(registry, value){
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description Checks if the wrapper is decodable
     */ get isDecoded() {
        return !!this.__internal__decoded;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return this.__internal__decoded ? {
            inner: [
                this.__internal__decoded.inspect()
            ],
            outer: [
                (0, _util.compactToU8a)(this.length)
            ]
        } : {
            outer: [
                (0, _util.compactToU8a)(this.length),
                this.toU8a(true)
            ]
        };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        return this.__internal__decoded ? this.__internal__decoded.toHuman(isExtended) : super.toHuman();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.__internal__decoded ? this.__internal__decoded.toPrimitive() : super.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return `${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type) || (this.__internal__decoded ? this.__internal__decoded.toRawType() : new this.__internal__Type(this.registry).toRawType())}>`;
    }
    /**
     * @description Converts the Object to to a string (either decoded or bytes)
     */ toString() {
        return this.__internal__decoded ? this.__internal__decoded.toString() : super.toString();
    }
    /**
     * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
     */ unwrap() {
        if (!this.__internal__decoded) throw new Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);
        return this.__internal__decoded;
    }
}

},{"@polkadot/util":"3HnHw","../native/Raw.js":"1rSAv","../utils/index.js":"OTOl1","./Bytes.js":"c9fmP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"64KfQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WrapperOpaque", ()=>WrapperOpaque);
var _wrapperKeepOpaqueJs = require("./WrapperKeepOpaque.js");
class WrapperOpaque extends (0, _wrapperKeepOpaqueJs.WrapperKeepOpaque) {
    constructor(registry, typeName, value){
        super(registry, typeName, value, {
            opaqueName: "WrapperOpaque"
        });
    }
    static with(Type) {
        return class extends WrapperOpaque {
            constructor(registry, value){
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
     */ get inner() {
        return this.unwrap();
    }
}

},{"./WrapperKeepOpaque.js":"3vngl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gMGnS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Bool", ()=>(0, _boolJs.bool));
parcelHelpers.export(exports, "bool", ()=>(0, _boolJs.bool));
parcelHelpers.export(exports, "CodecDate", ()=>(0, _dateJs.CodecDate));
parcelHelpers.export(exports, "Date", ()=>(0, _dateJs.CodecDate));
parcelHelpers.export(exports, "Float", ()=>(0, _floatJs.Float));
parcelHelpers.export(exports, "Json", ()=>(0, _jsonJs.Json));
parcelHelpers.export(exports, "Raw", ()=>(0, _rawJs.Raw));
parcelHelpers.export(exports, "CodecSet", ()=>(0, _setJs.CodecSet));
parcelHelpers.export(exports, "Set", ()=>(0, _setJs.CodecSet));
parcelHelpers.export(exports, "Struct", ()=>(0, _structJs.Struct));
parcelHelpers.export(exports, "Text", ()=>(0, _textJs.Text));
var _boolJs = require("./Bool.js");
var _dateJs = require("./Date.js");
var _floatJs = require("./Float.js");
var _jsonJs = require("./Json.js");
var _rawJs = require("./Raw.js");
var _setJs = require("./Set.js");
var _structJs = require("./Struct.js");
var _textJs = require("./Text.js");

},{"./Bool.js":"d2Fo5","./Date.js":false,"./Float.js":false,"./Json.js":"hmUkQ","./Raw.js":"1rSAv","./Set.js":"644Dd","./Struct.js":"fxcsD","./Text.js":"HLBie","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9v5v9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Float
 * @description
 * A Codec wrapper for F32 & F64 values. You generally don't want to be using
 * f32/f64 in your runtime, operations on fixed points numbers are preferable. This class
 * was explicitly added since scale-codec has a flag that enables this and it is available
 * in some eth_* RPCs
 */ parcelHelpers.export(exports, "Float", ()=>Float);
var _util = require("@polkadot/util");
class Float extends Number {
    encodedLength;
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__bitLength;
    constructor(registry, value, { bitLength = 32 } = {}){
        super((0, _util.isU8a)(value) || (0, _util.isHex)(value) ? value.length === 0 ? 0 : (0, _util.u8aToFloat)((0, _util.u8aToU8a)(value), {
            bitLength
        }) : value || 0);
        this.__internal__bitLength = bitLength;
        this.encodedLength = bitLength / 8;
        this.initialU8aLength = this.encodedLength;
        this.registry = registry;
    }
    static with(bitLength) {
        return class extends Float {
            constructor(registry, value){
                super(registry, value, {
                    bitLength
                });
            }
        };
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */ get isEmpty() {
        return this.valueOf() === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return this.valueOf() === Number(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            outer: [
                this.toU8a()
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        return (0, _util.u8aToHex)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return this.toString();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        // Not sure if this is actually a hex or a string value
        // (would need to check against RPCs to see the result here)
        return this.toHex();
    }
    /**
     * @description Returns the number representation (Same as valueOf)
     */ toNumber() {
        return this.valueOf();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return `f${this.__internal__bitLength}`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */ toU8a(_isBare) {
        return (0, _util.floatToU8a)(this, {
            bitLength: this.__internal__bitLength
        });
    }
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hmUkQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Json
 * @description
 * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it
 * implements a Codec, it is limited in that it can only be used with input objects via RPC,
 * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys
 * @noInheritDoc
 */ parcelHelpers.export(exports, "Json", ()=>Json);
var _util = require("@polkadot/util");
var _indexJs = require("../utils/index.js");
/** @internal */ function decodeJson(value) {
    return Object.entries(value || {});
}
class Json extends Map {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    constructor(registry, value){
        const decoded = decodeJson(value);
        super(decoded);
        this.registry = registry;
        (0, _util.objectProperties)(this, decoded.map(([k])=>k), (k)=>this.get(k));
    }
    /**
     * @description Always 0, never encodes as a Uint8Array
     */ get encodedLength() {
        return 0;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */ get isEmpty() {
        return [
            ...this.keys()
        ].length === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return (0, _indexJs.compareMap)(this, other);
    }
    /**
     * @description Returns a typed value from the internal map
     */ getT(key) {
        return this.get(key);
    }
    /**
     * @description Unimplemented, will throw
     */ inspect() {
        throw new Error("Unimplemented");
    }
    /**
     * @description Unimplemented, will throw
     */ toHex() {
        throw new Error("Unimplemented");
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return [
            ...this.entries()
        ].reduce((json, [key, value])=>{
            json[key] = (0, _util.isFunction)(value.toHuman) ? value.toHuman() : value;
            return json;
        }, {});
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return [
            ...this.entries()
        ].reduce((json, [key, value])=>{
            json[key] = value;
            return json;
        }, {});
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return [
            ...this.entries()
        ].reduce((json, [key, value])=>{
            json[key] = (0, _util.isFunction)(value.toPrimitive) ? value.toPrimitive() : value;
            return json;
        }, {});
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Json";
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return (0, _util.stringify)(this.toJSON());
    }
    /**
     * @description Unimplemented, will throw
     */ toU8a(_isBare) {
        throw new Error("Unimplemented");
    }
}

},{"@polkadot/util":"3HnHw","../utils/index.js":"OTOl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"644Dd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Set
 * @description
 * An Set is an array of string values, represented an an encoded type by
 * a bitwise representation of the values.
 */ parcelHelpers.export(exports, "CodecSet", ()=>CodecSet);
var _util = require("@polkadot/util");
var _indexJs = require("../utils/index.js");
function encodeSet(setValues, values) {
    const encoded = new (0, _util.BN)(0);
    for(let i = 0, count = values.length; i < count; i++)encoded.ior((0, _util.bnToBn)(setValues[values[i]] || 0));
    return encoded;
}
/** @internal */ function decodeSetArray(setValues, values) {
    const count = values.length;
    const result = new Array(count);
    for(let i = 0; i < count; i++){
        const key = values[i];
        if ((0, _util.isUndefined)(setValues[key])) throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(", ")}`);
        result[i] = key;
    }
    return result;
}
/** @internal */ function decodeSetNumber(setValues, _value) {
    const bn = (0, _util.bnToBn)(_value);
    const keys = Object.keys(setValues);
    const result = [];
    for(let i = 0, count = keys.length; i < count; i++){
        const key = keys[i];
        if (bn.and((0, _util.bnToBn)(setValues[key])).eq((0, _util.bnToBn)(setValues[key]))) result.push(key);
    }
    const computed = encodeSet(setValues, result);
    if (!bn.eq(computed)) throw new Error(`Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(", ")}`);
    return result;
}
/** @internal */ function decodeSet(setValues, value = 0, bitLength) {
    if (bitLength % 8 !== 0) throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
    const byteLength = bitLength / 8;
    if ((0, _util.isU8a)(value)) return value.length === 0 ? [] : decodeSetNumber(setValues, (0, _util.u8aToBn)(value.subarray(0, byteLength), {
        isLe: true
    }));
    else if ((0, _util.isString)(value)) return decodeSet(setValues, (0, _util.u8aToU8a)(value), byteLength);
    else if (value instanceof Set || Array.isArray(value)) {
        const input = Array.isArray(value) ? value : [
            ...value.values()
        ];
        return decodeSetArray(setValues, input);
    }
    return decodeSetNumber(setValues, value);
}
class CodecSet extends Set {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__allowed;
    __internal__byteLength;
    constructor(registry, setValues, value, bitLength = 8){
        super(decodeSet(setValues, value, bitLength));
        this.registry = registry;
        this.__internal__allowed = setValues;
        this.__internal__byteLength = bitLength / 8;
    }
    static with(values, bitLength) {
        return class extends CodecSet {
            static{
                const keys = Object.keys(values);
                const count = keys.length;
                const isKeys = new Array(count);
                for(let i = 0; i < count; i++)isKeys[i] = `is${(0, _util.stringPascalCase)(keys[i])}`;
                (0, _util.objectProperties)(this.prototype, isKeys, (_, i, self)=>self.strings.includes(keys[i]));
            }
            constructor(registry, value){
                super(registry, values, value, bitLength);
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return this.__internal__byteLength;
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description true is the Set contains no values
     */ get isEmpty() {
        return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */ get strings() {
        return [
            ...super.values()
        ];
    }
    /**
     * @description The encoded value for the set members
     */ get valueEncoded() {
        return encodeSet(this.__internal__allowed, this.strings);
    }
    /**
     * @description adds a value to the Set (extended to allow for validity checking)
     */ add = (key)=>{
        // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
        // we have the isUndefined(this._setValues) in here as well, add is used internally
        // in the Set constructor (so it is undefined at this point, and should allow)
        if (this.__internal__allowed && (0, _util.isUndefined)(this.__internal__allowed[key])) throw new Error(`Set: Invalid key '${key}' on add`);
        super.add(key);
        return this;
    };
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        if (Array.isArray(other)) // we don't actually care about the order, sort the values
        return (0, _indexJs.compareArray)(this.strings.sort(), other.sort());
        else if (other instanceof Set) return this.eq([
            ...other.values()
        ]);
        else if ((0, _util.isNumber)(other) || (0, _util.isBn)(other)) return this.valueEncoded.eq((0, _util.bnToBn)(other));
        return false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return {
            outer: [
                this.toU8a()
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        return (0, _util.u8aToHex)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.strings;
    }
    /**
     * @description The encoded value for the set members
     */ toNumber() {
        return this.valueEncoded.toNumber();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return (0, _util.stringify)({
            _set: this.__internal__allowed
        });
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return `[${this.strings.join(", ")}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */ toU8a(_isBare) {
        return (0, _util.bnToU8a)(this.valueEncoded, {
            bitLength: this.__internal__byteLength * 8,
            isLe: true
        });
    }
}

},{"@polkadot/util":"3HnHw","../utils/index.js":"OTOl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9yjSC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "F32", ()=>(0, _f32Js.f32));
parcelHelpers.export(exports, "f32", ()=>(0, _f32Js.f32));
parcelHelpers.export(exports, "F64", ()=>(0, _f64Js.f64));
parcelHelpers.export(exports, "f64", ()=>(0, _f64Js.f64));
parcelHelpers.export(exports, "I8", ()=>(0, _i8Js.i8));
parcelHelpers.export(exports, "i8", ()=>(0, _i8Js.i8));
parcelHelpers.export(exports, "I16", ()=>(0, _i16Js.i16));
parcelHelpers.export(exports, "i16", ()=>(0, _i16Js.i16));
parcelHelpers.export(exports, "I32", ()=>(0, _i32Js.i32));
parcelHelpers.export(exports, "i32", ()=>(0, _i32Js.i32));
parcelHelpers.export(exports, "I64", ()=>(0, _i64Js.i64));
parcelHelpers.export(exports, "i64", ()=>(0, _i64Js.i64));
parcelHelpers.export(exports, "I128", ()=>(0, _i128Js.i128));
parcelHelpers.export(exports, "i128", ()=>(0, _i128Js.i128));
parcelHelpers.export(exports, "I256", ()=>(0, _i256Js.i256));
parcelHelpers.export(exports, "i256", ()=>(0, _i256Js.i256));
parcelHelpers.export(exports, "ISize", ()=>(0, _isizeJs.isize));
parcelHelpers.export(exports, "isize", ()=>(0, _isizeJs.isize));
parcelHelpers.export(exports, "U8", ()=>(0, _u8Js.u8));
parcelHelpers.export(exports, "u8", ()=>(0, _u8Js.u8));
parcelHelpers.export(exports, "U16", ()=>(0, _u16Js.u16));
parcelHelpers.export(exports, "u16", ()=>(0, _u16Js.u16));
parcelHelpers.export(exports, "U32", ()=>(0, _u32Js.u32));
parcelHelpers.export(exports, "u32", ()=>(0, _u32Js.u32));
parcelHelpers.export(exports, "U64", ()=>(0, _u64Js.u64));
parcelHelpers.export(exports, "u64", ()=>(0, _u64Js.u64));
parcelHelpers.export(exports, "U128", ()=>(0, _u128Js.u128));
parcelHelpers.export(exports, "u128", ()=>(0, _u128Js.u128));
parcelHelpers.export(exports, "U256", ()=>(0, _u256Js.u256));
parcelHelpers.export(exports, "u256", ()=>(0, _u256Js.u256));
parcelHelpers.export(exports, "USize", ()=>(0, _usizeJs.usize));
parcelHelpers.export(exports, "usize", ()=>(0, _usizeJs.usize));
var _f32Js = require("./F32.js");
var _f64Js = require("./F64.js");
var _i8Js = require("./I8.js");
var _i16Js = require("./I16.js");
var _i32Js = require("./I32.js");
var _i64Js = require("./I64.js");
var _i128Js = require("./I128.js");
var _i256Js = require("./I256.js");
var _isizeJs = require("./ISize.js");
var _u8Js = require("./U8.js");
var _u16Js = require("./U16.js");
var _u32Js = require("./U32.js");
var _u64Js = require("./U64.js");
var _u128Js = require("./U128.js");
var _u256Js = require("./U256.js");
var _usizeJs = require("./USize.js");

},{"./F32.js":"awSOK","./F64.js":"6b4Od","./I8.js":"lhoVQ","./I16.js":"jHMKD","./I32.js":"fbklR","./I64.js":"cyjGn","./I128.js":"8VHJL","./I256.js":"4VZP6","./ISize.js":"1TK84","./U8.js":"kBtxK","./U16.js":"bOhln","./U32.js":"f75PP","./U64.js":"kMWnC","./U128.js":"hbDKB","./U256.js":"9kzUq","./USize.js":"7nYsN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"awSOK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name f32
 * @description
 * A 32-bit float
 */ parcelHelpers.export(exports, "f32", ()=>f32);
var _floatJs = require("../native/Float.js");
class f32 extends (0, _floatJs.Float).with(32) {
    // NOTE without this, we cannot properly determine extensions
    __FloatType = "f32";
}

},{"../native/Float.js":"9v5v9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6b4Od":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name f64
 * @description
 * A 64-bit float
 */ parcelHelpers.export(exports, "f64", ()=>f64);
var _floatJs = require("../native/Float.js");
class f64 extends (0, _floatJs.Float).with(64) {
    // NOTE without this, we cannot properly determine extensions
    __FloatType = "f64";
}

},{"../native/Float.js":"9v5v9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lhoVQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name i8
 * @description
 * An 8-bit signed integer
 */ parcelHelpers.export(exports, "i8", ()=>i8);
var _intJs = require("../base/Int.js");
class i8 extends (0, _intJs.Int).with(8) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = "i8";
}

},{"../base/Int.js":"5SyvB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jHMKD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name i16
 * @description
 * A 16-bit signed integer
 */ parcelHelpers.export(exports, "i16", ()=>i16);
var _intJs = require("../base/Int.js");
class i16 extends (0, _intJs.Int).with(16) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = "i16";
}

},{"../base/Int.js":"5SyvB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fbklR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name i32
 * @description
 * A 32-bit signed integer
 */ parcelHelpers.export(exports, "i32", ()=>i32);
var _intJs = require("../base/Int.js");
class i32 extends (0, _intJs.Int).with(32) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = "i32";
}

},{"../base/Int.js":"5SyvB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyjGn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name i64
 * @description
 * A 64-bit signed integer
 */ parcelHelpers.export(exports, "i64", ()=>i64);
var _intJs = require("../base/Int.js");
class i64 extends (0, _intJs.Int).with(64) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = "i64";
}

},{"../base/Int.js":"5SyvB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8VHJL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name i128
 * @description
 * A 128-bit signed integer
 */ parcelHelpers.export(exports, "i128", ()=>i128);
var _intJs = require("../base/Int.js");
class i128 extends (0, _intJs.Int).with(128) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = "i128";
}

},{"../base/Int.js":"5SyvB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4VZP6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name i256
 * @description
 * A 256-bit signed integer
 */ parcelHelpers.export(exports, "i256", ()=>i256);
var _intJs = require("../base/Int.js");
class i256 extends (0, _intJs.Int).with(256) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = "i256";
}

},{"../base/Int.js":"5SyvB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1TK84":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name ISize
 * @description
 * A System default signed number, typically used in RPC to report non-consensus
 * data. It is a wrapper for [[I32]] as a WASM default (as generated by Rust bindings).
 * It is not to be used, since it creates consensus mismatches.
 */ parcelHelpers.export(exports, "isize", ()=>isize);
var _i32Js = require("./I32.js");
class isize extends (0, _i32Js.i32) {
    constructor(registry, value){
        super(registry, value);
        throw new Error("The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.");
    }
}

},{"./I32.js":"fbklR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kBtxK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u8
 * @description
 * An 8-bit unsigned integer
 */ parcelHelpers.export(exports, "u8", ()=>u8);
var _uintJs = require("../base/UInt.js");
class u8 extends (0, _uintJs.UInt).with(8) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = "u8";
}

},{"../base/UInt.js":"7DnCN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bOhln":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u16
 * @description
 * A 16-bit unsigned integer
 */ parcelHelpers.export(exports, "u16", ()=>u16);
var _uintJs = require("../base/UInt.js");
class u16 extends (0, _uintJs.UInt).with(16) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = "u16";
}

},{"../base/UInt.js":"7DnCN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f75PP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u32
 * @description
 * A 32-bit unsigned integer
 */ parcelHelpers.export(exports, "u32", ()=>u32);
var _uintJs = require("../base/UInt.js");
class u32 extends (0, _uintJs.UInt).with(32) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = "u32";
}

},{"../base/UInt.js":"7DnCN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kMWnC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u64
 * @description
 * A 64-bit unsigned integer
 */ parcelHelpers.export(exports, "u64", ()=>u64);
var _uintJs = require("../base/UInt.js");
class u64 extends (0, _uintJs.UInt).with(64) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = "u64";
}

},{"../base/UInt.js":"7DnCN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hbDKB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u128
 * @description
 * A 128-bit unsigned integer
 */ parcelHelpers.export(exports, "u128", ()=>u128);
var _uintJs = require("../base/UInt.js");
class u128 extends (0, _uintJs.UInt).with(128) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = "u128";
}

},{"../base/UInt.js":"7DnCN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kzUq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name u256
 * @description
 * A 256-bit unsigned integer
 */ parcelHelpers.export(exports, "u256", ()=>u256);
var _uintJs = require("../base/UInt.js");
class u256 extends (0, _uintJs.UInt).with(256) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = "u256";
}

},{"../base/UInt.js":"7DnCN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7nYsN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name USize
 * @description
 * A System default unsigned number, typically used in RPC to report non-consensus
 * data. It is a wrapper for [[U32]] as a WASM default (as generated by Rust bindings).
 * It is not to be used, since it created consensus mismatches.
 */ parcelHelpers.export(exports, "usize", ()=>usize);
var _u32Js = require("./U32.js");
class usize extends (0, _u32Js.u32) {
    constructor(registry, value){
        super(registry, value);
        throw new Error("The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.");
    }
}

},{"./U32.js":"f75PP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gN0Rn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTypeDef", ()=>getTypeDef);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _indexJs = require("../types/index.js");
var _typeSplitJs = require("./typeSplit.js");
const KNOWN_INTERNALS = [
    "_alias",
    "_fallback"
];
function getTypeString(typeOrObj) {
    return (0, _util.isString)(typeOrObj) ? typeOrObj.toString() : (0, _util.stringify)(typeOrObj);
}
function isRustEnum(details) {
    const values = Object.values(details);
    if (values.some((v)=>(0, _util.isNumber)(v))) {
        if (!values.every((v)=>(0, _util.isNumber)(v) && v >= 0 && v <= 255)) throw new Error("Invalid number-indexed enum definition");
        return false;
    }
    return true;
}
function _decodeEnum(value, details, count, fallbackType) {
    value.info = (0, _indexJs.TypeDefInfo).Enum;
    value.fallbackType = fallbackType;
    // not as pretty, but remain compatible with oo7 for both struct and Array types
    if (Array.isArray(details)) value.sub = details.map((name, index)=>({
            index,
            info: (0, _indexJs.TypeDefInfo).Plain,
            name,
            type: "Null"
        }));
    else if (isRustEnum(details)) value.sub = Object.entries(details).map(([name, typeOrObj], index)=>(0, _util.objectSpread)({}, getTypeDef(getTypeString(typeOrObj || "Null"), {
            name
        }, count), {
            index
        }));
    else value.sub = Object.entries(details).map(([name, index])=>({
            index,
            info: (0, _indexJs.TypeDefInfo).Plain,
            name,
            type: "Null"
        }));
    return value;
}
function _decodeSet(value, details, fallbackType) {
    value.info = (0, _indexJs.TypeDefInfo).Set;
    value.fallbackType = fallbackType;
    value.length = details._bitLength;
    value.sub = Object.entries(details).filter(([name])=>!name.startsWith("_")).map(([name, index])=>({
            index,
            info: (0, _indexJs.TypeDefInfo).Plain,
            name,
            type: "Null"
        }));
    return value;
}
function _decodeStruct(value, type, _, count) {
    const parsed = JSON.parse(type);
    const keys = Object.keys(parsed);
    if (parsed._enum) return _decodeEnum(value, parsed._enum, count, parsed._fallback);
    else if (parsed._set) return _decodeSet(value, parsed._set, parsed._fallback);
    value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : undefined;
    value.fallbackType = parsed._fallback;
    value.sub = keys.filter((name)=>!KNOWN_INTERNALS.includes(name)).map((name)=>getTypeDef(getTypeString(parsed[name]), {
            name
        }, count));
    return value;
}
function _decodeFixedVec(value, type, _, count) {
    const max = type.length - 1;
    let index = -1;
    let inner = 0;
    for(let i = 1; i < max && index === -1; i++)switch(type[i]){
        case ";":
            if (inner === 0) index = i;
            break;
        case "[":
        case "(":
        case "<":
            inner++;
            break;
        case "]":
        case ")":
        case ">":
            inner--;
            break;
    }
    if (index === -1) throw new Error(`${type}: Unable to extract location of ';'`);
    const vecType = type.substring(1, index);
    const [strLength, displayName] = type.substring(index + 1, max).split(";");
    const length = parseInt(strLength.trim(), 10);
    if (length > 2048) throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
    value.displayName = displayName;
    value.length = length;
    value.sub = getTypeDef(vecType, {}, count);
    return value;
}
function _decodeTuple(value, _, subType, count) {
    value.sub = subType.length === 0 ? [] : (0, _typeSplitJs.typeSplit)(subType).map((inner)=>getTypeDef(inner, {}, count));
    return value;
}
function _decodeAnyInt(value, type, _, clazz) {
    const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(",");
    const length = parseInt(strLength.trim(), 10);
    if (length > 8192 || length % 8) throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
    value.displayName = displayName;
    value.length = length;
    return value;
}
function _decodeInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, "Int");
}
function _decodeUInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, "UInt");
}
function _decodeDoNotConstruct(value, type, _) {
    const NAME_LENGTH = 14;
    value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
    return value;
}
function hasWrapper(type, [start, end]) {
    return type.startsWith(start) && type.slice(-1 * end.length) === end;
}
const nestedExtraction = [
    [
        "[",
        "]",
        (0, _indexJs.TypeDefInfo).VecFixed,
        _decodeFixedVec
    ],
    [
        "{",
        "}",
        (0, _indexJs.TypeDefInfo).Struct,
        _decodeStruct
    ],
    [
        "(",
        ")",
        (0, _indexJs.TypeDefInfo).Tuple,
        _decodeTuple
    ],
    // the inner for these are the same as tuple, multiple values
    [
        "BTreeMap<",
        ">",
        (0, _indexJs.TypeDefInfo).BTreeMap,
        _decodeTuple
    ],
    [
        "HashMap<",
        ">",
        (0, _indexJs.TypeDefInfo).HashMap,
        _decodeTuple
    ],
    [
        "Int<",
        ">",
        (0, _indexJs.TypeDefInfo).Int,
        _decodeInt
    ],
    [
        "Result<",
        ">",
        (0, _indexJs.TypeDefInfo).Result,
        _decodeTuple
    ],
    [
        "UInt<",
        ">",
        (0, _indexJs.TypeDefInfo).UInt,
        _decodeUInt
    ],
    [
        "DoNotConstruct<",
        ">",
        (0, _indexJs.TypeDefInfo).DoNotConstruct,
        _decodeDoNotConstruct
    ]
];
const wrappedExtraction = [
    [
        "BTreeSet<",
        ">",
        (0, _indexJs.TypeDefInfo).BTreeSet
    ],
    [
        "Compact<",
        ">",
        (0, _indexJs.TypeDefInfo).Compact
    ],
    [
        "Linkage<",
        ">",
        (0, _indexJs.TypeDefInfo).Linkage
    ],
    [
        "Opaque<",
        ">",
        (0, _indexJs.TypeDefInfo).WrapperOpaque
    ],
    [
        "Option<",
        ">",
        (0, _indexJs.TypeDefInfo).Option
    ],
    [
        "Range<",
        ">",
        (0, _indexJs.TypeDefInfo).Range
    ],
    [
        "RangeInclusive<",
        ">",
        (0, _indexJs.TypeDefInfo).RangeInclusive
    ],
    [
        "Vec<",
        ">",
        (0, _indexJs.TypeDefInfo).Vec
    ],
    [
        "WrapperKeepOpaque<",
        ">",
        (0, _indexJs.TypeDefInfo).WrapperKeepOpaque
    ],
    [
        "WrapperOpaque<",
        ">",
        (0, _indexJs.TypeDefInfo).WrapperOpaque
    ]
];
function extractSubType(type, [start, end]) {
    return type.substring(start.length, type.length - end.length);
}
function getTypeDef(_type, { displayName, name } = {}, count = 0) {
    // create the type via Type, allowing types to be sanitized
    const type = (0, _typesCodec.sanitize)(_type);
    const value = {
        displayName,
        info: (0, _indexJs.TypeDefInfo).Plain,
        name,
        type
    };
    if (++count > 64) throw new Error("getTypeDef: Maximum nested limit reached");
    const nested = nestedExtraction.find((nested)=>hasWrapper(type, nested));
    if (nested) {
        value.info = nested[2];
        return nested[3](value, type, extractSubType(type, nested), count);
    }
    const wrapped = wrappedExtraction.find((wrapped)=>hasWrapper(type, wrapped));
    if (wrapped) {
        value.info = wrapped[2];
        value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
    }
    return value;
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","../types/index.js":"5QFWK","./typeSplit.js":"1qCwf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1qCwf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "typeSplit", ()=>typeSplit);
function typeSplit(type) {
    const result = [];
    // these are the depths of the various tokens: <, [, {, (
    let c = 0;
    let f = 0;
    let s = 0;
    let t = 0;
    // current start position
    let start = 0;
    for(let i = 0, count = type.length; i < count; i++)switch(type[i]){
        // if we are not nested, add the type
        case ",":
            if (!(c || f || s || t)) {
                result.push(type.substring(start, i).trim());
                start = i + 1;
            }
            break;
        // adjust compact/vec (and friends) depth
        case "<":
            c++;
            break;
        case ">":
            c--;
            break;
        // adjust fixed vec depths
        case "[":
            f++;
            break;
        case "]":
            f--;
            break;
        // adjust struct depth
        case "{":
            s++;
            break;
        case "}":
            s--;
            break;
        // adjust tuple depth
        case "(":
            t++;
            break;
        case ")":
            t--;
            break;
    }
    // ensure we have all the terminators taken care of
    if (c || f || s || t) throw new Error(`Invalid definition (missing terminators) found in ${type}`);
    // the final leg of the journey
    result.push(type.substring(start, type.length).trim());
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dBiQC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTypeUnsafe", ()=>createTypeUnsafe);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _classJs = require("./class.js");
function checkInstance(created, matcher) {
    const u8a = created.toU8a();
    const rawType = created.toRawType();
    const isOk = // full match, all ok
    (0, _util.u8aEq)(u8a, matcher) || // on a length-prefixed type, just check the actual length
    [
        "Bytes",
        "Text",
        "Type"
    ].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
    created.isEmpty && matcher.every((v)=>!v);
    if (!isOk) throw new Error(`${rawType}:: Decoded input doesn't match input, received ${(0, _util.u8aToHex)(matcher, 512)} (${matcher.length} bytes), created ${(0, _util.u8aToHex)(u8a, 512)} (${u8a.length} bytes)`);
}
function checkPedantic(created, [value]) {
    if ((0, _util.isU8a)(value)) checkInstance(created, value);
    else if ((0, _util.isHex)(value)) checkInstance(created, (0, _util.u8aToU8a)(value));
}
function initType(registry, Type, params = [], { blockHash, isFallback, isOptional, isPedantic } = {}) {
    const created = new (isOptional ? (0, _typesCodec.Option).with(Type) : Type)(registry, ...params);
    isPedantic && checkPedantic(created, params);
    if (blockHash) created.createdAtHash = createTypeUnsafe(registry, "BlockHash", [
        blockHash
    ]);
    if (isFallback) created.isStorageFallback = true;
    return created;
}
function createTypeUnsafe(registry, type, params = [], options = {}) {
    let Clazz = null;
    let firstError = null;
    try {
        Clazz = (0, _classJs.createClassUnsafe)(registry, type);
        return initType(registry, Clazz, params, options);
    } catch (error) {
        firstError = new Error(`createType(${type}):: ${error.message}`);
    }
    if (Clazz?.__fallbackType) try {
        Clazz = (0, _classJs.createClassUnsafe)(registry, Clazz.__fallbackType);
        return initType(registry, Clazz, params, options);
    } catch  {
    // swallow, we will throw the first error again
    }
    throw firstError;
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","./class.js":"2iCHM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"chdyR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _encodeTypesJs = require("./encodeTypes.js");
parcelHelpers.exportAll(_encodeTypesJs, exports);
var _getTypeDefJs = require("./getTypeDef.js");
parcelHelpers.exportAll(_getTypeDefJs, exports);
var _typeSplitJs = require("./typeSplit.js");
parcelHelpers.exportAll(_typeSplitJs, exports);
var _xcmJs = require("./xcm.js");
parcelHelpers.exportAll(_xcmJs, exports);

},{"./encodeTypes.js":"hlrL1","./getTypeDef.js":"gN0Rn","./typeSplit.js":false,"./xcm.js":"hA0GC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hlrL1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paramsNotation", ()=>paramsNotation);
parcelHelpers.export(exports, "encodeTypeDef", ()=>encodeTypeDef);
parcelHelpers.export(exports, "withTypeString", ()=>withTypeString);
var _util = require("@polkadot/util");
var _indexJs = require("../types/index.js");
const stringIdentity = (value)=>value.toString();
const INFO_WRAP = [
    "BTreeMap",
    "BTreeSet",
    "Compact",
    "HashMap",
    "Option",
    "Result",
    "Vec"
];
function paramsNotation(outer, inner, transform = stringIdentity) {
    return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [
        inner
    ]).map(transform).join(", ")}>` : ""}`;
}
function encodeWithParams(registry, typeDef, outer) {
    const { info, sub } = typeDef;
    switch(info){
        case (0, _indexJs.TypeDefInfo).BTreeMap:
        case (0, _indexJs.TypeDefInfo).BTreeSet:
        case (0, _indexJs.TypeDefInfo).Compact:
        case (0, _indexJs.TypeDefInfo).HashMap:
        case (0, _indexJs.TypeDefInfo).Linkage:
        case (0, _indexJs.TypeDefInfo).Option:
        case (0, _indexJs.TypeDefInfo).Range:
        case (0, _indexJs.TypeDefInfo).RangeInclusive:
        case (0, _indexJs.TypeDefInfo).Result:
        case (0, _indexJs.TypeDefInfo).Vec:
        case (0, _indexJs.TypeDefInfo).WrapperKeepOpaque:
        case (0, _indexJs.TypeDefInfo).WrapperOpaque:
            return paramsNotation(outer, sub, (p)=>encodeTypeDef(registry, p));
    }
    throw new Error(`Unable to encode ${(0, _util.stringify)(typeDef)} with params`);
}
function encodeSubTypes(registry, sub, asEnum, extra) {
    const names = sub.map(({ name })=>name);
    if (!names.every((n)=>!!n)) throw new Error(`Subtypes does not have consistent names, ${names.join(", ")}`);
    const inner = (0, _util.objectSpread)({}, extra);
    for(let i = 0, count = sub.length; i < count; i++){
        const def = sub[i];
        if (!def.name) throw new Error(`No name found in ${(0, _util.stringify)(def)}`);
        inner[def.name] = encodeTypeDef(registry, def);
    }
    return (0, _util.stringify)(asEnum ? {
        _enum: inner
    } : inner);
}
const encoders = {
    [(0, _indexJs.TypeDefInfo).BTreeMap]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "BTreeMap"),
    [(0, _indexJs.TypeDefInfo).BTreeSet]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "BTreeSet"),
    [(0, _indexJs.TypeDefInfo).Compact]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "Compact"),
    [(0, _indexJs.TypeDefInfo).DoNotConstruct]: (registry, { displayName, lookupIndex, lookupName })=>`DoNotConstruct<${lookupName || displayName || ((0, _util.isUndefined)(lookupIndex) ? "Unknown" : registry.createLookupType(lookupIndex))}>`,
    [(0, _indexJs.TypeDefInfo).Enum]: (registry, { sub })=>{
        if (!Array.isArray(sub)) throw new Error("Unable to encode Enum type");
        // c-like enums have all Null entries
        // TODO We need to take the disciminant into account and auto-add empty entries
        return sub.every(({ type })=>type === "Null") ? (0, _util.stringify)({
            _enum: sub.map(({ name }, index)=>`${name || `Empty${index}`}`)
        }) : encodeSubTypes(registry, sub, true);
    },
    [(0, _indexJs.TypeDefInfo).HashMap]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "HashMap"),
    [(0, _indexJs.TypeDefInfo).Int]: (_registry, { length = 32 })=>`Int<${length}>`,
    [(0, _indexJs.TypeDefInfo).Linkage]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "Linkage"),
    [(0, _indexJs.TypeDefInfo).Null]: (_registry, _typeDef)=>"Null",
    [(0, _indexJs.TypeDefInfo).Option]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "Option"),
    [(0, _indexJs.TypeDefInfo).Plain]: (_registry, { displayName, type })=>displayName || type,
    [(0, _indexJs.TypeDefInfo).Range]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "Range"),
    [(0, _indexJs.TypeDefInfo).RangeInclusive]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "RangeInclusive"),
    [(0, _indexJs.TypeDefInfo).Result]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "Result"),
    [(0, _indexJs.TypeDefInfo).Set]: (_registry, { length = 8, sub })=>{
        if (!Array.isArray(sub)) throw new Error("Unable to encode Set type");
        return (0, _util.stringify)({
            _set: sub.reduce((all, { index, name }, count)=>(0, _util.objectSpread)(all, {
                    [`${name || `Unknown${index || count}`}`]: index || count
                }), {
                _bitLength: length || 8
            })
        });
    },
    [(0, _indexJs.TypeDefInfo).Si]: (_registry, { lookupName, type })=>lookupName || type,
    [(0, _indexJs.TypeDefInfo).Struct]: (registry, { alias, sub })=>{
        if (!Array.isArray(sub)) throw new Error("Unable to encode Struct type");
        return encodeSubTypes(registry, sub, false, alias ? {
            _alias: [
                ...alias.entries()
            ].reduce((all, [k, v])=>(0, _util.objectSpread)(all, {
                    [k]: v
                }), {})
        } : {});
    },
    [(0, _indexJs.TypeDefInfo).Tuple]: (registry, { sub })=>{
        if (!Array.isArray(sub)) throw new Error("Unable to encode Tuple type");
        return `(${sub.map((type)=>encodeTypeDef(registry, type)).join(",")})`;
    },
    [(0, _indexJs.TypeDefInfo).UInt]: (_registry, { length = 32 })=>`UInt<${length}>`,
    [(0, _indexJs.TypeDefInfo).Vec]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "Vec"),
    [(0, _indexJs.TypeDefInfo).VecFixed]: (_registry, { length, sub })=>{
        if (!(0, _util.isNumber)(length) || !sub || Array.isArray(sub)) throw new Error("Unable to encode VecFixed type");
        return `[${sub.type};${length}]`;
    },
    [(0, _indexJs.TypeDefInfo).WrapperKeepOpaque]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "WrapperKeepOpaque"),
    [(0, _indexJs.TypeDefInfo).WrapperOpaque]: (registry, typeDef)=>encodeWithParams(registry, typeDef, "WrapperOpaque")
};
function encodeType(registry, typeDef, withLookup = true) {
    return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
}
function encodeTypeDef(registry, typeDef) {
    // In the case of contracts we do have the unfortunate situation where the displayName would
    // refer to "Option" when it is an option. For these, string it out, only using when actually
    // not a top-level element to be used
    return typeDef.displayName && !INFO_WRAP.some((i)=>typeDef.displayName === i) ? typeDef.displayName : encodeType(registry, typeDef);
}
function withTypeString(registry, typeDef) {
    return (0, _util.objectSpread)({}, typeDef, {
        type: encodeType(registry, typeDef, false)
    });
}

},{"@polkadot/util":"3HnHw","../types/index.js":"5QFWK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hA0GC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "XCM_MAPPINGS", ()=>XCM_MAPPINGS);
parcelHelpers.export(exports, "mapXcmTypes", ()=>mapXcmTypes);
var _util = require("@polkadot/util");
const XCM_MAPPINGS = [
    "AssetInstance",
    "Fungibility",
    "Junction",
    "Junctions",
    "MultiAsset",
    "MultiAssetFilter",
    "MultiLocation",
    "Response",
    "WildFungibility",
    "WildMultiAsset",
    "Xcm",
    "XcmError",
    "XcmOrder"
];
function mapXcmTypes(version) {
    return XCM_MAPPINGS.reduce((all, key)=>(0, _util.objectSpread)(all, {
            [key]: `${key}${version}`
        }), {});
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"elguL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v0", ()=>v0);
const v0 = {
    FungibilityV0: "FungibilityV1",
    WildFungibilityV0: "WildFungibilityV1",
    AssetInstanceV0: {
        _enum: {
            Undefined: "Null",
            Index8: "u8",
            Index16: "Compact<u16>",
            Index32: "Compact<u32>",
            Index64: "Compact<u64>",
            Index128: "Compact<u128>",
            Array4: "[u8; 4]",
            Array8: "[u8; 8]",
            Array16: "[u8; 16]",
            Array32: "[u8; 32]",
            Blob: "Vec<u8>"
        }
    },
    JunctionV0: {
        _enum: {
            Parent: "Null",
            Parachain: "Compact<u32>",
            AccountId32: {
                network: "NetworkId",
                id: "AccountId"
            },
            AccountIndex64: {
                network: "NetworkId",
                index: "Compact<u64>"
            },
            AccountKey20: {
                network: "NetworkId",
                key: "[u8; 20]"
            },
            PalletInstance: "u8",
            GeneralIndex: "Compact<u128>",
            GeneralKey: "Vec<u8>",
            OnlyChild: "Null",
            Plurality: {
                id: "BodyId",
                part: "BodyPart"
            }
        }
    },
    MultiAssetV0: {
        _enum: {
            None: "Null",
            All: "Null",
            AllFungible: "Null",
            AllNonFungible: "Null",
            AllAbstractFungible: "Vec<u8>",
            AllAbstractNonFungible: "Vec<u8>",
            AllConcreteFungible: "MultiLocationV0",
            AllConcreteNonFungible: "MultiLocationV0",
            AbstractFungible: {
                id: "Vec<u8>",
                instance: "Compact<u128>"
            },
            AbstractNonFungible: {
                class: "Vec<u8>",
                instance: "AssetInstanceV0"
            },
            ConcreteFungible: {
                id: "MultiLocationV0",
                amount: "Compact<u128>"
            },
            ConcreteNonFungible: {
                class: "MultiLocationV0",
                instance: "AssetInstanceV0"
            }
        }
    },
    MultiLocationV0: {
        _enum: {
            Here: "Null",
            X1: "JunctionV0",
            X2: "(JunctionV0, JunctionV0)",
            X3: "(JunctionV0, JunctionV0, JunctionV0)",
            X4: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
            X5: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
            X6: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
            X7: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
            X8: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
        }
    },
    OriginKindV0: {
        _enum: [
            "Native",
            "SovereignAccount",
            "Superuser",
            "Xcm"
        ]
    },
    ResponseV0: {
        _enum: {
            Assets: "Vec<MultiAssetV0>"
        }
    },
    XcmV0: {
        _enum: {
            WithdrawAsset: {
                assets: "Vec<MultiAssetV0>",
                effects: "Vec<XcmOrderV0>"
            },
            ReserveAssetDeposit: {
                assets: "Vec<MultiAssetV0>",
                effects: "Vec<XcmOrderV0>"
            },
            ReceiveTeleportedAsset: {
                assets: "Vec<MultiAssetV0>",
                effects: "Vec<XcmOrderV0>"
            },
            QueryResponse: {
                queryId: "Compact<u64>",
                response: "ResponseV0"
            },
            TransferAsset: {
                assets: "Vec<MultiAssetV0>",
                dest: "MultiLocationV0"
            },
            TransferReserveAsset: {
                assets: "Vec<MultiAssetV0>",
                dest: "MultiLocationV0",
                effects: "Vec<XcmOrderV0>"
            },
            Transact: {
                originType: "XcmOriginKind",
                requireWeightAtMost: "u64",
                call: "DoubleEncodedCall"
            },
            HrmpNewChannelOpenRequest: {
                sender: "Compact<u32>",
                maxMessageSize: "Compact<u32>",
                maxCapacity: "Compact<u32>"
            },
            HrmpChannelAccepted: {
                recipient: "Compact<u32>"
            },
            HrmpChannelClosing: {
                initiator: "Compact<u32>",
                sender: "Compact<u32>",
                recipient: "Compact<u32>"
            },
            RelayedFrom: {
                who: "MultiLocationV0",
                message: "XcmV0"
            }
        }
    },
    XcmErrorV0: {
        _enum: {
            Undefined: "Null",
            Overflow: "Null",
            Unimplemented: "Null",
            UnhandledXcmVersion: "Null",
            UnhandledXcmMessage: "Null",
            UnhandledEffect: "Null",
            EscalationOfPrivilege: "Null",
            UntrustedReserveLocation: "Null",
            UntrustedTeleportLocation: "Null",
            DestinationBufferOverflow: "Null",
            SendFailed: "Null",
            CannotReachDestination: "(MultiLocation, Xcm)",
            MultiLocationFull: "Null",
            FailedToDecode: "Null",
            BadOrigin: "Null",
            ExceedsMaxMessageSize: "Null",
            FailedToTransactAsset: "Null",
            WeightLimitReached: "Weight",
            Wildcard: "Null",
            TooMuchWeightRequired: "Null",
            NotHoldingFees: "Null",
            WeightNotComputable: "Null",
            Barrier: "Null",
            NotWithdrawable: "Null",
            LocationCannotHold: "Null",
            TooExpensive: "Null",
            AssetNotFound: "Null",
            RecursionLimitReached: "Null"
        }
    },
    XcmOrderV0: {
        _enum: {
            Null: "Null",
            DepositAsset: {
                assets: "Vec<MultiAssetV0>",
                dest: "MultiLocationV0"
            },
            DepositReserveAsset: {
                assets: "Vec<MultiAssetV0>",
                dest: "MultiLocationV0",
                effects: "Vec<XcmOrderV0>"
            },
            ExchangeAsset: {
                give: "Vec<MultiAssetV0>",
                receive: "Vec<MultiAssetV0>"
            },
            InitiateReserveWithdraw: {
                assets: "Vec<MultiAssetV0>",
                reserve: "MultiLocationV0",
                effects: "Vec<XcmOrderV0>"
            },
            InitiateTeleport: {
                assets: "Vec<MultiAssetV0>",
                dest: "MultiLocationV0",
                effects: "Vec<XcmOrderV0>"
            },
            QueryHolding: {
                queryId: "Compact<u64>",
                dest: "MultiLocationV0",
                assets: "Vec<MultiAssetV0>"
            },
            BuyExecution: {
                fees: "MultiAssetV0",
                weight: "u64",
                debt: "u64",
                haltOnError: "bool",
                xcm: "Vec<XcmV0>"
            }
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gCO3S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v1", ()=>v1);
const v1 = {
    AssetInstanceV1: {
        _enum: {
            Undefined: "Null",
            Index: "Compact<u128>",
            Array4: "[u8; 4]",
            Array8: "[u8; 8]",
            Array16: "[u8; 16]",
            Array32: "[u8; 32]",
            Blob: "Bytes"
        }
    },
    FungibilityV1: {
        _enum: {
            Fungible: "Compact<u128>",
            NonFungible: "AssetInstanceV1"
        }
    },
    JunctionV1: {
        _enum: {
            Parachain: "Compact<u32>",
            AccountId32: {
                network: "NetworkId",
                id: "AccountId"
            },
            AccountIndex64: {
                network: "NetworkId",
                index: "Compact<u64>"
            },
            AccountKey20: {
                network: "NetworkId",
                key: "[u8; 20]"
            },
            PalletInstance: "u8",
            GeneralIndex: "Compact<u128>",
            GeneralKey: "Vec<u8>",
            OnlyChild: "Null",
            Plurality: {
                id: "BodyId",
                part: "BodyPart"
            }
        }
    },
    JunctionsV1: {
        _enum: {
            Here: "Null",
            X1: "JunctionV1",
            X2: "(JunctionV1, JunctionV1)",
            X3: "(JunctionV1, JunctionV1, JunctionV1)",
            X4: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
            X5: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
            X6: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
            X7: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
            X8: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
        }
    },
    MultiAssetsV1: "Vec<MultiAssetV1>",
    MultiAssetV1: {
        id: "XcmAssetId",
        fungibility: "FungibilityV1"
    },
    MultiAssetFilterV1: {
        _enum: {
            Definite: "MultiAssetsV1",
            Wild: "WildMultiAssetV1"
        }
    },
    MultiLocationV1: {
        parents: "u8",
        interior: "JunctionsV1"
    },
    OriginKindV1: "OriginKindV0",
    ResponseV1: {
        _enum: {
            Assets: "MultiAssetsV1"
        }
    },
    WildFungibilityV1: {
        _enum: [
            "Fungible",
            "NonFungible"
        ]
    },
    WildMultiAssetV1: {
        _enum: {
            All: "Null",
            AllOf: {
                id: "XcmAssetId",
                fungibility: "WildFungibilityV1"
            }
        }
    },
    XcmV1: {
        _enum: {
            WithdrawAsset: {
                assets: "MultiAssetsV1",
                effects: "Vec<XcmOrderV1>"
            },
            ReserveAssetDeposit: {
                assets: "MultiAssetsV1",
                effects: "Vec<XcmOrderV1>"
            },
            ReceiveTeleportedAsset: {
                assets: "MultiAssetsV1",
                effects: "Vec<XcmOrderV1>"
            },
            QueryResponse: {
                queryId: "Compact<u64>",
                response: "ResponseV1"
            },
            TransferAsset: {
                assets: "MultiAssetsV1",
                dest: "MultiLocationV1"
            },
            TransferReserveAsset: {
                assets: "MultiAssetsV1",
                dest: "MultiLocationV1",
                effects: "Vec<XcmOrderV1>"
            },
            Transact: {
                originType: "XcmOriginKind",
                requireWeightAtMost: "u64",
                call: "DoubleEncodedCall"
            },
            HrmpNewChannelOpenRequest: {
                sender: "Compact<u32>",
                maxMessageSize: "Compact<u32>",
                maxCapacity: "Compact<u32>"
            },
            HrmpChannelAccepted: {
                recipient: "Compact<u32>"
            },
            HrmpChannelClosing: {
                initiator: "Compact<u32>",
                sender: "Compact<u32>",
                recipient: "Compact<u32>"
            },
            RelayedFrom: {
                who: "MultiLocationV1",
                message: "XcmV1"
            }
        }
    },
    XcmErrorV1: {
        _enum: {
            Undefined: "Null",
            Overflow: "Null",
            Unimplemented: "Null",
            UnhandledXcmVersion: "Null",
            UnhandledXcmMessage: "Null",
            UnhandledEffect: "Null",
            EscalationOfPrivilege: "Null",
            UntrustedReserveLocation: "Null",
            UntrustedTeleportLocation: "Null",
            DestinationBufferOverflow: "Null",
            SendFailed: "Null",
            CannotReachDestination: "(MultiLocationV1, XcmV1)",
            MultiLocationFull: "Null",
            FailedToDecode: "Null",
            BadOrigin: "Null",
            ExceedsMaxMessageSize: "Null",
            FailedToTransactAsset: "Null",
            WeightLimitReached: "Weight",
            Wildcard: "Null",
            TooMuchWeightRequired: "Null",
            NotHoldingFees: "Null",
            WeightNotComputable: "Null",
            Barrier: "Null",
            NotWithdrawable: "Null",
            LocationCannotHold: "Null",
            TooExpensive: "Null",
            AssetNotFound: "Null",
            DestinationUnsupported: "Null",
            RecursionLimitReached: "Null"
        }
    },
    XcmOrderV1: {
        _enum: {
            Noop: "Null",
            DepositAsset: {
                assets: "MultiAssetFilterV1",
                maxAssets: "u32",
                beneficiary: "MultiLocationV1"
            },
            DepositReserveAsset: {
                assets: "MultiAssetFilterV1",
                maxAssets: "u32",
                dest: "MultiLocationV1",
                effects: "Vec<XcmOrderV1>"
            },
            ExchangeAsset: {
                give: "MultiAssetFilterV1",
                receive: "MultiAssetsV1"
            },
            InitiateReserveWithdraw: {
                assets: "MultiAssetFilterV1",
                reserve: "MultiLocationV1",
                effects: "Vec<XcmOrderV1>"
            },
            InitiateTeleport: {
                assets: "MultiAssetFilterV1",
                dest: "MultiLocationV1",
                effects: "Vec<XcmOrderV1>"
            },
            QueryHolding: {
                queryId: "Compact<u64>",
                dest: "MultiLocationV1",
                assets: "MultiAssetFilterV1"
            },
            BuyExecution: {
                fees: "MultiAssetV1",
                weight: "u64",
                debt: "u64",
                haltOnError: "bool",
                instructions: "Vec<XcmV1>"
            }
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3C8Gn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v2", ()=>v2);
const v2 = {
    AssetInstanceV2: "AssetInstanceV1",
    FungibilityV2: "FungibilityV1",
    JunctionV2: "JunctionV1",
    JunctionsV2: "JunctionsV1",
    MultiAssetsV2: "MultiAssetsV1",
    MultiAssetV2: "MultiAssetV1",
    MultiAssetFilterV2: "MultiAssetFilterV1",
    MultiLocationV2: "MultiLocationV1",
    OriginKindV2: "OriginKindV1",
    WildFungibilityV2: "WildFungibilityV1",
    ResponseV2: {
        _enum: {
            Null: "Null",
            Assets: "MultiAssetsV2",
            ExecutionResult: "ResponseV2Result"
        }
    },
    ResponseV2Error: "(u32, XcmErrorV2)",
    ResponseV2Result: "Result<Null, ResponseV2Error>",
    WeightLimitV2: {
        _enum: {
            Unlimited: "Null",
            Limited: "Compact<u64>"
        }
    },
    InstructionV2: {
        _enum: {
            WithdrawAsset: "MultiAssetsV2",
            ReserveAssetDeposited: "MultiAssetsV2",
            ReceiveTeleportedAsset: "MultiAssetsV2",
            QueryResponse: {
                queryId: "Compact<u64>",
                response: "ResponseV2",
                maxWeight: "Compact<u64>"
            },
            TransferAsset: {
                assets: "MultiAssetsV2",
                beneficiary: "MultiLocationV2"
            },
            TransferReserveAsset: {
                assets: "MultiAssetsV2",
                dest: "MultiLocationV2",
                xcm: "XcmV2"
            },
            Transact: {
                originType: "OriginKindV2",
                requireWeightAtMost: "u64",
                call: "DoubleEncodedCall"
            },
            HrmpNewChannelOpenRequest: {
                sender: "Compact<u32>",
                maxMessageSize: "Compact<u32>",
                maxCapacity: "Compact<u32>"
            },
            HrmpChannelAccepted: {
                recipient: "Compact<u32>"
            },
            HrmpChannelClosing: {
                initiator: "Compact<u32>",
                sender: "Compact<u32>",
                recipient: "Compact<u32>"
            },
            ClearOrigin: "Null",
            DescendOrigin: "InteriorMultiLocation",
            ReportError: {
                queryId: "Compact<u64>",
                dest: "MultiLocationV2",
                maxResponseWeight: "Compact<u64>"
            },
            DepositAsset: {
                assets: "MultiAssetFilterV2",
                maxAssets: "u32",
                beneficiary: "MultiLocationV2"
            },
            DepositReserveAsset: {
                assets: "MultiAssetFilterV2",
                maxAssets: "u32",
                dest: "MultiLocationV2",
                xcm: "XcmV2"
            },
            ExchangeAsset: {
                give: "MultiAssetFilterV2",
                receive: "MultiAssetsV2"
            },
            InitiateReserveWithdraw: {
                assets: "MultiAssetFilterV2",
                reserve: "MultiLocationV2",
                xcm: "XcmV2"
            },
            InitiateTeleport: {
                assets: "MultiAssetFilterV2",
                dest: "MultiLocationV2",
                xcm: "XcmV2"
            },
            QueryHolding: {
                query_id: "Compact<u64>",
                dest: "MultiLocationV2",
                assets: "MultiAssetFilterV2",
                maxResponse_Weight: "Compact<u64>"
            },
            BuyExecution: {
                fees: "MultiAssetV2",
                weightLimit: "WeightLimitV2"
            },
            RefundSurplus: "Null",
            SetErrorHandler: "XcmV2",
            SetAppendix: "XcmV2",
            ClearError: "Null",
            ClaimAsset: {
                assets: "MultiAssetsV2",
                ticket: "MultiLocationV2"
            },
            Trap: "u64"
        }
    },
    WildMultiAssetV2: "WildMultiAssetV1",
    XcmV2: "Vec<InstructionV2>",
    XcmErrorV2: {
        _enum: {
            Undefined: "Null",
            Overflow: "Null",
            Unimplemented: "Null",
            UnhandledXcmVersion: "Null",
            UnhandledXcmMessage: "Null",
            UnhandledEffect: "Null",
            EscalationOfPrivilege: "Null",
            UntrustedReserveLocation: "Null",
            UntrustedTeleportLocation: "Null",
            DestinationBufferOverflow: "Null",
            MultiLocationFull: "Null",
            MultiLocationNotInvertible: "Null",
            FailedToDecode: "Null",
            BadOrigin: "Null",
            ExceedsMaxMessageSize: "Null",
            FailedToTransactAsset: "Null",
            WeightLimitReached: "Weight",
            Wildcard: "Null",
            TooMuchWeightRequired: "Null",
            NotHoldingFees: "Null",
            WeightNotComputable: "Null",
            Barrier: "Null",
            NotWithdrawable: "Null",
            LocationCannotHold: "Null",
            TooExpensive: "Null",
            AssetNotFound: "Null",
            DestinationUnsupported: "Null",
            RecursionLimitReached: "Null",
            Transport: "Null",
            Unroutable: "Null",
            UnknownWeightRequired: "Null",
            Trap: "u64",
            UnknownClaim: "Null",
            InvalidLocation: "Null"
        }
    },
    XcmOrderV2: "XcmOrderV1"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5CyRS":[function(require,module,exports) {
/* eslint-disable sort-keys */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const layout = {
    ContractCryptoHasher: {
        _enum: [
            "Blake2x256",
            "Sha2x256",
            "Keccak256"
        ]
    },
    ContractDiscriminant: "u32",
    ContractLayoutArray: {
        offset: "ContractLayoutKey",
        len: "u32",
        cellsPerElem: "u64",
        layout: "ContractStorageLayout"
    },
    ContractLayoutCell: {
        key: "ContractLayoutKey",
        ty: "SiLookupTypeId"
    },
    ContractLayoutEnum: {
        dispatchKey: "ContractLayoutKey",
        variants: "BTreeMap<ContractDiscriminant, ContractLayoutStruct>"
    },
    ContractLayoutHash: {
        offset: "ContractLayoutKey",
        strategy: "ContractLayoutHashingStrategy",
        layout: "ContractStorageLayout"
    },
    ContractLayoutHashingStrategy: {
        hasher: "ContractCryptoHasher",
        postfix: "Vec<u8>",
        prefix: "Vec<u8>"
    },
    ContractLayoutKey: "[u8; 32]",
    ContractLayoutStruct: {
        fields: "Vec<ContractLayoutStructField>"
    },
    ContractLayoutStructField: {
        layout: "ContractStorageLayout",
        name: "Text"
    },
    ContractStorageLayout: {
        _enum: {
            Cell: "ContractLayoutCell",
            Hash: "ContractLayoutHash",
            Array: "ContractLayoutArray",
            Struct: "ContractLayoutStruct",
            Enum: "ContractLayoutEnum"
        }
    }
};
const spec = {
    ContractConstructorSpecV0: {
        name: "Text",
        selector: "ContractSelector",
        args: "Vec<ContractMessageParamSpecV0>",
        docs: "Vec<Text>"
    },
    ContractConstructorSpecV1: {
        name: "Vec<Text>",
        selector: "ContractSelector",
        args: "Vec<ContractMessageParamSpecV0>",
        docs: "Vec<Text>"
    },
    ContractConstructorSpecV2: {
        label: "Text",
        selector: "ContractSelector",
        args: "Vec<ContractMessageParamSpecV2>",
        docs: "Vec<Text>"
    },
    ContractConstructorSpecV3: {
        label: "Text",
        selector: "ContractSelector",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV2>",
        docs: "Vec<Text>"
    },
    ContractConstructorSpecV4: {
        label: "Text",
        selector: "ContractSelector",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV2>",
        docs: "Vec<Text>",
        default: "bool",
        returnType: "Option<ContractTypeSpec>"
    },
    ContractContractSpecV0: {
        constructors: "Vec<ContractConstructorSpecV0>",
        messages: "Vec<ContractMessageSpecV0>",
        events: "Vec<ContractEventSpecV0>",
        docs: "Vec<Text>"
    },
    ContractContractSpecV1: {
        constructors: "Vec<ContractConstructorSpecV1>",
        messages: "Vec<ContractMessageSpecV1>",
        events: "Vec<ContractEventSpecV1>",
        docs: "Vec<Text>"
    },
    ContractContractSpecV2: {
        constructors: "Vec<ContractConstructorSpecV2>",
        messages: "Vec<ContractMessageSpecV2>",
        events: "Vec<ContractEventSpecV2>",
        docs: "Vec<Text>"
    },
    ContractContractSpecV3: {
        constructors: "Vec<ContractConstructorSpecV3>",
        messages: "Vec<ContractMessageSpecV2>",
        events: "Vec<ContractEventSpecV2>",
        docs: "Vec<Text>"
    },
    ContractContractSpecV4: {
        constructors: "Vec<ContractConstructorSpecV4>",
        messages: "Vec<ContractMessageSpecV3>",
        events: "Vec<ContractEventSpecV2>",
        docs: "Vec<Text>",
        environment: "ContractEnvironmentV4"
    },
    ContractDisplayName: "SiPath",
    ContractEventParamSpecV0: {
        name: "Text",
        indexed: "bool",
        type: "ContractTypeSpec",
        docs: "Vec<Text>"
    },
    ContractEventParamSpecV2: {
        label: "Text",
        indexed: "bool",
        type: "ContractTypeSpec",
        docs: "Vec<Text>"
    },
    ContractEventSpecV0: {
        name: "Text",
        args: "Vec<ContractEventParamSpecV0>",
        docs: "Vec<Text>"
    },
    ContractEventSpecV1: {
        name: "Text",
        args: "Vec<ContractEventParamSpecV0>",
        docs: "Vec<Text>"
    },
    ContractEventSpecV2: {
        label: "Text",
        args: "Vec<ContractEventParamSpecV2>",
        docs: "Vec<Text>"
    },
    ContractMessageParamSpecV0: {
        name: "Text",
        type: "ContractTypeSpec"
    },
    ContractMessageParamSpecV2: {
        label: "Text",
        type: "ContractTypeSpec"
    },
    ContractMessageSpecV0: {
        name: "Text",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV0>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>"
    },
    ContractMessageSpecV1: {
        name: "Vec<Text>",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV0>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>"
    },
    ContractMessageSpecV2: {
        label: "Text",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV2>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>"
    },
    ContractMessageSpecV3: {
        label: "Text",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV2>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>",
        default: "bool"
    },
    ContractSelector: "[u8; 4]",
    ContractTypeSpec: {
        type: "SiLookupTypeId",
        displayName: "ContractDisplayName"
    }
};
const latest = {
    ContractConstructorSpecLatest: "ContractConstructorSpecV4",
    ContractEventSpecLatest: "ContractEventSpecV2",
    ContractEventParamSpecLatest: "ContractEventParamSpecV2",
    ContractMessageParamSpecLatest: "ContractMessageParamSpecV2",
    ContractMessageSpecLatest: "ContractMessageSpecV3",
    ContractMetadataLatest: "ContractMetadataV4"
};
exports.default = {
    rpc: {},
    types: {
        ...layout,
        ...spec,
        ...latest,
        ContractProjectInfo: {
            source: "ContractProjectSource",
            contract: "ContractProjectContract"
        },
        ContractMetadataV0: {
            metadataVersion: "Text",
            types: "Vec<Si0Type>",
            spec: "ContractContractSpecV0"
        },
        ContractMetadataV1: {
            types: "Vec<PortableType>",
            spec: "ContractContractSpecV1"
        },
        ContractMetadataV2: {
            types: "Vec<PortableType>",
            spec: "ContractContractSpecV2"
        },
        ContractMetadataV3: {
            types: "Vec<PortableType>",
            spec: "ContractContractSpecV3"
        },
        ContractMetadataV4: {
            types: "Vec<PortableType>",
            spec: "ContractContractSpecV4"
        },
        ContractMetadata: {
            _enum: {
                V0: "ContractMetadataV0",
                V1: "ContractMetadataV1",
                V2: "ContractMetadataV2",
                V3: "ContractMetadataV3",
                V4: "ContractMetadataV4"
            }
        },
        ContractProjectV0: {
            metadataVersion: "Text",
            source: "ContractProjectSource",
            contract: "ContractProjectContract",
            types: "Vec<Si0Type>",
            spec: "ContractContractSpecV0"
        },
        ContractProject: "(ContractProjectInfo, ContractMetadata)",
        ContractProjectContract: {
            _alias: {
                docs: "documentation"
            },
            name: "Text",
            version: "Text",
            authors: "Vec<Text>",
            description: "Option<Text>",
            docs: "Option<Text>",
            repository: "Option<Text>",
            homepage: "Option<Text>",
            license: "Option<Text>"
        },
        ContractProjectSource: {
            _alias: {
                wasmHash: "hash"
            },
            wasmHash: "[u8; 32]",
            language: "Text",
            compiler: "Text",
            wasm: "Raw"
        },
        ContractEnvironmentV4: {
            _alias: {
                hashType: "hash"
            },
            // NOTE These are not marked optional in the Rust code, however since we
            // convert from older versions to newer, we may not have these fields.
            // The Option<...> works since our inputs are always JSON, so it will
            // be None when not specified.
            //
            // Additionally we don't mark the full structure as Option, rather we
            // do it on a per-field basis since fields may be added as the versions
            // progress.
            accountId: "Option<ContractTypeSpec>",
            balance: "Option<ContractTypeSpec>",
            blockNumber: "Option<ContractTypeSpec>",
            hashType: "Option<ContractTypeSpec>",
            timestamp: "Option<ContractTypeSpec>",
            maxEventTopics: "Option<u32>"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4sbM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
var _runtimeJs = require("./runtime.js");
const V0 = {
    BlockV0: {
        header: "EthHeader",
        transactions: "Vec<TransactionV0>",
        ommers: "Vec<EthHeader>"
    },
    LegacyTransaction: {
        nonce: "U256",
        gasPrice: "U256",
        gasLimit: "U256",
        action: "EthTransactionAction",
        value: "U256",
        input: "Bytes",
        signature: "EthTransactionSignature"
    },
    TransactionV0: "LegacyTransaction"
};
const V1 = {
    BlockV1: {
        header: "EthHeader",
        transactions: "Vec<TransactionV1>",
        ommers: "Vec<EthHeader>"
    },
    EIP2930Transaction: {
        chainId: "u64",
        nonce: "U256",
        gasPrice: "U256",
        gasLimit: "U256",
        action: "EthTransactionAction",
        value: "U256",
        input: "Bytes",
        accessList: "EthAccessList",
        oddYParity: "bool",
        r: "H256",
        s: "H256"
    },
    TransactionV1: {
        _enum: {
            Legacy: "LegacyTransaction",
            EIP2930: "EIP2930Transaction"
        }
    }
};
const V2 = {
    BlockV2: {
        header: "EthHeader",
        transactions: "Vec<TransactionV2>",
        ommers: "Vec<EthHeader>"
    },
    EIP1559Transaction: {
        chainId: "u64",
        nonce: "U256",
        maxPriorityFeePerGas: "U256",
        maxFeePerGas: "U256",
        gasLimit: "U256",
        action: "EthTransactionAction",
        value: "U256",
        input: "Bytes",
        accessList: "EthAccessList",
        oddYParity: "bool",
        r: "H256",
        s: "H256"
    },
    TransactionV2: {
        _enum: {
            Legacy: "LegacyTransaction",
            EIP2930: "EIP2930Transaction",
            EIP1559: "EIP1559Transaction"
        }
    }
};
const types = {
    ...V0,
    ...V1,
    ...V2,
    EthereumAccountId: "GenericEthereumAccountId",
    EthereumAddress: "GenericEthereumAccountId",
    EthereumLookupSource: "GenericEthereumLookupSource",
    EthereumSignature: "[u8; 65]",
    EthAccessListItem: {
        address: "EthAddress",
        slots: "Vec<H256>"
    },
    EthAccessList: "Vec<EthAccessListItem>",
    EthAccount: {
        address: "EthAddress",
        balance: "U256",
        nonce: "U256",
        codeHash: "H256",
        storageHash: "H256",
        accountProof: "Vec<Bytes>",
        storageProof: "Vec<EthStorageProof>"
    },
    EthAddress: "H160",
    EthBlock: {
        header: "EthHeader",
        transactions: "Vec<EthTransaction>",
        ommers: "Vec<EthHeader>"
    },
    EthHeader: {
        parentHash: "H256",
        ommersHash: "H256",
        beneficiary: "EthAddress",
        stateRoot: "H256",
        transactionsRoot: "H256",
        receiptsRoot: "H256",
        logsBloom: "EthBloom",
        difficulty: "U256",
        number: "U256",
        gasLimit: "U256",
        gasUsed: "U256",
        timestamp: "u64",
        extraData: "Bytes",
        mixMash: "H256",
        nonce: "H64"
    },
    EthRichBlock: {
        _alias: {
            blockHash: "hash",
            blockSize: "size"
        },
        blockHash: "Option<H256>",
        parentHash: "H256",
        sha3Uncles: "H256",
        author: "EthAddress",
        miner: "EthAddress",
        stateRoot: "H256",
        transactionsRoot: "H256",
        receiptsRoot: "H256",
        number: "Option<U256>",
        gasUsed: "U256",
        gasLimit: "U256",
        extraData: "Bytes",
        logsBloom: "EthBloom",
        timestamp: "U256",
        difficulty: "U256",
        totalDifficulty: "Option<U256>",
        sealFields: "Vec<Bytes>",
        uncles: "Vec<H256>",
        transactions: "Vec<EthTransaction>",
        blockSize: "Option<U256>"
    },
    EthBloom: "H2048",
    EthCallRequest: {
        from: "Option<EthAddress>",
        to: "Option<EthAddress>",
        gasPrice: "Option<U256>",
        gas: "Option<U256>",
        value: "Option<U256>",
        data: "Option<Bytes>",
        nonce: "Option<U256>"
    },
    EthFeeHistory: {
        oldestBlock: "U256",
        baseFeePerGas: "Vec<U256>",
        gasUsedRatio: "Vec<f64>",
        reward: "Option<Vec<Vec<U256>>>"
    },
    EthFilter: {
        fromBlock: "Option<BlockNumber>",
        toBlock: "Option<BlockNumber>",
        blockHash: "Option<H256>",
        address: "Option<EthFilterAddress>",
        topics: "Option<EthFilterTopic>"
    },
    EthFilterAddress: {
        _enum: {
            Single: "EthAddress",
            Multiple: "Vec<EthAddress>",
            Null: "Null"
        }
    },
    EthFilterChanges: {
        _enum: {
            Logs: "Vec<EthLog>",
            Hashes: "Vec<H256>",
            Empty: "Null"
        }
    },
    EthFilterTopic: {
        _enum: {
            Single: "EthFilterTopicInner",
            Multiple: "Vec<EthFilterTopicInner>",
            Null: "Null"
        }
    },
    EthFilterTopicEntry: "Option<H256>",
    EthFilterTopicInner: {
        _enum: {
            Single: "EthFilterTopicEntry",
            Multiple: "Vec<EthFilterTopicEntry>",
            Null: "Null"
        }
    },
    EthRichHeader: {
        _alias: {
            blockHash: "hash",
            blockSize: "size"
        },
        blockHash: "Option<H256>",
        parentHash: "H256",
        sha3Uncles: "H256",
        author: "EthAddress",
        miner: "EthAddress",
        stateRoot: "H256",
        transactionsRoot: "H256",
        receiptsRoot: "H256",
        number: "Option<U256>",
        gasUsed: "U256",
        gasLimit: "U256",
        extraData: "Bytes",
        logsBloom: "EthBloom",
        timestamp: "U256",
        difficulty: "U256",
        sealFields: "Vec<Bytes>",
        blockSize: "Option<U256>"
    },
    EthLog: {
        address: "EthAddress",
        topics: "Vec<H256>",
        data: "Bytes",
        blockHash: "Option<H256>",
        blockNumber: "Option<U256>",
        transactionHash: "Option<H256>",
        transactionIndex: "Option<U256>",
        logIndex: "Option<U256>",
        transactionLogIndex: "Option<U256>",
        removed: "bool"
    },
    EthReceipt: {
        transactionHash: "Option<H256>",
        transactionIndex: "Option<U256>",
        blockHash: "Option<H256>",
        from: "Option<EthAddress>",
        to: "Option<EthAddress>",
        blockNumber: "Option<U256>",
        cumulativeGasUsed: "U256",
        gasUsed: "Option<U256>",
        contractAddress: "Option<EthAddress>",
        logs: "Vec<EthLog>",
        root: "Option<H256>",
        logsBloom: "EthBloom",
        statusCode: "Option<U64>"
    },
    // not convinced, however the original commit matches, so... (maybe V3 is incorrect?)
    EthReceiptV0: "EthReceipt",
    EthReceiptV3: "EthReceipt",
    EthStorageProof: {
        key: "U256",
        value: "U256",
        proof: "Vec<Bytes>"
    },
    EthSubKind: {
        _enum: [
            "newHeads",
            "logs",
            "newPendingTransactions",
            "syncing"
        ]
    },
    EthSubParams: {
        _enum: {
            None: "Null",
            Logs: "EthFilter"
        }
    },
    EthSubResult: {
        _enum: {
            Header: "EthRichHeader",
            Log: "EthLog",
            TransactionHash: "H256",
            SyncState: "EthSyncStatus"
        }
    },
    EthSyncInfo: {
        startingBlock: "U256",
        currentBlock: "U256",
        highestBlock: "U256",
        warpChunksAmount: "Option<U256>",
        warpChunksProcessed: "Option<U256>"
    },
    EthSyncStatus: {
        _enum: {
            Info: "EthSyncInfo",
            None: "Null"
        }
    },
    EthTransaction: {
        hash: "H256",
        nonce: "U256",
        blockHash: "Option<H256>",
        blockNumber: "Option<U256>",
        transactionIndex: "Option<U256>",
        from: "H160",
        to: "Option<H160>",
        value: "U256",
        gasPrice: "Option<U256>",
        maxFeePerGas: "Option<U256>",
        maxPriorityFeePerGas: "Option<U256>",
        gas: "U256",
        input: "Bytes",
        creates: "Option<H160>",
        raw: "Bytes",
        publicKey: "Option<H512>",
        chainId: "Option<U64>",
        standardV: "U256",
        v: "U256",
        r: "U256",
        s: "U256",
        accessList: "Option<Vec<EthAccessListItem>>",
        transactionType: "Option<U256>"
    },
    EthTransactionSignature: {
        v: "u64",
        r: "H256",
        s: "H256"
    },
    EthTransactionAction: {
        _enum: {
            Call: "H160",
            Create: "Null"
        }
    },
    EthTransactionCondition: {
        _enum: {
            block: "u64",
            time: "u64"
        }
    },
    EthTransactionRequest: {
        from: "Option<EthAddress>",
        to: "Option<EthAddress>",
        gasPrice: "Option<U256>",
        gas: "Option<U256>",
        value: "Option<U256>",
        data: "Option<Bytes>",
        nonce: "Option<U256>"
    },
    EthTransactionStatus: {
        transactionHash: "H256",
        transactionIndex: "u32",
        from: "EthAddress",
        to: "Option<EthAddress>",
        contractAddress: "Option<EthAddress>",
        logs: "Vec<EthLog>",
        logsBloom: "EthBloom"
    },
    EthWork: {
        powHash: "H256",
        seedHash: "H256",
        target: "H256",
        number: "Option<u64>"
    }
};
exports.default = {
    rpc: (0, _rpcJs.rpc),
    runtime: (0, _runtimeJs.runtime),
    types
};

},{"./rpc.js":"a3K56","./runtime.js":"hPRUR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a3K56":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const netRpc = {
    listening: {
        aliasSection: "net",
        description: "Returns true if client is actively listening for network connections. Otherwise false.",
        params: [],
        type: "bool"
    },
    peerCount: {
        aliasSection: "net",
        description: "Returns number of peers connected to node.",
        params: [],
        type: "Text"
    },
    version: {
        aliasSection: "net",
        description: "Returns protocol version.",
        params: [],
        type: "Text"
    }
};
const web3Rpc = {
    clientVersion: {
        aliasSection: "web3",
        description: "Returns current client version.",
        params: [],
        type: "Text"
    },
    sha3: {
        aliasSection: "web3",
        description: "Returns sha3 of the given data",
        params: [
            {
                name: "data",
                type: "Bytes"
            }
        ],
        type: "H256"
    }
};
const rpc = {
    ...netRpc,
    ...web3Rpc,
    accounts: {
        description: "Returns accounts list.",
        params: [],
        type: "Vec<H160>"
    },
    blockNumber: {
        description: "Returns the blockNumber",
        params: [],
        type: "U256"
    },
    call: {
        description: "Call contract, returning the output data.",
        params: [
            {
                name: "request",
                type: "EthCallRequest"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "Bytes"
    },
    chainId: {
        description: "Returns the chain ID used for transaction signing at the current best block. None is returned if not available.",
        params: [],
        type: "U64"
    },
    coinbase: {
        description: "Returns block author.",
        params: [],
        type: "H160"
    },
    estimateGas: {
        description: "Estimate gas needed for execution of given contract.",
        params: [
            {
                name: "request",
                type: "EthCallRequest"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "U256"
    },
    feeHistory: {
        description: "Returns fee history for given block count & reward percentiles",
        params: [
            {
                name: "blockCount",
                type: "U256"
            },
            {
                name: "newestBlock",
                type: "BlockNumber"
            },
            {
                name: "rewardPercentiles",
                type: "Option<Vec<f64>>"
            }
        ],
        type: "EthFeeHistory"
    },
    gasPrice: {
        description: "Returns current gas price.",
        params: [],
        type: "U256"
    },
    getBalance: {
        description: "Returns balance of the given account.",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "U256"
    },
    getBlockByHash: {
        description: "Returns block with given hash.",
        params: [
            {
                name: "hash",
                type: "H256"
            },
            {
                name: "full",
                type: "bool"
            }
        ],
        type: "Option<EthRichBlock>"
    },
    getBlockByNumber: {
        description: "Returns block with given number.",
        params: [
            {
                name: "block",
                type: "BlockNumber"
            },
            {
                name: "full",
                type: "bool"
            }
        ],
        type: "Option<EthRichBlock>"
    },
    getBlockTransactionCountByHash: {
        description: "Returns the number of transactions in a block with given hash.",
        params: [
            {
                name: "hash",
                type: "H256"
            }
        ],
        type: "U256"
    },
    getBlockTransactionCountByNumber: {
        description: "Returns the number of transactions in a block with given block number.",
        params: [
            {
                name: "block",
                type: "BlockNumber"
            }
        ],
        type: "U256"
    },
    getCode: {
        description: "Returns the code at given address at given time (block number).",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "Bytes"
    },
    getFilterChanges: {
        description: "Returns filter changes since last poll.",
        params: [
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "EthFilterChanges"
    },
    getFilterLogs: {
        description: "Returns all logs matching given filter (in a range 'from' - 'to').",
        params: [
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "Vec<EthLog>"
    },
    getLogs: {
        description: "Returns logs matching given filter object.",
        params: [
            {
                name: "filter",
                type: "EthFilter"
            }
        ],
        type: "Vec<EthLog>"
    },
    getProof: {
        description: "Returns proof for account and storage.",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                name: "storageKeys",
                type: "Vec<H256>"
            },
            {
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "EthAccount"
    },
    getStorageAt: {
        description: "Returns content of the storage at given address.",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                name: "index",
                type: "U256"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "H256"
    },
    getTransactionByBlockHashAndIndex: {
        description: "Returns transaction at given block hash and index.",
        params: [
            {
                name: "hash",
                type: "H256"
            },
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "EthTransaction"
    },
    getTransactionByBlockNumberAndIndex: {
        description: "Returns transaction by given block number and index.",
        params: [
            {
                name: "number",
                type: "BlockNumber"
            },
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "EthTransaction"
    },
    getTransactionByHash: {
        description: "Get transaction by its hash.",
        params: [
            {
                name: "hash",
                type: "H256"
            }
        ],
        type: "EthTransaction"
    },
    getTransactionCount: {
        description: "Returns the number of transactions sent from given address at given time (block number).",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "U256"
    },
    getTransactionReceipt: {
        description: "Returns transaction receipt by transaction hash.",
        params: [
            {
                name: "hash",
                type: "H256"
            }
        ],
        type: "EthReceipt"
    },
    getUncleByBlockHashAndIndex: {
        description: "Returns an uncles at given block and index.",
        params: [
            {
                name: "hash",
                type: "H256"
            },
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "EthRichBlock"
    },
    getUncleByBlockNumberAndIndex: {
        description: "Returns an uncles at given block and index.",
        params: [
            {
                name: "number",
                type: "BlockNumber"
            },
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "EthRichBlock"
    },
    getUncleCountByBlockHash: {
        description: "Returns the number of uncles in a block with given hash.",
        params: [
            {
                name: "hash",
                type: "H256"
            }
        ],
        type: "U256"
    },
    getUncleCountByBlockNumber: {
        description: "Returns the number of uncles in a block with given block number.",
        params: [
            {
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "U256"
    },
    getWork: {
        description: "Returns the hash of the current block, the seedHash, and the boundary condition to be met.",
        params: [],
        type: "EthWork"
    },
    hashrate: {
        description: "Returns the number of hashes per second that the node is mining with.",
        params: [],
        type: "U256"
    },
    maxPriorityFeePerGas: {
        description: "Returns max priority fee per gas",
        params: [],
        type: "U256"
    },
    mining: {
        description: "Returns true if client is actively mining new blocks.",
        params: [],
        type: "bool"
    },
    newBlockFilter: {
        description: "Returns id of new block filter.",
        params: [],
        type: "U256"
    },
    newFilter: {
        description: "Returns id of new filter.",
        params: [
            {
                name: "filter",
                type: "EthFilter"
            }
        ],
        type: "U256"
    },
    newPendingTransactionFilter: {
        description: "Returns id of new block filter.",
        params: [],
        type: "U256"
    },
    protocolVersion: {
        description: "Returns protocol version encoded as a string (quotes are necessary).",
        params: [],
        type: "u64"
    },
    sendRawTransaction: {
        description: "Sends signed transaction, returning its hash.",
        params: [
            {
                name: "bytes",
                type: "Bytes"
            }
        ],
        type: "H256"
    },
    sendTransaction: {
        description: "Sends transaction; will block waiting for signer to return the transaction hash",
        params: [
            {
                name: "tx",
                type: "EthTransactionRequest"
            }
        ],
        type: "H256"
    },
    submitHashrate: {
        description: "Used for submitting mining hashrate.",
        params: [
            {
                name: "index",
                type: "U256"
            },
            {
                name: "hash",
                type: "H256"
            }
        ],
        type: "bool"
    },
    submitWork: {
        description: "Used for submitting a proof-of-work solution.",
        params: [
            {
                name: "nonce",
                type: "H64"
            },
            {
                name: "headerHash",
                type: "H256"
            },
            {
                name: "mixDigest",
                type: "H256"
            }
        ],
        type: "bool"
    },
    subscribe: {
        description: "Subscribe to Eth subscription.",
        params: [
            {
                name: "kind",
                type: "EthSubKind"
            },
            {
                isOptional: true,
                name: "params",
                type: "EthSubParams"
            }
        ],
        pubsub: [
            "subscription",
            "subscribe",
            "unsubscribe"
        ],
        type: "Null"
    },
    syncing: {
        description: "Returns an object with data about the sync status or false.",
        params: [],
        type: "EthSyncStatus"
    },
    uninstallFilter: {
        description: "Uninstalls filter.",
        params: [
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "bool"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hPRUR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const ethMethodsV4 = {
    account_basic: {
        description: "Returns pallet_evm::Accounts by address.",
        params: [
            {
                name: "address",
                type: "H160"
            }
        ],
        type: "EvmAccount"
    },
    account_code_at: {
        description: "For a given account address, returns pallet_evm::AccountCodes.",
        params: [
            {
                name: "address",
                type: "H160"
            }
        ],
        type: "Bytes"
    },
    author: {
        description: "Returns the converted FindAuthor::find_author authority id.",
        params: [],
        type: "H160"
    },
    call: {
        description: "Returns a frame_ethereum::call response. If `estimate` is true,",
        params: [
            {
                name: "from",
                type: "H160"
            },
            {
                name: "to",
                type: "H160"
            },
            {
                name: "data",
                type: "Vec<u8>"
            },
            {
                name: "value",
                type: "U256"
            },
            {
                name: "gasLimit",
                type: "U256"
            },
            {
                name: "maxFeePerGas",
                type: "Option<U256>"
            },
            {
                name: "maxPriorityFeePerGas",
                type: "Option<U256>"
            },
            {
                name: "nonce",
                type: "Option<U256>"
            },
            {
                name: "estimate",
                type: "bool"
            },
            {
                name: "accessList",
                type: "Option<Vec<(H160, Vec<H256>)>>"
            }
        ],
        type: "Result<EvmCallInfo, DispatchError>"
    },
    chain_id: {
        description: "Returns runtime defined pallet_evm::ChainId.",
        params: [],
        type: "u64"
    },
    create: {
        description: "Returns a frame_ethereum::call response. If `estimate` is true,",
        params: [
            {
                name: "from",
                type: "H160"
            },
            {
                name: "data",
                type: "Vec<u8>"
            },
            {
                name: "value",
                type: "U256"
            },
            {
                name: "gasLimit",
                type: "U256"
            },
            {
                name: "maxFeePerGas",
                type: "Option<U256>"
            },
            {
                name: "maxPriorityFeePerGas",
                type: "Option<U256>"
            },
            {
                name: "nonce",
                type: "Option<U256>"
            },
            {
                name: "estimate",
                type: "bool"
            },
            {
                name: "accessList",
                type: "Option<Vec<(H160, Vec<H256>)>>"
            }
        ],
        type: "Result<EvmCreateInfo, DispatchError>"
    },
    current_all: {
        description: "Return all the current data for a block in a single runtime call.",
        params: [],
        type: "(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)"
    },
    current_block: {
        description: "Return the current block.",
        params: [],
        type: "BlockV2"
    },
    current_receipts: {
        description: "Return the current receipt.",
        params: [],
        type: "Option<Vec<EthReceiptV3>>"
    },
    current_transaction_statuses: {
        description: "Return the current transaction status.",
        params: [],
        type: "Option<Vec<EthTransactionStatus>>"
    },
    elasticity: {
        description: "Return the elasticity multiplier.",
        params: [],
        type: "Option<Permill>"
    },
    extrinsic_filter: {
        description: "Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.",
        params: [
            {
                name: "xts",
                type: "Vec<Extrinsic>"
            }
        ],
        type: "Vec<TransactionV2>"
    },
    gas_price: {
        description: "Returns FixedGasPrice::min_gas_price",
        params: [],
        type: "u256"
    },
    storage_at: {
        description: "For a given account address and index, returns pallet_evm::AccountStorages.",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                name: "index",
                type: "u256"
            }
        ],
        type: "H256"
    }
};
const ethMethodsV5 = {
    call: {
        description: "Returns a frame_ethereum::call response. If `estimate` is true,",
        params: [
            {
                name: "from",
                type: "H160"
            },
            {
                name: "to",
                type: "H160"
            },
            {
                name: "data",
                type: "Vec<u8>"
            },
            {
                name: "value",
                type: "U256"
            },
            {
                name: "gasLimit",
                type: "U256"
            },
            {
                name: "maxFeePerGas",
                type: "Option<U256>"
            },
            {
                name: "maxPriorityFeePerGas",
                type: "Option<U256>"
            },
            {
                name: "nonce",
                type: "Option<U256>"
            },
            {
                name: "estimate",
                type: "bool"
            },
            {
                name: "accessList",
                type: "Option<Vec<(H160, Vec<H256>)>>"
            }
        ],
        type: "Result<EvmCallInfoV2, DispatchError>"
    },
    create: {
        description: "Returns a frame_ethereum::call response. If `estimate` is true,",
        params: [
            {
                name: "from",
                type: "H160"
            },
            {
                name: "data",
                type: "Vec<u8>"
            },
            {
                name: "value",
                type: "U256"
            },
            {
                name: "gasLimit",
                type: "U256"
            },
            {
                name: "maxFeePerGas",
                type: "Option<U256>"
            },
            {
                name: "maxPriorityFeePerGas",
                type: "Option<U256>"
            },
            {
                name: "nonce",
                type: "Option<U256>"
            },
            {
                name: "estimate",
                type: "bool"
            },
            {
                name: "accessList",
                type: "Option<Vec<(H160, Vec<H256>)>>"
            }
        ],
        type: "Result<EvmCreateInfoV2, DispatchError>"
    }
};
const runtime = {
    ConvertTransactionRuntimeApi: [
        {
            methods: {
                convert_transaction: {
                    description: "Converts an Ethereum-style transaction to Extrinsic",
                    params: [
                        {
                            name: "transaction",
                            type: "TransactionV2"
                        }
                    ],
                    type: "Extrinsic"
                }
            },
            version: 2
        }
    ],
    DebugRuntimeApi: [
        {
            methods: {
                trace_block: {
                    description: "Trace all block extrinsics",
                    params: [
                        {
                            name: "extrinsics",
                            type: "Vec<Extrinsic>"
                        },
                        {
                            name: "knownTransactions",
                            type: "Vec<H256>"
                        }
                    ],
                    type: "Result<(), DispatchError>"
                },
                trace_transaction: {
                    description: "Trace transaction extrinsics",
                    params: [
                        {
                            name: "extrinsics",
                            type: "Vec<Extrinsic>"
                        },
                        {
                            name: "transaction",
                            type: "EthTransaction"
                        }
                    ],
                    type: "Result<(), DispatchError>"
                }
            },
            version: 4
        }
    ],
    EthereumRuntimeRPCApi: [
        {
            methods: {
                ...ethMethodsV4
            },
            version: 4
        },
        {
            methods: {
                ...ethMethodsV4,
                ...ethMethodsV5
            },
            version: 5
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eMBA0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {}
};

},{"./runtime.js":"286O2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"286O2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    // deprecated, the NimbusApi is current - this is for backwards compat
    AuthorFilterAPI: [
        {
            methods: {
                can_author: {
                    description: "The runtime api used to predict whether an author will be eligible in the given slot",
                    params: [
                        {
                            name: "author",
                            type: "AccountId"
                        },
                        {
                            name: "relayParent",
                            type: "u32"
                        },
                        {
                            name: "parentHeader",
                            type: "Header"
                        }
                    ],
                    type: "bool"
                }
            },
            version: 2
        },
        {
            methods: {
                can_author: {
                    description: "The runtime api used to predict whether an author will be eligible in the given slot",
                    params: [
                        {
                            name: "author",
                            type: "AccountId"
                        },
                        {
                            name: "relayParent",
                            type: "u32"
                        }
                    ],
                    type: "bool"
                }
            },
            version: 1
        }
    ],
    NimbusApi: [
        {
            methods: {
                can_author: {
                    description: "The runtime api used to predict whether a Nimbus author will be eligible in the given slot",
                    params: [
                        {
                            name: "author",
                            type: "AccountId"
                        },
                        {
                            name: "relayParent",
                            type: "u32"
                        },
                        {
                            name: "parentHeader",
                            type: "Header"
                        }
                    ],
                    type: "bool"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kTf8P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {}
};

},{"./runtime.js":"3DHfS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3DHfS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21
    OracleApi: [
        {
            methods: {
                get_all_values: {
                    description: "Retrieves all values",
                    params: [
                        {
                            name: "providerId",
                            // This is a Codec type
                            type: "Raw"
                        }
                    ],
                    // This won't actually work as expected - since we have
                    // no information about the actual Raw sizes, we cannot
                    // handle it in this format (it would need an override
                    // for the specific Codec). So return the Raw value.
                    // type: 'Vec<(Raw, Option<Raw>)>'
                    type: "Raw"
                },
                get_value: {
                    description: "Retrieves a single value",
                    params: [
                        {
                            name: "providerId",
                            // This is a Codec type
                            type: "Raw"
                        },
                        {
                            name: "key",
                            // This is a Codec type
                            type: "Raw"
                        }
                    ],
                    // This is an Option<Codec> type
                    type: "Option<Raw>"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"grkrk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: {},
    runtime: (0, _runtimeJs.runtime),
    types: {}
};

},{"./runtime.js":"hxNvT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hxNvT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/tokens/rpc/runtime-api/src/lib.rs#L11-L18
    TokensApi: [
        {
            methods: {
                query_existential_deposit: {
                    description: "Query the existential amount for a specific currency",
                    params: [
                        {
                            name: "currencyId",
                            // This is CurrencyId, as per the return value, we are unsure
                            // if this is specialized and/or global to the chain or not
                            type: "Raw"
                        }
                    ],
                    // This is Balance - since we don't understand enough about the way
                    // in which this is used, we default to u128 here (it certainly could
                    // be a specialized type that doesn't map to the on-chain Balance)
                    type: "u128"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dIscT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    types: {
        RpcMethods: {
            version: "u32",
            methods: "Vec<Text>"
        }
    }
};

},{"./rpc.js":"znrHt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"znrHt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    methods: {
        description: "Retrieves the list of RPC methods that are exposed by the node",
        params: [],
        type: "RpcMethods"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hkDY6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    types: {
        ExtrinsicOrHash: {
            _enum: {
                Hash: "Hash",
                Extrinsic: "Bytes"
            }
        },
        ExtrinsicStatus: {
            _enum: {
                Future: "Null",
                Ready: "Null",
                Broadcast: "Vec<Text>",
                InBlock: "Hash",
                Retracted: "Hash",
                FinalityTimeout: "Hash",
                Finalized: "Hash",
                Usurped: "Hash",
                Dropped: "Null",
                Invalid: "Null"
            }
        }
    }
};

},{"./rpc.js":"lGyys","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lGyys":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    hasKey: {
        description: "Returns true if the keystore has private keys for the given public key and key type.",
        isUnsafe: true,
        params: [
            {
                name: "publicKey",
                type: "Bytes"
            },
            {
                name: "keyType",
                type: "Text"
            }
        ],
        type: "bool"
    },
    hasSessionKeys: {
        description: "Returns true if the keystore has private keys for the given session public keys.",
        isUnsafe: true,
        params: [
            {
                name: "sessionKeys",
                type: "Bytes"
            }
        ],
        type: "bool"
    },
    insertKey: {
        description: "Insert a key into the keystore.",
        isUnsafe: true,
        params: [
            {
                name: "keyType",
                type: "Text"
            },
            {
                name: "suri",
                type: "Text"
            },
            {
                name: "publicKey",
                type: "Bytes"
            }
        ],
        type: "Bytes"
    },
    pendingExtrinsics: {
        description: "Returns all pending extrinsics, potentially grouped by sender",
        params: [],
        type: "Vec<Extrinsic>"
    },
    removeExtrinsic: {
        description: "Remove given extrinsic from the pool and temporarily ban it to prevent reimporting",
        isUnsafe: true,
        params: [
            {
                name: "bytesOrHash",
                type: "Vec<ExtrinsicOrHash>"
            }
        ],
        type: "Vec<Hash>"
    },
    rotateKeys: {
        description: "Generate new session keys and returns the corresponding public keys",
        isUnsafe: true,
        params: [],
        type: "Bytes"
    },
    submitAndWatchExtrinsic: {
        description: "Submit and subscribe to watch an extrinsic until unsubscribed",
        isSigned: true,
        params: [
            {
                name: "extrinsic",
                type: "Extrinsic"
            }
        ],
        pubsub: [
            "extrinsicUpdate",
            "submitAndWatchExtrinsic",
            "unwatchExtrinsic"
        ],
        type: "ExtrinsicStatus"
    },
    submitExtrinsic: {
        description: "Submit a fully formatted extrinsic for block inclusion",
        isSigned: true,
        params: [
            {
                name: "extrinsic",
                type: "Extrinsic"
            }
        ],
        type: "Hash"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iLEm8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    types: {
        BlockHash: "Hash"
    }
};

},{"./rpc.js":"ayz85","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ayz85":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    getBlock: {
        description: "Get header and body of a relay chain block",
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "hash",
                type: "BlockHash"
            }
        ],
        type: "SignedBlock"
    },
    getBlockHash: {
        description: "Get the block hash for a specific block",
        params: [
            {
                isOptional: true,
                name: "blockNumber",
                type: "BlockNumber"
            }
        ],
        type: "BlockHash"
    },
    getFinalizedHead: {
        alias: [
            "chain_getFinalisedHead"
        ],
        description: "Get hash of the last finalized block in the canon chain",
        params: [],
        type: "BlockHash"
    },
    getHeader: {
        alias: [
            "chain_getHead"
        ],
        description: "Retrieves the header for a specific block",
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "hash",
                type: "BlockHash"
            }
        ],
        type: "Header"
    },
    subscribeAllHeads: {
        description: "Retrieves the newest header via subscription",
        params: [],
        pubsub: [
            "allHead",
            "subscribeAllHeads",
            "unsubscribeAllHeads"
        ],
        type: "Header"
    },
    subscribeFinalizedHeads: {
        alias: [
            "chain_subscribeFinalisedHeads",
            "chain_unsubscribeFinalisedHeads"
        ],
        description: "Retrieves the best finalized header via subscription",
        params: [],
        pubsub: [
            "finalizedHead",
            "subscribeFinalizedHeads",
            "unsubscribeFinalizedHeads"
        ],
        type: "Header"
    },
    subscribeNewHeads: {
        alias: [
            "chain_unsubscribeNewHeads",
            "subscribe_newHead",
            "unsubscribe_newHead"
        ],
        description: "Retrieves the best header via subscription",
        params: [],
        // NOTE These still has the aliassed version, compatible with 1.x
        pubsub: [
            "newHead",
            "subscribeNewHead",
            "unsubscribeNewHead"
        ],
        type: "Header"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4gxGw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    types: {
        // StorageKey extends Bytes
        PrefixedStorageKey: "StorageKey"
    }
};

},{"./rpc.js":"3j6oB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3j6oB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    getKeys: {
        description: "Returns the keys with prefix from a child storage, leave empty to get all the keys",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "prefix",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Vec<StorageKey>"
    },
    getKeysPaged: {
        alias: [
            "childstate_getKeysPagedAt"
        ],
        description: "Returns the keys with prefix from a child storage with pagination support",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "prefix",
                type: "StorageKey"
            },
            {
                name: "count",
                type: "u32"
            },
            {
                isOptional: true,
                name: "startKey",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Vec<StorageKey>"
    },
    getStorage: {
        description: "Returns a child storage entry at a specific block state",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Option<StorageData>"
    },
    getStorageEntries: {
        description: "Returns child storage entries for multiple keys at a specific block state",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "keys",
                type: "Vec<StorageKey>"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Vec<Option<StorageData>>"
    },
    getStorageHash: {
        description: "Returns the hash of a child storage entry at a block state",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Option<Hash>"
    },
    getStorageSize: {
        description: "Returns the size of a child storage entry at a block state",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Option<u64>"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"CTv6V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    runtime: (0, _runtimeJs.runtime),
    types: {
        StorageKind: {
            _enum: {
                PERSISTENT: 1,
                LOCAL: 2
            }
        }
    }
};

},{"./rpc.js":"6HZha","./runtime.js":"llXdp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HZha":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    localStorageGet: {
        description: "Get offchain local storage under given key and prefix",
        isUnsafe: true,
        params: [
            {
                name: "kind",
                type: "StorageKind"
            },
            {
                name: "key",
                type: "Bytes"
            }
        ],
        type: "Option<Bytes>"
    },
    localStorageSet: {
        description: "Set offchain local storage under given key and prefix",
        isUnsafe: true,
        params: [
            {
                name: "kind",
                type: "StorageKind"
            },
            {
                name: "key",
                type: "Bytes"
            },
            {
                name: "value",
                type: "Bytes"
            }
        ],
        type: "Null"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"llXdp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const runtime = {
    OffchainWorkerApi: [
        {
            methods: {
                offchain_worker: {
                    description: "Starts the off-chain task for given block header.",
                    params: [
                        {
                            name: "header",
                            type: "Header"
                        }
                    ],
                    type: "Null"
                }
            },
            version: 2
        },
        {
            methods: {
                offchain_worker: {
                    description: "Starts the off-chain task for given block header.",
                    params: [
                        {
                            name: "number",
                            type: "BlockNumber"
                        }
                    ],
                    type: "Null"
                }
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5fFfa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
var _runtimeJs = require("./runtime.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    runtime: (0, _runtimeJs.runtime),
    types: {
        FeeDetails: {
            inclusionFee: "Option<InclusionFee>"
        },
        InclusionFee: {
            baseFee: "Balance",
            lenFee: "Balance",
            adjustedWeightFee: "Balance"
        },
        RuntimeDispatchInfo: {
            weight: "Weight",
            class: "DispatchClass",
            partialFee: "Balance"
        },
        RuntimeDispatchInfoV1: {
            weight: "WeightV1",
            class: "DispatchClass",
            partialFee: "Balance"
        },
        RuntimeDispatchInfoV2: {
            weight: "WeightV2",
            class: "DispatchClass",
            partialFee: "Balance"
        }
    }
};

},{"./rpc.js":"98nDr","./runtime.js":"62k9j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"98nDr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    queryFeeDetails: {
        // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
        deprecated: "Use `api.call.transactionPaymentApi.queryFeeDetails` instead",
        description: "Query the detailed fee of a given encoded extrinsic",
        params: [
            {
                name: "extrinsic",
                type: "Bytes"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "FeeDetails"
    },
    queryInfo: {
        // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
        deprecated: "Use `api.call.transactionPaymentApi.queryInfo` instead",
        description: "Retrieves the fee information for an encoded extrinsic",
        params: [
            {
                name: "extrinsic",
                type: "Bytes"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        // NOTE: Stuck on V1 forever (at least for the time being)
        type: "RuntimeDispatchInfoV1"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"62k9j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runtime", ()=>runtime);
const V1_TO_V4_SHARED_PAY = {
    query_fee_details: {
        description: "The transaction fee details",
        params: [
            {
                name: "uxt",
                type: "Extrinsic"
            },
            {
                name: "len",
                type: "u32"
            }
        ],
        type: "FeeDetails"
    }
};
const V1_TO_V3_SHARED_CALL = {
    query_call_fee_details: {
        description: "The call fee details",
        params: [
            {
                name: "call",
                type: "Call"
            },
            {
                name: "len",
                type: "u32"
            }
        ],
        type: "FeeDetails"
    }
};
const V2_TO_V4_SHARED_PAY = {
    query_info: {
        description: "The transaction info",
        params: [
            {
                name: "uxt",
                type: "Extrinsic"
            },
            {
                name: "len",
                type: "u32"
            }
        ],
        type: "RuntimeDispatchInfo"
    }
};
const V2_V3_SHARED_CALL = {
    query_call_info: {
        description: "The call info",
        params: [
            {
                name: "call",
                type: "Call"
            },
            {
                name: "len",
                type: "u32"
            }
        ],
        type: "RuntimeDispatchInfo"
    }
};
const V3_SHARED_PAY_CALL = {
    query_length_to_fee: {
        description: "Query the output of the current LengthToFee given some input",
        params: [
            {
                name: "length",
                type: "u32"
            }
        ],
        type: "Balance"
    },
    query_weight_to_fee: {
        description: "Query the output of the current WeightToFee given some input",
        params: [
            {
                name: "weight",
                type: "Weight"
            }
        ],
        type: "Balance"
    }
};
const runtime = {
    TransactionPaymentApi: [
        {
            // V4 is equivalent to V3 (V4 just dropped all V1 references)
            methods: {
                ...V3_SHARED_PAY_CALL,
                ...V2_TO_V4_SHARED_PAY,
                ...V1_TO_V4_SHARED_PAY
            },
            version: 4
        },
        {
            methods: {
                ...V3_SHARED_PAY_CALL,
                ...V2_TO_V4_SHARED_PAY,
                ...V1_TO_V4_SHARED_PAY
            },
            version: 3
        },
        {
            methods: {
                ...V2_TO_V4_SHARED_PAY,
                ...V1_TO_V4_SHARED_PAY
            },
            version: 2
        },
        {
            methods: {
                query_info: {
                    description: "The transaction info",
                    params: [
                        {
                            name: "uxt",
                            type: "Extrinsic"
                        },
                        {
                            name: "len",
                            type: "u32"
                        }
                    ],
                    // NOTE: _Should_ be V1 (as per current Substrate), however the interface was
                    // changed mid-flight between versions. So we have some of each depending on
                    // runtime. (We do detect the weight type, so correct)
                    type: "RuntimeDispatchInfo"
                },
                ...V1_TO_V4_SHARED_PAY
            },
            version: 1
        }
    ],
    TransactionPaymentCallApi: [
        {
            methods: {
                ...V3_SHARED_PAY_CALL,
                ...V2_V3_SHARED_CALL,
                ...V1_TO_V3_SHARED_CALL
            },
            version: 3
        },
        {
            methods: {
                ...V2_V3_SHARED_CALL,
                ...V1_TO_V3_SHARED_CALL
            },
            version: 2
        },
        {
            methods: {
                CALL: {
                    description: "The call info",
                    params: [
                        {
                            name: "call",
                            type: "Call"
                        },
                        {
                            name: "len",
                            type: "u32"
                        }
                    ],
                    // NOTE: As per the above comment, the below is correct according to Substrate, but
                    // _may_ yield fallback decoding on some versions of the runtime
                    type: "RuntimeDispatchInfo"
                },
                ...V1_TO_V3_SHARED_CALL
            },
            version: 1
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8p1Cg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rpcJs = require("./rpc.js");
exports.default = {
    rpc: (0, _rpcJs.rpc),
    types: {
        ApiId: "[u8; 8]",
        BlockTrace: {
            blockHash: "Text",
            parentHash: "Text",
            tracingTargets: "Text",
            storageKeys: "Text",
            spans: "Vec<BlockTraceSpan>",
            events: "Vec<BlockTraceEvent>"
        },
        BlockTraceEvent: {
            target: "Text",
            data: "BlockTraceEventData",
            parentId: "Option<u64>"
        },
        BlockTraceEventData: {
            stringValues: "HashMap<Text, Text>"
        },
        BlockTraceSpan: {
            id: "u64",
            parentId: "Option<u64>",
            name: "Text",
            target: "Text",
            wasm: "bool"
        },
        KeyValueOption: "(StorageKey, Option<StorageData>)",
        MigrationStatusResult: {
            topRemainingToMigrate: "u64",
            childRemainingToMigrate: "u64"
        },
        ReadProof: {
            at: "Hash",
            proof: "Vec<Bytes>"
        },
        RuntimeVersionApi: "(ApiId, u32)",
        RuntimeVersion: {
            specName: "Text",
            implName: "Text",
            authoringVersion: "u32",
            specVersion: "u32",
            implVersion: "u32",
            apis: "Vec<RuntimeVersionApi>",
            transactionVersion: "u32",
            stateVersion: "u8"
        },
        RuntimeVersionPre4: {
            specName: "Text",
            implName: "Text",
            authoringVersion: "u32",
            specVersion: "u32",
            implVersion: "u32",
            apis: "Vec<RuntimeVersionApi>",
            transactionVersion: "u32"
        },
        RuntimeVersionPre3: {
            specName: "Text",
            implName: "Text",
            authoringVersion: "u32",
            specVersion: "u32",
            implVersion: "u32",
            apis: "Vec<RuntimeVersionApi>"
        },
        RuntimeVersionPartial: {
            specName: "Text",
            specVersion: "u32",
            apis: "Vec<RuntimeVersionApi>"
        },
        SpecVersion: "u32",
        StorageChangeSet: {
            block: "Hash",
            changes: "Vec<KeyValueOption>"
        },
        TraceBlockResponse: {
            _enum: {
                TraceError: "TraceError",
                BlockTrace: "BlockTrace"
            }
        },
        TraceError: {
            error: "Text"
        }
    }
};

},{"./rpc.js":"fp4Y3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fp4Y3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpc", ()=>rpc);
const rpc = {
    call: {
        alias: [
            "state_callAt"
        ],
        description: "Perform a call to a builtin on the chain",
        params: [
            {
                name: "method",
                type: "Text"
            },
            {
                name: "data",
                type: "Bytes"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Bytes"
    },
    getChildKeys: {
        description: "Retrieves the keys with prefix of a specific child storage",
        params: [
            {
                name: "childStorageKey",
                type: "StorageKey"
            },
            {
                name: "childDefinition",
                type: "StorageKey"
            },
            {
                name: "childType",
                type: "u32"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Vec<StorageKey>"
    },
    getChildReadProof: {
        description: "Returns proof of storage for child key entries at a specific block state.",
        params: [
            {
                name: "childStorageKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "keys",
                type: "Vec<StorageKey>"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "ReadProof"
    },
    getChildStorage: {
        description: "Retrieves the child storage for a key",
        params: [
            {
                name: "childStorageKey",
                type: "StorageKey"
            },
            {
                name: "childDefinition",
                type: "StorageKey"
            },
            {
                name: "childType",
                type: "u32"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "StorageData"
    },
    getChildStorageHash: {
        description: "Retrieves the child storage hash",
        params: [
            {
                name: "childStorageKey",
                type: "StorageKey"
            },
            {
                name: "childDefinition",
                type: "StorageKey"
            },
            {
                name: "childType",
                type: "u32"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Hash"
    },
    getChildStorageSize: {
        description: "Retrieves the child storage size",
        params: [
            {
                name: "childStorageKey",
                type: "StorageKey"
            },
            {
                name: "childDefinition",
                type: "StorageKey"
            },
            {
                name: "childType",
                type: "u32"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "u64"
    },
    getKeys: {
        deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
        description: "Retrieves the keys with a certain prefix",
        params: [
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Vec<StorageKey>"
    },
    getKeysPaged: {
        alias: [
            "state_getKeysPagedAt"
        ],
        description: "Returns the keys with prefix with pagination support.",
        params: [
            {
                name: "key",
                type: "StorageKey"
            },
            {
                name: "count",
                type: "u32"
            },
            {
                isOptional: true,
                name: "startKey",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Vec<StorageKey>"
    },
    getMetadata: {
        description: "Returns the runtime metadata",
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Metadata"
    },
    getPairs: {
        deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
        description: "Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)",
        isUnsafe: true,
        params: [
            {
                name: "prefix",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Vec<KeyValue>"
    },
    getReadProof: {
        description: "Returns proof of storage entries at a specific block state",
        params: [
            {
                name: "keys",
                type: "Vec<StorageKey>"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "ReadProof"
    },
    getRuntimeVersion: {
        alias: [
            "chain_getRuntimeVersion"
        ],
        description: "Get the runtime version",
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "RuntimeVersion"
    },
    getStorage: {
        alias: [
            "state_getStorageAt"
        ],
        description: "Retrieves the storage for a key",
        params: [
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "StorageData"
    },
    getStorageHash: {
        alias: [
            "state_getStorageHashAt"
        ],
        description: "Retrieves the storage hash",
        params: [
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Hash"
    },
    getStorageSize: {
        alias: [
            "state_getStorageSizeAt"
        ],
        description: "Retrieves the storage size",
        params: [
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "u64"
    },
    queryStorage: {
        description: "Query historical storage entries (by key) starting from a start block",
        isUnsafe: true,
        params: [
            {
                name: "keys",
                type: "Vec<StorageKey>"
            },
            {
                name: "fromBlock",
                type: "Hash"
            },
            {
                isOptional: true,
                name: "toBlock",
                type: "BlockHash"
            }
        ],
        type: "Vec<StorageChangeSet>"
    },
    queryStorageAt: {
        description: "Query storage entries (by key) starting at block hash given as the second parameter",
        params: [
            {
                name: "keys",
                type: "Vec<StorageKey>"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Vec<StorageChangeSet>"
    },
    subscribeRuntimeVersion: {
        alias: [
            "chain_subscribeRuntimeVersion",
            "chain_unsubscribeRuntimeVersion"
        ],
        description: "Retrieves the runtime version via subscription",
        params: [],
        pubsub: [
            "runtimeVersion",
            "subscribeRuntimeVersion",
            "unsubscribeRuntimeVersion"
        ],
        type: "RuntimeVersion"
    },
    subscribeStorage: {
        description: "Subscribes to storage changes for the provided keys",
        // NOTE Just marking it here to follow the logic - this is unsafe when no
        // keys are provided (i.e. subscribing to all), generally this is used
        // extensively with normal subscriptions
        // isUnsafe: true,
        params: [
            {
                isOptional: true,
                name: "keys",
                type: "Vec<StorageKey>"
            }
        ],
        pubsub: [
            "storage",
            "subscribeStorage",
            "unsubscribeStorage"
        ],
        type: "StorageChangeSet"
    },
    traceBlock: {
        description: "Provides a way to trace the re-execution of a single block",
        isUnsafe: true,
        params: [
            {
                name: "block",
                type: "Hash"
            },
            {
                name: "targets",
                type: "Option<Text>"
            },
            {
                name: "storageKeys",
                type: "Option<Text>"
            },
            {
                name: "methods",
                type: "Option<Text>"
            }
        ],
        type: "TraceBlockResponse"
    },
    trieMigrationStatus: {
        description: "Check current migration state",
        isUnsafe: true,
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "MigrationStatusResult"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"WQpKM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _util = require("@polkadot/util");
var _definitionsJs = require("./definitions.js");
const jsonrpc = {};
Object.keys(_definitionsJs).forEach((s)=>Object.entries(_definitionsJs[s].rpc || {}).forEach(([method, def])=>{
        // allow for section overrides
        const section = def.aliasSection || s;
        if (!jsonrpc[section]) jsonrpc[section] = {};
        jsonrpc[section][method] = (0, _util.objectSpread)({}, def, {
            isSubscription: !!def.pubsub,
            jsonrpc: `${section}_${method}`,
            method,
            section
        });
    }));
exports.default = jsonrpc;

},{"@polkadot/util":"3HnHw","./definitions.js":"44OZI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9hFU1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PortableRegistry", ()=>(0, _portableRegistryJs.PortableRegistry));
parcelHelpers.export(exports, "convertSiV0toV1", ()=>(0, _toV1Js.toV1));
var _portableRegistryJs = require("./PortableRegistry.js");
var _toV1Js = require("./toV1.js");

},{"./PortableRegistry.js":"6xjva","./toV1.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6xjva":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PortableRegistry", ()=>PortableRegistry);
var _typesCodec = require("@polkadot/types-codec");
var _typesCreate = require("@polkadot/types-create");
var _util = require("@polkadot/util");
const l = (0, _util.logger)("PortableRegistry");
const TYPE_UNWRAP = {
    toNumber: ()=>-1
};
const PRIMITIVE_ALIAS = {
    Char: "u32",
    Str: "Text"
};
const PATHS_ALIAS = splitNamespace([
    // full matching on exact names...
    // these are well-known types with additional encoding
    "sp_core::crypto::AccountId32",
    "sp_runtime::generic::era::Era",
    "sp_runtime::multiaddress::MultiAddress",
    // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
    "fp_account::AccountId20",
    "account::AccountId20",
    "polkadot_runtime_common::claims::EthereumAddress",
    // weights 2 is a structure, however for 1.5. with a single field it
    // should be flatenned (can appear in Compact<Weight> extrinsics)
    "frame_support::weights::weight_v2::Weight",
    "sp_weights::weight_v2::Weight",
    // wildcard matching in place...
    // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
    "*_democracy::vote::Vote",
    "*_conviction_voting::vote::Vote",
    "*_identity::types::Data",
    // these are opaque Vec<u8> wrappers
    "sp_core::OpaqueMetadata",
    "sp_core::OpaquePeerId",
    "sp_core::offchain::OpaqueMultiaddr",
    // shorten some well-known types
    "primitive_types::*",
    "sp_arithmetic::per_things::*",
    // runtime
    "*_runtime::RuntimeCall",
    "*_runtime::RuntimeEvent",
    // ink!
    "ink::env::types::*",
    "ink::primitives::types::*",
    "ink_env::types::*",
    "ink_primitives::types::*",
    // noir
    "np_runtime::accountname::AccountName",
    "np_runtime::universaladdress::UniversalAddress"
]);
const PATHS_SET = splitNamespace([
    "pallet_identity::types::BitFlags"
]);
const BITVEC_NS_LSB = [
    "bitvec::order::Lsb0",
    "BitOrderLsb0"
];
const BITVEC_NS_MSB = [
    "bitvec::order::Msb0",
    "BitOrderMsb0"
];
const BITVEC_NS = [
    ...BITVEC_NS_LSB,
    ...BITVEC_NS_MSB
];
const WRAPPERS = [
    "BoundedBTreeMap",
    "BoundedBTreeSet",
    "BoundedVec",
    "Box",
    "BTreeMap",
    "BTreeSet",
    "Cow",
    "Option",
    "Range",
    "RangeInclusive",
    "Result",
    "WeakBoundedVec",
    "WrapperKeepOpaque",
    "WrapperOpaque"
];
const RESERVED = [
    // JS reserved words
    "entries",
    "keys",
    "new",
    "size",
    // exposed by all Codec objects
    "hash",
    "registry"
];
const PATH_RM_INDEX_1 = [
    "generic",
    "misc",
    "pallet",
    "traits",
    "types"
];
/** @internal Converts a Text[] into string[] (used as part of definitions) */ function sanitizeDocs(docs) {
    const count = docs.length;
    const result = new Array(count);
    for(let i = 0; i < count; i++)result[i] = docs[i].toString();
    return result;
}
/** @internal Split a namespace with :: into individual parts */ function splitNamespace(values) {
    const count = values.length;
    const result = new Array(count);
    for(let i = 0; i < count; i++)result[i] = values[i].split("::");
    return result;
}
/** @internal Match a namespace based on parts (alongside wildcards) */ function matchParts(first, second) {
    return first.length === second.length && first.every((a, index)=>{
        const b = second[index].toString();
        if (a === "*" || a === b) return true;
        if (a.includes("*") && a.includes("_") && b.includes("_")) {
            let suba = a.split("_");
            let subb = b.split("_");
            // match initial *'s to multiples if we have a match for the other
            if (suba[0] === "*") {
                const indexOf = subb.indexOf(suba[1]);
                if (indexOf !== -1) {
                    suba = suba.slice(1);
                    subb = subb.slice(indexOf);
                }
            }
            // check for * matches at the end, adjust accordingly
            if (suba.length === 2 && suba[1] === "*" && suba[0] === subb[0]) return true;
            return matchParts(suba, subb);
        }
        return false;
    });
}
/** @internal check if the path matches the PATHS_ALIAS (with wildcards) */ function getAliasPath({ def, path }) {
    // specific logic for weights - we override when non-complex struct
    // (as applied in Weight 1.5 where we also have `Compact<{ refTime: u64 }>)
    if ([
        "frame_support::weights::weight_v2::Weight",
        "sp_weights::weight_v2::Weight"
    ].includes(path.join("::"))) return !def.isComposite || def.asComposite.fields.length === 1 ? "WeightV1" : null;
    // TODO We need to handle ink! Balance in some way
    return path.length && PATHS_ALIAS.some((a)=>matchParts(a, path)) ? path[path.length - 1].toString() : null;
}
/** @internal Converts a type name into a JS-API compatible name */ function extractNameFlat(portable, lookupIndex, params, path, isInternal = false) {
    const count = path.length;
    // if we have no path or determined as a wrapper, we just skip it
    if (count === 0 || WRAPPERS.includes(path[count - 1].toString())) return null;
    const camels = new Array(count);
    const lowers = new Array(count);
    // initially just create arrays of the camelCase and lowercase path
    // parts - we will check these to extract the final values. While
    // we have 2 loops here, we also don't do the same operation twice
    for(let i = 0; i < count; i++){
        const c = (0, _util.stringPascalCase)(isInternal ? path[i].replace("pallet_", "") : path[i]);
        const l = c.toLowerCase();
        camels[i] = c;
        lowers[i] = l;
    }
    let name = "";
    for(let i = 0; i < count; i++){
        const l = lowers[i];
        // Remove ::{generic, misc, pallet, traits, types}::
        if (i !== 1 || !PATH_RM_INDEX_1.includes(l)) // sp_runtime::generic::digest::Digest -> sp_runtime::generic::Digest
        // sp_runtime::multiaddress::MultiAddress -> sp_runtime::MultiAddress
        {
            if (l !== lowers[i + 1]) name += camels[i];
        }
    }
    // do magic for RawOrigin lookup, e.g. pallet_collective::RawOrigin
    if (camels[1] === "RawOrigin" && count === 2 && params.length === 2 && params[1].type.isSome) {
        const instanceType = portable[params[1].type.unwrap().toNumber()];
        if (instanceType.type.path.length === 2) name = `${name}${instanceType.type.path[1].toString()}`;
    }
    return {
        lookupIndex,
        name,
        params
    };
}
/** @internal Alias for extractNameFlat with PortableType as a last parameter */ function extractName(portable, lookupIndex, { type: { params, path } }) {
    return extractNameFlat(portable, lookupIndex, params, path);
}
/** @internal Check for dupes from a specific index onwards */ function nextDupeMatches(name, startAt, names) {
    const result = [
        names[startAt]
    ];
    for(let i = startAt + 1, count = names.length; i < count; i++){
        const v = names[i];
        if (v.name === name) result.push(v);
    }
    return result;
}
/** @internal Checks to see if a type is a full duplicate (with all params matching) */ function rewriteDupes(input, rewrite) {
    const count = input.length;
    for(let i = 0; i < count; i++){
        const a = input[i];
        for(let j = i + 1; j < count; j++){
            const b = input[j];
            // if the indexes are not the same and the names match, we have a dupe
            if (a.lookupIndex !== b.lookupIndex && a.name === b.name) return false;
        }
    }
    // add all the adjusted values to the rewite map
    for(let i = 0; i < count; i++){
        const p = input[i];
        rewrite[p.lookupIndex] = p.name;
    }
    return true;
}
/** @internal Find duplicates and adjust the names based on parameters */ function removeDupeNames(lookup, portable, names) {
    const rewrite = {};
    return names.map((original, startAt)=>{
        const { lookupIndex, name, params } = original;
        if (!name) // the name is empty (this is not expected, but have a failsafe)
        return null;
        else if (rewrite[lookupIndex]) // we have already rewritten this one, we can skip it
        return original;
        // those where the name is matching starting from this index
        const allSame = nextDupeMatches(name, startAt, names);
        // we only have one, so all ok
        if (allSame.length === 1) return original;
        // are there param differences between matching names
        const anyDiff = allSame.some((o)=>params.length !== o.params.length || params.some((p, index)=>!p.name.eq(o.params[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber()));
        // everything matches, we can combine these
        if (!anyDiff) return original;
        // TODO We probably want to attach all the indexes with differences,
        // not just the first
        // find the first parameter that yields differences
        const paramIdx = params.findIndex(({ type }, index)=>allSame.every(({ params }, aIndex)=>params[index].type.isSome && (aIndex === 0 || !params[index].type.eq(type))));
        // No param found that is different
        if (paramIdx === -1) return original;
        // see if using the param type helps
        const sameCount = allSame.length;
        const adjusted = new Array(sameCount);
        // loop through all, specifically checking that index where the
        // first param yields differences
        for(let i = 0; i < sameCount; i++){
            const { lookupIndex, name, params } = allSame[i];
            const { def, path } = lookup.getSiType(params[paramIdx].type.unwrap());
            // if it is not a primitive and it doesn't have a path, we really cannot
            // do anything at this point
            if (!def.isPrimitive && !path.length) return null;
            adjusted[i] = {
                lookupIndex,
                name: def.isPrimitive ? `${name}${def.asPrimitive.toString()}` : `${name}${path[path.length - 1].toString()}`
            };
        }
        // check to see if the adjusted names have no issues
        if (rewriteDupes(adjusted, rewrite)) return original;
        // TODO This is duplicated from the section just above...
        // ... we certainly need a better solution here
        //
        // Last-ditch effort to use the full type path - ugly
        // loop through all, specifically checking that index where the
        // first param yields differences
        for(let i = 0; i < sameCount; i++){
            const { lookupIndex, name, params } = allSame[i];
            const { def, path } = lookup.getSiType(params[paramIdx].type.unwrap());
            const flat = extractNameFlat(portable, lookupIndex, params, path, true);
            if (def.isPrimitive || !flat) return null;
            adjusted[i] = {
                lookupIndex,
                name: `${name}${flat.name}`
            };
        }
        // check to see if the adjusted names have no issues
        if (rewriteDupes(adjusted, rewrite)) return original;
        return null;
    }).filter((n)=>!!n).map(({ lookupIndex, name, params })=>({
            lookupIndex,
            name: rewrite[lookupIndex] || name,
            params
        }));
}
/** @internal Detect on-chain types (AccountId/Signature) as set as the default */ function registerTypes(lookup, lookups, names, params) {
    // Register the types we extracted
    lookup.registry.register(lookups);
    // Try and extract the AccountId/Address/Signature type from UncheckedExtrinsic
    if (params.SpRuntimeUncheckedExtrinsic) {
        // Address, Call, Signature, Extra
        const [addrParam, , sigParam] = params.SpRuntimeUncheckedExtrinsic;
        const siAddress = lookup.getSiType(addrParam.type.unwrap());
        const siSignature = lookup.getSiType(sigParam.type.unwrap());
        const nsSignature = siSignature.path.join("::");
        let nsAccountId = siAddress.path.join("::");
        const isMultiAddress = nsAccountId === "sp_runtime::multiaddress::MultiAddress";
        // With multiaddress, we check the first type param again
        if (isMultiAddress) {
            // AccountId, AccountIndex
            const [idParam] = siAddress.params;
            nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join("::");
        }
        lookup.registry.register({
            // known: account::AccountId20, fp_account::AccountId20, primitive_types::H160
            AccountId: nsAccountId.endsWith("::AccountId20") || nsAccountId.endsWith("::H160") ? "AccountId20" : "AccountId32",
            Address: isMultiAddress ? "MultiAddress" : "AccountId",
            ExtrinsicSignature: [
                "sp_runtime::MultiSignature"
            ].includes(nsSignature) ? "MultiSignature" : names[sigParam.type.unwrap().toNumber()] || "MultiSignature"
        });
    }
}
/**
 * @internal Extracts aliases based on what we know the runtime config looks like in a
 * Substrate chain. Specifically we want to have access to the Call and Event params
 **/ function extractAliases(params, isContract) {
    const hasParams = Object.keys(params).some((k)=>!k.startsWith("Pallet"));
    const alias = {};
    if (params.SpRuntimeUncheckedExtrinsic) {
        // Address, Call, Signature, Extra
        const [, { type }] = params.SpRuntimeUncheckedExtrinsic;
        alias[type.unwrap().toNumber()] = "Call";
    } else if (hasParams && !isContract) l.warn("Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic");
    if (params.FrameSystemEventRecord) {
        // Event, Topic
        const [{ type }] = params.FrameSystemEventRecord;
        alias[type.unwrap().toNumber()] = "Event";
    } else if (hasParams && !isContract) l.warn("Unable to determine runtime Event type, cannot inspect frame_system::EventRecord");
    return alias;
}
/** @internal Extracts all the intreresting type information for this registry */ function extractTypeInfo(lookup, portable) {
    const nameInfo = [];
    const types = {};
    for(let i = 0, count = portable.length; i < count; i++){
        const type = portable[i];
        const lookupIndex = type.id.toNumber();
        const extracted = extractName(portable, lookupIndex, portable[i]);
        if (extracted) nameInfo.push(extracted);
        types[lookupIndex] = type;
    }
    const lookups = {};
    const names = {};
    const params = {};
    const dedup = removeDupeNames(lookup, portable, nameInfo);
    for(let i = 0, count = dedup.length; i < count; i++){
        const { lookupIndex, name, params: p } = dedup[i];
        names[lookupIndex] = name;
        lookups[name] = lookup.registry.createLookupType(lookupIndex);
        params[name] = p;
    }
    return {
        lookups,
        names,
        params,
        types
    };
}
class PortableRegistry extends (0, _typesCodec.Struct) {
    __internal__alias;
    __internal__lookups;
    __internal__names;
    __internal__params;
    __internal__typeDefs = {};
    __internal__types;
    constructor(registry, value, isContract){
        // const timeStart = performance.now()
        super(registry, {
            types: "Vec<PortableType>"
        }, value);
        const { lookups, names, params, types } = extractTypeInfo(this, this.types);
        this.__internal__alias = extractAliases(params, isContract);
        this.__internal__lookups = lookups;
        this.__internal__names = names;
        this.__internal__params = params;
        this.__internal__types = types;
    // console.log('PortableRegistry', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }
    /**
     * @description Returns all the available type names for this chain
     **/ get names() {
        return Object.values(this.__internal__names).sort();
    }
    /**
     * @description Returns all the available parameterized types for this chain
     **/ get paramTypes() {
        return this.__internal__params;
    }
    /**
     * @description The types of the registry
     */ get types() {
        return this.getT("types");
    }
    /**
     * @description Register all available types into the registry (generally for internal usage)
     */ register() {
        registerTypes(this, this.__internal__lookups, this.__internal__names, this.__internal__params);
    }
    /**
     * @description Returns the name for a specific lookup
     */ getName(lookupId) {
        return this.__internal__names[this.__internal__getLookupId(lookupId)];
    }
    /**
     * @description Finds a specific type in the registry
     */ getSiType(lookupId) {
        // NOTE catch-22 - this may already be used as part of the constructor, so
        // ensure that we have actually initialized it correctly
        const found = (this.__internal__types || this.types)[this.__internal__getLookupId(lookupId)];
        if (!found) throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
        return found.type;
    }
    /**
     * @description Lookup the type definition for the index
     */ getTypeDef(lookupId) {
        const lookupIndex = this.__internal__getLookupId(lookupId);
        if (!this.__internal__typeDefs[lookupIndex]) {
            const lookupName = this.__internal__names[lookupIndex];
            const empty = {
                info: (0, _typesCreate.TypeDefInfo).DoNotConstruct,
                lookupIndex,
                lookupName,
                type: this.registry.createLookupType(lookupIndex)
            };
            // Set named items since we will get into circular lookups along the way
            if (lookupName) this.__internal__typeDefs[lookupIndex] = empty;
            const extracted = this.__internal__extract(this.getSiType(lookupId), lookupIndex);
            // For non-named items, we only set this right at the end
            if (!lookupName) this.__internal__typeDefs[lookupIndex] = empty;
            Object.keys(extracted).forEach((k)=>{
                if (k !== "lookupName" || extracted[k]) // these are safe since we are looking through the keys as set
                this.__internal__typeDefs[lookupIndex][k] = extracted[k];
            });
            // don't set lookupName on lower-level, we want to always direct to the type
            if (extracted.info === (0, _typesCreate.TypeDefInfo).Plain) {
                this.__internal__typeDefs[lookupIndex].lookupNameRoot = this.__internal__typeDefs[lookupIndex].lookupName;
                delete this.__internal__typeDefs[lookupIndex].lookupName;
            }
        }
        return this.__internal__typeDefs[lookupIndex];
    }
    /**
     * @description For a specific field, perform adjustments to not have built-in conflicts
     */ sanitizeField(name) {
        let nameField = null;
        let nameOrig = null;
        if (name.isSome) {
            nameField = (0, _util.stringCamelCase)(name.unwrap());
            if (nameField.includes("#")) {
                nameOrig = nameField;
                nameField = nameOrig.replace(/#/g, "_");
            } else if (RESERVED.includes(nameField)) {
                nameOrig = nameField;
                nameField = `${nameField}_`;
            }
        }
        return [
            nameField,
            nameOrig
        ];
    }
    /** @internal Creates a TypeDef based on an internal lookupId */ __internal__createSiDef(lookupId) {
        const typeDef = this.getTypeDef(lookupId);
        const lookupIndex = lookupId.toNumber();
        // Setup for a lookup on complex types
        return [
            (0, _typesCreate.TypeDefInfo).DoNotConstruct,
            (0, _typesCreate.TypeDefInfo).Enum,
            (0, _typesCreate.TypeDefInfo).Struct
        ].includes(typeDef.info) && typeDef.lookupName ? {
            docs: typeDef.docs,
            info: (0, _typesCreate.TypeDefInfo).Si,
            lookupIndex,
            lookupName: this.__internal__names[lookupIndex],
            type: this.registry.createLookupType(lookupId)
        } : typeDef;
    }
    /** @internal Converts a lookupId input to the actual lookup index */ __internal__getLookupId(lookupId) {
        if ((0, _util.isString)(lookupId)) {
            if (!this.registry.isLookupType(lookupId)) throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
            return parseInt(lookupId.replace("Lookup", ""), 10);
        } else if ((0, _util.isNumber)(lookupId)) return lookupId;
        return lookupId.toNumber();
    }
    /** @internal Converts a type into a TypeDef for Codec usage */ __internal__extract(type, lookupIndex) {
        const namespace = type.path.join("::");
        let typeDef;
        const aliasType = this.__internal__alias[lookupIndex] || getAliasPath(type);
        try {
            if (aliasType) typeDef = this.__internal__extractAliasPath(lookupIndex, aliasType);
            else switch(type.def.type){
                case "Array":
                    typeDef = this.__internal__extractArray(lookupIndex, type.def.asArray);
                    break;
                case "BitSequence":
                    typeDef = this.__internal__extractBitSequence(lookupIndex, type.def.asBitSequence);
                    break;
                case "Compact":
                    typeDef = this.__internal__extractCompact(lookupIndex, type.def.asCompact);
                    break;
                case "Composite":
                    typeDef = this.__internal__extractComposite(lookupIndex, type, type.def.asComposite);
                    break;
                case "HistoricMetaCompat":
                    typeDef = this.__internal__extractHistoric(lookupIndex, type.def.asHistoricMetaCompat);
                    break;
                case "Primitive":
                    typeDef = this.__internal__extractPrimitive(lookupIndex, type);
                    break;
                case "Sequence":
                    typeDef = this.__internal__extractSequence(lookupIndex, type.def.asSequence);
                    break;
                case "Tuple":
                    typeDef = this.__internal__extractTuple(lookupIndex, type.def.asTuple);
                    break;
                case "Variant":
                    typeDef = this.__internal__extractVariant(lookupIndex, type, type.def.asVariant);
                    break;
                default:
                    (0, _util.assertUnreachable)(type.def.type);
            }
        } catch (error) {
            throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ""}: Error extracting ${(0, _util.stringify)(type)}: ${error.message}`);
        }
        return (0, _util.objectSpread)({
            docs: sanitizeDocs(type.docs),
            namespace
        }, typeDef);
    }
    /** @internal Extracts a ScaleInfo Array into TypeDef.VecFixed */ __internal__extractArray(_, { len, type }) {
        const length = len.toNumber();
        if (length > 2048) throw new Error("Only support for [Type; <length>], where length <= 2048");
        return (0, _typesCreate.withTypeString)(this.registry, {
            info: (0, _typesCreate.TypeDefInfo).VecFixed,
            length,
            sub: this.__internal__createSiDef(type)
        });
    }
    /** @internal Extracts a ScaleInfo BitSequence into TypeDef.Plain */ __internal__extractBitSequence(_, { bitOrderType, bitStoreType }) {
        // With the v3 of scale-info this swapped around, but obviously the decoder cannot determine
        // the order. With that in-mind, we apply a detection for LSb0/Msb and set accordingly
        const a = this.__internal__createSiDef(bitOrderType);
        const b = this.__internal__createSiDef(bitStoreType);
        const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || "") ? [
            a,
            b
        ] : [
            b,
            a
        ];
        if (!bitOrder.namespace || !BITVEC_NS.includes(bitOrder.namespace)) throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || "<unknown>"}`);
        else if (bitStore.info !== (0, _typesCreate.TypeDefInfo).Plain || bitStore.type !== "u8") throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
        const isLsb = BITVEC_NS_LSB.includes(bitOrder.namespace);
        isLsb;
        return {
            info: (0, _typesCreate.TypeDefInfo).Plain,
            type: "BitVec"
        };
    }
    /** @internal Extracts a ScaleInfo Compact into TypeDef.Compact */ __internal__extractCompact(_, { type }) {
        return (0, _typesCreate.withTypeString)(this.registry, {
            info: (0, _typesCreate.TypeDefInfo).Compact,
            sub: this.__internal__createSiDef(type)
        });
    }
    /** @internal Extracts a ScaleInfo Composite into TypeDef.{BTree*, Range*, Wrapper*} */ __internal__extractComposite(lookupIndex, { params, path }, { fields }) {
        if (path.length) {
            const pathFirst = path[0].toString();
            const pathLast = path[path.length - 1].toString();
            if (path.length === 1 && pathFirst === "BTreeMap") {
                if (params.length !== 2) throw new Error(`BTreeMap requires 2 parameters, found ${params.length}`);
                return (0, _typesCreate.withTypeString)(this.registry, {
                    info: (0, _typesCreate.TypeDefInfo).BTreeMap,
                    sub: params.map(({ type })=>this.__internal__createSiDef(type.unwrap()))
                });
            } else if (path.length === 1 && pathFirst === "BTreeSet") {
                if (params.length !== 1) throw new Error(`BTreeSet requires 1 parameter, found ${params.length}`);
                return (0, _typesCreate.withTypeString)(this.registry, {
                    info: (0, _typesCreate.TypeDefInfo).BTreeSet,
                    sub: this.__internal__createSiDef(params[0].type.unwrap())
                });
            } else if ([
                "Range",
                "RangeInclusive"
            ].includes(pathFirst)) {
                if (params.length !== 1) throw new Error(`Range requires 1 parameter, found ${params.length}`);
                return (0, _typesCreate.withTypeString)(this.registry, {
                    info: pathFirst === "Range" ? (0, _typesCreate.TypeDefInfo).Range : (0, _typesCreate.TypeDefInfo).RangeInclusive,
                    sub: this.__internal__createSiDef(params[0].type.unwrap()),
                    type: pathFirst
                });
            } else if ([
                "WrapperKeepOpaque",
                "WrapperOpaque"
            ].includes(pathLast)) {
                if (params.length !== 1) throw new Error(`WrapperOpaque requires 1 parameter, found ${params.length}`);
                return (0, _typesCreate.withTypeString)(this.registry, {
                    info: pathLast === "WrapperKeepOpaque" ? (0, _typesCreate.TypeDefInfo).WrapperKeepOpaque : (0, _typesCreate.TypeDefInfo).WrapperOpaque,
                    sub: this.__internal__createSiDef(params[0].type.unwrap()),
                    type: pathLast
                });
            }
        }
        return PATHS_SET.some((p)=>matchParts(p, path)) ? this.__internal__extractCompositeSet(lookupIndex, params, fields) : this.__internal__extractFields(lookupIndex, fields);
    }
    /** @internal Extracts a ScaleInfo CompositeSet into TypeDef.Set */ __internal__extractCompositeSet(_, params, fields) {
        if (params.length !== 1 || fields.length !== 1) throw new Error("Set handling expects param/field as single entries");
        return (0, _typesCreate.withTypeString)(this.registry, {
            info: (0, _typesCreate.TypeDefInfo).Set,
            length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
            sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({ index, name })=>({
                    // This will be an issue > 2^53 - 1 ... don't have those (yet)
                    index: index.toNumber(),
                    info: (0, _typesCreate.TypeDefInfo).Plain,
                    name: name.toString(),
                    type: "Null"
                }))
        });
    }
    /** @internal Extracts ScaleInfo enum/struct fields into TypeDef.{Struct, Tuple} */ __internal__extractFields(lookupIndex, fields) {
        let isStruct = true;
        let isTuple = true;
        const count = fields.length;
        for(let f = 0; f < count; f++){
            const { name } = fields[f];
            isStruct = isStruct && name.isSome;
            isTuple = isTuple && name.isNone;
        }
        if (!isTuple && !isStruct) throw new Error("Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)");
        if (count === 0) return {
            info: (0, _typesCreate.TypeDefInfo).Null,
            type: "Null"
        };
        else if (isTuple && count === 1) {
            const typeDef = this.__internal__createSiDef(fields[0].type);
            return (0, _util.objectSpread)({}, typeDef, lookupIndex === -1 ? null : {
                lookupIndex,
                lookupName: this.__internal__names[lookupIndex],
                lookupNameRoot: typeDef.lookupName
            }, fields[0].typeName.isSome ? {
                typeName: (0, _typesCodec.sanitize)(fields[0].typeName.unwrap())
            } : null);
        }
        const [sub, alias] = this.__internal__extractFieldsAlias(fields);
        return (0, _typesCreate.withTypeString)(this.registry, (0, _util.objectSpread)({
            info: isTuple // Tuple check first
             ? (0, _typesCreate.TypeDefInfo).Tuple : (0, _typesCreate.TypeDefInfo).Struct,
            sub
        }, alias.size ? {
            alias
        } : null, lookupIndex === -1 ? null : {
            lookupIndex,
            lookupName: this.__internal__names[lookupIndex]
        }));
    }
    /** @internal Apply field aliassed (with no JS conflicts) */ __internal__extractFieldsAlias(fields) {
        const alias = new Map();
        const count = fields.length;
        const sub = new Array(count);
        for(let i = 0; i < count; i++){
            const { docs, name, type, typeName } = fields[i];
            const typeDef = this.__internal__createSiDef(type);
            if (name.isNone) sub[i] = typeDef;
            else {
                const [nameField, nameOrig] = this.sanitizeField(name);
                if (nameField && nameOrig) alias.set(nameField, nameOrig);
                sub[i] = (0, _util.objectSpread)({
                    docs: sanitizeDocs(docs),
                    name: nameField
                }, typeDef, typeName.isSome ? {
                    typeName: (0, _typesCodec.sanitize)(typeName.unwrap())
                } : null);
            }
        }
        return [
            sub,
            alias
        ];
    }
    /** @internal Extracts an internal Historic (pre V14) type  */ __internal__extractHistoric(_, type) {
        return (0, _util.objectSpread)({
            displayName: type.toString(),
            isFromSi: true
        }, (0, _typesCreate.getTypeDef)(type));
    }
    /** @internal Extracts a ScaleInfo Primitive into TypeDef.Plain */ __internal__extractPrimitive(_, type) {
        const typeStr = type.def.asPrimitive.type.toString();
        return {
            info: (0, _typesCreate.TypeDefInfo).Plain,
            type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
        };
    }
    /** @internal Applies an alias path onto the TypeDef */ __internal__extractAliasPath(_, type) {
        return {
            info: (0, _typesCreate.TypeDefInfo).Plain,
            type
        };
    }
    /** @internal Extracts a ScaleInfo Sequence into TypeDef.Vec (with Bytes shortcut) */ __internal__extractSequence(lookupIndex, { type }) {
        const sub = this.__internal__createSiDef(type);
        if (sub.type === "u8") return {
            info: (0, _typesCreate.TypeDefInfo).Plain,
            type: "Bytes"
        };
        return (0, _typesCreate.withTypeString)(this.registry, {
            info: (0, _typesCreate.TypeDefInfo).Vec,
            lookupIndex,
            lookupName: this.__internal__names[lookupIndex],
            sub
        });
    }
    /** @internal Extracts a ScaleInfo Tuple into TypeDef.Tuple */ __internal__extractTuple(lookupIndex, ids) {
        if (ids.length === 0) return {
            info: (0, _typesCreate.TypeDefInfo).Null,
            type: "Null"
        };
        else if (ids.length === 1) return this.getTypeDef(ids[0]);
        const sub = ids.map((t)=>this.__internal__createSiDef(t));
        return (0, _typesCreate.withTypeString)(this.registry, {
            info: (0, _typesCreate.TypeDefInfo).Tuple,
            lookupIndex,
            lookupName: this.__internal__names[lookupIndex],
            sub
        });
    }
    /** @internal Extracts a ScaleInfo Variant into TypeDef.{Option, Result, Enum} */ __internal__extractVariant(lookupIndex, { params, path }, { variants }) {
        if (path.length) {
            const specialVariant = path[0].toString();
            if (specialVariant === "Option") {
                if (params.length !== 1) throw new Error(`Option requires 1 parameter, found ${params.length}`);
                // NOTE This is opt-in (unhandled), not by default
                // if (sub.type === 'bool') {
                //   return withTypeString(this.registry, {
                //     info: TypeDefInfo.Plain,
                //     type: 'OptionBool'
                //   });
                // }
                return (0, _typesCreate.withTypeString)(this.registry, {
                    info: (0, _typesCreate.TypeDefInfo).Option,
                    sub: this.__internal__createSiDef(params[0].type.unwrap())
                });
            } else if (specialVariant === "Result") {
                if (params.length !== 2) throw new Error(`Result requires 2 parameters, found ${params.length}`);
                return (0, _typesCreate.withTypeString)(this.registry, {
                    info: (0, _typesCreate.TypeDefInfo).Result,
                    sub: params.map(({ type }, index)=>(0, _util.objectSpread)({
                            name: [
                                "Ok",
                                "Error"
                            ][index]
                        }, this.__internal__createSiDef(type.unwrap())))
                });
            }
        }
        if (variants.length === 0) return {
            info: (0, _typesCreate.TypeDefInfo).Null,
            type: "Null"
        };
        return this.__internal__extractVariantEnum(lookupIndex, variants);
    }
    /** @internal Extracts a ScaleInfo Variant into TypeDef.Enum */ __internal__extractVariantEnum(lookupIndex, variants) {
        const sub = [];
        // we may get entries out of order, arrange them first before creating with gaps filled
        // NOTE: Since we mutate, use a copy of the array as an input
        variants.slice().sort((a, b)=>a.index.cmp(b.index)).forEach(({ fields, index: bnIndex, name })=>{
            const index = bnIndex.toNumber();
            while(sub.length !== index)sub.push({
                index: sub.length,
                info: (0, _typesCreate.TypeDefInfo).Null,
                name: `__Unused${sub.length}`,
                type: "Null"
            });
            sub.push((0, _util.objectSpread)(this.__internal__extractFields(-1, fields), {
                index,
                name: name.toString()
            }));
        });
        return (0, _typesCreate.withTypeString)(this.registry, {
            info: (0, _typesCreate.TypeDefInfo).Enum,
            lookupIndex,
            lookupName: this.__internal__names[lookupIndex],
            sub
        });
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/types-create":"cr6lO","@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bIn7A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _storageJs = require("./storage.js");
parcelHelpers.exportAll(_storageJs, exports);

},{"./storage.js":"aumjM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aumjM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "unwrapStorageSi", ()=>unwrapStorageSi);
/** @internal */ parcelHelpers.export(exports, "unwrapStorageType", ()=>unwrapStorageType);
var _indexJs = require("../metadata/util/index.js");
function unwrapStorageSi(type) {
    return type.isPlain ? type.asPlain : type.asMap.value;
}
function unwrapStorageType(registry, type, isOptional) {
    const outputType = (0, _indexJs.getSiName)(registry.lookup, unwrapStorageSi(type));
    return isOptional ? `Option<${outputType}>` : outputType;
}

},{"../metadata/util/index.js":"7JXy8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7JXy8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flattenUniq", ()=>(0, _flattenUniqJs.flattenUniq));
parcelHelpers.export(exports, "getSiName", ()=>(0, _getSiNameJs.getSiName));
parcelHelpers.export(exports, "getUniqTypes", ()=>(0, _getUniqTypesJs.getUniqTypes));
parcelHelpers.export(exports, "toCallsOnly", ()=>(0, _toCallsOnlyJs.toCallsOnly));
parcelHelpers.export(exports, "validateTypes", ()=>(0, _validateTypesJs.validateTypes));
var _flattenUniqJs = require("./flattenUniq.js");
var _getSiNameJs = require("./getSiName.js");
var _getUniqTypesJs = require("./getUniqTypes.js");
var _toCallsOnlyJs = require("./toCallsOnly.js");
var _validateTypesJs = require("./validateTypes.js");

},{"./flattenUniq.js":false,"./getSiName.js":"8BIb5","./getUniqTypes.js":"fVAqS","./toCallsOnly.js":"h2moe","./validateTypes.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jAVp2":[function(require,module,exports) {
/** @internal */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flattenUniq", ()=>flattenUniq);
function flattenUniq(list, result = []) {
    for(let i = 0, count = list.length; i < count; i++){
        const entry = list[i];
        if (Array.isArray(entry)) flattenUniq(entry, result);
        else result.push(entry);
    }
    return [
        ...new Set(result)
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8BIb5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSiName", ()=>getSiName);
function getSiName(lookup, type) {
    const typeDef = lookup.getTypeDef(type);
    return typeDef.lookupName || typeDef.type;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fVAqS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "getUniqTypes", ()=>getUniqTypes);
var _flattenUniqJs = require("./flattenUniq.js");
var _validateTypesJs = require("./validateTypes.js");
/** @internal */ function extractTypes(lookup, types) {
    return types.map(({ type })=>lookup.getTypeDef(type).type);
}
/** @internal */ function extractFieldTypes(lookup, type) {
    return lookup.getSiType(type).def.asVariant.variants.map(({ fields })=>extractTypes(lookup, fields));
}
/** @internal */ function getPalletNames({ lookup, pallets }) {
    return pallets.reduce((all, { calls, constants, events, storage })=>{
        all.push([
            extractTypes(lookup, constants)
        ]);
        if (calls.isSome) all.push(extractFieldTypes(lookup, calls.unwrap().type));
        if (events.isSome) all.push(extractFieldTypes(lookup, events.unwrap().type));
        if (storage.isSome) all.push(storage.unwrap().items.map(({ type })=>{
            if (type.isPlain) return [
                lookup.getTypeDef(type.asPlain).type
            ];
            const { hashers, key, value } = type.asMap;
            return hashers.length === 1 ? [
                lookup.getTypeDef(value).type,
                lookup.getTypeDef(key).type
            ] : [
                lookup.getTypeDef(value).type,
                ...lookup.getSiType(key).def.asTuple.map((t)=>lookup.getTypeDef(t).type)
            ];
        }));
        return all;
    }, []);
}
function getUniqTypes(registry, meta, throwError) {
    return (0, _validateTypesJs.validateTypes)(registry, throwError, (0, _flattenUniqJs.flattenUniq)(getPalletNames(meta)));
}

},{"./flattenUniq.js":"jAVp2","./validateTypes.js":"89p8c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"89p8c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "validateTypes", ()=>validateTypes);
var _util = require("@polkadot/util");
var _extractTypesJs = require("./extractTypes.js");
var _flattenUniqJs = require("./flattenUniq.js");
const l = (0, _util.logger)("metadata");
function validateTypes(registry, throwError, types) {
    const missing = (0, _flattenUniqJs.flattenUniq)((0, _extractTypesJs.extractTypes)(types)).filter((type)=>!registry.hasType(type) && !registry.isLookupType(type)).sort();
    if (missing.length !== 0) {
        const message = `Unknown types found, no types for ${missing.join(", ")}`;
        if (throwError) throw new Error(message);
        else l.warn(message);
    }
    return types;
}

},{"@polkadot/util":"3HnHw","./extractTypes.js":"cI9p5","./flattenUniq.js":"jAVp2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cI9p5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "extractTypes", ()=>extractTypes);
var _typesCreate = require("@polkadot/types-create");
function extractSubSingle(_, { sub }) {
    const { lookupName, type } = sub;
    return extractTypes([
        lookupName || type
    ]);
}
function extractSubArray(_, { sub }) {
    return extractTypes(sub.map(({ lookupName, type })=>lookupName || type));
}
function unhandled(type, { info }) {
    throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${(0, _typesCreate.TypeDefInfo)[info]})`);
}
const mapping = {
    [(0, _typesCreate.TypeDefInfo).BTreeMap]: extractSubArray,
    [(0, _typesCreate.TypeDefInfo).BTreeSet]: extractSubSingle,
    [(0, _typesCreate.TypeDefInfo).Compact]: extractSubSingle,
    [(0, _typesCreate.TypeDefInfo).DoNotConstruct]: unhandled,
    [(0, _typesCreate.TypeDefInfo).Enum]: extractSubArray,
    [(0, _typesCreate.TypeDefInfo).HashMap]: extractSubArray,
    [(0, _typesCreate.TypeDefInfo).Int]: unhandled,
    [(0, _typesCreate.TypeDefInfo).Linkage]: extractSubSingle,
    [(0, _typesCreate.TypeDefInfo).Null]: unhandled,
    [(0, _typesCreate.TypeDefInfo).Option]: extractSubSingle,
    [(0, _typesCreate.TypeDefInfo).Plain]: (_, typeDef)=>typeDef.lookupName || typeDef.type,
    [(0, _typesCreate.TypeDefInfo).Range]: extractSubSingle,
    [(0, _typesCreate.TypeDefInfo).RangeInclusive]: extractSubSingle,
    [(0, _typesCreate.TypeDefInfo).Result]: extractSubArray,
    [(0, _typesCreate.TypeDefInfo).Set]: extractSubArray,
    [(0, _typesCreate.TypeDefInfo).Si]: unhandled,
    [(0, _typesCreate.TypeDefInfo).Struct]: extractSubArray,
    [(0, _typesCreate.TypeDefInfo).Tuple]: extractSubArray,
    [(0, _typesCreate.TypeDefInfo).UInt]: unhandled,
    [(0, _typesCreate.TypeDefInfo).Vec]: extractSubSingle,
    [(0, _typesCreate.TypeDefInfo).VecFixed]: extractSubSingle,
    [(0, _typesCreate.TypeDefInfo).WrapperKeepOpaque]: extractSubSingle,
    [(0, _typesCreate.TypeDefInfo).WrapperOpaque]: extractSubSingle
};
function extractTypes(types) {
    const count = types.length;
    const result = new Array(count);
    for(let i = 0; i < count; i++){
        const type = types[i];
        const typeDef = (0, _typesCreate.getTypeDef)(type);
        result[i] = mapping[typeDef.info](type, typeDef);
    }
    return result;
}

},{"@polkadot/types-create":"cr6lO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2moe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "toCallsOnly", ()=>toCallsOnly);
var _util = require("@polkadot/util");
function trimDocs(docs) {
    const strings = docs.map((d)=>d.toString().trim());
    const firstEmpty = strings.findIndex((d)=>!d.length);
    return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
}
function toCallsOnly(registry, { extrinsic, lookup, pallets }) {
    return registry.createTypeUnsafe("MetadataLatest", [
        {
            extrinsic,
            lookup: {
                types: lookup.types.map(({ id, type })=>registry.createTypeUnsafe("PortableType", [
                        {
                            id,
                            type: (0, _util.objectSpread)({}, type, {
                                docs: trimDocs(type.docs)
                            })
                        }
                    ]))
            },
            pallets: pallets.map(({ calls, index, name })=>({
                    calls: registry.createTypeUnsafe("Option<PalletCallMetadataLatest>", [
                        calls.unwrapOr(null)
                    ]),
                    index,
                    name
                }))
        }
    ]).toJSON();
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQbAh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BTreeMap", ()=>(0, _typesCodec.BTreeMap));
parcelHelpers.export(exports, "BTreeSet", ()=>(0, _typesCodec.BTreeSet));
parcelHelpers.export(exports, "CodecMap", ()=>(0, _typesCodec.CodecMap));
parcelHelpers.export(exports, "CodecSet", ()=>(0, _typesCodec.CodecSet));
parcelHelpers.export(exports, "Compact", ()=>(0, _typesCodec.Compact));
parcelHelpers.export(exports, "DoNotConstruct", ()=>(0, _typesCodec.DoNotConstruct));
parcelHelpers.export(exports, "Enum", ()=>(0, _typesCodec.Enum));
parcelHelpers.export(exports, "HashMap", ()=>(0, _typesCodec.HashMap));
parcelHelpers.export(exports, "Int", ()=>(0, _typesCodec.Int));
parcelHelpers.export(exports, "Json", ()=>(0, _typesCodec.Json));
parcelHelpers.export(exports, "Linkage", ()=>(0, _typesCodec.Linkage));
parcelHelpers.export(exports, "Map", ()=>(0, _typesCodec.Map));
parcelHelpers.export(exports, "Option", ()=>(0, _typesCodec.Option));
parcelHelpers.export(exports, "Range", ()=>(0, _typesCodec.Range));
parcelHelpers.export(exports, "RangeInclusive", ()=>(0, _typesCodec.RangeInclusive));
parcelHelpers.export(exports, "Raw", ()=>(0, _typesCodec.Raw));
parcelHelpers.export(exports, "Result", ()=>(0, _typesCodec.Result));
parcelHelpers.export(exports, "Set", ()=>(0, _typesCodec.Set));
parcelHelpers.export(exports, "Struct", ()=>(0, _typesCodec.Struct));
parcelHelpers.export(exports, "Tuple", ()=>(0, _typesCodec.Tuple));
parcelHelpers.export(exports, "U8aFixed", ()=>(0, _typesCodec.U8aFixed));
parcelHelpers.export(exports, "UInt", ()=>(0, _typesCodec.UInt));
parcelHelpers.export(exports, "Vec", ()=>(0, _typesCodec.Vec));
parcelHelpers.export(exports, "VecFixed", ()=>(0, _typesCodec.VecFixed));
parcelHelpers.export(exports, "WrapperKeepOpaque", ()=>(0, _typesCodec.WrapperKeepOpaque));
parcelHelpers.export(exports, "WrapperOpaque", ()=>(0, _typesCodec.WrapperOpaque));
var _typesCodec = require("@polkadot/types-codec");

},{"@polkadot/types-codec":"gvW09","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7qdxB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _exports = require("@polkadot/types-create/exports");
parcelHelpers.exportAll(_exports, exports);
var _createClassJs = require("./createClass.js");
parcelHelpers.exportAll(_createClassJs, exports);
var _createTypeJs = require("./createType.js");
parcelHelpers.exportAll(_createTypeJs, exports);
var _lazyJs = require("./lazy.js");
parcelHelpers.exportAll(_lazyJs, exports);
var _registryJs = require("./registry.js");
parcelHelpers.exportAll(_registryJs, exports);

},{"@polkadot/types-create/exports":false,"./createClass.js":false,"./createType.js":false,"./lazy.js":false,"./registry.js":"f3AxF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3F1qc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lazyVariants", ()=>lazyVariants);
var _util = require("@polkadot/util");
function lazyVariants(lookup, { type }, getName, creator) {
    const result = {};
    const variants = lookup.getSiType(type).def.asVariant.variants;
    for(let i = 0, count = variants.length; i < count; i++)(0, _util.lazyMethod)(result, variants[i], creator, getName, i);
    return result;
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f3AxF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypeRegistry", ()=>TypeRegistry);
var _typesCodec = require("@polkadot/types-codec");
var _typesCreate = require("@polkadot/types-create");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
var _indexJs = require("../extrinsic/signedExtensions/index.js");
var _eventJs = require("../generic/Event.js");
var _indexTypesJs = require("../index.types.js");
var _definitionsJs = require("../interfaces/definitions.js");
var _indexJs1 = require("../metadata/decorate/extrinsics/index.js");
var _indexJs2 = require("../metadata/decorate/index.js");
var _metadataJs = require("../metadata/Metadata.js");
var _indexJs3 = require("../metadata/PortableRegistry/index.js");
var _lazyJs = require("./lazy.js");
const DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
const l = (0, _util.logger)("registry");
function sortDecimalStrings(a, b) {
    return parseInt(a, 10) - parseInt(b, 10);
}
function valueToString(v) {
    return v.toString();
}
function getFieldArgs(lookup, fields) {
    const count = fields.length;
    const args = new Array(count);
    for(let i = 0; i < count; i++)args[i] = lookup.getTypeDef(fields[i].type).type;
    return args;
}
function clearRecord(record) {
    const keys = Object.keys(record);
    for(let i = 0, count = keys.length; i < count; i++)delete record[keys[i]];
}
function getVariantStringIdx({ index }) {
    return index.toString();
}
function injectErrors(_, { lookup, pallets }, version, result) {
    clearRecord(result);
    for(let i = 0, count = pallets.length; i < count; i++){
        const { errors, index, name } = pallets[i];
        if (errors.isSome) {
            const sectionName = (0, _util.stringCamelCase)(name);
            (0, _util.lazyMethod)(result, version >= 12 ? index.toNumber() : i, ()=>(0, _lazyJs.lazyVariants)(lookup, errors.unwrap(), getVariantStringIdx, ({ docs, fields, index, name })=>({
                        args: getFieldArgs(lookup, fields),
                        docs: docs.map(valueToString),
                        fields,
                        index: index.toNumber(),
                        method: name.toString(),
                        name: name.toString(),
                        section: sectionName
                    })));
        }
    }
}
function injectEvents(registry, { lookup, pallets }, version, result) {
    const filtered = pallets.filter((0, _indexJs2.filterEventsSome));
    clearRecord(result);
    for(let i = 0, count = filtered.length; i < count; i++){
        const { events, index, name } = filtered[i];
        (0, _util.lazyMethod)(result, version >= 12 ? index.toNumber() : i, ()=>(0, _lazyJs.lazyVariants)(lookup, events.unwrap(), getVariantStringIdx, (variant)=>{
                const meta = registry.createType("EventMetadataLatest", (0, _util.objectSpread)({}, variant, {
                    args: getFieldArgs(lookup, variant.fields)
                }));
                return class extends (0, _eventJs.GenericEventData) {
                    constructor(registry, value){
                        super(registry, value, meta, (0, _util.stringCamelCase)(name), variant.name.toString());
                    }
                };
            }));
    }
}
function injectExtrinsics(registry, { lookup, pallets }, version, result, mapping) {
    const filtered = pallets.filter((0, _indexJs2.filterCallsSome));
    clearRecord(result);
    clearRecord(mapping);
    for(let i = 0, count = filtered.length; i < count; i++){
        const { calls, index, name } = filtered[i];
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        const sectionName = (0, _util.stringCamelCase)(name);
        const allCalls = calls.unwrap();
        (0, _util.lazyMethod)(result, sectionIndex, ()=>(0, _lazyJs.lazyVariants)(lookup, allCalls, getVariantStringIdx, (variant)=>(0, _indexJs1.createCallFunction)(registry, lookup, variant, sectionName, sectionIndex)));
        const { path } = registry.lookup.getSiType(allCalls.type);
        // frame_system::pallet::Call / pallet_balances::pallet::Call / polkadot_runtime_parachains::configuration::pallet::Call /
        const palletIdx = path.findIndex((v)=>v.eq("pallet"));
        if (palletIdx !== -1) {
            const name = (0, _util.stringCamelCase)(path.slice(0, palletIdx).map((p, i)=>i === 0 ? p.replace(/^(frame|pallet)_/, "") : p).join(" "));
            if (!mapping[name]) mapping[name] = [
                sectionName
            ];
            else mapping[name].push(sectionName);
        }
    }
}
function extractProperties(registry, metadata) {
    const original = registry.getChainProperties();
    const constants = (0, _indexJs2.decorateConstants)(registry, metadata.asLatest, metadata.version);
    const ss58Format = constants["system"] && (constants["system"]["sS58Prefix"] || constants["system"]["ss58Prefix"]);
    if (!ss58Format) return original;
    const { isEthereum, tokenDecimals, tokenSymbol } = original || {};
    return registry.createTypeUnsafe("ChainProperties", [
        {
            isEthereum,
            ss58Format,
            tokenDecimals,
            tokenSymbol
        }
    ]);
}
class TypeRegistry {
    __internal__chainProperties;
    __internal__classes = new Map();
    __internal__definitions = new Map();
    __internal__firstCallIndex = null;
    __internal__hasher = (0, _utilCrypto.blake2AsU8a);
    __internal__knownTypes = {};
    __internal__lookup;
    __internal__metadata;
    __internal__metadataVersion = 0;
    __internal__signedExtensions = (0, _indexJs.fallbackExtensions);
    __internal__unknownTypes = new Map();
    __internal__userExtensions;
    __internal__knownDefaults;
    __internal__knownDefaultsEntries;
    __internal__knownDefinitions;
    __internal__metadataCalls = {};
    __internal__metadataErrors = {};
    __internal__metadataEvents = {};
    __internal__moduleMap = {};
    createdAtHash;
    constructor(createdAtHash){
        this.__internal__knownDefaults = (0, _util.objectSpread)({
            Json: (0, _typesCodec.Json),
            Metadata: (0, _metadataJs.Metadata),
            PortableRegistry: (0, _indexJs3.PortableRegistry),
            Raw: (0, _typesCodec.Raw)
        }, _indexTypesJs);
        this.__internal__knownDefaultsEntries = Object.entries(this.__internal__knownDefaults);
        this.__internal__knownDefinitions = _definitionsJs;
        const allKnown = Object.values(this.__internal__knownDefinitions);
        for(let i = 0, count = allKnown.length; i < count; i++)this.register(allKnown[i].types);
        if (createdAtHash) this.createdAtHash = this.createType("BlockHash", createdAtHash);
    }
    get chainDecimals() {
        if (this.__internal__chainProperties?.tokenDecimals.isSome) {
            const allDecimals = this.__internal__chainProperties.tokenDecimals.unwrap();
            if (allDecimals.length) return allDecimals.map((b)=>b.toNumber());
        }
        return [
            12
        ];
    }
    get chainIsEthereum() {
        return this.__internal__chainProperties?.isEthereum.isTrue || false;
    }
    get chainSS58() {
        return this.__internal__chainProperties?.ss58Format.isSome ? this.__internal__chainProperties.ss58Format.unwrap().toNumber() : undefined;
    }
    get chainTokens() {
        if (this.__internal__chainProperties?.tokenSymbol.isSome) {
            const allTokens = this.__internal__chainProperties.tokenSymbol.unwrap();
            if (allTokens.length) return allTokens.map(valueToString);
        }
        return [
            (0, _util.formatBalance).getDefaults().unit
        ];
    }
    get firstCallIndex() {
        return this.__internal__firstCallIndex || DEFAULT_FIRST_CALL_IDX;
    }
    /**
     * @description Returns true if the type is in a Compat format
     */ isLookupType(value) {
        return /Lookup\d+$/.test(value);
    }
    /**
     * @description Creates a lookup string from the supplied id
     */ createLookupType(lookupId) {
        return `Lookup${typeof lookupId === "number" ? lookupId : lookupId.toNumber()}`;
    }
    get knownTypes() {
        return this.__internal__knownTypes;
    }
    get lookup() {
        return (0, _util.assertReturn)(this.__internal__lookup, "PortableRegistry has not been set on this registry");
    }
    get metadata() {
        return (0, _util.assertReturn)(this.__internal__metadata, "Metadata has not been set on this registry");
    }
    get unknownTypes() {
        return [
            ...this.__internal__unknownTypes.keys()
        ];
    }
    get signedExtensions() {
        return this.__internal__signedExtensions;
    }
    clearCache() {
        this.__internal__classes = new Map();
    }
    /**
     * @describe Creates an instance of the class
     */ createClass(type) {
        return (0, _typesCreate.createClassUnsafe)(this, type);
    }
    /**
     * @describe Creates an instance of the class
     */ createClassUnsafe(type) {
        return (0, _typesCreate.createClassUnsafe)(this, type);
    }
    /**
     * @description Creates an instance of a type as registered
     */ createType(type, ...params) {
        return (0, _typesCreate.createTypeUnsafe)(this, type, params);
    }
    /**
     * @description Creates an instance of a type as registered
     */ createTypeUnsafe(type, params, options) {
        return (0, _typesCreate.createTypeUnsafe)(this, type, params, options);
    }
    // find a specific call
    findMetaCall(callIndex) {
        const [section, method] = [
            callIndex[0],
            callIndex[1]
        ];
        return (0, _util.assertReturn)(this.__internal__metadataCalls[`${section}`] && this.__internal__metadataCalls[`${section}`][`${method}`], ()=>`findMetaCall: Unable to find Call with index [${section}, ${method}]/[${callIndex.toString()}]`);
    }
    // finds an error
    findMetaError(errorIndex) {
        const [section, method] = (0, _util.isU8a)(errorIndex) ? [
            errorIndex[0],
            errorIndex[1]
        ] : [
            errorIndex.index.toNumber(),
            (0, _util.isU8a)(errorIndex.error) ? errorIndex.error[0] : errorIndex.error.toNumber()
        ];
        return (0, _util.assertReturn)(this.__internal__metadataErrors[`${section}`] && this.__internal__metadataErrors[`${section}`][`${method}`], ()=>`findMetaError: Unable to find Error with index [${section}, ${method}]/[${errorIndex.toString()}]`);
    }
    findMetaEvent(eventIndex) {
        const [section, method] = [
            eventIndex[0],
            eventIndex[1]
        ];
        return (0, _util.assertReturn)(this.__internal__metadataEvents[`${section}`] && this.__internal__metadataEvents[`${section}`][`${method}`], ()=>`findMetaEvent: Unable to find Event with index [${section}, ${method}]/[${eventIndex.toString()}]`);
    }
    get(name, withUnknown, knownTypeDef) {
        return this.getUnsafe(name, withUnknown, knownTypeDef);
    }
    getUnsafe(name, withUnknown, knownTypeDef) {
        let Type = this.__internal__classes.get(name) || this.__internal__knownDefaults[name];
        // we have not already created the type, attempt it
        if (!Type) {
            const definition = this.__internal__definitions.get(name);
            let BaseType;
            // we have a definition, so create the class now (lazily)
            if (definition) BaseType = (0, _typesCreate.createClassUnsafe)(this, definition);
            else if (knownTypeDef) BaseType = (0, _typesCreate.constructTypeClass)(this, knownTypeDef);
            else if (withUnknown) {
                l.warn(`Unable to resolve type ${name}, it will fail on construction`);
                this.__internal__unknownTypes.set(name, true);
                BaseType = (0, _typesCodec.DoNotConstruct).with(name);
            }
            if (BaseType) {
                // NOTE If we didn't extend here, we would have strange artifacts. An example is
                // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
                // Additionally, we now pass through the registry, which is a link to ourselves
                Type = class extends BaseType {
                };
                this.__internal__classes.set(name, Type);
                // In the case of lookups, we also want to store the actual class against
                // the lookup name, instad of having to traverse again
                if (knownTypeDef && (0, _util.isNumber)(knownTypeDef.lookupIndex)) this.__internal__classes.set(this.createLookupType(knownTypeDef.lookupIndex), Type);
            }
        }
        return Type;
    }
    getChainProperties() {
        return this.__internal__chainProperties;
    }
    getClassName(Type) {
        // we cannot rely on export order (anymore, since babel/core 7.15.8), so in the case of
        // items such as u32 & U32, we get the lowercase versions here... not quite as optimal
        // (previously this used to be a simple find & return)
        const names = [];
        for (const [name, Clazz] of this.__internal__knownDefaultsEntries)if (Type === Clazz) names.push(name);
        for (const [name, Clazz] of this.__internal__classes.entries())if (Type === Clazz) names.push(name);
        return names.length ? names.sort().reverse()[0] : undefined;
    }
    getDefinition(typeName) {
        return this.__internal__definitions.get(typeName);
    }
    getModuleInstances(specName, moduleName) {
        return this.__internal__knownTypes?.typesBundle?.spec?.[specName.toString()]?.instances?.[moduleName] || this.__internal__moduleMap[moduleName];
    }
    getOrThrow(name) {
        const Clazz = this.get(name);
        if (!Clazz) throw new Error(`type ${name} not found`);
        return Clazz;
    }
    getOrUnknown(name) {
        return this.get(name, true);
    }
    getSignedExtensionExtra() {
        return (0, _indexJs.expandExtensionTypes)(this.__internal__signedExtensions, "payload", this.__internal__userExtensions);
    }
    getSignedExtensionTypes() {
        return (0, _indexJs.expandExtensionTypes)(this.__internal__signedExtensions, "extrinsic", this.__internal__userExtensions);
    }
    hasClass(name) {
        return this.__internal__classes.has(name) || !!this.__internal__knownDefaults[name];
    }
    hasDef(name) {
        return this.__internal__definitions.has(name);
    }
    hasType(name) {
        return !this.__internal__unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
    }
    hash(data) {
        return this.createType("CodecHash", this.__internal__hasher(data));
    }
    // eslint-disable-next-line no-dupe-class-members
    register(arg1, arg2) {
        // NOTE Constructors appear as functions here
        if ((0, _util.isFunction)(arg1)) this.__internal__classes.set(arg1.name, arg1);
        else if ((0, _util.isString)(arg1)) {
            if (!(0, _util.isFunction)(arg2)) throw new Error(`Expected class definition passed to '${arg1}' registration`);
            else if (arg1 === arg2.toString()) throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
            this.__internal__classes.set(arg1, arg2);
        } else this.__internal__registerObject(arg1);
    }
    __internal__registerObject = (obj)=>{
        const entries = Object.entries(obj);
        for(let e = 0, count = entries.length; e < count; e++){
            const [name, type] = entries[e];
            if ((0, _util.isFunction)(type)) // This _looks_ a bit funny, but `typeof Clazz === 'function'
            this.__internal__classes.set(name, type);
            else {
                const def = (0, _util.isString)(type) ? type : (0, _util.stringify)(type);
                if (name === def) throw new Error(`Unable to register circular ${name} === ${def}`);
                // we already have this type, remove the classes registered for it
                if (this.__internal__classes.has(name)) this.__internal__classes.delete(name);
                this.__internal__definitions.set(name, def);
            }
        }
    };
    // sets the chain properties
    setChainProperties(properties) {
        if (properties) this.__internal__chainProperties = properties;
    }
    setHasher(hasher) {
        this.__internal__hasher = hasher || (0, _utilCrypto.blake2AsU8a);
    }
    setKnownTypes(knownTypes) {
        this.__internal__knownTypes = knownTypes;
    }
    setLookup(lookup) {
        this.__internal__lookup = lookup;
        // register all applicable types found
        lookup.register();
    }
    // register alias types alongside the portable/lookup setup
    // (we don't combine this into setLookup since that would/could
    // affect stand-along lookups, such as ABIs which don't have
    // actual on-chain metadata)
    __internal__registerLookup = (lookup)=>{
        // attach the lookup before we register any types
        this.setLookup(lookup);
        // we detect based on runtime configuration
        let Weight = null;
        if (this.hasType("SpWeightsWeightV2Weight")) {
            // detection for WeightV2 type based on latest naming
            const weightv2 = this.createType("SpWeightsWeightV2Weight");
            Weight = weightv2.refTime && weightv2.proofSize ? "SpWeightsWeightV2Weight" : "WeightV1";
        } else if (!(0, _util.isBn)(this.createType("Weight"))) // where we have an already-supplied BN override, we don't clobber
        // it with our detected value (This protects against pre-defines
        // where Weight may be aliassed to WeightV0, e.g. in early Kusama chains)
        Weight = "WeightV1";
        if (Weight) // we have detected a version, adjust the definition
        this.register({
            Weight
        });
    };
    // sets the metadata
    setMetadata(metadata, signedExtensions, userExtensions, noInitWarn) {
        this.__internal__metadata = metadata.asLatest;
        this.__internal__metadataVersion = metadata.version;
        this.__internal__firstCallIndex = null;
        // attach the lookup at this point and register relevant types (before injecting)
        this.__internal__registerLookup(this.__internal__metadata.lookup);
        injectExtrinsics(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataCalls, this.__internal__moduleMap);
        injectErrors(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataErrors);
        injectEvents(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataEvents);
        // set the default call index (the lowest section, the lowest method)
        // in most chains this should be 0,0
        const [defSection] = Object.keys(this.__internal__metadataCalls).sort(sortDecimalStrings);
        if (defSection) {
            const [defMethod] = Object.keys(this.__internal__metadataCalls[defSection]).sort(sortDecimalStrings);
            if (defMethod) this.__internal__firstCallIndex = new Uint8Array([
                parseInt(defSection, 10),
                parseInt(defMethod, 10)
            ]);
        }
        // setup the available extensions
        this.setSignedExtensions(signedExtensions || (this.__internal__metadata.extrinsic.version.gt((0, _util.BN_ZERO)) ? this.__internal__metadata.extrinsic.signedExtensions.map(({ identifier })=>identifier.toString()) : (0, _indexJs.fallbackExtensions)), userExtensions, noInitWarn);
        // setup the chain properties with format overrides
        this.setChainProperties(extractProperties(this, metadata));
    }
    // sets the available signed extensions
    setSignedExtensions(signedExtensions = (0, _indexJs.fallbackExtensions), userExtensions, noInitWarn) {
        this.__internal__signedExtensions = signedExtensions;
        this.__internal__userExtensions = userExtensions;
        if (!noInitWarn) {
            const unknown = (0, _indexJs.findUnknownExtensions)(this.__internal__signedExtensions, this.__internal__userExtensions);
            if (unknown.length) l.warn(`Unknown signed extensions ${unknown.join(", ")} found, treating them as no-effect`);
        }
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/types-create":"cr6lO","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","../extrinsic/signedExtensions/index.js":"2BKKc","../generic/Event.js":"jknfu","../index.types.js":"b4BtA","../interfaces/definitions.js":"44OZI","../metadata/decorate/extrinsics/index.js":"3JIyR","../metadata/decorate/index.js":"ltCSZ","../metadata/Metadata.js":"cg9v9","../metadata/PortableRegistry/index.js":"9hFU1","./lazy.js":"3F1qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f2ofx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"i6LDK","./bundle.js":"hTYop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6LDK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"fhqpe","./packageInfo.js":"03o6M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fhqpe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageInfo = require("@polkadot/networks/packageInfo");
var _packageInfo1 = require("@polkadot/util/packageInfo");
var _xRandomvalues = require("@polkadot/x-randomvalues");
exports.default = [
    (0, _packageInfo.packageInfo),
    (0, _packageInfo1.packageInfo),
    (0, _xRandomvalues.packageInfo)
];

},{"@polkadot/networks/packageInfo":"599GG","@polkadot/util/packageInfo":"6T6yl","@polkadot/x-randomvalues":"jhlDT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"599GG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $3bf54ec1cc8d51ee$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/networks/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/networks",
    path: $3bf54ec1cc8d51ee$import_meta && "file:///node_modules/@polkadot/networks/packageInfo.js" ? new URL("file:///node_modules/@polkadot/networks/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/networks/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "12.6.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhlDT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getRandomValues = exports.crypto = exports.packageInfo = void 0;
const x_global_1 = require("11c6001c44aceac6");
var packageInfo_js_1 = require("e66c1401b5e73840");
Object.defineProperty(exports, "packageInfo", {
    enumerable: true,
    get: function() {
        return packageInfo_js_1.packageInfo;
    }
});
exports.crypto = x_global_1.xglobal.crypto;
function getRandomValues(arr) {
    return exports.crypto.getRandomValues(arr);
}
exports.getRandomValues = getRandomValues;

},{"11c6001c44aceac6":"k9Iwp","e66c1401b5e73840":"5S6Zi"}],"5S6Zi":[function(require,module,exports) {
var __dirname = "node_modules/@polkadot/x-randomvalues/cjs";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.packageInfo = void 0;
exports.packageInfo = {
    name: "@polkadot/x-randomvalues",
    path: typeof __dirname === "string" ? __dirname : "auto",
    type: "cjs",
    version: "12.6.2"
};

},{}],"03o6M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $00a2fb5eff5312f5$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/util-crypto/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/util-crypto",
    path: $00a2fb5eff5312f5$import_meta && "file:///node_modules/@polkadot/util-crypto/packageInfo.js" ? new URL("file:///node_modules/@polkadot/util-crypto/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/util-crypto/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "12.6.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hTYop":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
var _bundleInitJs = require("./bundleInit.js");
var _packageInfoJs = require("./packageInfo.js");
var _indexJs = require("./address/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var _indexJs1 = require("./base32/index.js");
parcelHelpers.exportAll(_indexJs1, exports);
var _indexJs2 = require("./base58/index.js");
parcelHelpers.exportAll(_indexJs2, exports);
var _indexJs3 = require("./base64/index.js");
parcelHelpers.exportAll(_indexJs3, exports);
var _indexJs4 = require("./blake2/index.js");
parcelHelpers.exportAll(_indexJs4, exports);
var _cryptoJs = require("./crypto.js");
parcelHelpers.exportAll(_cryptoJs, exports);
var _indexJs5 = require("./ed25519/index.js");
parcelHelpers.exportAll(_indexJs5, exports);
var _indexJs6 = require("./ethereum/index.js");
parcelHelpers.exportAll(_indexJs6, exports);
var _indexJs7 = require("./hd/index.js");
parcelHelpers.exportAll(_indexJs7, exports);
var _indexJs8 = require("./hmac/index.js");
parcelHelpers.exportAll(_indexJs8, exports);
var _indexJs9 = require("./json/index.js");
parcelHelpers.exportAll(_indexJs9, exports);
var _indexJs10 = require("./keccak/index.js");
parcelHelpers.exportAll(_indexJs10, exports);
var _indexJs11 = require("./key/index.js");
parcelHelpers.exportAll(_indexJs11, exports);
var _indexJs12 = require("./mnemonic/index.js");
parcelHelpers.exportAll(_indexJs12, exports);
var _indexJs13 = require("./nacl/index.js");
parcelHelpers.exportAll(_indexJs13, exports);
var _networksJs = require("./networks.js");
parcelHelpers.exportAll(_networksJs, exports);
var _indexJs14 = require("./pbkdf2/index.js");
parcelHelpers.exportAll(_indexJs14, exports);
var _indexJs15 = require("./random/index.js");
parcelHelpers.exportAll(_indexJs15, exports);
var _indexJs16 = require("./scrypt/index.js");
parcelHelpers.exportAll(_indexJs16, exports);
var _indexJs17 = require("./secp256k1/index.js");
parcelHelpers.exportAll(_indexJs17, exports);
var _indexJs18 = require("./sha/index.js");
parcelHelpers.exportAll(_indexJs18, exports);
var _indexJs19 = require("./signature/index.js");
parcelHelpers.exportAll(_indexJs19, exports);
var _indexJs20 = require("./sr25519/index.js");
parcelHelpers.exportAll(_indexJs20, exports);
var _indexJs21 = require("./xxhash/index.js");
parcelHelpers.exportAll(_indexJs21, exports);

},{"./bundleInit.js":"e8E8G","./packageInfo.js":false,"./address/index.js":"j5ZWw","./base32/index.js":false,"./base58/index.js":false,"./base64/index.js":false,"./blake2/index.js":"fBtmb","./crypto.js":"3GspH","./ed25519/index.js":false,"./ethereum/index.js":"huQFg","./hd/index.js":false,"./hmac/index.js":false,"./json/index.js":false,"./keccak/index.js":false,"./key/index.js":false,"./mnemonic/index.js":false,"./nacl/index.js":false,"./networks.js":false,"./pbkdf2/index.js":false,"./random/index.js":false,"./scrypt/index.js":false,"./secp256k1/index.js":false,"./sha/index.js":false,"./signature/index.js":false,"./sr25519/index.js":false,"./xxhash/index.js":"9J4uy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e8E8G":[function(require,module,exports) {
var _shim = require("@polkadot/x-bigint/shim");
var _cryptoJs = require("./crypto.js");
(0, _cryptoJs.cryptoWaitReady)().catch(()=>{
// shouldn't happen, logged and caught inside cryptoWaitReady
});

},{"@polkadot/x-bigint/shim":"5tCiY","./crypto.js":"3GspH"}],"5tCiY":[function(require,module,exports) {
var _xBigint = require("@polkadot/x-bigint");
var _xGlobal = require("@polkadot/x-global");
(0, _xGlobal.exposeGlobal)("BigInt", (0, _xBigint.BigInt));

},{"@polkadot/x-bigint":"6Blk3","@polkadot/x-global":"k9Iwp"}],"3GspH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cryptoIsReady", ()=>cryptoIsReady);
parcelHelpers.export(exports, "cryptoWaitReady", ()=>cryptoWaitReady);
var _wasmCrypto = require("@polkadot/wasm-crypto");
const cryptoIsReady = (0, _wasmCrypto.isReady);
function cryptoWaitReady() {
    return (0, _wasmCrypto.waitReady)().then(()=>{
        if (!(0, _wasmCrypto.isReady)()) throw new Error("Unable to initialize @polkadot/util-crypto");
        return true;
    }).catch(()=>false);
}

},{"@polkadot/wasm-crypto":"19VJZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"19VJZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"flYCP","./bundle.js":"NrdCB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"flYCP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"14uzF","./packageInfo.js":"kY7cc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"14uzF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageInfo = require("@polkadot/wasm-bridge/packageInfo");
var _packageInfo1 = require("@polkadot/wasm-crypto-asmjs/packageInfo");
var _packageInfo2 = require("@polkadot/wasm-crypto-init/packageInfo");
var _packageInfo3 = require("@polkadot/wasm-crypto-wasm/packageInfo");
var _packageInfo4 = require("@polkadot/wasm-util/packageInfo");
exports.default = [
    (0, _packageInfo.packageInfo),
    (0, _packageInfo1.packageInfo),
    (0, _packageInfo2.packageInfo),
    (0, _packageInfo3.packageInfo),
    (0, _packageInfo4.packageInfo)
];

},{"@polkadot/wasm-bridge/packageInfo":"3vtip","@polkadot/wasm-crypto-asmjs/packageInfo":"7FNIf","@polkadot/wasm-crypto-init/packageInfo":"hl2gZ","@polkadot/wasm-crypto-wasm/packageInfo":"9SDcP","@polkadot/wasm-util/packageInfo":"jwsVW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3vtip":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $28dafde1e5919b35$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/wasm-bridge/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/wasm-bridge",
    path: $28dafde1e5919b35$import_meta && "file:///node_modules/@polkadot/wasm-bridge/packageInfo.js" ? new URL("file:///node_modules/@polkadot/wasm-bridge/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/wasm-bridge/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "7.3.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7FNIf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $5962eca8e099f259$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/wasm-crypto-asmjs/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/wasm-crypto-asmjs",
    path: $5962eca8e099f259$import_meta && "file:///node_modules/@polkadot/wasm-crypto-asmjs/packageInfo.js" ? new URL("file:///node_modules/@polkadot/wasm-crypto-asmjs/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/wasm-crypto-asmjs/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "7.3.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hl2gZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $c9f62939efbe8097$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/wasm-crypto-init/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/wasm-crypto-init",
    path: $c9f62939efbe8097$import_meta && "file:///node_modules/@polkadot/wasm-crypto-init/packageInfo.js" ? new URL("file:///node_modules/@polkadot/wasm-crypto-init/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/wasm-crypto-init/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "7.3.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9SDcP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $731791b1416a18cf$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/wasm-crypto-wasm/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/wasm-crypto-wasm",
    path: $731791b1416a18cf$import_meta && "file:///node_modules/@polkadot/wasm-crypto-wasm/packageInfo.js" ? new URL("file:///node_modules/@polkadot/wasm-crypto-wasm/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/wasm-crypto-wasm/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "7.3.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jwsVW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $e3677316ad8bef26$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/wasm-util/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/wasm-util",
    path: $e3677316ad8bef26$import_meta && "file:///node_modules/@polkadot/wasm-util/packageInfo.js" ? new URL("file:///node_modules/@polkadot/wasm-util/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/wasm-util/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "7.3.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kY7cc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>packageInfo);
var $f43efe308e600854$import_meta = Object.assign(Object.create(null), {
    url: "file:///node_modules/@polkadot/wasm-crypto/packageInfo.js"
});
const packageInfo = {
    name: "@polkadot/wasm-crypto",
    path: $f43efe308e600854$import_meta && "file:///node_modules/@polkadot/wasm-crypto/packageInfo.js" ? new URL("file:///node_modules/@polkadot/wasm-crypto/packageInfo.js").pathname.substring(0, new URL("file:///node_modules/@polkadot/wasm-crypto/packageInfo.js").pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "7.3.2"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"NrdCB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
parcelHelpers.export(exports, "bridge", ()=>(0, _initJs.bridge));
parcelHelpers.export(exports, "bip39Generate", ()=>bip39Generate);
parcelHelpers.export(exports, "bip39ToEntropy", ()=>bip39ToEntropy);
parcelHelpers.export(exports, "bip39ToMiniSecret", ()=>bip39ToMiniSecret);
parcelHelpers.export(exports, "bip39ToSeed", ()=>bip39ToSeed);
parcelHelpers.export(exports, "bip39Validate", ()=>bip39Validate);
parcelHelpers.export(exports, "ed25519KeypairFromSeed", ()=>ed25519KeypairFromSeed);
parcelHelpers.export(exports, "ed25519Sign", ()=>ed25519Sign);
parcelHelpers.export(exports, "ed25519Verify", ()=>ed25519Verify);
parcelHelpers.export(exports, "secp256k1FromSeed", ()=>secp256k1FromSeed);
parcelHelpers.export(exports, "secp256k1Compress", ()=>secp256k1Compress);
parcelHelpers.export(exports, "secp256k1Expand", ()=>secp256k1Expand);
parcelHelpers.export(exports, "secp256k1Recover", ()=>secp256k1Recover);
parcelHelpers.export(exports, "secp256k1Sign", ()=>secp256k1Sign);
parcelHelpers.export(exports, "sr25519DeriveKeypairHard", ()=>sr25519DeriveKeypairHard);
parcelHelpers.export(exports, "sr25519DeriveKeypairSoft", ()=>sr25519DeriveKeypairSoft);
parcelHelpers.export(exports, "sr25519DerivePublicSoft", ()=>sr25519DerivePublicSoft);
parcelHelpers.export(exports, "sr25519KeypairFromSeed", ()=>sr25519KeypairFromSeed);
parcelHelpers.export(exports, "sr25519Sign", ()=>sr25519Sign);
parcelHelpers.export(exports, "sr25519Verify", ()=>sr25519Verify);
parcelHelpers.export(exports, "sr25519Agree", ()=>sr25519Agree);
parcelHelpers.export(exports, "vrfSign", ()=>vrfSign);
parcelHelpers.export(exports, "vrfVerify", ()=>vrfVerify);
parcelHelpers.export(exports, "blake2b", ()=>blake2b);
parcelHelpers.export(exports, "hmacSha256", ()=>hmacSha256);
parcelHelpers.export(exports, "hmacSha512", ()=>hmacSha512);
parcelHelpers.export(exports, "keccak256", ()=>keccak256);
parcelHelpers.export(exports, "keccak512", ()=>keccak512);
parcelHelpers.export(exports, "pbkdf2", ()=>pbkdf2);
parcelHelpers.export(exports, "scrypt", ()=>scrypt);
parcelHelpers.export(exports, "sha256", ()=>sha256);
parcelHelpers.export(exports, "sha512", ()=>sha512);
parcelHelpers.export(exports, "twox", ()=>twox);
parcelHelpers.export(exports, "isReady", ()=>isReady);
parcelHelpers.export(exports, "waitReady", ()=>waitReady);
var _initJs = require("./init.js");
var _packageInfoJs = require("./packageInfo.js");
/**
 * @internal
 * @description
 * This create an extenal interface function from the signature, all the while checking
 * the actual bridge wasm interface to ensure it has been initialized.
 *
 * This means that we can call it
 *
 *   withWasm(wasm: WasmCryptoInstance, a: number, b: string) => Uint8Array
 *
 * and in this case it will create an interface function with the signarure
 *
 *   (a: number, b: string) => Uint8Array
 */ function withWasm(fn) {
    return (...params)=>{
        if (!(0, _initJs.bridge).wasm) throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");
        return fn((0, _initJs.bridge).wasm, ...params);
    };
}
const bip39Generate = /*#__PURE__*/ withWasm((wasm, words)=>{
    wasm.ext_bip39_generate(8, words);
    return (0, _initJs.bridge).resultString();
});
const bip39ToEntropy = /*#__PURE__*/ withWasm((wasm, phrase)=>{
    wasm.ext_bip39_to_entropy(8, ...(0, _initJs.bridge).allocString(phrase));
    return (0, _initJs.bridge).resultU8a();
});
const bip39ToMiniSecret = /*#__PURE__*/ withWasm((wasm, phrase, password)=>{
    wasm.ext_bip39_to_mini_secret(8, ...(0, _initJs.bridge).allocString(phrase), ...(0, _initJs.bridge).allocString(password));
    return (0, _initJs.bridge).resultU8a();
});
const bip39ToSeed = /*#__PURE__*/ withWasm((wasm, phrase, password)=>{
    wasm.ext_bip39_to_seed(8, ...(0, _initJs.bridge).allocString(phrase), ...(0, _initJs.bridge).allocString(password));
    return (0, _initJs.bridge).resultU8a();
});
const bip39Validate = /*#__PURE__*/ withWasm((wasm, phrase)=>{
    const ret = wasm.ext_bip39_validate(...(0, _initJs.bridge).allocString(phrase));
    return ret !== 0;
});
const ed25519KeypairFromSeed = /*#__PURE__*/ withWasm((wasm, seed)=>{
    wasm.ext_ed_from_seed(8, ...(0, _initJs.bridge).allocU8a(seed));
    return (0, _initJs.bridge).resultU8a();
});
const ed25519Sign = /*#__PURE__*/ withWasm((wasm, pubkey, seckey, message)=>{
    wasm.ext_ed_sign(8, ...(0, _initJs.bridge).allocU8a(pubkey), ...(0, _initJs.bridge).allocU8a(seckey), ...(0, _initJs.bridge).allocU8a(message));
    return (0, _initJs.bridge).resultU8a();
});
const ed25519Verify = /*#__PURE__*/ withWasm((wasm, signature, message, pubkey)=>{
    const ret = wasm.ext_ed_verify(...(0, _initJs.bridge).allocU8a(signature), ...(0, _initJs.bridge).allocU8a(message), ...(0, _initJs.bridge).allocU8a(pubkey));
    return ret !== 0;
});
const secp256k1FromSeed = /*#__PURE__*/ withWasm((wasm, seckey)=>{
    wasm.ext_secp_from_seed(8, ...(0, _initJs.bridge).allocU8a(seckey));
    return (0, _initJs.bridge).resultU8a();
});
const secp256k1Compress = /*#__PURE__*/ withWasm((wasm, pubkey)=>{
    wasm.ext_secp_pub_compress(8, ...(0, _initJs.bridge).allocU8a(pubkey));
    return (0, _initJs.bridge).resultU8a();
});
const secp256k1Expand = /*#__PURE__*/ withWasm((wasm, pubkey)=>{
    wasm.ext_secp_pub_expand(8, ...(0, _initJs.bridge).allocU8a(pubkey));
    return (0, _initJs.bridge).resultU8a();
});
const secp256k1Recover = /*#__PURE__*/ withWasm((wasm, msgHash, sig, recovery)=>{
    wasm.ext_secp_recover(8, ...(0, _initJs.bridge).allocU8a(msgHash), ...(0, _initJs.bridge).allocU8a(sig), recovery);
    return (0, _initJs.bridge).resultU8a();
});
const secp256k1Sign = /*#__PURE__*/ withWasm((wasm, msgHash, seckey)=>{
    wasm.ext_secp_sign(8, ...(0, _initJs.bridge).allocU8a(msgHash), ...(0, _initJs.bridge).allocU8a(seckey));
    return (0, _initJs.bridge).resultU8a();
});
const sr25519DeriveKeypairHard = /*#__PURE__*/ withWasm((wasm, pair, cc)=>{
    wasm.ext_sr_derive_keypair_hard(8, ...(0, _initJs.bridge).allocU8a(pair), ...(0, _initJs.bridge).allocU8a(cc));
    return (0, _initJs.bridge).resultU8a();
});
const sr25519DeriveKeypairSoft = /*#__PURE__*/ withWasm((wasm, pair, cc)=>{
    wasm.ext_sr_derive_keypair_soft(8, ...(0, _initJs.bridge).allocU8a(pair), ...(0, _initJs.bridge).allocU8a(cc));
    return (0, _initJs.bridge).resultU8a();
});
const sr25519DerivePublicSoft = /*#__PURE__*/ withWasm((wasm, pubkey, cc)=>{
    wasm.ext_sr_derive_public_soft(8, ...(0, _initJs.bridge).allocU8a(pubkey), ...(0, _initJs.bridge).allocU8a(cc));
    return (0, _initJs.bridge).resultU8a();
});
const sr25519KeypairFromSeed = /*#__PURE__*/ withWasm((wasm, seed)=>{
    wasm.ext_sr_from_seed(8, ...(0, _initJs.bridge).allocU8a(seed));
    return (0, _initJs.bridge).resultU8a();
});
const sr25519Sign = /*#__PURE__*/ withWasm((wasm, pubkey, secret, message)=>{
    wasm.ext_sr_sign(8, ...(0, _initJs.bridge).allocU8a(pubkey), ...(0, _initJs.bridge).allocU8a(secret), ...(0, _initJs.bridge).allocU8a(message));
    return (0, _initJs.bridge).resultU8a();
});
const sr25519Verify = /*#__PURE__*/ withWasm((wasm, signature, message, pubkey)=>{
    const ret = wasm.ext_sr_verify(...(0, _initJs.bridge).allocU8a(signature), ...(0, _initJs.bridge).allocU8a(message), ...(0, _initJs.bridge).allocU8a(pubkey));
    return ret !== 0;
});
const sr25519Agree = /*#__PURE__*/ withWasm((wasm, pubkey, secret)=>{
    wasm.ext_sr_agree(8, ...(0, _initJs.bridge).allocU8a(pubkey), ...(0, _initJs.bridge).allocU8a(secret));
    return (0, _initJs.bridge).resultU8a();
});
const vrfSign = /*#__PURE__*/ withWasm((wasm, secret, context, message, extra)=>{
    wasm.ext_vrf_sign(8, ...(0, _initJs.bridge).allocU8a(secret), ...(0, _initJs.bridge).allocU8a(context), ...(0, _initJs.bridge).allocU8a(message), ...(0, _initJs.bridge).allocU8a(extra));
    return (0, _initJs.bridge).resultU8a();
});
const vrfVerify = /*#__PURE__*/ withWasm((wasm, pubkey, context, message, extra, outAndProof)=>{
    const ret = wasm.ext_vrf_verify(...(0, _initJs.bridge).allocU8a(pubkey), ...(0, _initJs.bridge).allocU8a(context), ...(0, _initJs.bridge).allocU8a(message), ...(0, _initJs.bridge).allocU8a(extra), ...(0, _initJs.bridge).allocU8a(outAndProof));
    return ret !== 0;
});
const blake2b = /*#__PURE__*/ withWasm((wasm, data, key, size)=>{
    wasm.ext_blake2b(8, ...(0, _initJs.bridge).allocU8a(data), ...(0, _initJs.bridge).allocU8a(key), size);
    return (0, _initJs.bridge).resultU8a();
});
const hmacSha256 = /*#__PURE__*/ withWasm((wasm, key, data)=>{
    wasm.ext_hmac_sha256(8, ...(0, _initJs.bridge).allocU8a(key), ...(0, _initJs.bridge).allocU8a(data));
    return (0, _initJs.bridge).resultU8a();
});
const hmacSha512 = /*#__PURE__*/ withWasm((wasm, key, data)=>{
    wasm.ext_hmac_sha512(8, ...(0, _initJs.bridge).allocU8a(key), ...(0, _initJs.bridge).allocU8a(data));
    return (0, _initJs.bridge).resultU8a();
});
const keccak256 = /*#__PURE__*/ withWasm((wasm, data)=>{
    wasm.ext_keccak256(8, ...(0, _initJs.bridge).allocU8a(data));
    return (0, _initJs.bridge).resultU8a();
});
const keccak512 = /*#__PURE__*/ withWasm((wasm, data)=>{
    wasm.ext_keccak512(8, ...(0, _initJs.bridge).allocU8a(data));
    return (0, _initJs.bridge).resultU8a();
});
const pbkdf2 = /*#__PURE__*/ withWasm((wasm, data, salt, rounds)=>{
    wasm.ext_pbkdf2(8, ...(0, _initJs.bridge).allocU8a(data), ...(0, _initJs.bridge).allocU8a(salt), rounds);
    return (0, _initJs.bridge).resultU8a();
});
const scrypt = /*#__PURE__*/ withWasm((wasm, password, salt, log2n, r, p)=>{
    wasm.ext_scrypt(8, ...(0, _initJs.bridge).allocU8a(password), ...(0, _initJs.bridge).allocU8a(salt), log2n, r, p);
    return (0, _initJs.bridge).resultU8a();
});
const sha256 = /*#__PURE__*/ withWasm((wasm, data)=>{
    wasm.ext_sha256(8, ...(0, _initJs.bridge).allocU8a(data));
    return (0, _initJs.bridge).resultU8a();
});
const sha512 = /*#__PURE__*/ withWasm((wasm, data)=>{
    wasm.ext_sha512(8, ...(0, _initJs.bridge).allocU8a(data));
    return (0, _initJs.bridge).resultU8a();
});
const twox = /*#__PURE__*/ withWasm((wasm, data, rounds)=>{
    wasm.ext_twox(8, ...(0, _initJs.bridge).allocU8a(data), rounds);
    return (0, _initJs.bridge).resultU8a();
});
function isReady() {
    return !!(0, _initJs.bridge).wasm;
}
async function waitReady() {
    try {
        const wasm = await (0, _initJs.initBridge)();
        return !!wasm;
    } catch  {
        return false;
    }
}

},{"./init.js":"9JOe6","./packageInfo.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9JOe6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bridge", ()=>bridge);
/**
 * @name initBridge
 * @description
 * Creates a new bridge interface with the (optional) initialization function
 */ parcelHelpers.export(exports, "initBridge", ()=>initBridge);
var _wasmBridge = require("@polkadot/wasm-bridge");
var _wasmCryptoInit = require("@polkadot/wasm-crypto-init");
const bridge = new (0, _wasmBridge.Bridge)((0, _wasmCryptoInit.createWasm));
async function initBridge(createWasm) {
    return bridge.init(createWasm);
}

},{"@polkadot/wasm-bridge":"3wwiy","@polkadot/wasm-crypto-init":"2I20m","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3wwiy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"bjFTT","./bundle.js":"61xDe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjFTT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"44Sc9","./packageInfo.js":"3vtip","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"44Sc9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = [];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"61xDe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bridgeJs = require("./bridge.js");
parcelHelpers.exportAll(_bridgeJs, exports);
var _initJs = require("./init.js");
parcelHelpers.exportAll(_initJs, exports);

},{"./bridge.js":"bWpzk","./init.js":"bT7Lq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bWpzk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Bridge
 * @description
 * Creates a bridge between the JS and WASM environments.
 *
 * For any bridge it is passed an function which is then called internally at the
 * time of initialization. This affectively implements the layer between WASM and
 * the native environment, providing all the plumbing needed for the Wbg classes.
 */ parcelHelpers.export(exports, "Bridge", ()=>Bridge);
var _util = require("@polkadot/util");
var _wbgJs = require("./wbg.js");
class Bridge {
    __internal__createWasm;
    __internal__heap;
    __internal__wbg;
    __internal__cachegetInt32;
    __internal__cachegetUint8;
    __internal__heapNext;
    __internal__wasm;
    __internal__wasmError;
    __internal__wasmPromise;
    __internal__type;
    constructor(createWasm){
        this.__internal__createWasm = createWasm;
        this.__internal__cachegetInt32 = null;
        this.__internal__cachegetUint8 = null;
        this.__internal__heap = new Array(32).fill(undefined).concat(undefined, null, true, false);
        this.__internal__heapNext = this.__internal__heap.length;
        this.__internal__type = "none";
        this.__internal__wasm = null;
        this.__internal__wasmError = null;
        this.__internal__wasmPromise = null;
        this.__internal__wbg = {
            ...new (0, _wbgJs.Wbg)(this)
        };
    }
    /** @description Returns the init error */ get error() {
        return this.__internal__wasmError;
    }
    /** @description Returns the init type */ get type() {
        return this.__internal__type;
    }
    /** @description Returns the created wasm interface */ get wasm() {
        return this.__internal__wasm;
    }
    /** @description Performs the wasm initialization */ async init(createWasm) {
        if (!this.__internal__wasmPromise || createWasm) this.__internal__wasmPromise = (createWasm || this.__internal__createWasm)(this.__internal__wbg);
        const { error, type, wasm } = await this.__internal__wasmPromise;
        this.__internal__type = type;
        this.__internal__wasm = wasm;
        this.__internal__wasmError = error;
        return this.__internal__wasm;
    }
    /**
     * @internal
     * @description Gets an object from the heap
     */ getObject(idx) {
        return this.__internal__heap[idx];
    }
    /**
     * @internal
     * @description Removes an object from the heap
     */ dropObject(idx) {
        if (idx < 36) return;
        this.__internal__heap[idx] = this.__internal__heapNext;
        this.__internal__heapNext = idx;
    }
    /**
     * @internal
     * @description Retrieves and removes an object to the heap
     */ takeObject(idx) {
        const ret = this.getObject(idx);
        this.dropObject(idx);
        return ret;
    }
    /**
     * @internal
     * @description Adds an object to the heap
     */ addObject(obj) {
        if (this.__internal__heapNext === this.__internal__heap.length) this.__internal__heap.push(this.__internal__heap.length + 1);
        const idx = this.__internal__heapNext;
        this.__internal__heapNext = this.__internal__heap[idx];
        this.__internal__heap[idx] = obj;
        return idx;
    }
    /**
     * @internal
     * @description Retrieve an Int32 in the WASM interface
     */ getInt32() {
        if (this.__internal__cachegetInt32 === null || this.__internal__cachegetInt32.buffer !== this.__internal__wasm.memory.buffer) this.__internal__cachegetInt32 = new Int32Array(this.__internal__wasm.memory.buffer);
        return this.__internal__cachegetInt32;
    }
    /**
     * @internal
     * @description Retrieve an Uint8Array in the WASM interface
     */ getUint8() {
        if (this.__internal__cachegetUint8 === null || this.__internal__cachegetUint8.buffer !== this.__internal__wasm.memory.buffer) this.__internal__cachegetUint8 = new Uint8Array(this.__internal__wasm.memory.buffer);
        return this.__internal__cachegetUint8;
    }
    /**
     * @internal
     * @description Retrieves an Uint8Array in the WASM interface
     */ getU8a(ptr, len) {
        return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
    }
    /**
     * @internal
     * @description Retrieves a string in the WASM interface
     */ getString(ptr, len) {
        return (0, _util.u8aToString)(this.getU8a(ptr, len));
    }
    /**
     * @internal
     * @description Allocates an Uint8Array in the WASM interface
     */ allocU8a(arg) {
        const ptr = this.__internal__wasm.__wbindgen_malloc(arg.length * 1);
        this.getUint8().set(arg, ptr / 1);
        return [
            ptr,
            arg.length
        ];
    }
    /**
     * @internal
     * @description Allocates a string in the WASM interface
     */ allocString(arg) {
        return this.allocU8a((0, _util.stringToU8a)(arg));
    }
    /**
     * @internal
     * @description Retrieves an Uint8Array from the WASM interface
     */ resultU8a() {
        const r0 = this.getInt32()[2];
        const r1 = this.getInt32()[3];
        const ret = this.getU8a(r0, r1).slice();
        this.__internal__wasm.__wbindgen_free(r0, r1 * 1);
        return ret;
    }
    /**
     * @internal
     * @description Retrieve a string from the WASM interface
     */ resultString() {
        return (0, _util.u8aToString)(this.resultU8a());
    }
}

},{"@polkadot/util":"3HnHw","./wbg.js":"8Bvvj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Bvvj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Wbg
 * @description
 * This defines the internal interfaces that wasm-bindgen used to communicate
 * with the host layer. None of these functions are available to the user, rather
 * they are called internally from the WASM code itself.
 *
 * The interfaces here are exposed in the imports on the created WASM interfaces.
 *
 * Internally the implementation does a thin layer into the supplied bridge.
 */ parcelHelpers.export(exports, "Wbg", ()=>Wbg);
var _xRandomvalues = require("@polkadot/x-randomvalues");
const DEFAULT_CRYPTO = {
    getRandomValues: (0, _xRandomvalues.getRandomValues)
};
const DEFAULT_SELF = {
    crypto: DEFAULT_CRYPTO
};
class Wbg {
    __internal__bridge;
    constructor(bridge){
        this.__internal__bridge = bridge;
    }
    /** @internal */ abort = ()=>{
        throw new Error("abort");
    };
    /** @internal */ __wbindgen_is_undefined = (idx)=>{
        return this.__internal__bridge.getObject(idx) === undefined;
    };
    /** @internal */ __wbindgen_throw = (ptr, len)=>{
        throw new Error(this.__internal__bridge.getString(ptr, len));
    };
    /** @internal */ __wbg_self_1b7a39e3a92c949c = ()=>{
        return this.__internal__bridge.addObject(DEFAULT_SELF);
    };
    /** @internal */ __wbg_require_604837428532a733 = (ptr, len)=>{
        throw new Error(`Unable to require ${this.__internal__bridge.getString(ptr, len)}`);
    };
    /** @internal */ __wbg_crypto_968f1772287e2df0 = (_idx)=>{
        return this.__internal__bridge.addObject(DEFAULT_CRYPTO);
    };
    /** @internal */ __wbg_getRandomValues_a3d34b4fee3c2869 = (_idx)=>{
        return this.__internal__bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
    };
    /** @internal */ __wbg_getRandomValues_f5e14ab7ac8e995d = (_arg0, ptr, len)=>{
        DEFAULT_CRYPTO.getRandomValues(this.__internal__bridge.getU8a(ptr, len));
    };
    /** @internal */ __wbg_randomFillSync_d5bd2d655fdf256a = (_idx, _ptr, _len)=>{
        throw new Error("randomFillsync is not available");
    // getObject(idx).randomFillSync(getU8a(ptr, len));
    };
    /** @internal */ __wbindgen_object_drop_ref = (idx)=>{
        this.__internal__bridge.takeObject(idx);
    };
}

},{"@polkadot/x-randomvalues":"jhlDT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bT7Lq":[function(require,module,exports) {
/**
 * @name createWasmFn
 * @description
 * Create a WASM (or ASM.js) creator interface based on the supplied information.
 *
 * It will attempt to create a WASM interface first and if this fails or is not available in
 * the environment, will fallback to attempting to create an ASM.js interface.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createWasmFn", ()=>createWasmFn);
function createWasmFn(root, wasmBytes, asmFn) {
    return async (wbg)=>{
        const result = {
            error: null,
            type: "none",
            wasm: null
        };
        try {
            if (!wasmBytes?.length) throw new Error("No WebAssembly provided for initialization");
            else if (typeof WebAssembly !== "object" || typeof WebAssembly.instantiate !== "function") throw new Error("WebAssembly is not available in your environment");
            const source = await WebAssembly.instantiate(wasmBytes, {
                wbg
            });
            result.wasm = source.instance.exports;
            result.type = "wasm";
        } catch (error) {
            // if we have a valid supplied asm.js, return that
            if (typeof asmFn === "function") {
                result.wasm = asmFn(wbg);
                result.type = "asm";
            } else {
                result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;
                console.error(result.error);
            }
        }
        return result;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2I20m":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createWasm = exports.packageInfo = void 0;
const wasm_bridge_1 = require("66aca7a2ec79c8b6");
const wasm_crypto_wasm_1 = require("894c06087816169d");
var packageInfo_js_1 = require("c11b09348ba4d5c9");
Object.defineProperty(exports, "packageInfo", {
    enumerable: true,
    get: function() {
        return packageInfo_js_1.packageInfo;
    }
});
/**
 * @name createWasm
 * @description
 * Creates an interface using only WASM
 */ exports.createWasm = (0, wasm_bridge_1.createWasmFn)("crypto", wasm_crypto_wasm_1.wasmBytes, null);

},{"66aca7a2ec79c8b6":"3wwiy","894c06087816169d":"5udbF","c11b09348ba4d5c9":"fRM9H"}],"5udbF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"648QF","./bundle.js":"a3XHl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"648QF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"5SAQT","./packageInfo.js":"9SDcP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5SAQT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = [];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a3XHl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
parcelHelpers.export(exports, "wasmBytes", ()=>wasmBytes);
var _wasmUtil = require("@polkadot/wasm-util");
var _bytesJs = require("./cjs/bytes.js");
var _packageInfoJs = require("./packageInfo.js");
const wasmBytes = /*#__PURE__*/ (0, _wasmUtil.unzlibSync)((0, _wasmUtil.base64Decode)((0, _bytesJs.bytes), new Uint8Array((0, _bytesJs.lenIn))), new Uint8Array((0, _bytesJs.lenOut)));

},{"@polkadot/wasm-util":"101rX","./cjs/bytes.js":"fp4I6","./packageInfo.js":"9SDcP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"101rX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"5HcWI","./bundle.js":"cyPdx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5HcWI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"bLLv9","./packageInfo.js":"jwsVW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bLLv9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageInfo = require("@polkadot/wasm-util/packageInfo");
exports.default = [
    (0, _packageInfo.packageInfo)
];

},{"@polkadot/wasm-util/packageInfo":"jwsVW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyPdx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "base64Decode", ()=>(0, _base64Js.base64Decode));
parcelHelpers.export(exports, "unzlibSync", ()=>(0, _fflateJs.unzlibSync));
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
var _base64Js = require("./base64.js");
var _fflateJs = require("./fflate.js");
var _packageInfoJs = require("./packageInfo.js");

},{"./base64.js":"c1i6o","./fflate.js":"aYMUh","./packageInfo.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c1i6o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name base64Decode
 * @description
 * A base64 decoding function that operates in all environments. Unlike decoding
 * from Buffer (Node.js only) or atob (browser-only) this implementation is
 * slightly slower, but it is platform independent.
 *
 * For our usage, since we have access to the static final size, so we decode
 * to a specified output buffer. This also means we have applied a number of
 * optimizations based on this - checking output position instead of chars.
 */ parcelHelpers.export(exports, "base64Decode", ()=>base64Decode);
const CHR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
const map = new Array(256);
for(let i = 0, count = CHR.length; i < count; i++)map[CHR.charCodeAt(i)] = i;
function base64Decode(data, out) {
    let byte = 0;
    let bits = 0;
    let pos = -1;
    for(let i = 0, last = out.length - 1; pos !== last; i++){
        // each character represents 6 bits
        byte = byte << 6 | map[data.charCodeAt(i)];
        // each byte needs to contain 8 bits
        if ((bits += 6) >= 8) out[++pos] = byte >>> (bits -= 8) & 0xff;
    }
    return out;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aYMUh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Expands Zlib data
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */ parcelHelpers.export(exports, "unzlibSync", ()=>unzlibSync);
const u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;
const clim = new u8([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
]);
const fleb = new u8([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    /* unused */ 0,
    0,
    /* impossible */ 0
]);
const fdeb = new u8([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    /* unused */ 0,
    0
]);
const freb = (eb, start)=>{
    const b = new u16(31);
    for(let i = 0; i < 31; ++i)b[i] = start += 1 << eb[i - 1];
    // numbers here are at max 18 bits
    const r = new u32(b[30]);
    for(let i = 1; i < 30; ++i)for(let j = b[i]; j < b[i + 1]; ++j)r[j] = j - b[i] << 5 | i;
    return [
        b,
        r
    ];
};
const [fl, revfl] = freb(fleb, 2);
fl[28] = 258, revfl[258] = 28;
const [fd] = freb(fdeb, 0);
const rev = new u16(32768);
for(let i = 0; i < 32768; ++i){
    // reverse table algorithm from SO
    let x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;
    x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;
    x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;
    rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;
}
const hMap = (cd, mb, r)=>{
    const s = cd.length;
    // index
    let i = 0;
    // u16 "map": index -> # of codes with bit length = index
    const l = new u16(mb);
    // length of cd must be 288 (total # of codes)
    for(; i < s; ++i)if (cd[i]) ++l[cd[i] - 1];
    // u16 "map": index -> minimum code for bit length = index
    const le = new u16(mb);
    for(i = 1; i < mb; ++i)le[i] = le[i - 1] + l[i - 1] << 1;
    let co;
    if (r) {
        // u16 "map": index -> number of actual bits, symbol for code
        co = new u16(1 << mb);
        // bits to remove for reverser
        const rvb = 15 - mb;
        for(i = 0; i < s; ++i)// ignore 0 lengths
        if (cd[i]) {
            // num encoding both symbol and bits read
            const sv = i << 4 | cd[i];
            // free bits
            const r = mb - cd[i];
            // start value
            let v = le[cd[i] - 1]++ << r;
            // m is end value
            for(const m = v | (1 << r) - 1; v <= m; ++v)// every 16 bit value starting with the code yields the same result
            co[rev[v] >> rvb] = sv;
        }
    } else {
        co = new u16(s);
        for(i = 0; i < s; ++i)if (cd[i]) co[i] = rev[le[cd[i] - 1]++] >> 15 - cd[i];
    }
    return co;
};
const flt = new u8(288);
for(let i = 0; i < 144; ++i)flt[i] = 8;
for(let i = 144; i < 256; ++i)flt[i] = 9;
for(let i = 256; i < 280; ++i)flt[i] = 7;
for(let i = 280; i < 288; ++i)flt[i] = 8;
const fdt = new u8(32);
for(let i = 0; i < 32; ++i)fdt[i] = 5;
const flrm = hMap(flt, 9, 1);
const fdrm = hMap(fdt, 5, 1);
const bits = (d, p, m)=>{
    const o = p >>> 3;
    return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
};
const bits16 = (d, p)=>{
    const o = p >>> 3;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
};
const shft = (p)=>(p >>> 3) + (p & 7 && 1);
const slc = (v, s, e)=>{
    if (s == null || s < 0) s = 0;
    if (e == null || e > v.length) e = v.length;
    // can't use .constructor in case user-supplied
    const n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
    n.set(v.subarray(s, e));
    return n;
};
const max = (a)=>{
    let m = a[0];
    for(let i = 1, count = a.length; i < count; ++i)if (a[i] > m) m = a[i];
    return m;
};
const inflt = (dat, buf, st)=>{
    const noSt = !st || st.i;
    if (!st) st = {};
    // source length
    const sl = dat.length;
    // have to estimate size
    const noBuf = !buf || !noSt;
    // Assumes roughly 33% compression ratio average
    if (!buf) buf = new u8(sl * 3);
    // ensure buffer can fit at least l elements
    const cbuf = (l)=>{
        let bl = buf.length;
        // need to increase size to fit
        if (l > bl) {
            // Double or set to necessary, whichever is greater
            const nbuf = new u8(Math.max(bl << 1, l));
            nbuf.set(buf);
            buf = nbuf;
        }
    };
    //  last chunk         bitpos           bytes
    let final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    if (final && !lm) return buf;
    // total bits
    const tbts = sl << 3;
    do {
        if (!lm) {
            // BFINAL - this is only 1 when last chunk is next
            st.f = final = bits(dat, pos, 1);
            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
            const type = bits(dat, pos + 1, 3);
            pos += 3;
            if (!type) {
                // go to end of byte boundary
                const s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
                if (t > sl) {
                    if (noSt) throw "unexpected EOF";
                    break;
                }
                // ensure size
                if (noBuf) cbuf(bt + l);
                // Copy over uncompressed data
                buf.set(dat.subarray(s, t), bt);
                // Get new bitpos, update byte count
                st.b = bt += l, st.p = pos = t << 3;
                continue;
            } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
            else if (type == 2) {
                //  literal                            lengths
                const hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
                const tl = hLit + bits(dat, pos + 5, 31) + 1;
                pos += 14;
                // length+distance tree
                const ldt = new u8(tl);
                // code length tree
                const clt = new u8(19);
                for(let i = 0; i < hcLen; ++i)// use index map to get real code
                clt[clim[i]] = bits(dat, pos + i * 3, 7);
                pos += hcLen * 3;
                // code lengths bits
                const clb = max(clt), clbmsk = (1 << clb) - 1;
                if (!noSt && pos + tl * (clb + 7) > tbts) break;
                // code lengths map
                const clm = hMap(clt, clb, 1);
                for(let i = 0; i < tl;){
                    const r = clm[bits(dat, pos, clbmsk)];
                    // bits read
                    pos += r & 15;
                    // symbol
                    const s = r >>> 4;
                    // code length to copy
                    if (s < 16) ldt[i++] = s;
                    else {
                        //  copy   count
                        let c = 0, n = 0;
                        if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
                        else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;
                        else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;
                        while(n--)ldt[i++] = c;
                    }
                }
                //    length tree                 distance tree
                const lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
                // max length bits
                lbt = max(lt);
                // max dist bits
                dbt = max(dt);
                lm = hMap(lt, lbt, 1);
                dm = hMap(dt, dbt, 1);
            } else throw "invalid block type";
            if (pos > tbts) throw "unexpected EOF";
        }
        // Make sure the buffer can hold this + the largest possible addition
        // maximum chunk size (practically, theoretically infinite) is 2^17;
        if (noBuf) cbuf(bt + 131072);
        const lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        const mxa = lbt + dbt + 18;
        while(noSt || pos + mxa < tbts){
            // bits read, code
            const c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
            pos += c & 15;
            if (pos > tbts) throw "unexpected EOF";
            if (!c) throw "invalid length/literal";
            if (sym < 256) buf[bt++] = sym;
            else if (sym == 256) {
                lm = undefined;
                break;
            } else {
                let add = sym - 254;
                // no extra bits needed if less
                if (sym > 264) {
                    // index
                    const i = sym - 257, b = fleb[i];
                    add = bits(dat, pos, (1 << b) - 1) + fl[i];
                    pos += b;
                }
                // dist
                const d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
                if (!d) throw "invalid distance";
                pos += d & 15;
                let dt = fd[dsym];
                if (dsym > 3) {
                    const b = fdeb[dsym];
                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
                }
                if (pos > tbts) throw "unexpected EOF";
                if (noBuf) cbuf(bt + 131072);
                const end = bt + add;
                for(; bt < end; bt += 4){
                    buf[bt] = buf[bt - dt];
                    buf[bt + 1] = buf[bt + 1 - dt];
                    buf[bt + 2] = buf[bt + 2 - dt];
                    buf[bt + 3] = buf[bt + 3 - dt];
                }
                bt = end;
            }
        }
        st.l = lm, st.p = pos, st.b = bt;
        if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    }while (!final);
    return bt == buf.length ? buf : slc(buf, 0, bt);
};
const zlv = (d)=>{
    if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw "invalid zlib data";
    if (d[1] & 32) throw "invalid zlib data: preset dictionaries not supported";
};
function unzlibSync(data, out) {
    return inflt((zlv(data), data.subarray(2, -4)), out);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fp4I6":[function(require,module,exports) {
// Copyright 2019-2023 @polkadot/wasm-crypto-wasm authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Generated as part of the build, do not edit
exports.lenIn = 171008;
exports.lenOut = 339468;
exports.bytes = "eNqkvQmYXVd153vuuVPVvTXcmqTSfOpKtmVbskaXJMvYugU2Tuj3mi8vL1++9/X3ZNmSwSXjoSxseJ9iF1gy4oUEhZhEBPIiGhLUEAUxBTkhIIiTVhN3EMMDAaYRgQR3QkDBdMeAg/v3X2ufc4caNCDZOvuss/faa6299tprrz3caNeDr8lFUZT7x9yK2+NHH41uzz+qf3P8z2vuUXvnkdM/BdJ8KOrBs2RPEhHfwgupsqeyjGlBx/LI7ZFV8ohX8Aj/kuwOZVSqkqVVpKv5IUUsqh4JxD1ihD5iGR/xP8IQknop2oszRnW5R6L4Q3FX/uE7XrVw586H77j73t2v2nPvzrsf3Pnae3fvuevue/fsjor6urjl6313TO65c9/O3VP33b9zas9dUawMS5ThVTsf3HPPXTs33LFl16Ztezbt2rbxzm2bt90ZdSvHMs9x59Tr7993385t41vv2rBly8aNW7fs2bj7rvVezZWe51V79v3Srnt33/eaX9l1z2v3PLhz16bdmzbfsfmuPXs23blx6/g2z7zcM0/teeC1d0/t2Tm+fvPWTVs2b9x6/aaNu7Zs2hTl58F41/V7NmzeBZ13bt2zbdv1u6OcMl8RMFrOW+++557/4/X33rlz9/V37N64e/z66+/afdfG68d3kfej+Q/nc4ND0XCUy5UquahciXO5fBTl40JcLhWrpRzwqNpVKpe6yiPFXCEq5/LlXFcUlaOoiobl4q4oF+UKPZTJ5ytV8itV6MnF5VxUiHLFaEGuDDRfWDha0ZO3PNBSFFMuKuejGDSCUTJXjEGZ6y5EXbl8UXAIiCKl+Mj/+VIpjhZFfC4BjnMl/hapL84VQaAC0eLY/kTF/oiPUbREKKElzvG3J5+v5cVfvisqqL6oUCqCNtcPQbmoV50GzHEZoniPCvluaIyEJ1oqpkvFckmcliE8N5CjbK1Y6h2QxGCBz6qHF7gqUSHFomVxnC/Eue7e7jgGxif4MRpzRaTQnSdV4v/8csRL+XyUL5AB1Ppj/ZgKKVPs6+vLFxFYoZi7P/eKV8ByNFTqpvs1pqdPRdXyW8vXlF6z5zX3Tb0+jgb3vG7fzjvuvn/TNnTm3j1Tu/btiV463ASiunvu3Yfqvz763dxoG/w1d997Nx3gzqk9+6LbB9o+PbiHjjTcgvuhXffcvVu4f6km4J7dO++auu81nu+xXDXAHrz7VfdGK3vD20N7pu6+6/XRgH29455de/dsvCO6tl9vr37Nrjt3PvjqXahntLYNcv2GjdHBnKHYu+fOO3ftVZaHW96V4R25igD337EXDY9+398etJ4abfAXx/1b4ZPj/aNcl972PXzf66LVI/Zhz53377z/tXfsvPO+19w/tefBB6P35IbaPux53f30ruhIzoRh4Cbn/7cJw4BTe+68D4aj7UaqgUwa6xfb+9TO3UjjoT0w8fr7d909tfPVu6Z2R+NzfHzwvrv2Rcmi9o9Qc8/dyEjfbvKKp1po+RUTMyCr9honYypthJGe8L7rVVN79kTb7PWhqbs8d6UvfQ3Ze1ZOvfbBfeICKe7dsPOh9Ts379yAlO7dp5yojHThULxq3my79zyI5r0++v14/az5sNi7XnvPvp0Yrj2v2nXPzjt33XPPHbvu3LvzrnujD+avm7fMnqmp+6Y6SqxoMfq7du82Rd6nr/ffdzcUTUV/kO9vyXKXJHEwP9ACeg347rszOh0PtgBh1qDfi4dboHtedy/Y75vaE/1uvvutGKVGrvqLJ/OH8x/I/4/c7+WP5L8eH8k/mf/t/P/zQu7J/Nfi34yfzN/7yifyJ/IfwhjfuvPJ/ENP8n3zb+Z+zPd35v84/288t/5fJ/IfIcfvkO/J/HH+fzL/Z5Rc+mT+z3k8nvuD3AmseZrhG/GbKPRU7uNAnsx/O/ex/J/mpz6Y/2C+8vUjlQ/nn7spd9ujSZREq+Pb65UknhyPb0+iRjI5dktSadz8wFglvyOJG6eipLK3fvMv3FLYkVSSWyaTXHJz7c7FXvBX65XG6D6yd+3D/LxQfmBK6Yca0z/LP0Bq9KGpqXpeGf/DRWQsNBY9nBQafQ8/yL/5hx6cVMGXXURBiFkdJxeRcVQZV11Exj6R0mek9Bkpk0m+0f8w//QCyjcqgOpFYbvxIrCNKOOOi8i4QNUusGoXhGopufkiSm5Sxq0XkXGzqthsVWx2IeetkldeRNl1yrjmIjL2KOP6i8hYETUVo6bSZPi2ekklSy0lSYeSfFLJ9cq4+iIy9qqKXquiV1UkfVRSUGMWrDEL3pglQUoGKTmkLEjZIGWHdAnSZZAuh3Qbvb9cr4qMagsZpAMZfBIZ14uM642M642MdZNJl5X+dxdReoNKb7DSG6z0+smkPJksFnixgRcbeMFkUppMRgQeMfCIgTfD8WSySeBNBt5k4Mpkcv1k0iNwj4F7DNw7mWyYTIpitmjMFp3ZqiBVg1Qd0i9Iv0H6HTIgyIBBBhwyJMiQQYYcMizIsEGGHbJQkIUGWeiQRSJqkRG1yIjKC5A3QN4AUD4wmawTeJ2B1xkYyvsnk/UCrzfwegMvnkyqk0m36um2erq9niWCLDHIEocsFWSpQZY6ZJmEAb6i4SsaPsQ5NJksU95llneZ510OYrJ2W9ZuyzqAvnUJ2GXALgNCI2jLApcNXDYwNC6lCQUuGbhk4OJksmQSQVDbIqttkde2QpAVBlnhkESQxCCJQ8YEGTPImEPqk0iZGhZaDQutBmodm6Q5AA8beNjA1JrAqcBDBh4yMGq/AvELPGDgAQOjz4sQv8D9Bu43MIq6EPELXDVw1cAo6vBkslzkLTfyljt5KwVZaZCVDlklyCqDrHLIFYJcYZArHHKlIFca5EqHXCXIVQa5yiGrBVltkNUOuVpEXW1EXW1ELRNgmQGWGQDKr6BRBF5q4KUGhvJVNIrASwy8xMDoxMrJpK566lZP3eu5RpBrDHKNQ64V5FqDXOuQNRIG+JYbvuWGD3FeOZmsUd41lneN510LYrLWLWvdsl6Bmo0JOGbAMQNCI2gTgRMDJwaGxmtpQoFXGHiFgZdPJtdMIghqu9pqu9pru06Q6wxynUPGBRk3yLhDtgiyxSBbHLJ1EilTw2qrYbXVQK1bJmkOwFcZ+CoDU+s4nAp8pYGvNDCKeh3iF/gKA19hYBT1asQv8CoDrzIwiroa8Qu80sArDYyiXjWZrBV5a428tU7eRkE2GmSjQ7YJss0g2xxygyA3GOQGh2wXZLtBtjvkRkFuNMiNDtkhyA6D7HBII7kxuSHZmKxJrknGkhXJwmQo6U+KybpkAT6VeSVL6y/Xo1YfbSx+OBltjFB6tFF+2L2g0fqEHsP1lwB9IJlgoGwc+eaxJwqT9UF96KnfNlnHnPcko5NJb/KSyaQvmZg03C958AH+Jy28FcNbMbyN33rzN95cnqy/VAi66rdOMmxTgOyjZO9R9h7L3uPZP3Tohc8X9tZfpuyF+k2T9V6y95C9QvZeZe+17L2e/eunj304t7f+C8oeQVu9BnW9ZO8he03Za5a9FrIf+Ppn85P1X0xuBetNU2BNbjKPYbmoHjKqK5LG4GS9D67BkYyIV8a2nmQTcNI10Pcqj9APGvpBR/8v73nqc8VJ3KRK0jcFZj1B3yf0fYa+z9G/FDFM4rHVkkGQ1YCMCNmIIRtxZM/85A3fL+2tb6ZikFVgyZD1CFmPIetxZC9DSGJ8MBkB2eCsjH/gM7/5vuJeWgHpQJCQ9YKsV8h6DVmvI/sFZ1x8g2xkVjafff+3PhWrjXpFWQ/SmIPNXzQ2cRcGNWLW5E+MaJBc0ML4AqFfYOgXOPo3/OlvPJGbxN82xnvnZnxTxviCORn/5K//9bvjSZzKCzG+OWNcyBbMyvhf/vRDx2jf9Rdk/GLa90d/9uO30zE2XJBNb1+kWJAu5tFN8OKYLGhp8ZlSfOO7Dv64vBeGLsT44sk6XaKPlhHjavE+IeszZH2O7Ks/fOu70cURagcZjPMEWV7I8oaM2YqQrZusYy3gJJPizC7+lt8//Fx+b30BSArGOE+QFYSsYMjwloVsPbMfGQDQgaxvVgPwqT9+29cxAIsRThGCHtATZEUhKxoy/Eoh22Bs1nCH5HpWkx48ILx0RDmfwfjJ+cffCPo+aAR9QbQK/UzGMRgwXmoxDyUhKxmykiP76z9//GeRpGOMF+dmfMQYL0OgkEl9ykJWNmRlR/b0X374KIrde0HGFxjjVZCVQVYCUhWyqiGrOrIfnH3vD0BWuyCbKAts4ld2y4ssyzkuySPrJ10FfZk8/ULfb+j7Hf373/yFL1Js4IKM0wNhvETz9IOsOqsUn/niZ/6eTNULMk4PhHFJUcj6Z5Xi137rHz5OJ+y/IOP0QDjoapFil5B1GbIuR/Yn33j8k/SSoQuyWTM28W+75BKX5eeV5AV3k+4KUuwW+m5D3+3of/u5k5/Ehg9fkPEBY5x2SbpB1jWrFE+eeO5Fxlk1yfyMV41xSVHIumeV4pPTv3cQZNULMt5vjM8vxd949sXTmIf+C7I5ZGyaFPEpy3JjS5rvzC/FJ7/xrS8weKmR5md8OPTo+aT4+b/+T+NMNS/INy0SOvTcQvzuF977boa9gQvyTYvA9/xCPPj2Z/6CDq0WmZ9LWgQuTYi48WX5tyV57vML8eRnvnce9Oo28zNOG1mHnk+IL3z9Q/8dGoYuyDgtEjr03FL87d879w5qVJPMzzhNcsEO/aV/+E/HShdjt2iStEMzkyprTlHSjG5+Kf752499BONzYUtGI12wQ3/hn3/0L4z3F7ZkNMkFO/RP/+jj37soS0aTXLBDf/NPpv/xEuyWSZE5VlnzuJKmVfNL8WMf+Z1Pgf5iLdn8Ujz83z//zxifi7Vk80vxG8/87VOXYMnml+J3P/jR5y7BbpkUmdeWk7WSIlPZ+aX4zHPv/BvQX6wpm1+KP33iP38zUpNcnCmbX4rnT73/MezixZqy+aX4O2/87f8Ksos1XCZFYgnlZJukSPhgfikeOvuNfwH9xZqy+aX49Pff/WcY2Ys1ZfNL8WM//swfUuPFmrL5pfiRd5w/bT7lxRkupHiNAibXWMDkGguYYCY3TiZbFcTYakGMrSHYK2+ynGyXuIntzC/uz37p7/4nnC+8SJs3v7g/98Rzz8D5xdq8+cX93Def/DQjx8XavPnF/f2Dn3wv48Sii7RwiHuNxL3GxL3GxI09vYFwnMDXGvhaA2NcUeyZAfaZQfgBb5cdahfFuOdtlx/89dv/CoJLFxTlwiDKZrvMFOX33vrfvsrAtvCirWg5a5eZonz+p99+B8gu2orOy+bj0wd+wih5YZu5yNisJi9n9XMpa5q3XZAXdKeTpnaSTXadNbUT4kasA3V7zcZnCapYS0smKLZWGrLWNGStaQgDB31x5oLLgALu1ZaGmzmpfPsfffIbDMwy8NRA/JGoWzEpGQ88bRkN4kpGHMth4pvMeTJ3kfklkLiWUDAEXWcEXecriUw+GyKnYeQ0jBxXTuakc3bIN598xyGmKBogwD8M/ptgF2JMWiJmpg6QuUDmApmvI3wLIRuNkI1OyI2zyEWLFtJAEaLp60wN/M3f/LOncQrKiGB0Euw1sFe84UpZw81UIYkwSuLk5r1jsRbHJ8dyjWis0pOrVpO4uWges2herf7edfE1j5RYdm8cZjRak0RX57diPnispx9FjZNA116dj+pX8HKEl+v0cvX+/fWl+5OlEz/+zPPv/K33fOT816ODE8mb60sn3vq2X3/T186+8ezXol8j0nLFwYnVb66P7K8vS5YenFj/Zvr54v2seo8cnMi9uV5XNavrqPnV+USL5o0TVLBOFVyZrNFjFfWM7IdYCvzTTx7/2qc+9j8/vcJqWj7xgfNf/NEHv/+Jj9+4v54kV1pFS/Zrcf/q/O31HAXHlHy1ytcJcpMe9Rpr9ZVUdUzsqo6reDnEy3q9XEO5FfuTFRN/cPbHX/3Mb33tje981KpbMfFXH/r/v/q+Dz7x9FMwVk6usvoK+9mnAD0w1mXZuoW/y2uO6ivAfBTMG/SyWrDpXP1aaliwXy+ncsmCgxOfP/h7P/jJ55540+ddggsmDr3tud9/8ekfH/jHaD8r+qutong/0RsyU1E1KQLfX++zDz37icSA6zbhzCfLLUs+SfbT65aYkJfQ3mR4ZX05FVvyV+vJ/mQJkfhKUrU6R/fXyQu2yn7QjxqOwQRh9icVxxFKvo6slGRvRlK0D8VkmeD3k0NtzNd8ssxwLpM5pDn2S30NOW9kN+SxZTFVNjSECIVmR30ZaAqJsVJISparlAyAJhV3r6CmR2DmvwH7MLQfywpT3UnNvnYnfQgo6THkPXSfEfAWk4X7ZUwC1n5ByJEKMcUr6aYlJYFF+4n6mRMYSK2iwqJymVPZbfjyiKQMr3wwlN3763EC1WoNy1CVPAwDQUVku5/RZ/l+AZNBy1AWzeSgcK+IL1thEyL/OaGDIoh+V0mG7WtFshlIhgzvECSsAG+crNwvagJW44ccrkVDGV6D0xCUBD7shYYhp9dgXUQ7lxq2uj6gB2mLmdwLYsYb1T6KGMvSSxZEYpLqS8bA0J3kJClcoM72REh9He1J+/GBHMMSPLG9oPM0RY8EBd5ByBk1yujZcdaexg85nM/B9vbM+OyHJAqpPVMqc8mQUUm3Bxi6hFqW3qAOPld7mgjAUIDPxNoTjSh4M5vkodmVASE12xOU/OftiQ4OiYve0J5EhKWKKDV4B6Czbnyitx3t6WoPP4ytc7QnQld7Nqlk6cOoXCwqrZnBV4Bn+ETyzqe1J1SDkn9ntKdsSDfa29ae0HyB9kRvh1VvVYrYbE8aF7z90Cn5xcLb0Z7kcD7752jPITVbzOplk8oBk1q3Gvqy23ORSQo7dGntid4OqSN1tGdTb71H0e872rNFb+dqT8TX3p791guC1l1me640SaFfl9ae6O2wSnW0Z1NvpSfqpZ3t2aK3c7Un7LS356BJrVv24LLb0zUfVbm09kRvTcE62rNTb62rtbVni97O1Z4MV+3t6XrbJXtw2e2pcSVo/qW0p9lbWqujPZt6q3E5jASXZm+HvFO3tmc/miMq6QWX3Z7S2y7J/TLsLQTNaW/V79VLL8Pe2mDUbm81+gUrcpntKU+jW6gvw95S75z2VniDHbpUe2t+Qru99VHenL/Las8cro8khdwvw96iBXPaW2la0NtLtbfmJ7TbW/WCLnXcy25P+WfBkl2yvcUwzmlv3U+gxS/d3ppz0W5v1QvCKH+Z/VP+dpDUJdtbSs1pb93vs6HwUu2tKUG7vXUrQi+47Pb0kck8x0u2tyjYnPbW/XgbCi/V3ppw2u2tjwo2q7rM9lQ/6lIPvwx7i7bPaW+lJ7K6l2FvTW/b7a28jmBFLqs93Q51y8Rdhr1Fwea0t7KQYVy5VHtrzkW7vZUd6lZDX3Z7uqTg8zLsLfXOaW/lZwU//lLtrQmn3d66FTGv7TL7p+xFtyzKZdhbBD+nvfVxxfT2Uu2t+Qnt9ta9cPTnsttT9qJLFuUy7C12YU576368uaqXam/N+eeR0TmK5soSFfYb0NtzNGtPJ5U0dsZQ8i8Z0KlMVgvgVLqf329AlzwbBPfXSVIYLJg5K7wgKQElXmQfiKzUxMXCrEUXSjpJ0FzFpqVrNA072wzriPhZoMZII1dEICnHd8GdI+BVD1MYMUAWobXyrRbLdi+ivsWGbRH8EmRbyAdDSHpZssgQ8q+pz3KCOgsNx0KUQHJiXFpIaxLSI8NChfRIUpjEEmU1LpYrH9ri0RiFn5JVBzFkixRnzUmSRtUSs0D03EXaVRloikO0bHFCwIkY7VhK25KUNkoB3ZLnaJXH49KesgqM1x7ky3SOePdKjfhW0wjxQOkifXYE6j1Uu1Ay4zvIV/Ipo50qR5KrCc4uT5LQvkUbUTEFuWSxIsaUzvGuRqE0LNVVaZSsJ0Pd0OQoQYYVyTX+ZS0sXnEQua0SSgOt0daAgygdDAbQOspfeRAaV2agDdC7+qBX66DqD9fFxUdHH1kZNc4v21vvXhWxmnOMTc2Knb8vppm6V8d/XKnnxuOPVvztWKUej8cneGscJSO9OMv43ko9Px5/ImQ8WqkXxuOTyniEjIQls4zvqtSL4/FTIeORSr00Hp9SxsNkpHdnGZ+o1Mvj8dMh4+FKvWs8Pq2MZ8jIrLT2+qR7bXSmUtgRVVUPS369jahxLqq9M7cYwPMAQvZGbqqe42SdztGRk01n1aRS+3sqapxl355/Gsux5fnfPvGXUaOv9hdKP33ss1FDmpGvvUtZn2URiS3bjTO5gIedjjFbOU/7u6j58MgN0d8NKb0ud2Jke+4cUcvGr/8FOCu0UtHxnGRToxZgy7XvE1wkQ4rwkDag0t0qtbuB56j3FqCn2WJeqb2gkoe0SsiazCkrAMpQtNJ4E2eRG921t2FuGoeVLqoxRydrb5HRRRgDrJocUiXJePwWPU8vYU2H3O+0ktT1SSwwDfqL4pRvvNVu4/t7/XssTDLbRSPq0NJmjuPKUfYclcbb9cZo1Dg5YLVXGh8VhOWxxrOs/lkuSKN8mW+fMFpr/8XkC0wrRrna7zopB3JAz3Nupfvq/KHF9b6JaOKf/+ubnvzy736hPBHVTqjMNGtvgn/t9B98+2tf/n4uhZ8CTqnDi+v9s5Q6HEq987Nf+erPXnwxg58Brvyd2A6zqAa2I4vrtVmwHQ3YXvQ/GfxcwNZZy1GwCU9nLee8lqOL6wOz1HKirZZ8Cj4fKums/ESopLPy88CFvrPyEyzXUfmxOcSsja0zKz8VKumsfBpkqqSz8lPAZ2utM214MvSHA5pO9GcCmhmCbcufoTkXsneiOd8Gb2Z3hTtfQnXe+cLn3/ahj/7n+JGs8GMun/d95bt/+O0jTQYoI/gb/uZjf/uvf/WTUsaw4zpVxmPgOc0IVlPiDGP3AIMpyXMlre/0T2w+xPvQLx9XRyhNsqSmXmsJrahN9Dx+AG9mVoJMwzsIOhwI+vFffDHKmhiY8nYSOe1EnikzMqrPQOSgJXAARiwBtaNKnCCxyBgqMcBB9mKRjRvwKyL7tJPNgg2vTIMMeNaBtWTYWDtdDqwdssR+/iQLQKIEy6vG5cCsXFrP6+DyaOColcvzHN5T3k4uzwGXuMv4JuplcImhJgGX1jjnSCwwCFzipaACOEmYStqtxEFDZgcrxO7yZIVxdihldxGcjSaLDHjSgSPJqL0e8VdOJ/hrV3hdYsI4mwrjSCYME8jSVCCJC2RwVoGYkegQyInAfKtAzgBT3k6BHHWBnC+zXqy2RSDW2ieQg7X2eRLW2idwz5egTmsely8iAILh5CU6Q2KFCa/IqjD+dl0SGkvqxu6zxcDuYthNteR5By5IFtoru0r1SjzPi7iEhpJh/5q+LvOOkQrsWJvAEFmSimxsPpENzSKyU0E8rSI7DEx5Z/SUAG/Ja72hi5V3qUmqStMIzFTpFImFqKgkZ5p0CoGZ/h0mkZi2FXE3kdwVktyq5ArnO5XcCvhOFe6sA5cmy13V/HVJspRXfGAHdhswVcfnXX6pOp5MX1eaOJ9PxXmyXf/6JoZNmCTHUrkucbn2NaW5hTHZ+T/c7WpxBv7NcpyBbY78GNumStNwu0gLidS7LEm8Mzj9zCXcevirq0mqHaednVQ7DqWvdTcmzg5wSwSS+5vULzHqzXrC1OZDnQwcDgyc6/YOfxS6+9EG0T2sdbKWnn3I6XNRph36rBPEGo4RdMRfgWcEIQUnJ5g5NHMOYo6ImCHq9m54Hlpq0CC72W/dgZUF7wVpLccsAeoBqyMZ9Br656rhqGroS2pg4VCbq4DjGnIEGoX278+Kb8EdkJiXyVfLN84c+HRU+zBuKU66u2a5eV2zeA7XDPg8rlkoNcM1Az6ra8Z1CvO4ZgHbDNcsYJvhQYBtVtfMa5nLNWurpemahUpmuGahkhmuGfBZXTMOv8/jmlFqNtcsVDLDNQPZrK4Z8FldszY8TdcsoJnhmgU0MwTblr/pa4XsM1yzNngzuyvc+dyluGaUmdU1c1yn4mCyieq4a8aMPHXNcjNds1zqmlnislyzQFCbawZsVtfMiTwTB9fMQoxKEKRw1wxq3TUj4a5ZbjbXzMnucM0cmLlmcWpNLfHzumaBozbXLJrDNQMuccfBNbNAohJw6a4ZCXfN4NIs9f2pZ5abzTNLuW3zzByYeWb+mnlm+XbPLJXFkUwWP6dnxoHfGY4ZbM/mmHHwSEoeB78MabhfhhDcLyPhfhmRzja/bH1wy14ZvLLbZ3PKotmcMgdmTpkLJ3PKXDiZU5a+BqcsldWxNln9XE7Zjr0zfDLOq87iks3qjuWDO5aqzzRycneMRJs7tiN4Y8RYzRlLZvHFVs/mirm8Ulds62yeWKHdE3OhZZ5Y+ho8sVSGJ9v17ZI9sULwxGDdPTE4bvPE2HXZ6YiNtvthzlqHH+bMZH5Y+hr8MGcGuCV+Dj+sEPwwqJ7LD2v1aDM3zOnJ3DB/BZ7Rc/luGKTM4YaltRyzxM/nhjmued2wQ7hhOF8tbphCZSRoAM7O5mu7CZl91Wyvjn42Ti0VTsV+kYhBTrZADhvkRAvkhEHOtEBOGuRsC+SUQc41IeaYLEUB6UZKnyZ9bBm0peHWSu0rIul5zpcTtwxhVjbgT+f1tUgI0FOlrESPSlRrjytMeNQuETq/qEnBMYM83wI5YZDpxU2aYksdUVT4MIfbYWqkmf2QQU63QKYNcqoJESMnR7bknxeGo/b1XEv+YwZ5tgVywiDn2zGcBcORHokRAitZ9PkQ4ehzxJVrn6flVsdvqSAQnocqnOMndn0nm9ohrzJZe6sEcCpNnEwTJ9LEuWg8ngZ/QoD+BShNCM0bxdPExyu134lZ1ZDxqziN55dNroqqH1sZX/PoMsX8p9l6HxPztxvorm786LNv+GpprNT48NcO/U15rLvx/dNveEd+bFHj789/+tdLY4ONythoSFfCt8Uh75JQdih8r4bvS8P3ZeH7cPjeE74vD99XhO/c2iYDvH2sAU1mdOs3jk0k2ycY828deykJRsKXj72MBNbtNm7Nu7G+pn7d2Ebf9L5l7CWUM1tW3zp2U7Klvnns+mRr/eaxHb5dfcPYNjKY+aiPj92QbKivHVuXjNfXj23i4r1RTg5sYp1l0/u45uk49mXTRHKI9MjxieTxA8nGg3UDNGoPMyzv8G9lfaOEgKuSHUCuOH4gzdjzMOF1Iv2GwBALtIIro44fSFYdT1Ya4jR3l9ByUChDCYAByDAm0FNoy10GEeeT6wURqgs91lF3j4andU7Zcqf6loN1A4jAkeR6/5ZYFesM2JtcD6RLVHtGSGSbfUBgiAXS1SXQ0Ut1gQ7PDZEjoiNDCaCXEyjCmEBPPs1tJOsWAqdr5DgS8E9GlAswQ9QFVQKBqM/Z72nLLYp0PsZFW1BuSVsNdyDp6sRtkkwmLS85eU24XeH4gfr1SDXDvFEkWp6yC9Eo1pURZcmVFuEdwXhD0HpIo1UU0gsWoAzDFUG6NF8QhLdHm5Ah14VMfQai9XvIfUVTNTIhr+TShRYRX4GIoX9HAmmZiAPNxw+MbUo2pi8q4GwdQNfXM+Svp72XHWfoXu/aMOz8XHewbgCRXU5u9m/GKyVcU25ONcUzGhOcmTIEhlggxqigKabJWW6oZm2+BWWrpkBPyobnRtTL7LYOEbqWFbG11F09jr+11ilb6lS/7GDdACJwONns3xZYFWsN2JdsBtIvqj0jJLIIGxAYYoFYKRyDjj6qC3R4bojE5WlBCaBPRznBmEBPMc1tJOu8qNM13NQOI8oFmCHqhyqBQFRz9qttuUURd9AF0eaVW9JWwx1I+jtxmyQXuH6Qk1f2DEg/NiPVDPN1mX5zliwVcpW7vWRElqpFeEcwoYeiWX1topBeqDt6/3Tp0nxBEN4ebUKGXBcy9aX9s+r9M1WNTMgcDnH6XcRdiBj6b1b/zETc1O/1yXWZfpvkXb/X4oDfQGsvOc7U5AbXhSHnZs3B+pqUi0Jyk38zTpM1QU9ucj1JbkizGhOs+BoKUJMREAujQVNSi+y5oZp14hakrZoCRSkbnhtRs2VB6gKplWQbdVeO44Fvc8oWO9UvpdVSqoeSl/i3MauA1gRYS14CZIAatqVZIRHPPaAANRkBcRtYnVw1qkvVIaV6SHRkSAEQHXCcULSwVXmExQFgybTDTY2JMEM0kGBNAYHoSme/0pZbFOnQpou2qNyStpruQDLQidskOeb6QU5exzgzjX68BKk2MWf6nc/Ug1rqZkQWq0V4RzChh6JZtbYmkWaoO3r/dK2g+YIgvEVaVGOh+qcLOR9Ug9aveP+cRTXokE3FYGoj+jl22RRxqhjoNzfXZfptdLt+b8PFG6e9u4/r/L1rQ8m5mWjhIp9s9W/GaeCklmwNmjLexgSHaw0FqJ2J7kxTUoucMcFh2xakrZoCRZ1saMOX1AVSufHMKGVmvMEpW+RUN1r0ezDZ4t/qLfp9ZbIFyFXUsKFFv1frELGhALnrN2xcQ64rmRF26veg6MiQAriSo96GE4pWt+k3WBwAlkw7jGSnEESuHxsMUE8RqUHackPRtZwzD6JdqPyStpruQFJvEum5oame6gc5TbBXST+2INXk2jRvpt/Fpn4PcpOjjMiioN8IJvRQNOvKTv1GQQ1G/3StoPlEP9x6i7Soxmr1TxdyMagGrT/o/XMW1aBDNhVjwOnfqv6ZirhFv8ddDzr1e4O8hi5PX6cByAbLAzj8WNt+T69RxzUjc4AZAaIc8DQHttMmY/qAd32FpzfKUTOn8gDzhdFGbu/YaA8/eKCLtr9D+G3EjhJbAHKFJ58hudyTXyI57EmF6pZ58mmSSz35FMkhTxKwWuIpzkIv9gPKPePxr/Kojse36YjheLxV+ynH4808usfj9TqQMR6v4TE4Hq+mqGKmmzRbiy1IvN6TigHfYMlkHTNKdmcla5lw67ltS/51PMa35O/nsWFL/tVihvw7vKhi3zd7UuHumxzL9VvyZ1V685b8aT1fsiV/Us+tW4gi89zCFJ6nLZ5sDOSQvC6QQ3KNI7oFcmKeL4McPV/KlFkIJrYQoufZ2JJ/NmeTMq6kHOPUtR52f2ZhjAO33II5ZleJ94wtsbs4x4bs0s2xql3QObZUzFDbjYGZZlJLSCGptZerfVYnwNU88QQiJokEbuRN3hSv4nX9TezzjJPbborPQmnjGUrdZh/Fx8tvik8L+jTQl2fQW2+KTwr6CaC3ZlBEf0zQH8WTE9P6E28xOJPwZwWfZhb+PQmD34fQFe/nYw6nj2qCSQTg5UwyY+a2nHevmzA4XtzoMelwDh8ulOICgkbBUsvJTFDVcodsOnPt2Zguh2xXk411CWXLhWwrqd6zESMK2VYJm2crhWxX6PpuS7H9MWRDTIoRK1t3yNZrYTeltIvLs9kt89HYgiSnRy4p6cG2Lz0IRSiIDZ54siZp6bb46JZeS61q1F5Oiuihz/snxyNdudDj0QDedOPBco8R8KYrB5Z55IA3tTjb4Voxj2aYl6aYOYAcsHIcNGBkI1rA1s0NhY6JkHIrplqGaTjFtJQpuGMqMOo4piqTScdUwj90TOxfasXUlWHqSTGt4Coxx1QmKuCYVnGnhGPiqLxhGoUmWShdZaCVvVVRf7Vajap/Phb3PRpb2GbV3nqFsE1FgVqV1H7JSlLRveYEhH7Z07dp1+YryYRd0ja9NM/L6v3j8X/w9I56TQaqQvTatvWleW6sD4zHuz29tY5pup08LF9wL0uWZ3Mdu3ePp9fXMZKvJg96jX5kedZoQyj30Su9WvtG79feSa6mwyTU3pdrJGOK/klPiAwmtY/F8Y6Ov4+q6CqUOqHjND7NVkECU90EmD6rZE/jC9EYvxaAtJQvGZNQ/mPvZCO6AUlWGtH23FGuzJW+EOOyGpRvKdh6iUGa5qyLpPqVxhcsUzy5NgqFf8g91GxjzABJYXvujK4UoAjJ89wdcX2E1WqsmNwQRTa+6FrhiNCZHlWzYVG/OvPqaGisT4+FMBytjfJV+m6+8c3oFbqsQjte6qx7ynhVtAWw3pW+sImgXggvepzpAkgcsN6b5iAWWGdx1F/YultnGSTLfhTJu4onk9ieTADDLgB2X0rlubV/8urISnH1DvnDiwwCVtVfSjxlv8Gl5QEHcieAxsXw1subVkX8rZIscnqJxUYMRkbLIe5sLQc7TdiXt67s7Xkufiykb0lFe0kYRIb5cpQ7SiuN88OTtd74UQbuytroaG8j9/JeFftbrp+AqbXRe3q93dhWZvtKj3NLZVdKTOOtQKUKH9XdlYJa3o/i0Wh/6imgtEto6Mq66N2923NPK0xduTr6w152gYNRe1V19yz2jR3QaO7a6L29GDxny9qljTVrnFb28LatjVqZPEpstpPJdgbfxvJ7xt5CBJay9KIJLGXle+xizlhovF+t3snQYVhNGVKdibPy7IBlgd/tuWO1wJa6xAchqTer4BhvWduJ9OkyrSqZ/jF3sOebla1GOOPxsaFGjn7ZiIko0xlM184sIrTNrmqGILMDjcJU46mwffmzBqQXZjz8tUHohhnkMwaBtwyiVXMjLZPzxw0C6SnhYu3M6PYcjo6lzy/cnnsqpI/Vtue4pMRbAqng9LDd2TDAVFbL/2cQGiKDsL7sbZrV+1aD0CaZwF7AOlu7tIrmGFbzaKj9cH577l2h9vPDdtTA8jyL9X0dPgM7oW8xNyJ5+dRUr7o+W10IjWj/Of057AAfvSn6J7XWD9gwMYqTcqNXJYFaxV/go2o7TfOeUZoN6l8MsKeAfcnSkrZl/7Jei+PRd/XsG4++rWfPePRNPavj0df17B6PvuLFaBIr9sOA8RQYzytduiF6TmS9AFnWTpIUflKl8Rhb6Kydmi3EClJuS/wj5X+rfaUNWqV2NDce/brGirfZV9qjRbeRIbqtr7/N14I30HssI42SNce7DOIbA5yQJwTRBgJ//aBloNWyVv6AIKvj12lcNoWtxy3HA/AW/XgA54m0rZ9ej5EpZLv54RrzwuGtcDwAWtdGn+26IfoJNsNapGt77vlS83jAYDLgeLQZejgZssMBMgltSI/RtbtY57sbxBoQbShUocIkBv51Ivj8cCN3Kz4HQwsTPD3VRU1fTW1S3XHcnJhYbQcmMGEjk9nA0kweayaPNpOsn1HytJ+1qEzktuRPjfjzCM/GWWLhHJcidUSHHWqMnI3zzChNjTk20Q0Lgp3By8TVCW/HCLdpDV/5i2wy+xSTJ44VfCqeqj2Wb7yYe0CMyWKLciFHGhk3J7gW3FjOIBxRgQi0wYzrWTwP+VQIIPtnsZGIwIN845ZzFEx6/BwFA0Q1nGSQEsjka3uS9Uf9SzMXaqsC04yhnImI01MTXV7ukI5whB2EYYgwCPtJm0MEHgf/2kKwQ46Qp9AchGHIANkQDf8GyAZwtyUF7DtjjY8O+cMSrA8v56qTTDFdNqdYjy1mbwhgutDI1b5lDkJXvciPTxmk8Z3PfNZ+T4Af1EqiJfzkXk/JvK0e7JMsRXxCTlEXv58jD++jowzQXY0X83JtimPdGgI0K3C/L27k9tGHpM6FVywh1bWPpHaJPZDEt9KVaHMmTb+wRI9HHqi9N+ce4JlFjIZ2sRcvX1qk40NWq7UpxFG5qk6K5gkGoI85X1o01tXIQUGximPmh26+EIuoLqZkXWFKFnq36yiLEhxI2cVH1kXxZ21OJ32JJ40hVQGrJ0dB0i0384boc4uMmnP9zPe+5JR9jtlCfNbTSH88lvNoUjClr30Aa4+Ts2gi90uI+i2PnbLZlOaKXT1FVTFNq4T2iOqxtQeQOdsDoTrrXFg4XanxuwuNE5gKQDb5VkDC3apRxrkaWe5FMNMVhufcWDeiSGmjR7XS1kuTJN23UnturKC2RSy4XGW1b3ksD7mRC51+p0/7WDIr87fnF5bwe044mY3cK5Ycn5iuPFIffZ8NUK9s5NXqeJvWzJV7mA50LannaG0f/UJbY8cGnEylvzdgsuEXLo3b8wNy9g2c10lRJqNqVoVXdP0eAtCOAi2Ea0oKxbQcv5xpfyH2GWP1BUbrOAwG3zHIARbwAwQJxD8a3oICqQAWgk0J1jjUhyH/3CIRoCjOWbU9J9O+pCd6cWYRYorsx9uulvppMufSrf1QGESl6TJ5T0k/RrfETwVT2GKLjyzKTO3hZvJQMzndTB5rJk80kyebyVNZUgb6KJTq+fyoNcj70CUmqA36HTwVMbOTY2zPiMcKqEXhFuwtdmCvuYQafFx9H03w7BJ1gKL1pG4xXFQ+2UtyBFU6FffAcAGkr+jNS3/WRBHzuegXfeqD0ni+o3H6qfbv0TnvkDrUnGvkHsJM3dO0XE6EiuZrD0q4oPvfzVduRScFYyTfC0aNG2AVA02so/sao6+dF/c+fiegqUF7YVXGCZMQNEnSRhLPxSHN2CX/UdL5oPriKRI/VMJzhdqZsGe1+fAc2Rk6jWhR20m6KD1JB4aCjT9RepKO1u8NI9IpG9pbR5aTBmmOLCKqZVRJh4hjLDzJMkF01HIKzwZhggqH8nS8CKU3W1SW+ivFDk5tPoH2NEHo1BNM/jzBnNAT06uIXyRd1W8Nx2U/Z3qUO0LZc4Ii5NZEKxrRbbQbcUaNoGqTdByLdTaAoRttaII0zqrlsvEQ39hSh+RoMN15H7obPXADTwW6cN5iyaVe1l71WPt1tS/oWLHePWMTNRm1J33G7mdmu8ApdaJYZ0o9oxSbQ61U+2Zn5sHAlb8TG5tMhe1ksV6dBZsifcLWvhfawkqGrbMWtmEmwtNZC7s1VcupYr1nllrYYNhSS9hZjXhCJZ2Vs0/RKumsnO2MidB3Vs6uR1V+eg4xy2OaWTn7B62SzsrZZmiVdFbObsRZW4vtfi14MvRsBzQ0nejZNThr87GfryV/hob9frO2D51rNokqIoskns+hOrNtezX5tG17hSJt956xyRWGHdfpWLcWcOCCjVAMI2wxY2uUfkSK5LM5XQNQ0cZVZm5sKox1PEObCi1k73vVB9Kto7MRZBreQRC7pI2g5g5bmlhz3VmI1KxYNMXsP+B5xC71VEL3TlgCajkPTQcgMWwM5VjCguwRke2bOW3RQmTzUze8cjWFAVnUEJAbE4011gKcNRYm0h2eA+kG2YXOZc+sXFrP6+BSUXFx1MolO6JNlzq5VGhc4o7ZTit7Apd9loBLa5xndW2nQeCSS0O4VlRbcNVsObbeci+D7cznBgNjjIUe51YbTH2HtS3W+M58bde3dSG9cn2Fv/p2WzZ9mCxYInFZsF7Tund4YceG4d5Z5WE2okMeBITFeqs4sO7WJzrFQcxXSh6z71wNa4colEAI1tTP2x5sQXwPtm3pXSjAVm1E5vmr2orN89XsXOaihmUSzlLbi4wG+17kXtslm+oH62G+u3/QXj24wJq9DjVQxIXD3gv/mr6OepdIZcWyUftedd+i3DzpMLu0Zh4wsYioiaZVXDhAM8+c2DJB+8kP/tIL8ux2kn6kKnQIWZkKnSYxiGpKaKZCt2kXN0+7xYLnavYBIjRttGeFQdu5Y0L1LjPt70+1jFHaN3VrD7VWK5u7/X1PNzoXtiAHFeScUKsKcpzIX5ebHFmacDmyEteqc93NPd/ZUYlwQKa7dQv08zZmYxK04VtGA9bNWJy17dZV49gUyI9U2rGMUdtZr3B2cwe4h6CzgxypUhAOaVUKTiv5q04s8DWlnhl8c796pUl72CMucwlLtoO7jfxp4jbW1wvew4/ZTck9RjUnh9r6Mi5MJse0B3PsydtIO8npuP4KvLlfvZruV3ezhj7OQcsh0aIzIN7znocUbQaWnaxYJyC05Lqf1oI76fvVe3y7ea/XUJmrhsOqgZt7wFK1Xeu0vx+G9OMJSC7dr27FiQEprsW5Y8IhWFKeuWzXOrM9Nqpr5/qh/C24fxCEwhe3RPJDmYXZIgARt6iBF17MXjiqX/IXZqLMwVh+UJQO2ZW0rfkvh+LYXcxpXMw8bmfe4m+4lXL/8jo7i6cb+wtuIZPGXO1LepFDlBcJ9eIMjyVvTpng7a4GKHA1KHW4WKdzzyglx1Cl2j2LvHlZyt+JTY4L2I4UtRI0A5ucU2Frdzzy5hgKW2ctcqeEp7MW+TXUwoFjlphm1CIHuVlLcGMgLVTSWbkcQ1XSWbmcLaHvrFxeEpXjf88mZvnZzVqyyuXiqpLOyuUYqpLOyuWizdZacrybeDL0cmKFphO9HMPZmk+edTN/hkbu6GztI194FonKMUQSJ2NUZ7YxxuTTNsZAUWic9gGFKhzXobx+FMa9EU7qumOoX9IgiWPIrVMljRDMJem9+dQx5DxG6hjKutDtZ/dUTcM7CJJHKoKaQxmtBUx5O4mUYwghOAmDpuUQyX0zbvTZxy03UGZT9JPgl/fkIeJVQbaMH4O3rLhuvTGymf/yyk1BBgyOIb8zYKy5RVfvbzqGbt/gcsi57JqVS+t5HVzK/RVHrVzKMVTeTi7lIUncOk+qJoFL7hPX6C6DLObsfncJAC75GUVzDPkVGnMMR3QRuoYdXdFljAXHkIvK7eSRBg64Sr1FGXaOAoXTqOYkI4twDssMfj4dpPOdjuFQh6PcPas8zEZ0yEPOr3hvlYfcH+XtlAeeodo4xrtT49tMRS1rTo6kYCO9PpmTUwxDPoBXy9nhibPDPWi60J+Ta3iLko6fAoNVH/W7kwFYTRUkeIb8FKm9Bre5mvS67Hz8Yx3LZefS4a557xPuGSL3Ts8w86NH5xPXzNlTXn60JNMqLUXGZhEWjmH7BIS7ljSn0C/daN4XVEiOoanQsyS4289kZiqEN21qp2vY9FytA8NyZpGZn0vMB8eQK+RgONWy4D1xb5+9Bod7MJwTljOFWH2wT3UweCupDgbPsMf8TRomlWM66QxSLDa9q9FUoDqDh0CLrc7GWXaOm1bkXRk0e3RroWv90D73sQDQYWosGciF4rpMo8U9wwHzvPLBy3XlSHUiOEGpTgTHkGvujPgwW0AsLcQj5oz0cLTPnLGiu0pt1J8L1J8ueA/XZJBVByOaLf1tfdkdQxdj1oPDmUI7bY4M/RWZNx3DcuoYBretey5anhUtmjuEjof89FMrspP8cBHV8aOvVktwlhFOqAWCza+TN0cNpblqOK8aikkZLIT8DVeYRbgvjeRSx9CKm9+vSF/qDLLNBGcQPs2JOzAY59yJO6EfyzEnLoTtIo2KxPtIsCOm6RZpgiBLlWRQeRLk61J8RSNU0yEjb01WvplXTpyygaDp7FCYXTGtheUDas6lPt5SkfsUQtB0MlQuwyb/DGyjijk0scnfBFuimXcTmzxAoc+wyTcRtqYn6sGtJno5k6BPJJEmevkowpwhktcnzM3hGIAQtblywpFhluMiHFkReTgqAp6ml6cibZ6XipCr6UMpR1ZEDqAA5GrzgwiQFX5uP0juiBlKN48afLtSP4i15uAH6f5IGURuEW33g7IAWZ9bpPKsBEH9rB5Cpx8kp0x55/CDjsRh1DfbYGNkcBXkGJidV4AseEa6ghRD53dQuOEIoz6/8gQXLM+1+kFcJOt9euZwZoeJW+3uxY/78uzEUacfNNu4Lx/B7Lbbb7k/5pLKN/Wxy0JmwdszS44fZJ4AfhBz/RAO5Mr5Vj8IC2nzT7eTwRVMx/Iw0uPfuiyceX6KxWTh7k/mHGZDkhvzZoRidnd8Zpx21oFd7t/M0G3mBoWRXOEwls3DeGBDfOoX2a265ibLHWoZ0gmQmTv0ap3XkBdi93oo+JGN11z62zKwBDfIQ2CZz5iNgC4NfqbHv6avPuKE2GLqHrW4QdlVIMFrnF1as3nR8hDbg8jmB83mROvHy2b6QYcKuki3xYPWsGoq5N5kweRpKoTPaGqHH2S+42rcT4Sm6B6ngBQ/Sv2gkgUVUy0L/uRgm+vg0aTMkeaGZFc+F1mqi8FpcF1k46O7QakcfQhvc4A6/coQlW8bWlnUMtZPKsJkDkUwFnKbWXBuapB+PYlBWE4dlx23uEEecspcPNeOVCmC15YpRfqqMGnmFqU+cyC40PSDQlBK5nJWz4ANWUb+2YL3cPmr/JaUUd0Lta192f0gF1/ag4OPyeGhVq8idVWMBPdRMrM2t5dyRLTIb3Qjq+lGFyTITnJNM9VxF7e3WeYHpW3m4czgxmD/56jhqPtBXWaOfYodfGZ31pBchx90jJ3AHohqXueggBVe0Il+vKCF8oLOcUK/gBdUsFMQ5gX1MHze/Cbsgp1oL0EZb13qKAW7CMr8oV5cQ8Aj7i9xF4Heip5Jd1KZI1TjRgzAi7Qpxj9pO5O5OQM0L590S0UopfMWve5sLLAaH6Mz2Gn9hYb7MSmnqedq+iUhvOk8wuZ5TnP9R/anwnrx5sd+DYXoVyHr0RkPZa9IZzy6koHH5CqDtMjT8B3O0w14ntfA3oGvDw0AwxLboG5YdIsXCyr+Y3XtFehaLJYT3EUEvT5V/ZNdy0XEPEOjq68GsBr4zAbQtSqU4amreNhTJA0Kd4yQ8Ctd1Np2YRP6YA63Z3KTwY+h2Wu4bagQ7n0xK9A1cdObUDW1x0TMqfCJm6RnpV85vp+VeFByqw0nqP1SJPe52VqY4vErebxubrTCNbC76D1TuFvGNLMQ7mgh4ff2WN3dVjdXBqvmQa+Zxv9l6mYVHp3guI78YjZV6XcGdYZHb25/6kOv1O4PBKj7zpihDxFhUAOHxtDlaMxBhxIDiEFxQUPCm/YyZvcG2W4rvDW/80huDcLObsQZY1uU3Npm0/vuhlIHBEWmRjV/FW8UOoaC5uPDqOXZnmRdKHQa8qrRuTjdATo9pUYvJ57DbgFjC4vfEOZhJmTnYyrSDNTRaBIhUSmJsOQiZLeZRGgMc2eZYdEVXikWv0NM+pBiKQYsRWGhVczUOBabBDOBCcLW0a7ACoui1qWChtuHKjJXtwg8cCmY/9ReqhPBYUKsRt0Zfbcr7v17uBqsm+/dEntm7kzI/DQRfLZDaH4qDvapzEA62NK1dJotWCWdd660NIDOvAVbNEKpUEBn3oIZYv0rawpu+zIh6howBgzX51SIfmmVmWsJkU3IEiLt4k2B9gdmDwcsujItxRKuA0PdUizeJ9jjJSy0izeFYbGmYDoYmkLXmgWm2ptCxwqpoL0pbtfwHQiSJgUPLm2J++UfhpqkIiHONXtD1GY0RE2qoQVJdGAhLgY09TgxnODplYeAIwew14EcD+IKInKGTJzGwekhk38Xn0xUvVF723hjp1SP3IeMNYSnH1WFALt/jGWwNsFpXaflHiQjdhTygSf6eXS7i6uno82AcjNXb0chbRSV22J7YxEOv9fg3q9JzO/iQoVNcmlD8keY+4R5Cz8gitx87A+3X3WZS4KHZzj8yi+6SYrDVCrg6E1x0MA6oVV9c39cerRgI3Zlb73EiF2SIMPZLAyeHWLSSU9LcxROxz118CY9m2XwpXW2E272NMqlA6I6j5OezTL4sM5U3ejpmnbcbmU5rKidkfGjbHnTFUqcG1lMktMgNzdWvMJeMOKlxmciLcPZ3nbOZGzPsQcrPfJUt23zdhgKe9r4MjbRIGy3Uj57fIkWXh3l7aCgwiTsU5tsbKttauSqY11+WottXfiebBYlC45jehippBBEndmAv+DapWeWcPtxz/ykkdZ1/YgSrPXoiJKdsLOzdL4zrN7jBj/yXWF1TmzoEJJd6cNrn2FkYCLdH9DqNkorVbIQhpUo+VWXnpuMJ40jUciTyEftvynBbrOUYPaiZbRnST3w0UvaSDkt8epcllr8D9lfqN1n+qVebSC0HWjHhZIr6W2z3bNvwOGT6pdrH4Jb9UGuy6r9n0lpbSTR6Rp46I0m2Qx652LalyVPHdiyL9RBtq8UGuWH2BNf+7AjMLzKzZvm384Qk08HyfwaKSlAEQpkBxUIeAdnOSlmvz7OWdGpxrtsf2Kp8SMr5lMAbYotNb5nEL/vzCHfMYi76wbRMu2Rwpb4GS31lgMuaeYnlNKGYTjKaRut8TjxZp2hZT+ikL3rDafoGi8jhWZLFDv21v40ZuevZGAbjdFc++Lf/sSUxbZNV/kR6EOf/jTnUsmUFG+QJJPSOtR2OyffsKyG15XbTni81Ot3bW7cmAlKN5dot3Sp8RZeOAZgLwnVcuK61HjC+KUhnB9T+i40PneLtRDjFtj9OOxtHHfyvlIMRxJKjW9Fk2NsfxQLKmpnHHON/v/N+ox+1yJqLEwPrZQa/8UAvgfSAJ82gO+AtP4pbd8SPYl3pr2PLqF/RX/a0OjK/xSNyZkjhxka6wa5G6IXtVxo6LgI3bXVGa1xFo2NwWjdKXZzuyKKUljj1uhWUkuNz7dARCvwJkSnCD9dNmpBXJagqqZ6v2tr84Y1K63dniIDvBnZtpvTMWeUg/NJDtFZFxRbJZ3Px2I0mWv8s3GbHQlz3dEvglQxeBx6oyh7xoNavF9vLWL4N0Ukwi6EUuOgftM8e3sLb7YFNXAHFVui/6FS6kzKoQ6ba2z2tv8Iuw6i9OW7vNgOBnZKjEcfVK2F8egDTAtrH1fPSc9muNnQr518WeHyYFpq73HrQpDYk7gptaP6ha8I1y1sfjcacrX360fStVsWfS9OclClaav+X33Q2dv3xr0MDdqqzXmA8dg4V9PT+czucLhIncu7Ahmekc3kebbgZegx/NaLIVYZY72tDI9n2EZe1dB3FsNOb1E5rBQGp/Y5kGAWHnRkNI7BNJ715hYzybAXfdpqO4tL+DL+XB2e5yp2UjqqHull8rzIftKGybMvIegItNw1BZ9tRpzFyuVD22RYgXabEWbha814bTKtoLYtCXDo1j+FeXJkawkW3+eeW/+ka6Itts9Vrz5d5hbTUJdv8TiXZ6KXhQ4IdR3+ie4QyHL5DbnNcL5MtwjPCNPkRuRm5GhGLyIzIjSPFWlZ1Zrz2sKAiLaQTZeiEBY46ahfHqvKZvVrOiSCsvrlr4ugrH7N70RQVr/iECIord/2nMQe/5TjboE73c1qgbpzthdUW2l0x7GeFrInobm+BT4127ZgHm6lLW6esttNSTBtWaonrqOF+0+lkXTdj2wBBl2EavstR20nnC20eLjJA6hhJu57Cmz1yF91kagtN3hEKHUE/Y9tlbKNBCD2Of2grUPaqlBza51FhX2vmgfmwq2v/OSpvaa3vtruNluk8tp8MtISKvQNVs24feHxifNBiaLHaM31hyb6HzuANn3+TdPTNJf74xZfMXHcrph6S8DKgly+bbHZ1Jogq+2zplYwRm2fNbVmeGr7pqqFts9UjUmGGkybY/WkKa3hztAu+t2v5r44W/7xKLVHKUNYwu96tTU3l0U6q2tdfrW7W8NOtZabVTt6kwmAabcpHvdFm7pxQ7LOPrv8ffpgSxa+/GNb4LT60LkFDu2yOWnbuqBiB21rXgrTSYLNvuGXpzcFpsm5JJgJjHmCuoViO9JfBGa/R4kMMhVySSwIoVkPh/gqUxoKneXC2Zb45GximY49XD5NhRa3U6DOwjn8/JruFG1tKZ9R8UuXRkAIWtgCUEpA0M/W/ZLZpE3io64wk7Fwq6++hWukbfHOZ1l+721LnNUCpzOpJwqSLG7il8yYi2a7xbXo4tFjXx0KF1T7IomtG3u9Hjloj2hbFFkr650xXk07U8t982OBFa1j2EzRQjSdy937NUm02DqTxPf1xPlHh21xO1y8aschsiNftqfWJxd2GiNNYt5DUg9dMaMpxzkkQVuNDbTF4/ot4jlWs+gw4QSNQFzeYgE8fmlTWTzyqWtblKUy8ejYQo5v5RuVW4llTHBqcqKLg4HbddyL8F5pDGUf6wGmM4IFnfGyDpCzsKvHfvkRwaT4azSCzuz2PVYffiyp7qcsQX59AOThDuA9+ydyj3MlBoHG9BNrm0TaHiPAoU/onf1K4K+NscA1kTvExNUPn/mNKAl3Quj6noS7B87oydxOF/ck3Rw/Ts+X+J1BfkdQrsaeWLNSIQrOGaaW6JPfaxTCG3LBLFJsYUq//SgE2NiK5iEov/2IQ5CC6hfdQl77IQy0LwRXSg6VeyFmQ3grYNCIyn2H5A3ZZBN0mJZ7+B0gMytsI5iiJjZ5AsIWwue1QGXANpJik5USNsIhgTatvim+6VHZlDaLEfHLpR6n6w+0afiXSU6x4TsJ2SBn3O0d+y5cIZYXMlkoiB8H9XidRfDs/h9h6g2YDM2Ah/fMQ/JbmmV9eN6OEvBgGLezLEdz2jjs1snOuRCCtd3hso/sHDd/osdyaNWUeExYm7NDVL7JOQ3M8jn20yDkQictqqy1Hzuh43kzAwQqwjzYLiui2FXYMNNlpsROigT0aRGiQSqisC9FqiriS1mcP7YiIcDnN6c0Q8XaZGBFKiri616cNDTC3HzpuIAXYC2AAspOh4fr9S4N/TConvf7JnS8IxPqCe0Z4ClHysTKGGhbw/XLFiZXxmfbW69Y9Iiq9+1fdjjMa04D0myZNCIVN0MIirr5hkQ7UOd53UmyfYXGV82LKIgXdmmWw6md8BMMdqzIi9S8SL8X0ZpH2NbgexjtGE6oJZVevxcZ9CKKkUtuJj1vVh+udAbDC7CekUqP+0paYomYzdblBExktfWVjRetr/xkautrrS3wikHtaX1la1XrK06YDiHrqiJd7ISZIrKAYa49YBMwi8rYWRUGiuneXOVRnZWs7a0XGSaK2m0QfpKTBSvdz8TM62We3qoYoE7eyvHyX+M0+GbFCf+dp9frpzhvI4/6vGaSr1CJ1fEr2X3PQV9tYNFdeDr5rGCqbewo6h68FMI2/PiXdcWchUbewuRU4RTCIUXFab6nRbqiOgSXySi1erJR8+vNCUyOx1xYJwz51awKC/THTD6J6GheyECyhd8DBfjsPyryc4SkXoqgOlYxvmT1ivoN0drzOT9jrOMEHDzX3LnYOFBiBDVU2kOm2ywc/gKxrgB/SzMLv9jGfUchyxNNOD+Wx2l1hzPKxhxFLzae9jP5dmGLoNrtxgnnG6KjxJckP5YR+MJPmBIn4gC4yUG3wGlVUXFNsknj6ZR2csFki62nz6YX6XhU3G7dy/udasxznST9DqvFoQwX1yexnDhuslIdEpTuF5JcT+AOqARzb/t9h1CRoi/ZG1Sf0bYTXvkFVWILHGsWj/xW3ljMyO4SriPX6emnIl0eoviDTkG/LZced87Vfobp1j/wfD8OAo+jOY3m3GuTo2vxfJ1h9eumcqYBhL65/IpHorPiFhiJFeGAfIXXalxECBncnFxyqH4tVibFfhygcZp7K+R42634vPZN1r6a0+nhxhty/960wbFQVD9NmlMMxCuxMx8pln55Ai8h9pg3X+eUcYj3rWz+2S730WkRHg+6flCZ52iBhl4seQRs1HMrITERmSHFa6CAKCI9AyHeg75mH1pwOv92TuXdOqbuHJM0PuH6RMF+Q4BbG7j/rGrXNthtCQpgcQ2M/tHFCwy9CqzZCf68LVGZblPTXuB4VJPyqHQLZiosq6D2TYWK8KRNjMLNjbaclNcFIfvQjBfKD0wp/VBj+mf5B3Sz2kNTU+Pxd1BJmRC6XMEbQEzo5iIn17gwpn5KMAkCyunVAmo1XR3VKeD0xgEO/6OnJhrspreUYfMfUyAuKeXF56lJCM5LEJZ4UZIi/su/GWEsagXCaNoOksByURS5GScZW7KalPeOVcdK9kLfk9FQT2U9x0xan/dcdanav0mRsWqeYAmI33gId7PRS0ZNz3GoSC/Vck3oRMOQwINhHE32zmC8OBadyv8N49aP3hcVHNdTtsIowZSY7cBem+0gqlnwX4jAguBVSz+P1kIQ7e974kG/bPDUz7eexb2A2XoWN63Oup61oGU9a6HWs9Bs3ZOBdlps3G5oaeS5a+RfWR3gvr/usf7G9BtJ1hpXjA2kywJfiDWqNFe3mB7YqhI8BOmmy0q6mNSWlQrN+/4IvlosmFLRmujm+iBXSlBrQTecCH/UWDWpvQ/rooR0XcUatX1T2pjhFwBy+V+B+wDtjtNou91jGm2xO06jTX4V4Dq/CvBaDCWPqzCUrNCtxCgWdDEgK6q6JpB1UF0ayBqqrhBkY5suFGQDDJcGWqScNTxqzG4lNLK5jVDrCYNaAICnsJbwd8SXy60Mlo3Bc1orDCL7h84s3TdE37ZANKsBeg6NRz/VszIe/asFycej5/TkPrAf6Nk7Hv2TnlzP9V09vQrMAVtYVJWejdpD/CK2ovP6/WIitYSgswWFE1pQQM6xXawTqAb+8bITVFoXfazsmNZFHyL0vzb6SDkInuUCW0KwBcmny3blD9MW/cCskopGP+VJISaI7lerlhqf8CQTE/3spV1eKpkI+Ue5vVG53ybD7eTUBzPxsJp0rshdYwpfm4zfphli+DzoOphmbvxHHVhUe7UWP0xbHTbN51K6OIiI9A5uquxmEwrXsTx+wP3GFcyaj0+s1rWSdpNeQJlWl6GjXAXt+V+8nQ20XWV558/Xvefc3HuTnZCQYFLZ9xg1KGicUpKxVLLP8oOUUpmOY5l21hrruFZZCauLfAziTCABcjHX2ho7OmL9QkVBAYmKCpWW8GGLrZY4OjUKOqG1lbHVxhZroFrm9/8/795nn5ub6DiugZV79n733u9+33e/H8/7PP/n/0zSdaboN9N0miY9ZkI9Vw/R6lSFEPUwbnL6u1LYqV5VQd/gFPKuUq5zCpWbX/M3pqLfMPHzTfh+owxUY68H1IGuvwo7xm7F7PeSvLc92urj2oNH/nco/+fz1M83dfpJv46X1l/3Ri66pbCR/Lf0qn2kvUXHqzY0btEvhhPPI0vPabxfv9k5jffod8k5jXfoF/46AonL3kO1nfvvxSl19ikT4HjxUGXtLv6MQzq9Dv9EfBhxeD+HdH0d3iN1QRx+WpC4OPyUNA1xiMpUBDNihq5sfvoEjRpzXCMxxxVvQ8KEawzSN48LG3GDhwz7F11QS2iQx1HosxofZlR8NfWYmxkWeMpU5HEr0B2QT1Ohk4L42WbX4q26PCk6MzYUOla3RiEVdDIfUYoaBDVIBGbHbAQDPD28uMPXRAmjOPQYn7DycslilioF1+1aXzpfmxPbkMwX8xLhtE5sqUEu1Z5Gy8znJlsrdjdtq4GnJ0IRne0BqYpt2sr0L4rokHDCzV5WTPjDEhlyJnpmeG+ZAvg5Pybq5YnOON0jdqixDPACd2ya0Z6CgxfDbLxC8qOpDmD3uTx7VMuCWAk2tC8KKRzqbu0FXiOeb76XSLfY9YgLd9VWRtnEzJgEZ/VucnxNf0xyFqtoeydS0DVYoa1jyf6yham7JLQ1Q1J/XG7PulHko+yVtkr0FPkjdrSd6piawdvEjrBMgp1NgiU/W6XRE5uRxJGwMoOAsVSSty+cbkzKfFY+Z/N5U8RdKAJj/jh5BhdgkVOhTfSL8IdB8eMlwYP3kPo5u8/nuJzCNlPbn8mqyM86b12QETrM+FSC11C93lYy9p2ITXqNeKBFr8Y7aW5tDcQd1Sl2q4awXfL0y7dDONVm58mOGntmouOCHlnElmKyRsMWVNysHVt5eyWYOVPp9IcCOtRojBfS3Y56ftHm1f7siCFqEIE4q6pavEIkye6h1EnOoyeua10iGADfWMiW0JG1s/e6ApcIbsDvqyxVUnGRFp0DGRuvDQ54iY+SlSBmZ8c9k2nLANXWNGRqqU9YqNzqh7UJVOdQ62nzMFlMbVW/wzYAw1t/jI+sa5thA9VT6JHd2rpmP6wtFyLd0Ei6YbJYo2cFfd5ywXQviLJ41FvNjhSrozmoJmTCDbqxtXWmx2/eu1B/VIelF+rLdPKl+rIwOCKNdlhaTXXBcQONUnz8PkxWuojtTulCwJXtu0raYnd8bz/N2c3GmwLMTLktEKTzya1BLydsm66xvftPagG6NSThfOXYdo1dKK07hZKcr02aunJ/2rK7jhZztLk/tZrj1IkAe+dTq8llsXY5q6O3kF1svdq8EDmZd+lN2jjlnZfrRnqklCraq2hToKLoZ3pzf/HqlLPkaVpUAfmmX+7qqEhQU3MU2xcWZb6P2li30Vm2Fldss9ZH3Yu9/YU0bupItF9T2l+UIBqZDjCAdlVt0oG6XKNPki0Pqdcwf8D2p10A3VkdTZuQiusOBX68f0KdTmHg+LIaDk0NOk3c8jxVDLk0R6IfRE5OQ4Bb42lNzYzbKc29npJfujpYBQlloN0Haqt/nmwtitn8AAXB8t7aVHzgU38qUmLNke3iRk6yfyV9UC29uJlDT/k+StoPcafblji2FHZH3S0NRqN4J0elPYp2L97ic/ShnPAFpVbM9tB/ZWwqZmLzJGNQZGvQGXZJW5AwzYjS0BNG8QjaJ7guG+Ig363xgblPu4WvKb2RHTX94m523XFjdl9rZppzNhAaVu3y+aa2GRrDHmJxV3OGeWpSnaP4O9BOJpttO/SEgUXhN8S6okPFm/C0ETiAdAN4llR+L4GQX+pQoSe6cQheIl3fKGVTwOIKIHtXiKJbFOxRQk1C9EutYVzWdkzmR+smX7QFUvUQhE2zqPWj/r8Z/LbRf6jYq2a6CboUl0ha75VGR5eqppoXaVlmTBYcfl4RfS2c5SYYJGwxpBvMXqEVy5Pbawi+gnTOyHqReCa9KuiNSUNwbp/uzXb83Hjf2X2UB6Yo1yLOD9lPLdFS390Ci2Bxz+5fml6sIU0EDhF++ALBEkNPAz1gE1F1TNyW1ndJvmiDn9RMt6fJMHkahIgcZj5s0+l1X2fzat5ANmfnk953eLdPS76w8SL9WtXpJXhePZvZK0iUntBLOcdnNV6nVe6sxhUv0YXLhDlb19rZ77x0m9KV5ev0qBZstTiBd2Jtp6OgjfQv1NH+iterB0ohZ48bkyVDtM8BNzgDrQvRAUtlLJl6qPx2ao80jn6Oq9n3lSZ3v9LxLnqTlYElfbJhlzYeKxyJVWrK7i04cmrkegsZK5cnZUlqDCEEFJW86Gx9frNRrIAE9PIcEBbFVZyPyVBEusPCcFT0Nk+LdB1SwMuzuwwiEXN/b2fcz8kqzd2tNHdb/Y0YYm7RLcXkb2XweqeOGSve2WySNFSsGFxXUqJ6yKhp7DFVVWyVsKXr8+mbpFXSd9pAGfQaNYPiXYiCNt2LwOhGpQoIRhdSao8xfSZ9cgkEVhcgDGwtutv61Jqk7Ldb6t+0gTufPo2GI9LyLmkGNCkdZXegt7CeaSFggokSq6l/2JrqmANHPqMbfDXuReiNYkYFBbNMvSQ9eYLsLTtL7jqb3AzGMmMsL1IG6NOkGUo9ejy7Sm1OJ2YMxDqzdxGwqyWa/PeXsKuASFWYq8rDTwp9I6MElEju26dcVUdkGVIlO7OhWZNcFZxqiH4yGktu20Z1Tes6pFpDyIqBXPJ4tp1xia5XPseaV0e8uCUI1l2fbU8loXqjzLUqTPUK2YX19ipPRy+v5yn7s15SZYpgrJdUOBEpc/WSKk/Zj/WSKk8ZbZVQ5Wkbdj1Pwb70kipTCe517In9QOp5ytIz4v4uW7ZeUuUpk7leUuUpKJdeUmXK7r6G9XIHtLkxgCP2FzhaQkoAHRnUImiJ0VmYde3hit2SURXQLyO95AxknBImTINQMK0Y34V92M6xslza8VMWS+PHhCjKBj8rcphwek0wmdKhMWGpAhZSAbmmkj9h8vZICKASZjWYDkMxuQaQpHQvTiguVC0+TTZm9Lt1IBMiWsBayryT/XEk88qE2DYqxg2Ib46rBDTJrQFUyY0hJyi3hoBwcpqUf2FJe1NhWrpxGiVkcAawLHmzJMfGZHdNuJh6kfj+PyuoS6deLkFdPL3Hh8Uq7+8Z/k8JZecPKhCfNhKyu5aMGgnTVjZdsiiXTVe6syTmieSGlES6kYJ1FigYylctizwajVGhxspWSfC9slUS0geNUNy8MJpv+DqmCgZ+9cJ5b9dcWRl520CAeASIj6BhQEIRgb+4pDkly+2eB6ZL0y1TLFCdscEtH3/TD978/o8ffViGQSU8deNd+z7z5q9e847dmEWV8A9/8+m/ev9NP7zpAySgXBsbfPNzNx36i0N/+/FPk7BH8j3DFevldbciDZ+XCa2NRfdaAMbj2RxE6YTTYW766J/Cydxm059DrgaqKJl8JiSwWH+qLYDosLX9FbVxl92Wl+buJDLu926RDJ7dzrLRzB4QT7UXFpiApQrR+vLggT8VuMgRwxD1ub+0YEp3pRyJe9XZ5icpG+9J1lmXtNjzMV5gczcCP0nFzbUE14YNNknZrytBNbZNNHu6vDDZTh5SjOtrEN4wAejm0nhObpzrh+U/pRwmJaBTY8WR2vFjteOjw2PBqg6RtUE0KlUjOzPZx9HrOXh33CNjF/MJCry1Rm5p7ZeJUtZT8UNbeA1i+ZhjO8UkKpGwY8oDIhmtlkg704mzuNfGYRQV2be1M+PLhXlJIqHTOsWLLGezTX23ZSI9RA2yDZOWV8VXn6x7bREsRpOrAknw3RAAIedrq1osmexRKJWO+QLAv9jqRBF7VAKRuxsSE6/uZXsEYrB2abfKgkOh21sChEaCchCwu3Epi022DAWBtDA9TaGKaOK3ozKqbGcpJ20tisP329xbyyJDr+vZTFsSOjW6HDQ+XOzuJBpp+Fc0LtUs6ad4hfcObLlk0Lfsp1ejzNC2NoLp0aoWReM9hGZXsfVqNKDgaKSzkVqOZskwA8myF3a90brFI+GhE22nb9+NZjs4pjd3NdtJo+OP64c1giVFZXPa+FSNocZJoiyj6OqOhlH6GJhu/XVq4Qr8PvQ1w0/kqGuI+eRP13hDALdcKOUcqBPeRnbSl+1B1taWhpdLLTSZYsGHp/nGNBzkL1gerSuP9JPnE4xRxKSQOKUgRIdUjmvrARGyauPaPa4CNnoPXCKoylRkwvKQlTkOUyeXqq7EP/Kg+CRXVTfnVRHluKNXa8rJXm2vvvAI7U8mwd4ei3Y37U+VSYJfID/LezX8QuNGlgd5r6PT/q+sY+2MnZT9QulSj93BTolFMPt1tJWilwnnWf0lwpAdbfX3zuZe/rtoe/Z5+Rl2s2tQb2ZfV1y0lBsiotZShvWvqp8wqYYzeF9CT7jp9yFqT27a/WkfSpRSttm30A9FzRHuqi+DjO9fUDbJkZn5sZtxCiAh+3iTmZ9W0Qv0yITaQ6+IEzqnXuKTeFNEBIupja+YfT9xDLDQGYGxp7XN/J10Peuz6Q7HymWKG+sTPXNyfZ5HVKvm5eEh9axm5fKQEV/ihAT4ZPeRnRtudXuIwdeSn7Bt4R5cOuMFaTotF8cF5lPFn0zXs3O170EvfHnR3EZABpYxRWigFg9My1DRmvyriXJrc6hV4naRgr1JqXY3XcCr2nIMQaXehPSUnIir7GQyRIB6CyRZO/E0BVo0oI7tE2K3EzZU2erZioJc25oaC1TAVCWoV+/UbqBEPFIkIMptA6wFVJ73Cu0CtE+octeeqLb3CBU4no/XDTcTtp0g3xt4iOBvkOZFwYwtudHbQbkDGM4pGKfhm5sCyBg+8QmhaKqjbiLKTXI7elVD+0Jwq+ETh9SV3XhsSCxSwjqZSQK7WUrBiR09CfVDpGidVC3xQLXneVp0T+Bp4b1uIFQltI+6WgQAubYhDCyvWrT6PNrv6QOWzandnCGcwQPNloB9UJJ8A0tZIVFL54WSB8VeAP64J/cCMI7UH0gbDRoptXE4RTj0wZAblPnGGY5UTbODdq7qaFXn1/ZYhGxVXSV/1LbHNhMFAUx4W5do0ArsOXQEsDuGofTRoYQHrkTyhasE1tU9y/wS1gB4rxK7kfTlS4BoySxRfvR2raIj3h8CkQdwxc+nfURyenAh5adAoPDjvRWswwDbPYBHduitEKRdwCPcMUtvBbVJDVdb0mJQQH1Og4yH/hUV7UXpnFCCVe2coG1gQsByJtIC+3yFc4LcFMI5wUT6TOjvm2hN7F5mxE81yTHEas4JzGnlqst4KQ+ZZmrOCYr9q5lasX/NyNYsJQDNIJU4QM+dWVSMzYzjfHAqYt2LZtDMz6BSmDll0CQObsQFmAKhEXMKTgukL2VeP3WAdv42PHT2/pf+5JVYCJfkk9dhiwVXfh0ACL7yTWifmPxX5JP7ZrRMnTpo/FvOgWhdNWhdaQ676Sv7K6+6arBbgDlenJ96Zf/UmyQwKoxQ5/zVW2/bd+0AzC7KmXzJlTOnyVvnSqDCy3nRJIUCpcMqIi2JYfDMgq1dg961u666MuWZH5/dErLjQWUC1cjMSlFCLLkqP20X1YWf8qp82S7AK+gurspX7ppZkbwdCAroaM+npDUdZ3VHfV7qYIERfiRGYIyy8HbQVFIx+CTfhmXDZSK5D6wuvRISXF9TevIQWCM1SQX/X54vD54gWNkTeH9TzOJM84sNjq/Ny+VkBFraC4BvZPaaTjdWk2451HH0cPeQhK4+o10qinj+/eJqWbQAsvDhV1a8CxgJVlREDqCu9LWRciT4iSy8pDUimF7+tMo7gfBkivvpOdqOC6LpWF3NRvCcUvc11cRLYan2aTr3qtQgO8I2eF45jo7CQpIW88kczjHj7FHkjPJcyK0tQPMx9cCiXhv4IPDNLUGbhbqqHLihrSpn5JXlbbhAxq5+TOJ8yPBhze7IXKrtKA1KOMgYo2ZqDhoEoR80pC6yqw9eLW7cCW0gIsKRpc/Fe7mUDOnKevFFsgmrH8mjZ/xWBhLHe0ErkbJqlsXwV+wUbluk1nG9Ump1fRCee9F1sGWYql0KyOrCqvJCJ22w3KHtyhW4eDYeMWEgkDBH3bWoNR0Gxjy0Kw4jDijPcakFKZNYKiPzZNFn6lmjvVd/SrjC6aVty6iCUC8P1CUaIwTIJLdmMmQZBm0dAgGkZgnwLXsYvszebqF66M2Mj5jESJpiyz+xdfHYWKvdbnpP2X+pjG2NlxrFEMYlW0TYBCC7vt5MBnx+Gcb1h8qSy9JOwwb7fq6CAs/rTRb/wNvR3hff0a+V8JM7CX4s+oSccuVSGyjQWG4cNEWMXbmi1TUvz9nAtIrWzuJLTx70FpSH+4sEK0EPZ5iyMayxDZdxOmeLHLKx1qzmZgGW4A6RXaGl1943RhuQ5L1mcbjMdQVSMw+WpkPgjrIcYHtXmRYXuUJ5LR4ph8SobTOLZI+u0lZcztvux/OdPxesVi/MF20VVKc0M4Y1UovpyzpggohHN43vBPd/6Z/JAp2WI28J+9Cg808iyfNetT5ACJu49vRe7u/x+u9hp31O8bB+DjaLd3yf30+2s0umuzanuDXSXv+xv+fauuLOo/wQTezwP/B7eyu7BK2a7kXJr5oURz6/SF/8ru8swrizeTuHrPOkv/uo09/3rsmtxeLN23Xh0S9z/J5Vmzl89+Mc/uWk7/+zD05tLT7x8HO5yUqQo9du3DwdZpvtv1m0Li+6O4ifx3+HGntBvvq7nejaJNbbNh2s7T4TrBnaznDOjHcTMz/h3mR3Epi3xfwqvQvCAtgf2XjDptoNm2pXNlUH1+vZprrpfEyX0tboLpQYuoufl007/jaiTGV55YXxmPZrW8sejhaEEYbZ1GBLtm0123Jz6+J2u9VQD65Sq7Lq6lij02y1AZYt8bz6plfhnVP8UMZqqqsIiFW6myNXa/xzebn+mC+v1+XvlZf5mqOXD7oxHymvMwjXF18WBmmJQ+XtvLxYghlPUCL0LRoXUvCMZpEph3iYK0q57FoOmlf6LjYQ6TItKrOzlHPJ7Mzh0OwcfRizM8bxDgWNQvFZ1cItzxbS3U76U2uW8DQTBjp7E+Taw0JQNNE666qOVNMH0feuX9vgSzyPY/l85s/L1w8FveexJs08L3bJ2qcpcLl0JLIaspCHh+n54WHKHKSfO4nHod/9CrPJr2z//GwqfVNNGXegGT6q+5rCRiM7IPjws5E1z56rjH7xwSp4usR8RDt+L2ap42e9IqvLaRVwtVYvBaaDM1bTDSLGDDBHnItmiMUuj9Y1dK/nFXf+0f2NmReUtdQEKddRbLJI7RvaV/DzNOH8GvnqDe11CvMfygbcSIkBjUhoAYsld0P7Yn5YSNfzQ0RzBe1fFtpuSWVIYw1Jaa/iZ8WG9kbB6ZNZJxTk+bhFN4bVhvYl/CC5qSy4r0pih4NICofcZnR+ke8u4wdsyvkanxLQ1wu5vJZpTV+p/3xJK3KkhMk0XzPLf0gdkl1Y1PIVPp8aNOdmCSc0MTtozfVPV72eb9J5o57YnueZ7xPmBw9z8en7HJ0Czz19dnDGXD+PpxCcsP/Y5NvNl/ouJCPfNzk7ePZcfybuM3d9cw7hABFp6exgw1y/7ytytNSFidn+2OzgRXPB2LQq/5lZcaLNzpyVs+INds9em58+S0fr53k+o9NZusFK7hosmus/QyiO2cHGuf5asjtldrBkrv/MuAkXRnyPB6vn+s/Kn0GDUPi1c/1nx0U41pSwbM5cnytmB+Nz/XVArMm1Odc/I24CK60cenP951BJXnPaXP+5LtC6Wfoe3rGzg1+YMxormx0sn5M+TbetmWOv6BwyGpEsz5qzuN+MRNEH8u72nAiV2Bo6cYWa0Xm3ZiW3SrSMKyKuJNMVetEaHuQtZw0WV68QZ/vy2cFz52SFK18Bg7BeKfZDn5+Wv8Bytb6WU2Zn1uQvkAz3gjSm87X5s/Nnxd2Cy/nleXuWQZwj8Z4eV9r5s/K1vvLMWYbzGewadfKcWQY18aV8MjPLWH4u7fuceGY5GT8zf0acnJrP5H3fNj3LQH1uvs4nZ8zOyEQwOfm9brOtiehIJ3ACUr5Jb6yljx4uaISsVpLXBfJDI28L1EXSwH4cuxAAcNPTyi+LO0WV0+Em05ukp+WHF2kiPsEfUTp6lkCh3sTUZFxbXOUl5JKWfJ0rP+fl58XoHnvYhZ7n6sjzOh99Xjb69DwS1/znpeOtP6/zeJ76+Xlz2cfz8FvNf56rI8/rPJ4nJz8vXUx6/tTjn+fqyPM6j+fJyc+LfD89f+bxz3N15Hmdx/Pk5OeN5ojnDyMizs+AyyMZ6DwyICtnICDSiQsg9X79eZ2PFsC74hN+QNnb6s/rfPQDCpyXnl95/PNcHXle57UGLMZ/vEc4r765r0lVUnZwOTUyIEy0ajLwKwd3P/rUU/fgIYIGB+66gDMab3Hl4Aex59Slg+mSiVguGbn0YLoEOQVr+silQ+nSOtOyV5eaXDocFIOODpD9OXxnDYZfto+qGRKF1E0QbyequtnVCCqWkzvavL21hwTSRHj/fxUqLCAMhQrLGAgVFi5eFbLFxpAthkKFBQWECssaF4dssT5ki17IFkOhwjLG8ULFwatmnidxgm+plTd/2izrZt7T+qvZmYWJtYLFr1p/V86y4OLKPpt32DPPMtHWFk9WvkVaNlihn64tG6tLvmQ2b/JMrMReS72Snq4IJ+yy81NnWcXyRVq5taiWS6qnZK2ep2tv5wvTFE3L+IyiZXqh9oSsNdGL1XGrKqvccFWVCXS4qk7nq+ur6mlizaxWVVYlr6pa0X/cVfVU4WR+9Kq64vhVFWQrzT5vVV1eX1VRjCy8qk7zyRZYVZEmTr6qrmLtPHbP/UlnNbK2Pk9r68kW1RmW1af/6EX16SHy5H2JDbVF9ZT6oroC2cgLdJ4fv6iKSbwUbhFRTyjcIvhauEVQtXCLkCvhFhlXwi0yroRbBFQLtwi5Fm4RciXcIuP+aOEW6fn/SrhFGvhgr7lc0sCBCjCDgFvnOkh+pj7OxXWwLtQ3da6DNeI6ODuOsckJSWnOBLlDvdAkCZ1N3g2hRxJVvgDTiugvU+QR4sXTx7I323Ipgs7iA/iWFsvlqNVM3lXJX0sOVmSC7CGQS3hYYba0qAItwXgJISVX0gBsFUdraYdJwxG+eGyYJj3YERrxkPAs+3GuYhgErId7e9kn7Q+Pa/wSefdzWabG5KpLKu4KxUFSpaCM1JtJXSovYPlpVamPTeHEqKukDvkBjpB6inIitbQCU0hSpSC7ntTScO5iHuDj7tdcx/F+jg+pHfeBmVhR2myJSA43fEkhQT4rS1yNqBNEKUW2tF1ZBHkhS44rX64PRGSa4WuLR4AHBUbVrxVJ6H4cFVSVKpy5vkgiKLVpj4aqzuhMhOXXREU1yXkVwfl1tioQSxRICPrDclq8S99cJTo6taXARaloZYXeAx5l2GQES68M5tSFs5Emcvmm5aKRUjEVpKPF+fL6nYfQxVISpqBiP7n0Mm3NVlY1OrWqzYr6U0d5SoUWTaamzPCBZ7OPy5+U53HKN6RLL62KeYizrDp7kLMl9Uz3TzJMBUnpZX9tx3Tww4KZWPGqdyT3Q5l6Im08+02rSLEY1LzT/SPrwxEeFS4nu44VRn9ETRI+6eECSNfjmyKC2FPqAf0yrJFWrHwdn++UfkBm+Mmvd5tP865BSm7miWZxnt1hklv6lmJTogQI0m3UGZxJn4EkcvnMait3zdCqJ2SkCapk/4EwAedtPYaTAY/9i+6SqtpnJq9dhV4QpBaLzbrW3ZIn+L21ifcTv5+TZw+/j0hS4Rd5Y0q/hyVv8Iskg05mXetBUWTw+yVpQPh9QEoOfm+U6MHvHU27fQNBsN93C+EGx28QbxJy+EVEEQfXcmOuaP7ua/NTdzCwOZx4bX7KDiw0BMNz+uIdzDQTTl+yAyMQfAnTr82X7sCyAzbft0zuQHLhkFsW7RAJum8Z28FcA/Zp2Wvz8R1GKgFx4u4VO/qQO3Rfu4PpxQ/tYO7gXfHIivyU9Ii9Ddj0O9+pHX0GE7d0dyAPccgt0ztEDe88KZk8E3Tn0/RaXsC9y3ZAGLjE93Z30GCnod44zVd6VNbp2Q6ED6pEHj+j7JglylqQHXe6+lGL3g4a9Wn5Gp9M7ACOSEV5kNdggq2KqTx40I0SBZ3YIS4ySe3LgygDxzemD63xkDqw1gKtNVwEb7Jz+Fb8ZufwDfnFX4u4sp0cYoMH9IvNAT4ZQLL0ev1ChCDYkOYeVlG0dVCj6hdfFdZnxsE59CkZbc+hr/E7eQ59jQkCr1Mp2e11muCFCeYUXVrTnNam7FMlrf6YXWHd+9ZE51NHNwxKg8TPxO0M4aJ9YT7NH3m7cZ6tE0fJFns140Om3Yro1o2OW1mM7Sw2bWMzsBKpf2u+epuNOiKdiMymivPkqsiR8IgungYSd2+ZWYlOlP/kmCsgTDBOHOs2JzW+1+OfoeEtvti1peK/Ugkn92ApLWX00Y9ceVjn5Upqe3QYXKTLX8BdTV5cugOTmbj0M0jw/KARQevRSIfDMUYduxwnD2JmhTGZD+R7LNabcDNOl+xobJdjFLIXqukoRXKo1KRsDFYqt/PUZLceA09kx24mnpabCepksIb6xCVTDY5NUdfkBG0mXZmdBLgZv2D1Oa0pZ8Xny8flMGO81PKprtPOlqNW1CjRxMSzqg7FpOhmXdDTqoavSXEvj9F+Vw6Jds3s8xllZ7PHMHvAfJE+gNBkZGLnXlNw6yfcSMiPjZ8dGumClNXe9S357iaPNTOqhNNkQj2e1YDIXkWU1LUWy9w627QxMshmWew5DCyhUdz45YbMDjgF0RGzO/zOVX0hnXW0RrYqqbZRihOhwpG35Hv0dn27zlarmIBWJn/P8kVn8ntmfKXPdX6r2NPfogfi9LJizW8Vj0ZKo1hzWZ+cJfudKTTDTc9QuowPflVLJ5gahicYFn682jAiW8Xdt/1xo/j6muKRh/5EvxljnzplhjNwsDzsHPb8LKtOT01Vnwozx09aJ5bikTodV43qpB1upTYLpqbWS39EU3uUhVFBOPL1ynG9TBO9yfeW+kAB0UkR1LjcAQBbNG3YelLFkxoyP6lpX3BuHHtfsJF75InMhFbe433Bi+PY+wIBg+VCqY3BZo7hW+s3g267K1QLcydk2hxCByaf9eCP6kbMpOzzkofuEjaueAJkTtB+d4t7nXI1fghliqgjusXraynigO8mqmGJNd1gik3B1iJFwSK7iRPVKVS+8d3WhgYxAtwQ+9l2gYHsFm8yWZX8iUUHclSIoW0vbBisMFact43JdvsLGw+pkqlqIqXoqWpaTtpiQqrXToTiyGDiCWe8Zje6BUhDLyGCcLN1CW0S9zPuIydKjJKunqkbLpq1yjzYpVLmeki8EZBy8CHAJOh9aEnWNX5bEymV+abszLSL87mpYimh7ZzyHoJqBat7V5xt/IU6vkr5kFOIOl+1+0edQuj3KuVOp/yvYYpa+U3sa4mi7+MHoXB/r+TdnLEpt4jiI1aLUrg3EFXAT0BFAhvKrSqpdLZ8CHcZvFii0qrjVxDK9adbfMycX3Idrx6/FSaTA4Lvs0+NR5Di7GqMPE1vXa6Pq8HP2fO58+fl1C5+eFobwh4TiCmzJjE45DwTH6b1wsZ5dH+/NPifuomGo5tkcO0ZpEuno4gdED2KiAEFnomREcI3fc3CN71UtqfJ3++GW8sNK0qQOPc3i7HsNyL+kdT12W+wQQCF8ZT8nfmD4lNoDDFrsaU2vj8e0yfVjGZsSehFEeEEGuiZZUv5+SYxxEtGULTSVnaNhPJ9SH2loZIoN4sr9DeMYOXhweHhncPDI8PDx4aHR4eHx6pDAdgOI3nr9wC/xTEINRylil8V6BC/SPjF/mUy/pIL6zjCVXEn57r/Qc6R4IvHloY/ALBkaMtc+iwBGqIt2rKYi+PrFy3KQb8V92Y3aHjK8p29XBJFcXCpOlk0RbP4F5nEL0fAu3RLihFQvkE5jGU7omEbv+w2r+cqBgwErDJrNelo1qt2Fqv+80kz3+lPom8+WvgyH+4FgE8F/IAVJam8xxqXFscIdbeFI5PYea6+2uAWlzYVZ7S0USS95/yyOs50gQz5yiZHCH8UjZcolYKsUOZThOmn4ysWC7GqOBWnwxJCoBAqiDO0p5RHZ3sgYIA8CBo8nd1sOgawWmmQRXZqE/z/IrND3CLlgW8R2wW3AGIiO18+JkKMEgupSnMZHuI4l+on+c9YJKaXpBaA0Fhrf2C9YvFMveh2N+8Kjc239UCnTwgUdQMyRcQ7MLycgj4rWWCC7lvhW+/54Qf/5WMfeey/H6zCcApO7ni5Dtx5/PXEVz544J6vzb71rx68+TPVFUGYg7VfoT2PfzI50i7wpACKEQZXgXOPfzIBhhd4UiBFPXP8FSEbDV8DPm87iZDk2IDl9+fQv3KoKYlqFVgkLjgoW80/siQCBi0rt6CArAPSrc6FXNc5+QnQGOGLk8v/PL56R7pL8QwUxa88VwiEdM7mL47RIDq70j9S1hwhvocU5bIMJefQjh5Op0ZExzlM2nQgkL4R5nihlgXbGOTrgZMXSKoEbApAv9AjIEAX/v7id17wgtxK5Ohib155fdq/qmTYn0iOmwGE1FepnDEd/C/5wapKPnFkBwiB9aQ+mto6ebHSSerllTrvlf3majkf6AGrIsIvGap2tRBh1SKooWhoXsEyo1tGapD78VfqAo2oCI9bbluwl1Y09IuoY1I9LtAaAoc6CgMM6DLyBa7TzNBCjofOneLK/YEdfy0oAXoDCioy/NC5q3KJOl/Fp99wQXr2Rgb9mpDpW7KH7PCJ7ZOJ4SPdcmLYU00MRgqTefJaGYmSEDQPyQdF+P3hHTGjDB9MyH4/SAAO9aLArCcHcLl1o9XWZ9ckINDsvPw06wxfM3Q/H3nNMIxF6QVi/L19kKv4iwK6q5HKgeUvrkHroebRGtEHNHWIL2BeSTQXDQtYlURT0LCAQ/aBkQKSV1nA5IzhoACad9J30idPcwufzCVVa5XBFwX/V8iBurM84ztcq0vfeE0fKGkx4yafkFSFqqwR3ibVoCqqCWSqGtSKmiYqNGEqqgmy3LEiMoM8Bex+XsUlVL+LFi4nJztbp6okVwj7M2h0p9owhF2bMi4LMwHaawVD0F63qkNVWiaTYR2qwsYcG272IwV001RTyLCACYZeL2ACnBPeb9jWYLhdOrmGyERm56RUpOrlo+2iCSXeGkO4/tZAcddeGrz2YVerZzMc284Om/rG8BtlvH5A49XhIY4GfVIEb0jRVx3KIRPNmUzWyO2ySsslNMZSzd9mSPMwJuKLKvq+iRtIGCWqGHVDiuGgzKqw/lox6kH8y/hA1Q0CpNWz1AyiLKsgKRrU8n2qEjQn6JHqpXSJOi1F3Q8qhpzuHsZsSiUoH7eTlPkT6GRI7dcFaQFfwN9Y/iPpm9sbzwQUEUbAsS1TGCH503DVIWIYil6+Lou4RFqOdM2hiDS3mZECcgRHtqGHY9W/LuISaeKZFn3EdIoGlAY/gSEWJiDgScWoxRsn8UNMJvIJe0cpPnk11UVIlqGEUFImKAtCWyiLlMeE8ohov4tSVPdqMAf9RfTYoUCkPAh9UctjXHlE3y15LdKsFfT/x9NcKA/CYtTyELWE1i3LG8HAUPb/YH+oZKZSOlAenVoe4mOovC3m8TGwJ6uc0UoyBln1a3coPOPwDH7b2pn0tAw0u4LbsC1uCcasltS05GLI1vLsvbAXT4bpwxOt3u6e5e1kirINKims5H6L8q0z5I5fJ0FN6ir0sufGMcw3UlfZVZcBfBvmnfHbgF041ivKZoxN2hRYO2wdKUh4bsRN6Fci/op9TuKHkWZbarmNDYYn2lcWef8AnNPF83U2eOJbhw5987Pv/caj4lWRPV6JH/3QrffedueXPvgLROaWtV9pf/G313znWz+c+94RbsRif7EW2s5VWALYXrFNXzwzbQo56Uj0Y2wTGpXBQ3/xxT/6H39yy1cG8GjsGpw+N3j9W2+//fpPfv0d7959FZYYd5bR2wgJM+82ib2OVVi/bfq426CDiSB/9duWHHcbk4FIzmIDhZElag0QVe2T6hs1tPoQ428ze9xGjDU5wQ6ZjWQ1UXxObTHNvW8P7/P5EGBvGe80bkvd9PSLtRNmGhp85qGvfOy7f/0H33r2Lm3FHfJ3atCd09HFuGc25xym+xI8Xafi8DLCbCzjcEmtLvMqMls/Gbzr/Z/41rUf/Z03PNm4Egebn+Ch7Cd56JSf4CGAvoPmrhQCgH38TKjVZIaSjlXMVmgBZRaY3hWG00xIGjOee30zF2QQNTrY4onLILjP6pGUekHIXMrzIG93zu3IGXU1Of8cOc/La+Vc/V1P/OPXvvv2f3r7LaeqmCIijZxKOo+8HdYLu+SJ3AJS8GFHcH6T8/p52SUHM4Svma29izXkZ1hDZofvVFKuJE0ZImRw6GbUbofDa0e8DVLwRexncTckgjPzGqBCZ/yb832o5SPdM5tNhWGFOzDemgwPq/2QcIYXaESybSooLv6DnEjZO8gbDnwqcOIHTGQGj132P32EsU2OLFg5xoceo8ND1LZ1j1EUz/YYldMaOl5zOOiVE4qjC6aBJCICKU6FX4w+BR9DEqVrSvqUtvQpZIzRik1YPCesC1E4CbSbIt5m97n85jZeFPeI6FgsOh3UPPgCmycbYdWxek3xgPaHByHnaZ3VOIQfotAN3CW3qcPYjpNz2j6wOlNCr/h+wm47uwOkKgi7Mkfci5s5iLIKCyTepCmusgWl5RTIV8B+PS0jei9bJapD+dq4NsPGdcq+yaEL7vDw2KJ62x5Vw6nGqbJ8NR0dJdBHfLMys/IeSlVW6hhU436ocuB1WA4+Q5nwoBMoWdUOaBAl3HGGt+40zrGKL6Pa3h/UAx4Z3OV7hn9QmysasWx6SZMfMq3MYlVC4ICrmK4xEwTmzZrUwKkEV3+reCiRgTxemWnskmg13rcjzUCb1hmNv25pAhdQTaSLijg9vQFvC4WLtZCth2Wi9fLGCZjWYD3ZPylx4NFxmJdS3O8FrFfwI8tOdXYcr5OdakFblmN6J1sWdqoFbVnMkZUtC2FCtizAa4qRTld9nawOdCpbdsT0jrniiFdrk1GgX9+ebPA8f6BnIwu8opr9ElO7ULyG8MKPbLOHjUbxfPmoI59ypeI2j5d2atzmiD7zuc2jnNaTpocU23fIbW4r1od7cJvbBAO3OcEDDssEk7jNGQ8Vt7nEtsimU+M2Zw4LbnMKBDgZHnMamcAkzlA2Gli4OC72GDnVKW6Ku5vZH8ko1cp+UTYnrmmi00yZeNHbkROU5S7+kBGdNgBpIf1xL4xZIAeFY8KY1Qr7C2hAq6IJylNZ+EADGrdF3J6h1c9zHka4YZrsLzegGqLEHVUZA5aG1tB0KIPIMAMp7quzY7KxF/uIuVymEAVYLV5Leb1T3lbFZfYLDUOUnw/HexB8j3JcvCcCLKge8+1TFEt4L+yNGsFig2lidDyP9vhdVedk5qc7hXxjJNyhX3r+AfWyYTySmvVJVPGTP9DG2MFI9oyVwUjEvxKDzIFDXqxB9ktxvEmD7HwT0JeDzOnnapC9Io43apBdlOjYQZI5JNAFWrXguDexF0QyMjI5evfgifuOvaPkbksc/4O/ffK6r97ziX+61w5WBJ0g6T2Hn/jKfYnRzVHmSfvC7O///ZMPveX1X0iPwjgx+O63Hz/2gUT0pjSshYNbjn7x8du/c/enzk3x8kn69J9/+IOHE/1bijcPkxxjgQhT/mUHddugd93sYN/vff+tT33uib3faiAe3ACKRSuHgy44Vq84ranKQGytR0xYLFZ+m2P12fxn82oJvTTNeofTkLVf9gvHEct4bVvxlsRCL8Z3X1hn8q36C8QZpD03WiW+6K/dlr05gqfILdWinANBaDt1RD6Myf73lNnu5SPh3IBnNzJ5ADvOTZkr5lPr/XrOVcuzMlFFZJqPj5YCJzC9wRxMJJTI0h448UWxJumjpqfYSu7mRQ5BrdDiFWqU7+uUPbWUB51CsO0qRcNuXHjWKuWoU1IgfKdoMFbB8lOw8vZRrPiAHR10IV05wik4wY5DbcshRC0LzLgEeKZNh2PwCOZJy0Q4G/lKOOpOBOSJ4anAO4oVo21LGSxI/HUp/kKKEORMoWtikjunpU+vEXlUd8peGCOR0rIzMtvSWPC/uqX9gRxbR3M4IyV6Tk89p+w2OMYPu41TXLsACv0Y3SYhRxqTd3dbnd0dE5MkijLT6OOJL1TJFYGJOqcl0LtNdMBq1HnF+W25hHDoMI4Fl5QETWDx0mGlFOlFykNUXz70ANHGQP+UgkwYlGXaliZusoqDTJtLHwWNlAmoAiDGTHcFi4acwlhp9AGAl2jZCshAaQ7MvqalRY5e4uqSFkBuWL5eEhnGLfKukpRM9XSfjBvj4TAEXQqLmmhCR3yDDFYUO5kvHuNizc/HCEQRmPninvbIxSPpIl+Qv/tGLz6WLjIJiTJteFE+QjC/iAMNJIBZ0Ijro98DLUFmccVpyYDu0vi+G0YLbPSjSoN5dOSVhleqJBCojVwwflKlIALsqPNTugDVZm+kgEJgSkeZfVjzgxni4lAAizY8YeZaCErmQBoIKPiEp03xiyVWOX/IcPdydlAHKiWmVXmOmaXRl/wRzesn0qz0dn1ni2vuDpGXXB2DzlJe5hmRbIKFj7xxelQXbeNU5URROSot3MQaQDG4oPKTaI9IlzHIDN2h9MKqqdUw66+UerpTtZnSNpImvVQ9bRNptNNI2vmkISVVzWqlB2kXeVF+izCE8qWU19d4azzFBJgoHTyYruoOHgQ5A+pZOm8wlPOIf1Z38Fiu9To5gWQKtSgnEMmnrYzeKIA5081XdaQYkBORiJBpMpwAxSN7eZVPsdMOwvz2MJwHJrK71zC8lA3PenbMPih0jl5ih8qUjWJYNbPzqkiC+UggQV2NQIJkMIz7x8vijlrqSQIJ1qITVoEEFZ/yuAyxsp4kkKCEbJbR7CbYX+MZsG6cuJ6yu96QXGDckJqUE8CfoavKawOVbmFIjjNyUXpsj3ia2adV3b0mS/kS/ixlFIw3OuWRWspbnPKNYUpE4bR24mC4ZnwuXfyB4Gtsw3nPA9HcOXavA3L2Gn6AG0z6yieI5lZUmuxmY9CGn1oSsW9gP5tXPgpTicVFX4q5siPR10BSCgQcLLZ6xmLSjWoJrgBLeUoYujHk5S+rs2ZjFtC3pBCg+216rlwZkvPFgYmkZ7m62xqLRe1ILGoRlQhWntFFpFzhyrXkTveitqcatmLqZZxp2ohZp1r7vDL8ZEvfyMvs58QsJ22Ipiy9lM7oAoiWcv4yJuZARQDUveLyWWAZQ41eLmO6b2QZA/HihWVkVTBmfmSNq7ur/vTXOK0SWuNOtHxp2ZKi0qXxfdePFtjOAbHGTY288qe0vqmAWt+k0iiXMQWWLJcx011qGRuuWzYsJPLTnr+evqpWH6lF4nuylFgcdM+xkc1LkZaT9IGswon+ZuXbcJmav0KNLbQ6dcrVqVetTPSR41amdawkWE1GVpyfcLUKRb1Xq+HKdMQr06Njza4xjaxLsadka9bvavqXaEsrsZ4g1DOJLorE2EjHJEO4NtaT8JNy0DvUIGk9qa0ozshZCpjvFSVeY2VAyugGJryGVxRhBVFbOBSWmJu9G1UoV68oDhcZ87xfJ4y+HSXKVHEez3TLFUWZ8d6gIY4VxZnicJAyhILpuAwV2r1KrWUY1ed9Pa0gClSmCnOYQmzGOjE+gDgEk6z3qKBjEXZwadHSAqpZxjj1QzcX+yYHaMS0aSZyhSGWTl67Iva+mcL0Oe6Vwol48+AdE05S9qhghuUAGiH7m3bkI1E2rAqUfVbB1Ca8SFFizhyIy+2vCT2FsjXecbsSUjxbxRpRPNtHpAYk1g87MK+EUXn15FRPfRbeNams3RQogJvVF92vlRbV7nn+6CxOxP1MF7EV6t/m1Qo3KUVO3Bg4evkue7mvhIT4AqbUEmVSFQxXHr+4OhkCXJFWDUM+yaeTLn7tMvjSumVMjhMLX5XnLIKVPGcXEr7OLYUvIe21eZfV72V9R+QWGNnuHOKcFat0cXr2s47W69Wgk5kw/fsOKv62SiProLUSUyp9LJ6qThEda5nigEfFF2opmpnGiq/UUsTRMFY8OkxhyW3swcGYsDk6/CyHHpZigDur8SBdSJGMxoo5+/iFaTyK9GanULAqRZF8XPiy2ApIiS7BzpOv2tC4WnWT/trlGC71TqGsQ99cp4Tdv/K+3OTVwiHHEYGHVuM8+x2HuxYJNPuQe+3LWBy+L0JlWdAVJXpEFIb2/xD80d5bi6WYWIoTFinkISKXp9+7HXbpZnGHg8Io9UBzqQLShAqm4yhcHznZLXL4Kb5528lukXKn+N2T3WI9+SF6oqbbCQmhU9UueqraWRPgrTxKFm4ZCqUOj1NpIsuj8k7QIHEnTscEMYBIT6YvDQT5dPaCXVuWnbtb/SUvEXm2VSlYyyHftk1QjqsPihFNtniHMQBbI64zM3Modg/W96WLBFy38nGcrOT4grOWA0xlmiO8VdBlMW4zj9n1q5m9TwPurVr1+MNtluFa2b8PhHCxl5X7V3MXWxPcISvhOdjLwU4mI9cD3Ah5KXgtNcqe6dVTdcg+qk0FKpSL+8sGG/chLGmK43wTBuU6ASWzENiPwTgwD7FyLhu8kGAX9RsOxg0d33A+N5w774Y74waYN08R8+bINVwZPMejgjoAP3p2ijwLsifNO05VnxmtIwJxN0t2NVPd4L5rvnL157/wtv99z27BicSmvQzkx024p+3eIdW54GC7f2Ub7yxf9VTjFdutHubOd93w5j/8xJ8/fMvXGuA4t22PZ+rJr8SUweTuUPuDG+79u4N/89ifPf4fX7mNgFOraRy9lIPlvj67ixwbcMt2sydbq/srzdjZHXz64Pue/NY7P/XlP0g3r/LLYb3YBRYI1i0h/JbluhvFFRZi30TdRceim06FxWIVQJdlAvKADIt7s1CyrxJryPJdcHedCsZmmQBCIFp1w6rUGyY9iHa4C0xRMJdu+zT9QtY16f2i30tll45CXeUfDaXD6vjTOWx1zZewV6bjY0tQmo/1Fqv9JI/G2+h3ewSLgQnd/e6QZKXcwuRirTOLLQ0w2bO8KuoeEyLh4BVBNULy+Zz1Y4JRUJ07xHma+JSgR7MNBNIGAa9Lxg/FrehPJlIoLp87OKvBSulJtnEvbGwSeyRzqzGtYDTMPmAuo5gyW5owbZOs3MDN8vlGYumlaINart6oIJTMSZuYI5gvd+eO8vd6zYTtcg7DqS3NYdVU+bAmuRPcoPWweOIkN/RUJSFN0lrVM8BuaOnshWm/MnTKrs+hPMm5U0f4jKtFIuL4GY1czuQ6WyYJ+6zGJlknRXcb7K+E3yZgahzxHaD+0EwIuQccB+L2kGDU00Ty6mDC7WWvFmtPj++3FsnCbbuOhguliU2o0cahSxExkYPre+Mts6ZO2G/x0DpZ49FLSzqLa9kfxwVHwVQkWKyJ+CzFntpqlmaiZA2z0ZA5wFG9EqLBCyeCJvvBRNcqsqV5rAGOx6Ot9o3jZVRKwaD5zhGKpJSCQPWva/2HPq7Xr4nji/u4ab+KmyRnJDHIF14hUenSOL5IYtAl5sIkau12BopIHZm2X8arZVg//QKTeSpMyW3EkqfRdt52lfgsGejdOOKpvHupHnyqfUE8xv2dnS/3kz0JIcPu27Mg5KgnTJ2XAm1oSqvBULcPuQv1S3Y/9+H5fXzU2VQS7tQKeUTs7Pn+qIKpwwRbPo6LOdtrP/Nie6v7cFMfl3Z2mO6sfJS4FzsBG2rfcK493H24sY8bPAKekQq+ie2Oy/UN/VKOIyKI4qV29cJ5nWZzr+8JfSpJn1yILuznZW9iYTWfBeaJVMTH9UuRjopNyyOE5qmeXccuwXF5z93qcLSbtJzjhabd1Evwc1b3ltnY/NW4p/PIWtzcHfyRIQFTgJJyubuPbRPb/qWEuBVi4VI7s2uAyJTCnzWiQxQ9hFgRpXiaSTGIY4/EHWcKHAJ7q1k42SuYB5X7fIPowkWDoqD4fN0YQvosUgj/UOOQARYHiI9xUDO7kr1oNvgRji5pMnsSXzVGaM3yQDbWK2gx+uvOaMjLYkZICqleGiUEbRHyWKPkpvHmYolnECsLxcD/3nIKE7CaASpZ0qE+SmswEEXCWwqiuMg4QPA/BgJGaGlvVbanPKzX7LeVjUNSmfJUXox+RNs5/kzA3SuujuHzrN215/00B3Ltj012cXeEkC1azFHF0XvAHOiPecjQdcQ00r404gEVj8clellnU/ZBPN/N3NEhd4iBZQEd3ylXPt0ilWCE1glndGulRUiOsz3QHOn1s3+05ZIIOwKU0N8CXx0Yw/JdeccEDbxFmRvRFkgxWlKgmFVbskdkP+Nx51LGshQgv5P9m+AUUf1TFhFXigIbZub7EUul0NxanL6Nni9KafRSDssMO7KsgGafczObSzpo2u4CU/a6S3OCVY4TrFiu36ahZnbhJX1ZFfuL5ao/DoF2vni1upFMl/wAjdQyiiUvSuqqBnZv4XqqYieqJ0u49q/FrXxHxxYr7iiPEpy1+sT6dYQjvcnCPvw8QJfmffatFloaGUQroRYp6C9Nv0B0EtggygDDzjFef2eZZj/1KG2BiMNAcWePsgqyYyLdW6Q2spLHPNlbhSAU5k/8CfqRFXKJiaiLXdsE3lc0Uvnv8a0oz7a+AlhZazGmR02WzbhI7rw1Vz9EZRB4ykSjT+FrRe6usGps/slD+Sm4a4db0MOBYZRGUMGyi1Xb8MMlM3wnt4lgIsk7SVsCr4NUc7Bvyq4wsTPCmTJvXK7NhnT8VdBnv8kld+B4VcXvKbNiElVFnVW5Otefhwhjm4aV2YvNPGNFhZooKq+c1Shog2gqjzoaZrPVmLU2EVlEjZubHFPT2AqsOOlV0/AKRbiKNlGP+/HaRNAGNUePiLTRHBPeeyWcpyqpt6dW4SXM//WG0CQy0gbzH6o3hSPwmnbdXUZjhYMoQuklHrqestbOwnHurcpiCMUz0f7uQrUHy/affHisOa1ZHQE3/L82ylHZrPlm6dB0IXaQBDDXjpYGlU2JtpwqHv82Sw9+iYmg3mSOrMa4rAzeIIprqWQdrvdMM3o7hq19aWTPcwxc4ov0iTSf6NsF11YvClZ3Ke4ukF+McTdIyeDvHfbMwXq3FBsMPZpIEfLRaSDshVIVdoFdyErUWtK24jCbHl8wCJsTtH7BI9/vgJKIkmkudJTpVZ5E+eDSh7IC6h1ik6/6V9KexmcliJsWo/HyLo2b4fegPHJdnyiuvmZv71I9EgP1gqBUZ1OhVaABFxGbU7ZPum3rNlbdjvcFXCDO3g7O48L2Yg8HV0gzJfk/RZdW+yDDOBS0mb0ZKVX5XAtsexQv6GqsJgTTJFqVeJqR66jLbgQsMayN/ko+J4r2ZlH863itXuOv4NjpDpaP9vMPbW+mqY3XsOiBGEI05wiqvC7o09FRmeHFuiJHandLTfYb2ZuktqgCqledSeZFRTJpEBLBwdK1hlq3RX4qsXBGfuPaRBEjinMQKFpo6ctLJj/ZCcagA4DCAqnsYIeHry0hv1prSmAs0nN5iFxfw8huDPjxelmKHWsSPLOhsPbEuPOae2kcELlmL4vtjgKE9KcCxhv8sbj18FKjfkWbASQP2LHhwOCFmZyEMe4GctlEIso85eZbIy+pi/CNTa8TUvjfCXd8VDYnxwaTqVMR4iqILklyNGzyAJZgYYjf2haMGIAzki7Hn5FyCCNqOqYS6BEoh6I46zXC3R0oiy7UCZJpuLQ7+JMJaN0aoumrAa47KrFymwjktCZgqXjwxXcCBtgKkTw8RIdea/jHxJUpQJpqJZpl5NV4M+jv8pEbhofXjzyNfdVP7xMHSjMaUFzPVcQQ+HtLHgB9QfgIgGQLxDR591hz3Iaf3v8vxkk589QZJzHpVIyT1JBOO2ScHF+IcRKEmvfdxwKyGWpw0nTtaC0NlJr23MVjwzTpv48AlhPirLi/JDkUhSUijUG1wcpYY1MsUWnBpjjExVUch87raOSVciEP4YBL9kdZQJJnEjlwkvyT7Lu0RwagJ/W4YAnEpCSLD1GQ2ud1XKbqAb/vL/UAVDFxc+AEFNAnqds5G/I03szZkKfxQYEyhnSICpI5pLsU2mCkfiJSFTUsxwdVV8XqBIMrUk4ZfdrZLzt850koEMGt1igQ20EEc0IeRAktZjIyfmBjqdJAATJPowHwgd77HgFqKuQAq3odB5dCNVrEKtOOh6QBtzdvuadCzJOahmTXl61eKbIPO7x0xaweVn1RsTustlEBUlORIEoDodHsHudMuaA7tWbJzmsyaTFZLGTX90X0OA5xPd+u74vY9UWxcJxd3xfRMzkG9Xy7vi8KfbiQXZ9E2/UdXxsjJL+26zsKuXzPwh0+CCrm2/V9cSG7vi8sZNf3hYXs+r6wkF3fjpZhzLev7Int+vYFtZOz7Pqy4ts7Njyhpatziu368SnNBlXZ9zXj+gP5Y+v6cfCzH8uuX6HOBBMwcCnZ9dtDu74YxW3Xbw/t9XKttV1/NC3s+qNpYdev0vx1Ru36eCbbrn/vWLPpENzy7ZRWd5RAMDaKi8cIJtMZs1z+DenZwqVDc66Uf1pagIq3ijseuNd0SdoXWhkfMaVi6GR7WuJJO3kOb/xROSA9ie+8xVwDR1zJKyhVQ2TMpKC7H+DQkVBbg3bkfOj+yJkwT5o+jnuBY425LN6Ea6bR0TqOEHrK16MUOHkFbk2vOWEFaPuyAgqdXVWAMH6mOBS0C5OGTpyDNgc6WRNXotJr48rZKkFV0+IHw8PHh03xd8PUWgM9Mmyg7gbag4zuU8lVV27BSLRAA1EF+Qro8GyOrqha6DIfiUnvkqr9oiWXc3SxjxQ+TM3PVE0zeFt7soZ8/N6TN6SeR56kC3+1E134EFucn7qEYmehCF8G5WKYTmyZ3sjmoPQRQkJw4IwvhNnb6w+LBn8/W0uB5o2/8C/VhY1/bVsjF0HLsBILL5bhqVu6JVkzz9+7Kto2RIfIp5YCLZ7eNUxRzh8VSZtNCnrBWY0Dwg4+IBKimg+TIhKLOMzCF9J4ZFat98Lw+IVVijD6LlRdCtgHRh8HmFR+yRCAGsLjyTWzNCaYYTt7SUKaym/IIsEQcCgnGWMmDDjcD69cBThExh0FHCIHjgIOkXcrDILQvnjVHC9AgDzE9GrJ4Vb90i3c+ENd71B+gAeavnUNkep2t20OAfgU8oM4m2P/CLRBdKbW+MnpbXCjIldNReB/6vYQbl5xDZJcU3maZvXBSI4lSR9+xJePuo768knmlUbwOG8+UJQsHfL0zN6RuCckaFQP0n1FG1mdywso7GMpXvhZjd+Hoo81PW8/v3k9FH0K/MrhOzn0yn5W493cAFmE3ogNSVEuGrcTiVSX3jGGForz9yisIr83jYFV8kOfwjzTgGLx2VIRbWg4zMCGhqwA5Kbt9fiGButUccy8eMKBlEU86hThQMoU6OLl+TZMUVHAgRyxI5+Y47MztO+9nn28Y/3bga9d3EiHQDOFm5ZJXJx2a6Qh37v6Z7TeOSZCE8QNuywyEca3onw6ouxoetP3lTaGXhUfTQHPJXm80dl+ieHXLt4pSdm9ft4fCRXiGFcOpRXQn00fNW6wU2ZJGZ70q2ImMS7pvae3spBhb0hoEMMx6g5da/t4WZ4Zx3kAvu3nUnfoWqNZ7ew4XiUr1PqY1nDrRjWMNpF/8jPC0A2orsQpCYIguE6JU1LkQkW1s2m3PbMo3KMi9G2C3ZAqaCu8wtCnJvuxYuYLaBMEENRvStZAS8eG3NhIPFnagNF62AaszJfo8vUyMi94GQpntFzFH5zwBjsZiF5QYBeQI2JbDlLnJWrFMmm7kVnGTmoS8ZGN7uxGsaCH7cve4GmasaVYTuXVud3FK7t+skxXxvpkua6M9cmyXRrrafhMvl8NjHFoXlNbmj7RhvvMUQTPalwvGRxYi9241OzlIiTUkD7Fm7yvGJdPb4JgBRxGcEIxksQoQvsgaKv8poZpQFkad6IluCK8Af2W1GHp7GGgfa/6QqrCePEhLYXVmUBcsq37TJZqOWEJH3PFhsbbdbiIJHUofXa6mgzBLKN+gwBcfmF/SWXGrQG4eEZqbbk1ob/C5iabWGKo/uIJsFgVzOpEYC0LISeDalX9710nuUH714BoV5M4qBFtDB1Lt0rSTkNCSzWNy8szYtqW59KIDCdseYVGBNx0Lv9rU5P4yNMxGq9NYoINp27wWRrRZp0xjY55lhD99+7dK+dyDjHysmXQHxyr2WSUV9IqE6ymr06esa3s14XBbGEroL2dhjoVLzqCUbdbuzEUhg0GgwF0k3wwqSi9EIPlYZkk/phPVr5yuiUtEwpgojXkK38NEplit7ggxGLpfIt9AkJpZ0JR7JSrAqDD35Y9XV3fjtxHmcGuV23/D3XnAqzHeZf373au35G0smVLtpTo06nBMrXBASc2tsHZM8SJkwEMYbh0YCYzDYWRTJsjCced2pYcCVsuMFEH0vEwKag0gwO1iUO4GCYNahPASd0QQgCHcYiSOLETDFGbFJSr+/ye///d3e+cY8cJSUvHY529fPvuu7vvvvu/PP/nkY0iCiP/MoJW6rcjWArplA2qPizAN5UmlkXFZ8qiAjcFDwejAoNLdOrMUL4LKILMCz4CFxJKOTBIwW/pggp0opYvMIRMQXtJ806rFw8mF4Ad274ONoZhvx3U2PnrAGPC1Gmr8GLS+V2zi5FkoNhOLsY21gC4GHObu8t7Yx5yPlJfZ1GstxjIDCDS22UCfZ1SRoRb9MZbGJeyQeblI3uTRF7vFs9X+gqJOrB5qFDpZ8X6M9msEIlmdNFoRVrzxOZIlUQweYKAy2J99rfUy5/BqV2s7/ntWJaEdP0g243Dqx+JRax0oQekWQ4oT5xJ9YP8XjvkNavzZCYW2UVc2hT3RAX1z0z1wy8YHEcBROasxshWtixLbOBnhDnk3Ty+GZIq/XfOS3aa+H3rS3YawCS+BlksICYVt1B8XBhqwv661EBBIs2razt5fgR3Tp8L2kENntgsIAm49p8TTpr3WOws+tlzI8XsvHd9cnPcAEePdFWa7vdXrwGYIXkHDuR6NuPwx2kEJlA3CHXqGWX6wa2Qi66PXMw+d8XnUlf2bIvxKQ9HHV7iwQgewcu3qNnmJgMz3M0o6zyvW9ZJJQljCCICa7PxXT8vZAJt/W4DW3YT2E+/PDQs9M82N6x7JTkWmjaJkZ4sIHmumkP1Gm4mcCXInQ5jS3W3Uhg6cr8O3ERcQVekdvcnvX9JZ2OdXxQgsPrExfkm9ut72sWTzSJ/jl+sv3pPj1zMRxL8ODdLN8nJPZ1eJnmr9jCDgc5cBKJd7Nr6xFD+VT/CGEPcRxN03nXZbBr2hpPor3jv6KS5ZoqZ09uzKfp59uubzj3SLJo65Ovj73v0N8Osp3NR9uUTuagM4KlcFNjsIS3WDyxj3Z7++n31luqH/eg1rHgTY4vQkTiDw8mmHMrnMpSFBVBESzOv8CqyykTSYFiJ3me4hZ0UVz4EwIACYNygvFka9Br/ix61M6bW1zvyUqOnjo32k8fdrGGlzZujpX79xoulgw6UcT8EwowG38ootmr2Hj5YD36is1f3oglkKVr8nosVeXoPj68JUWnrI2x9ZO3W02w9vXbrE2x9orNVV6WgI1vPXKy7of/cG13wpTy14WSrL+vpLmnwjJfE3n9cl2TeBU9dDFFh1Johy5RmPXtf9SauOgaVvtqIavSAh8l6xIpClUUJ3vY2YLNImGSyX9ok+6qzDsq0e+IWCOOiPf/PLj/mwuob4/rOjevjFVl3fSNZJGuuj1TcxtfHnn9c16e5SUAQOU6JZxF85xZcEgN3/erHLzXRamFvfPaFZWtKGPQFR84+8hiD6og91TiarMp/ogHFoYln2Zx3AJt++C+7nGP2SlMHudAWQC60BZALTQGk+PRcKKnb7uBeEDe5VjHLuO3M01kRNmBFbIluV4/pW2DzurX2jRvSwAZIq0+MS3PEyiMsVvigLrrF0kHNXRAWMamY7OFq/cY8N7Gh/nvDbsVLFewM9Z6G54EIk/4I7ljvUcqJdiNEBINH/N0jsaJkd1CeLqgkaAepLYfpC9ODw0QqHXIU/eHRYO7wTOFcCYtIRifSiDEJK03bTbcKJ86mYqz69p1lUFJbbBSUE5YjvqVOZpd8utPYkdeOj7VmBeei40Z7C0ejGMZ3Ucmop3ZbtXxGyqMkLJzJJOekIRl5cnJS0b/I0M9WiiTwaxJ35A4arF6m3V0+HKkQxlXpdXR0SJ/1TJ/azUn+LU8mhlWABFoVYt8hib4eeWo3VGFoiUpBA3lT8XAhYKrTIVGq6Q4RUmwP9cTXEmc0EoOsjd7f6FgRMjbmABYkOx2U47ISSbZIuvhMnRyauRhstrKDzFuXwYEd7s3p6R0ad8A1tOORNRk3dsi0JSE3zTFhdLSTStwJ3R5dU2FbdM5fo+nsaDC43SIvwpc6YuKAIEmOfv0+o37MZ6tXGhdFtxeKD/jRiDe8YLArAztHLBDE3xuMI9VuQRRnq/+A5Y+Fy0sbAC39JiCjNJWIUCSkFeMgVKC7Jw4aDoJvELQLqBZeWmhidMj+ugKG1pwg2PN8KLvhX0HcKo5citBGv36Y8bKy904L/h85cuqpnrRAV66685j+3ZFbT1/HtvlYO7P76DF2zh9n9ewWdu1g+fNzR9m+V8tfFLmpGjkuzzbiw8S8B2vOMvBZBlNnGUyfRavNWfTD5ixqKs+iRspZ2guPu6qc46MA/cU4+CcDIRaItMzfsFPgOh4eQGCwprrz8YSi4FRhZ8J64UDTw7Xd/mr2ONWkggwRtCa45t/QyItw9ykRGn5N4B4kNVq8RxSBGe9R8gUKRLR4D30O5NC0eI/CcTaF94DJsOU5U+pFVHv6NzICkXrxFoXaW8yDt2ReoeQxTiplctKAD/vYFpczz9kgtEWJV8t16KRDiFcrV9DZQrxaCZDpBMkpJUgUsDaIQR7SS7lyGBedDf6DqE4L9RA8+49RBCoQxVR+BAYlXnpIH5RKMZ91Q7QA8+3aBMrplrFhocmcKBqfKRMF5OnuBikS1cQ5RfKOTJGo1G3jFMkpU/r9+UiMQ64YOS0zxN8+Xm1ShXxolwB/errS1QbrEdM109lVKe1StPkkLRnzFEEvne71zFP+hL5gINU2jbCpeYqQNIMLvzI4DfUewqIkMAczjf54pjEDlHHf88xRTePOvOc+Jij9Hoit/iifEhOU0siqDpueOmY9dcxOvYiz0y+iVpsXUT9sXkQ1lS+iGikvYtufuND4elNhqac/OrBH4fKGPIWPn29D4Afpa+UiIEocTGYS3xEHEnX4RZFPQP2NDwcZZGMNLaCmR9RscPpBV1s26NM1uJaw9ESgRs1gyl2Qv9AMJh0zHokO7sjuGbuf7C58lBnpts4pGe+UkG9QPW7IsqXPousyOGMu+rWRaiz0q23yeIhHReTpst5z8AGApsqEZswvxrDaBHTBcaslaRxqyrW0YalJqBD4nCzud1nUtmW9/C5UUE5PiRCqUcnu1du/U9aoXslD9S8dOTJa3SnYJZ+wGyiqr8eHfMGS5dMjkZnuWAjJB1ULoPNmaJKews0CKautwaH6HoEVuQs6VPKAxlsLgqq5zWDVeGIWEBRCuSi/cX26v5f1dr2oQKupN1geXL/KdsCiz/EF6y4TURFEO87NcB7dwGxJPocsPv0VKTBY6vjKvL7057ybDZwnkMLoUjg5yL3HXM1YGRUFeMZTV0Ax6eoeySQq09q2opOdpyPPe9lO2Aomc4K9+wmY3Ff1gYEIZmp+Iwcpn+TcBDDsge6VIm4KMFowrxMZSgE88OaqHHLqTQKpulalIfePKXxKaR+okOXkkyv7lVF/3iDFSA7IvrpLXyBxyzL0e8mbKSQ0X9+5+nNmU1C9wrusYn9Z751I0+qvKiFAClO0EmJ3FO3soPA6WhB+T0OJIStvjXjfnEbn8uZGqUycnJ+FE3J8de8z/NXms/qEcDHsptSE5JwgV8gy6z2vjkE2pPitwjiKdccqrBH/S5gpqkB9WikrNadYVN1VjFgF00HZOaYpGoTPop+pv58BrK6/Z0cJ/48rQXNth1LPySj6lEPs2xq9uKfpuqPuuuDPEXQHQEvBSXBz4mSVFdFSyF5pa8t1gXOkUX1hehUn1S+yRTlPIV8KraZRAM0a2IOGpNMEm8T6gCyc+e9CKJPb0M3hKmQjq0HdIAt/JyOqBgNF1aQD45cA40fVhwFZmRJUVoW+VQ+N+rO3gw1DyWAoBnwI8+mEuj/Fmn/urXDxY16Llb8lzR9Amr88KDsr0f63O6HvF4l/2blDAkHtTvQBpBLgncPO9jlvn2M7fRndujy81hMwxuy1Zq4YqvzxWlPtYuxeK007liotebLVt+banl072h7Q+6/TFr8iosW+Vvl9ls7TEmNrtLJJS/D0j1ZmtATVCloAiP0MVr5BW8yPtLKspa1eulBL0PsPVs7R0hYvLWpps5cGWlKRhM5++fGVOXQFmotTT4Z3Hru2Jw1W3zlEeIYrF+sARAOGK7u1tN1L27V0vpe2aOk8L81paZuPbBucIasyWrnsuFpVLUZcsoSHBisX6dfP9a93aek5XtqmpV1eWtLSTi+NtGSMc6dV0RXeqaf3zbR67pozDlYu1RG749g7ddg38asL5PEHH86JwM0FkLNfnaIiRF/lvXZTg/xz4MlIICib0rUKyXjVZdNp/0VMvukYa3UCbFwvS6U3SN6gkucRVmHrTyuh+gNAteXmG5Fg/BQmqouAbTUIhwXeS//+BfaXAcqBqtKLFTAsY7iE3DK1SXUbZ1XBnrtLMZmRYIVW4yobY1SD6Euzd/Dj/phU+yj93jt4hdlMyABqRpajvXdwU917cYJpX2nhPFe5XljrK152h1k9fNnOMXVGVBKOX7U/LFxfgKIO0EwTKpfr6HgE9Z8qkeZzG2YK1H/ut6jJ4i4vuWOOXdSPfkK+Qp+a6rCuIXwnNuFcqhLhWXPks8DwelVKtBrcCMWzppIsgQj1XR9lKuwXEiNv7up3RBtXZU9lPFGCagOmqWxqzhL3np6/zjjRgh9HrkXz0ttG/ZmpyiNN1YMDmt+d/h51ZZ0no82jvrScXeE0XKWeE1eyLA+rX0A/PYWPJbjMALletZguOLpagAZlA4kk4KLfKt6CXfwgzDcV8/00RV4upcGuu0xTQ7NDn2m1rbFrH36HBawH1y/PuM5TrZmV0AYq0RfKH/TllKW0r3ocQxu3qPpz6iDUrEgJLo3KJWNVLPOBbrQcF3d1BpjY4MUHQk4iISOuXQV+K1/lE4awXrSv+nimkzRlumC1lhXkJkb+qa74CpQLcEGJZJFx1xdNyfu4tZ43VU8dZWhxC1lSsZzuutI/0YPooMvjomItpPFljJGl03XiO1gixfBKF3OJj95Pa9jv9ZWy8V3BM9qVNwQb3DckFBx8XySgLtiUekwDKrLJ69T9/7iKcJPiNQeFP+5R3jP+2LA/sv1zQZEuo7yAyGDij2DTGVUfQw893qQji+FM1Kf1nTaKST/Jn3MY1lhHrUFua/6eOBvAK3tccbAkIw+CVtJ9gIJb8VPtURKVYNvHcF1NX7u+8U5rakjG5JHF7O2YuelNPDDaUa9TxFS7tjdEsifbxXvaxRPt4oPbQSU9FJQA5qR9QHl818Fsx1rmjj8+rlTkT98d5ThYf3te8OG83ifG0UOuTvN7QMMPu47oWayUG9HPu6LLxEngccRlDjDB1IVMCzvkYEVShrTPGkeevMD8oKOoUDwTAX/D+TzjxfhVGeDJY2Xl0n0rb/2Yy4PlNVzTB/IcO/cqK2Fv9nFLjDlCIHaqfZVJn3i1DYp5hyIsZaBFeTQeqpxKVeRVH7KedrU8SrFtjPyQz9Crhp9izohEQzlhCoLeaMSygQnWcMXcYKNMsPV6eLOgCUsSdu87m+toBQXcVTA0LS9SEG4Nb2ICM4Kq6ZdzdoFwqZYHFMuirauwSKR8mJK165BoxxyxvUHJVMTY65HKHpGf16KjwOLAuZ6sKpOc5OU1cRwiAbtzeVP1BvuRr0jRdX0M3U+WXhlOVN6mHw+/9JV7FLFAH2Oheq99PHPZpxbCaD80DUG+ZiPeFYiupdTNrR8L2JPKCjQ97dRcFZJLxAbUrXB7/JWCQ41h8VfDJOfbXFQVxOpvNrUfRfdAlRvS+UIMCXZ/lZ9pt/IEFEN7FpP7NlYgZM+C6SKUeyE+vkBohH90s+TYoT4Lt56reJkag0exU0NLSy7DJM+ogifFt3SF1Qf9vQvBa5gcgJ0RFBBergkKaDmDAtplSrn7MFVn6/skl6EJBTdcV+QiCrqOLydyUMp4q19FYUkvjQOqOIeMJApQG6K/KEKNemC70MkKN9Y7Jko9x6nVWsLo+s6lqyKQ5xyXgROhyyBdpF/rseiXTZ9oMfpE9Gm6NxF9mOrMVC+6VdqqA5VXymIOhWCm28zz/eIgBKVPUchdajfJIGZOyN/bljlU1X/ZMWPOipaKhX0j5TO0/orLB7E9TdvlUkRsKNXopjjLXJQznjF3bgi/iMrICi+euYlVSRKtnJVg7hJkJm5KvIQukEShJYgEqb6h+jLSN5JUzZM6mUUOLr8PJlJdcDWp9yuYKl87yktdvLlUn45F66rr7wJvqSo61bwKN4lFeAGBGC/Yy7Z2jK8/9WOau6DSq5SvGeUunuUKefYR9//YSDo/UUWmJ1BQ4AbJmthP/qjih5TliuQvKn0JfRnpZ/yOYYCS1gK3bVmvPfF8jBhc3krIbVhfwFPcEsvSYZaispeltiXHzZjjydYGyC0lroR4S7MsfkVlUGSLUaAPQDh686q3DQ61FJlXU2Yw7qPQP6zf5mcxrD/IUwBg2Pe3U2ucVcSBy4utzowtBdELLo/peJ5a2O93iilOlQy097g/aVSGwR0I+EczUL+lsvKS+LHi4nS90gcR52MjxI9xJOCQNfpV68ZXWRL76MdhFEhg3xAAhHBE2NtBnCoNbjRqWRPYFUBrxjPVR0XBXS6mGmOT87uMb+VuPoUqxuHyPqVQA7RXQGvki+Stq357cCGv42NpZB3pvIU2U8BEg9q2kaJeNdXTMuizpLqnJ1WWLm+WKGxuDJTCOcwfATulVB/zrEPU6G0I+RMuQEt+bfK7mEvkaYU8vHlyFEjHn1FghvKzeK/AxVOLVtb1iKOyLTBhw6Q/4eMaE7qdIJuRBHiGmDN6LU6lxR17I+RZnxI100MPK8ZnfglMmtdyvLP1roMT72MUFpcwrxM/blntMpG75piL5nauv/Cpi8YmNDixueTrIuj5D+mS0tF61x8fKgUWml6NDjCFFLLUwom6QiuxdHlWLw1la4X5oxNjadl8b6kd+BU8AU6PY2i9kSiBJolHxNvjSQTPW9qZxfMmxQYa3K86aFNP2v362nh9BWjLOlo3LZ/ZxZHKypBuhdkpIduuhPlof4gdavnxOLnLJXxqdpC7S8eYbEq80Mh1KhkmwZp7uZ18Fvod1zo6lHKjcTrmk49a4U0FAnmx2MDbXVJg6cxQs9DJ39ffM4o7AH1jOJ+Pxn5eJDkVdCt96FCOjkoMLNVSbBN33LkMus2ocdVuBoYdK4hnUuGZW28i1vUi8FEdrvG52weruh4qKp3esWq0Boz8Mb/nhbbDDzVdcsciwKK74C3j5bImIUIiPIvL6XFNdBks1/KMSY3Ma8GdNcXF8hw3Qs6owwdo/YhyIvkfFCLXhYXJIJsxuFPi4eXRW4cq5OqNI33mmkKdfUY5gGBbu07sL5zcJEMGsYdzPnVe+9pT58VxxXjZ5TviusWVyd2hrowDax/Aj6M6at/eoRsGO9UQfpbNDksHh6QgiUYAbXYwIOyV4iTOw5wMbvWruTZc73JhLo5wYYE23qDgU3xo5SWbiZEjZbWLUdK3xiRN7YWQNNBAdFWN4cS98XsxmmOqE1JS8SpyAmRNHOsykpSUDvAym3NBVc2T1hMM/i6etKhzmIQg09g/mde8C5x4Mi8Lf5WaC3OJAJrQZQBZ0w9JQlrZhd0Lq4owkOolFpOJTb1kQabj/HxwMTphr3EThE8moeLc2hG9wltQV0DDkcPkSlZ3akzCQmYKGwU3JjNqViPJeXlv4DyyQyKbertaUzijtObfk+DnDDRnFFFwjuDqaJjd5j67Of1ATKGuW8IU9QWY8wVKbJ2TR54n4Nzq6szoMIRcpmPRDd2pywSe2q8eDpuZM+oRN61nxVyIX7oQN6i09HCSCGxu/HvDIsj4QPOR1gw6xCCypVbdhBkUaPk0h2Qtu5z72xq+EVk5TXwO1n7Dtzrb4hNi2FXDA6GI3j2Wxgvoz71hv3hFNRp/L3BamjcidXW53kCMPQZNfRI7uZHdkykfatVxKsHyQhA/Vm32yyrtdEZsv+gWyqRrNilSYQ6U6e49IlpnahW0+KAWtZV+yU6TA5qnD/bXMOpc5BNEJMrnFrIIBUO1VsgiZFNojSqT5izy4H3RS1EBqKv1ZqQrw6r+qNFhDghFaZHutz+8fzMsIg+nmpi6v3QBD/TbqGnFwO6IPjFXCImnGSTwTLaXCphmJD1RUCer9985mTtm2IRTZemlhgljxXfpXGe8f061Fi5vhhB4UfkDMadkQFqsicoddH/ommdyQAsrSyg5X9EWbbCbsD0q6Wp9B4LTe6d3OyBMFmph5SKO3jW9m+LpuZXLObCa3uMCa1XvqN15XRk4gu5u12QrKq3ubqPdS6d3E6oWXdyEIyfTuwi9U2Xl4W7Drz4F245q54qnaUoeMzG+Ee4aCjqbPZiGIrnEknul6yBTAQvpsYCc+OPZKK785TCqtlXSsIZ3oGEdUJx7SJx7oJjpdJ24vELqxEFC3yfWLU8r6+rEBbRJwoBnOv7nv8TxnmigJrPyLi1F8qUc/+kn43iFkTD2Niqbnxi6xxKt6B3MpoMK4OmbfuQrb9oTZTQdXwOq7/MkyQBwqUIrcbpBnO4NX+7p4CJQY81ZudMUdYy/mOl4wRftLAu8IRtf9JKEtPb/mNAHulSCHwq/KRctaOTqZI7A+5zw2PqNiskihs1U0SPYSKbAbJTesj5CZmOZkGDyqmVGQq62Dpi9WfQKGA/qiYrWCMvJ6g4DVHZZpAC2LYtSjjsEtaUyXDrskMw0olwWkateg1/litIQlZup3iVkH8GGncCKbViNsfI0ZOBKhRTdDU96YWgL9AeAZFY3pjKuUwaJ+NrMF+KwpaurBMgOoIA2HlL7BoetCVjOZsBSt03xSq35E6l2lOPUKrFKbKgwrbGhAIYZkslWbgf0goyDqJD1duKB/indAqIOI897UR2pzBwd9wpSONltY86qIJNrlcVEh0dLUlfpHKWKA8eUWAGneXYkk9oOJxXsm+qWEhnVfYl4soMm4kljff0Djula7wchXEg1CeDHQN49mfsxcVkCUDLr5GD8loyHxtwS1JOAE21y685GK1h5mCyMeIMce3ZWjAC7KKoJlJGNmxjfAJw0dbSgs+RVRI0prifkbnZqLutVZtuMC5IBiG21Q3VUlN3M1kvyrMObxc+ZD4eW3IIvN11ageasvOHntfemqGpi8GudP+HPaGz5hZDx7XVZC+azU61VKSgLA7+n8ed2ZFpoHUtLp4KK2TyMc3oAD9h1cwwrrMaIYdl+VO9jmzka9VOzwSr7ShHNTatCIuGOMeK22g9zAkzDVf9ruAYj6776XJvnYvTr61WKQlgghzFlaES9axhEY3o3sr5Xgf1/ahhX5PZw+Zf1slFSN7vPvp6t0foyIyHFnxcEl/UIU5XMVUyDKINV79Zo1k3FCcBCh8Yxniy13oSnfw6KPm0mCoiesSe9cB5s8FrdINlalhfMuYmROr9KBataEU+xKoqqt1nvFd+LjltGhpfKqJ5yHo3HDc8DzAz8T3Un/LP2WJ9d34KjEvdFiUzNZ8rbAmgiP6l3s20kRCDWdnaezJs76zINkulP0z8H8t0/uxXCCtG8UhmO2QA18lTRH//cUFIqfUFraH0BF0t1HpOF/Yp92nWplrfuh4Ed/J4+vdhwmiY9OQPygQENL9mgOVkNnr4hQmbS5hWc2yfr7vhK/+iNrpEBTgXqmFlr/LKdmpFlRFMMMCflGF51GR+b/dIp6Ey+iACkRpLKT0gcWUdIFuk4Tqfr2cZ8PlhSCkdtfKeVgERaekDfh7mJC+kgmE0ya8L7S/pHtw83Z36i2K2mwW2Tc/S6zW6ag/TIyM5dLGVTHjQu9iwtyU+iJZBeTUvysAVtdmOzmyLJNDA8zn00ck/VfNqnsaIGOUUkDnVIhkDIM4UG9/hNg5gVzyiuFTwMcBgCOFaU33XNCvVozfSNsS2U77zNIor4JpEbcACIShWC/fz+B1Nyk2k4qR/FOlxdHNqKclsQeOPASDgoyRB5AU6kb5F34v39/gA2kWJXDtGh50htTmnGqV2cLdMCSBfpVxiZ5qGkY3Ren+UD1dFkd5zN+L6GEBsznlJyDxq6kaORHygz5vVDIZuNhn8gyOMy4BJoeH/XUo0xvnE4ywoJ4WcGE8lvoKQbpLy9a/qwmwXytk0YbGsSBkJtf5P5Nob1N3KNjqIvj+Lob4gEj5lVvWUyuKYPgkLHjK7pK6xySW+O2f2S3ha/UL3tpCEv6w2haqn/2KnW3bw0gMv0ZK/ufXM0AiXt7NW9byFFcmXvxUHYcl0QtlwZbDB7r+mDSMBPv7r3glCbN/uJpTa/qyFR64vlz8HJwvJng0wPD7SqdMRg+eNX4vaz6LejkfoCKCKPyrUJN83Jb9PNXHD9gJwXB1inLjoFvfGDciACy9fbIQiXqiXWlJJ81apIiNVzmuprfBrSuzrN/Nf4NGD5SER9jU+DOSgo5qD6Y9tUNqJMbDP+nUF86Y9A2V3SmYyMoJKF4rMwqTqz6TkiMpW8zsEUy2wEuClSiEwx7PEPg/yV0ePsovOdI7EEXJy0reGsOrMYHLb1ovdZ5bo5DiFijtvmfVSEMC/FcaJLtQp9HAfda3sc9K4c983eF5pl5Tj4bjnfYz3vhBrLk52nqjkfQoSTH1ubsqn6k06rJqT/nCNxODE41CsCQT1/oNfarjd7gIja4mUFlKgFAlgBKIq3w0pAS4GpGuAIRNMr4CitvscKUMoYlFoBTYkZ4xUAleBKvQKmMuScz9/3Lf3eisZGbAf8CUwTqKx7DFAURL97DH7Ue+gxsFKv0OMYoVqhx4BQWQlgKpBc9xigplfoMThRr9Bj4KNeocegSr1CjwGbeoUeMz7739Kfze5qI929IH7Sc3f9RXj+YBTgUW+mr2BKvUJfgZp6hb6CQGVFiNHxm4d9S3jJnn0WxIrgbupP/IGgztuLxx1Gl80Hdr6fnSK4mNppOsR+/fvsq6onIq6Xjj8+/R+zA8dRwCOxa4ldsfqRZB3UD+o/ZTdfiONaqH6k+mCRPdhR/ya7sFy6p3PEol//hdrZ8HSPs4Nq0o1Pd4Q2+WTH6ZLxkD33lI50jqGUcan+xQ2O2eU9v7LBMVAQLtX3TR/DZQU4Z0f9VnookYbuZeGMYLiCs5jxJ+V5Qvzqn+dq8jvGwnNWqljYpcnRCzsVQ/PChZo/vXCBBpIidseWfVfMMH9BPbr5fvb5XWBhu2KFXjhf4TkvnLeyKxa2KRDohXNXLlUrqhjzq/c8DXv9s7V0RW9ILGwpXdlcurKpdGWpdEXJK79LQlyWroxLVxZLVxZKV/T6xMJc6cqsu6JEoF+W52nO0D+j0hWB0GOBqkQv9EtX9P7oQJGvgTcdCRt/tAk1fq+w8Elt870HFH1609mnnvqktn/fgfEjgxK+j8iRk+rHqMaCgDaSXSbUSuQB1pTBFcU8MFJMsIsSxM5Aupw+oSlWei83YGMoepn6sHzBAN0taln+tZT3RdyuL5UCMCRqUGRvPPUj/ZfaYmfunr1ZkBqBl5c4jdavW13edP/x5c33yj01bRrVTHp0UyKUmOXCQVBFbL79wUs1BgmxyoOevfnFo9uBQJAcUpsElzbtV9h68zFRxoxXDtM1cob2ZWdeuvP+O1cO/9TRe8E/yftSNG1VX5HBIcns3dSmjYisOBxiz/jfEVwfcGeV7lRdZyLm5CmOQqdmJlUeEDTpCaFlH9pUcfVDIgatv6Aw6WRB5V+1DEV5WFN+oYvrVZxMyEg28dTW+i+QRVizAzwQhcBKigVwbqE521l+Drhq3QlU/2UmjKs1j8+AdXzUoVuu0JyQ20MMC+cHb2D2koFYVuQdXYJiA38qVF/gFJiQzdSSvGYA0NbNVhnrZJHxCq4ZQVsAuKTDBtUVpv2UYRuX4nVqIiNByUWE7Nfl9efiWrWceUdKpuyHW4IUukhqXR3v+NSov2B3DPxCYnanfIuljm8hHz0wBLD6yF6A7/my3l5X0QqjKsuIF6TlFsWmNvVT/a3tJgwofv68DgXkJb1LyFWsRSAoxAUjW9j68jzXMrIZAkAlelIHE7FJthxzpYkLOLjSFBfrUPFlO2BLulqbG/6amoRQyNxod56XEmViGq1qJVKTqmdAsM9pItxCJXFgwIIAHnlJM4RCoxiCM3BRCP0IkYa+1YrovoiPmQYH7EoOvaW0Ef75jJJa9Ci5osrLTewjGkV63TQHDdUjQKSSP1MMWWslfyZP1TCKkkFzmvzG4MG2jCel2eAtMI5FZ8H6nsBfhOvEUgOUKNl3e06jtZ6TCrb0hbtrOFiIGVaxUSGIKTSxiBAT1jHDnwgcGG1P+UnU4fXq47EsRoo/ZXSiEqNJjvpBh2wSHE4Uyv6ei30jDk+E3DpBv4btbntqh6i0/p6wJyUz7fQNBrk7fRsR7Lgyr0aAnzwbq7Gf75PqDr0GWRsUZphfTn8ltuEoqmG2co5DpR04AFRmv6sD8aI1abpMgkAgZX4vOqAY6QIBrz6XGD9F1Uj79XAdX8bWWaz+yDO4R4etHjdtOpklMWjpWUGj6tw0MWo4lq1FUxRKwEBDLDsULCdznV+TOntp5LVl9iEUnAW/rt0GEi3+tHaLksCq+FVe0nq+il+2WpCMD7nlHb1dDTFr9ip78wFAQRToWMONehtO/ErtVyESj0Vr/Fz8L/qOqnCxQvTPvBI60HEQatYtmMjrSiYG0pTgBCYYiWaXLwmRgDmKbEzfVf3sBhS/ZAhuIWCElptTHK+yYH6pXM+rd3Zy/NZBEQfQy1DMDXGwaoIC9GTjoiXdDfOjw8vr0doS95LtAPMV3LzIylHXO7vCPHSdstDK9PaP6wukP7cpgrhwr9PWgXQTEz7/COkG9d7tlmlK4bLZm21FyMoQhpy4YebF9AJif4zuPx5yPowqgxrLXuVOwpwg6u4euPiSI46JLu3oZPFWunT0Rp+msVLgn1DndBQ44PH37dwfBfdiqaNsdfzP7hdKmfjLz4aV24aVWHkuDmDjjO6wF2VnVJ9zO33pjO6wI5XO6A47Uo0/iiNV/NF0RvVt90lsEYeX2Tij4VnaGS2epZ3R4lk2DignsQNaPMvigKb3WW+Jk9hirjfHSdL7nPdJ7IDKl/FJGgeUkzQOKCdpHFBOUhzQ9D5lXLeu51fT3XzHQDlXq6mR7GEiK2phogrTbEyeM6v1Z787eQQymhiz0xSDgPSTQjIMK5EhIdCTJcMUpgjaQiF4XLfPTCBrWNVeEgqjNsySYbI8oiJqNs8p3UB/OCYLKRkm1Z0pybAkAQjcOycxir453jXpLrfoSoZ1D0rJMMoUOE5/EN4l+RMVPZJfi8teoxnWueze+PSgL1s8C4QH+UgAeagqN8eOuh6jHVqVUhpKhW6Un/LEovyUxxXlpzyrfKQKEjt8wYOPqlUGQ1StMkCiapVBE1WrjKWoWmWIRVGwhSd8SkZnFAUzaKMomLEcRcE5vilh5pS8CDM+pctJfEpem5kmtDPjU/KSzfiUURtc6pCF/Mt3dtTUIY+aOmR5hVmHnIWyl5dyWrVF0a7XZ+XjpZ6QGBciCyHBmUBojQiIVVIrUZKAb4u3JU5LAwz+fP/EJJuG8gg5VL3fJbfykSAv8P4G76XPqeo04gyBQXUlRH0cGZvq2xpijUAMwVlhw43dQ4ffNS23hRvU1ASQvt3aAbRka2qHnC6YWQNbadSVqG5Q9um6BimSaLa2oxGzQfbqf7Q4qq9Ui85WsOZ0RSTYlRUxT/inSVfYx5MZazq4+nTRekT9kRV97QVCYAmQSa9+IrepsgVtSENDDGaU5RI2mJx/PcJ7neOuniLR5FhJG8uqH4uT6Aws1YexHWktcrYqqHR2sFICpz7y9ujP59ONGHkpMI2kd/rXL0tTXm+tYAB3Kcx8izxwBc5kVgyVavj1oTshGVItUgugAE/8yATmshqc8GU7aXn9VflmdCr7GILJwheMqt8UUh8QbqKCnVTwMfUX3kVcqZpx/pjfblSQ5SvU/aifRNOT++YtboxcsSYXEo3stQ0t1uQGXh+KrYIWx7+AOyrXyBvYi9UQiMZyNPjYam680ZX0xn+mGYv3qSHfydI7vUFpmbjmm2KgzpYovmv5wKESU3WEyu86TDMumjZ3hAais1Ga6QVhbEQmFVS/Oc1a15P73B1kYpy6g16MM3fQjeqEKgCablnBQJ5Ks8ESBorgN90EmpcdhlzC20lCG0/ikhBfmfyqtizEW2SttqUh3qKcQVMeoqs/2b9SPO9JQDP+L5ksDTSCkW99uTyaQ12opoI1BY7wg4X1liuxKZwTfyxhonUCDwY7pgojgZgy5GiYPFcQ+cm8jtWq1EUbiUxg4/qGMZbN3Rf0Ka4O1HsYD2DHoXrHT2KdvyRS49dLkFa7qE0T4FI1dSIMonZahxgyLilC4FSkRfoHcVmzuiyQALDR4VBIthAgAPY1Nnejg5sdxcIsNSE4wcHWMtkkyFaUCDepf+1Z5U162yCC3w/MleBGUeQLxo5RfVS+hBTNKOXZV1Fy45yyHqG2CFDSeB+8Ivqlcpverq2In5lLRI9ZNFsxMkQi7C36SDRb4BTRY263+DErsCpeEbWWCgziE6n+Cm/0ISdnBtXz2cgXwkxfpbGzUnDQO9TZcsZbYPrqNA/T1xM4v/qIuPknZrP5vAFuXtpLVE/ozov8iznt8/g3IirRBcwx/N6Q7iFvdTA+uyb3nYRDpPwb4RDNA020xGAm0VcqBkSqfqCQ4E6BVOrXEBXZ+IhSyq5f3fe07WpSlfskj0iB9ia6s+EvR1ZyH0DD/If3Pc2PIv7IZ98xtvi8+8UdicUREQpbXjaUbHfZfrHVpZziMbkq9fsJGK1rO9QPkGNgsBmzL236jNtJVlPgVnxFfTm0RFWGUpM/hLTqhOKHWYc15R5ejj+EeHa9J4QtnH/XbcVe+CHdWwMpwn3WUxKiwk/pPRnC8weZSMqkKfHa0SxVGxSAtUVhbaFYp3rsGerD/Mdg70P17p9kYMkuOGj29qhfXyAWbf58wxySEaCt/zIXQtaGOTTYqQXLwnwmN9VsZg4SuIUrgZi4s95Vd+W+rAa6KBw4nO7qrwds9qvtMrJS8D8+NSgmSgnw45POE76+X1wxt6LGQph8/vuNzMJfXYGaMzRZkwNTz/zGEL5t2C6xEYTYISaI0K3uBuVgduF7EJ/Je2EP5HBGZI4kjB7yrJQoFc0VINtKAbgKXx23OSFLIpkgjOgQy+MM/JlypwITRiLaHGBmOtehPlU40+mMq7uO3cN+RGcwXzXhWt9V1lGAW22s+qbyexebKSqbxIwW7Y2a4Pfkd+lIU5ymjyiFkDo40Ief8cytLorJyVHis+TfdY5P4wM6bOGDtOVMv3p7hBBTyhap/371aXdpVxbYmOnDNcxpoOqmugGSF3E8kKaiddscL4p6H6/KqIDKHelnA4rV/CKFRXQpurEsuV4N5owmOo+Qz2oUQsRwvyGAHJemUC7Sr2C8etWTzCJim8cxAeInYNFu1wPEJUd1tTscR4w4QgO5aPl/Kj9V6/O064DoziC++6/1OVIp79o8rHe+nZ1rs6aGkHv3b7GbguDObjhEjGw1h8/VcsQ8MxM8bBKrzqjWx3R09a+q/xocidHiG2hxTVb4K2nRSEm3eIaA3ravsEXFBKLNBnSuOuD658tpmkzrXzYTQZbfAfjUKJkPkKvCyEEPHcvJ7RKfuEB3GlWauamjfwscm9wU/DHmYu2kjihOUEcjUeN6KoO6OfoOHQhhTPeAUBHQ2WFtcCTbTH0knSgRbJJO+R5E0kkxlcScZ9JJf+cRoCbpZBMrk07BJkPSCaCV44WqjyBJyltEjSEVnH4js8ciUHKZW8kttTVtgl/aVbcrwJudiaW3KIud6GdA5hdn9Wxv5bXv7v2gce+9ezVLfaQnNnVj1Uf1gh1RkaftZwJaOfHu3hFRvZ158+Hbb71XtxyzVJiVf6lwb/9QfZfu2j5h1a5xgc1gv2y/1x++CRJh/27NLxSiKezRZq6UYaXTd9oUL+EzHQ03orkV68Xv8svPxOcuE8Ce/nmyKnZ/cPk+zTmBWgjK2HK1tcTJ9lcvTw2V8fsG/UUHflauuwueCcwOFwdR9KhY0AzbR0dv/alJ/7aIo1LVBFDp6K2TPltVcfPtd+kLpn/5gSDiLg5qf3CrSopin6BARII0wNp9S+zTOOVkJMybHT6zPl5wxbWiMOKSW6M5w8dX+KummIkfKdVOnxqys1ST4acLCgBP/XS4wU8dCp2Mj06WvuRPHdN0qj/3a1iPf28QRT5kOUK4jLxDRxZJcQdvaMLos1gc3bi7laq6gXfLWXUj78KbeOlG85jngT8IB4SXXiUejsM6yhRI3RMFK1GnXRU/GQfbtGtqAZWAqdeUleENJRM8PuXQzdq7DEmgUsPn4rRoJnh3D8jfGFf/poT7pVHvdLetg+r1UdGe4XcLcpGfH3+2H68xcN0Op5NZ/BMXhv2FtHjSnYcieOR58dkN5U3RdW6NvrtswLRLOg7gccqksBX3BCeL6wmNTbYCnnPyNIq85jgdyaJRnAk0HemYsBBT6NyouqZmDBIoDornqhUdaGxbsSJ9xmTGV5rSyNuvwrWXq20u///GtWewIa7y6W5E99rpx5pr/+UM6HQtZI0q28eRJJasHiR+toTnn84S1idxnSUM+5R3fAlDmI/9szGERdDcMYRP9cIQFp992MGSDZgygxWILmawbA+ZBM9sBasXuqhS1jNlBb8uHa/CvugYm223JM2tK+NXdCj1GZT/3DN0RYV/qFBJxGr9Dd9XXy66RHVqi3Js9eINsiD4aISQDnd7y8uwcpSHi7Syw1j++Cty8RGjAOqfCksCVEPwTr+8qU/Z4GxXPuuTPdOZkqr65fQpaAR/LWPrZxq4OjnMDqREqdWwPQw4V9SScS4dLpAZD/eTYk0UFuh5a5p9wcCmsvgS9LXJrOdx6GLKCow/8x0Fekl9YxMqPstxyPxhXUTYnZSqXimFMn8iYOLJbG6UeFb4Waj6rAJxSVxOdW/DXe7a5EJfXjQITY5nELmYy2FKS+UOU3BIuYPShLVICEt2vG4w6EfyF/UUx1hMRm7oPvnkQm9robJktyUD38j280f1LDHdJ6SflDWQfl4d8tYQYJvjx9F0nqC/NyFBytTgzwRur4v6WV6IVolR+iDLnvn3zu3nT/Wry238KQF+SajVr1OjfW/wVxSWjOTL0Ku3UKRoI1wNj25h3b4/vaEy+8D1SX4keSCnpWoFUWkuqQDwPOGtk6qFaEVF7/kYSBNhhVkpyxHZrcn+6xUzkmxvw7VEX9A79Molrcit15/Xitx6/VuTd66s4+5e1tsd5egp2ei7807ujhReU6v38wa/rL1BSQnEimxX3WG+zPG+MimN75lyHss8RPj3qR7VRJ71XE814hZyG/4wQCXEqyKQbmiJKS/UdbXdBOdI2OFUUQsn6ASzayQMjKUHE6Cvm+Lxm722dLMC4lrDFQM20OzeVHvq6x6xxWvn3KxY+0ZHNA22TZgFsNuE1E3ioFNuoh6MBf0o/p3yEq/txMYAuPRW7njNseMnTp4SHSr3k6SPAvcEyKZ3EChbs2V+3Za9xMi85GCalxxMC6IMU/x4Yqv+PZlAEih8SE5LRFEBCjwypsUIfj8ckdjuD2WWbbC1/tCXdbg/pcwljo6NP5IcrynWFFWfUaVVktrwqzCp1APXKpNcezTSPZs1zlwZqm9qAtV6mYQ7LL/3IcGzyA+IE2G1Vk5ApLuYRqT9LvROHFhFiTJ3ZD54byNZrG+Oc0ns1cqDCsxX38FL8r74OXSlJYvoMkR75Oq2zkiK3dSE5ulhApKDptbV83V98gTLd27zYNCTQeF+kYkn1dWsxDtE9W2AU+snIvlmSp05OJ+qT1J+aJ/cxoWbKG+MSYwx/5K+snAEWWrQSdoS1jYlbDwis0veDbhXs+nd4iIi0RZTI3NJ6k8XlJrInggMQANviJryUZDLEq6+skfdvL9thSNTyE3iFdqwIa+jNXwud/4z0MtBmRlV+9f0KTQ+p5F70Cz4T65UTj3Im9tZsIhsDca/EHGVpPGsx7IpViTpf//y7G2Uh0X5qvkHK9cW91+MLFzLLyyHcVExguy45xmbiEWDYwYRglAa8aZtrhcAbgX81+iI2ZXxnXafVp5//F6+D4osOhWsJgFxmJ4H0s1kzTUWVGXnLnRwsFhn8sNSzsNFx0PVDrcnmAxg9pi703VZcyvzXFgABNHduHXPbPLWOv+lb55BRjzLu9tPGxmIfn3HAOnoI4OG6idiP8EiNbPvUr0xv38YybmQ30utHCxpVyG9loJUunwDfbxBWHYRW0slOSihouuDKClVPXgW9A7c7Aullquhq8RZ8gp5jGTFcnuU73xsnD7S6kpuv7oLdKjLsQ23NDxDRgjugN1diWFcGKRQxKfTfv5k+lcn5V91qOyy5CqV4pqqq9QW61cXOzm8N5PD7HF2GFydKNSLBdCqWYVWWCkHtYcUpVoABZtSLR46dV4txwhkSvHjKN4CwYfbGDjY9B+z3XC5suY0HKrsWvBbyk3T5Ktnb8tYz56516+hZg5MA72PzIXXL/dI/NiHMJWXRzUUlQ9Ber1LuXmH0TRaJomSNwIVKozgDFBrJESToYrHYVCDhr9TMcySE70uhOKglbZVYIUST6mOUyvsyPsE/bde/hQXDRUdv7LV38lC91N91CnZ4hiNjRHULHEBH5GrhSmyViqSwt1j9WKJxrAf/uWp4lvn47ZsLLAKe9U42uV2lwLPLA42j2cAb9PHViTF9alx84v/LHSBzUMOLlSl0TwPMl1k60gUFxjH2WfHc7AP32EuzWcbjJ3rR0DjRYscCTBMXuWRLWWEn97EEP8YERg5LkF/DTosdjVM2eSsygA+RUC7pVl9wneyJVA8QYtt0sztWHkQm1mqrCY1bEBGYtC2BVhorvV3i7NmcRyXyzF0SWnKg3l6wg1mRjxpHuoZCLWdWGsItTtdHr8hp7jm2T4rB5BSgXDbbgiyQ9N/Nv6SJgQzfzYbLO/YEmIFNak9w2ZLvJNyHJstfiV5sF2s+0lzUgXhoBZN8ERkoOMZRg7J9rYzxS490EsdFcTF+SMm/+Ph9L0yfMBXbASCj7Fxz0DFMK7r1nTAtzQcOkzXsiSLM5b8J7mnrHLEWaeIp/SSuEgAwD8wshk+T6MO8RSTtUEZDctzKgC0AiHwL4XqkgmjKsuKe1XgdOil5tbSSxmNToB5bkN6KQK3Ko3kwDXMUjueiZTpZzJee0JE0l8TVPqP8rG4CtYGu50SMivybwFpMyIA0J5S7GJeNiDCO0Qir3VmIFEsWxitjBILn/kPxLo5RNYLmzFCUGBS/68NZLhKgIw4V9/WKpudMO3yF/rxNhWKqvhs6LQkIlzMfOlGtE0P/BEuI6wyYmT4UjxKl25A21T9cpLTDMMSI7HEJ2VNWtFu4rqzv745uyqYLird/DI60bA4CcNjDy7QhHnxUPvateFbiRVgGtb60V+1sa9XRCsf6K78VXflg92V092VD3VXPpwrfVY+0l15rPuzj3ZWwuy+Y7Z6x8Df89Ub6tGh6n+HCW62eCH+2H+BYIjvC0NcJlfWMwkx+knm1UdzFSXNpoVAHZu3EO4b/8iV7D46sH+0GA8i4JGEUv5AqXqllMgkOYTrPBI42JU/Ebaxuv1WRZiuQE6ofT2xLUgPRf7Ie3nzO7kW/QaoYFHZcYU+P6Bdc8Y1v1seaF9bdvk97THfIw6ezu+GK7+eJZjfv3q/MDZSIVKsLjpJH9szu8DCp+tuJai7fqv1V9ZtjW2SOWr6r9I7pjqFugyEjqlLoFNz3YP8+GJ+ybNGw2bTKzRtz6CjoxDOVWKVJI+qFRjk5fQkr7wWdx46ILNc8zW08rwH+jS+WU/qSoEsiWQorOrz8FGfr6hnCvBM4B+xuZfNeMnsnfacQciFuh5b7NABNiR/vdbNX2+W/yJz4ahmG7o0FWqJcPIJ6wY5+WI3oU2/hm9PW51ASioLp12NoYWskEkS0gIOmgRLrhVidma/ID/Ark4uAlg/g7rFZVgsQrOyoju0HZPoj6KUsFULfOH+Zt0B8DbERvrt8ly6rPfd5lCv5w4J7LE7LPyYSougLQ8x5FJazGQ9tMcjQjj5ScJSRMYAlH8Bk/CSR5BYAmiJoLXYozCorz5Y/+6nPvA///VNwU+mst2AjBToBxpwADILsCVEXoC2KG2cuRHv37A5Pi4mP4sIAoOdCgsQMd0fy1Aba1UguLIlUAIOEz7Sl/vBSch2GIwgNrv6wlerhfNefVD/zr36oNLV9rqFhaL2c16bxYp30JY1BFrLghgYwh8pDrMKy6vWMMfbEJJydXnxIJHh1YMU4rxa/5yrtkVuQdt8q/ENofhRCl6Ic1jvD64eJJupjsy6I7PuyPIwYpJ6empm4GYGNMO1TxYOrk4WdRg/EnqmX2qo9GjnPTylsgfimzeJcago3ExELB24dLuZo1MQS19rzypsg4EtuSRZUMW07x64Mng64M5XlWv81infjP+bPpUS3+A+LWSqUULJLmiXzJTKWuwiRMguOXjxYpT0reqw+aNSbf7MqibYoRdLqAYkfDz+SD/MpIz6rgnWBlFw4sII3IoUOAK31MB8mYHbwA4RYC2on6ePwK4N0X4FUd5xdUWB6Dyer+xJzTvES541uHENZHEdVlE3XKNnHVZRZqixisQzCkwRv7FBKYaABEHWFqcIKDHytiUCYHNVMtt2ktaAEr1ZjUyDEj8+Hmw+PFeIZwOmoNO3COTojotOxOgVuGlmwerN4AHMXdThrA/dEMfyxEKvL6uilkkVIEXNa1fvP36vkn/QTLbfmyMu9uO0ErpwLoA51/zAqq1VKOav+5JEQLadf7zKjJzfF4MorI4vY/cs4eETIVNBaXhqP+KEL0gPXRaytoDX9u0aVx9wpg432BLpzkJLLJV66fjJ5vhJ5LLNSCwtjhRTX/ARZMIlmFK+Nvq+3TNcPj/8O6WsnZVjZbgsDNUlUonQRqQivDJc3srfB9j4QG58YLisduEp1sYHc+ODw+Vz+XuKjRJYirT90mRz57yUxV8yfIhfsMiKyonYwSYWWVHNMzvYxCIrT3jTaTaxyAo5UKTgUYYvyAIJinAPG9X4ybm3LW+L+vmi/j4557bl86AR7mzaeps0PvBu203bb1s+R+Jz2lTU4Sfn37Z8boh4oPGfimFbQmdfCviRGlVvtMSyHFy8Zm3A1dWy/N9LhsfZgCes5Vfxzwk2aInlW/xs2HCLVHLfTZnrPH9Cz0ujonsv5x3SI5tBWblXoFPVyg6vYDtoZeKVdOL3egVrjAc1nJyrU8EwxkMZTs7RGhA4nsdwslVrpuPQoxhOztOa7pmfwnCyTWs3QqNO8EcVjC/SK/A/pAYryRgvFOGwLR7RAIRUThhjUltG+tkMP9Og1OqCBsmCfnpOuWbVONyia9aMWf2SxlH7BKx7oCc6NXTbZ8bt1e7zpgbx1O4T2j09nKd236Pd0wO7HUmcUrunhvgir544/ngq/vTlXt3lfAcm2Vxs8auS548tfqOyw7HFL15eYWzRRS76VuVI46L1e4ZaeXU5SI2yqby4tKwzs6m8tpxe3WNTeWnpo549m7S4EHzmi/WwukMTG1e3ICtODwFNMf2BdJanw8Obl6ZPWV6qT/yWXK2yCpngSBX3svw1pOHf0lxXaRbdJ4LJKTCVJsbqDthEouL7b8s37cuKjzmPqGkhYmS/QryJ2nf6cCY5HlDXmKnEm/dMwIYTLbDBA3ja7tfnaspLAI62EcjBRHnqmYny1FvTPawDOUTY+0NThko3L60L+d0wGP7/zjSP/zzdwweaR2rKEqsr/42ZMGxI6F8ct0atykKONyYdpbWzDWaZqe72fYxgeByj6aXElhuAWNmgRm6xtgFvqHwroX325jf91CCcyBBPccwbDtqKmJGIesnsFAflPaoVwn3yZ5VQK5KOeV0FWYA4pJLg83glshCQjMxMqVhTHYlxCudzAUKyCgSBImus9g/pVurgW1Y3DQq4CgFrkx8H1W/QWPT3rbIxKbFZl7fFFhfRq8BEBtlhfAp6sr80WuRqXIW0ZCA+1WLySMzAnUoc3ABOsm+1PnTTvub53ZucW23cY03ExMLCJWISMZGIK4z87wzxhBIeARfL71sVYsU3dBlTBFTf0/5ckZBO9EWtdyMheVIklTs/SqhtuyHjNJ0tCbGNQMf0Dgc3Oseui5AkkNYX1QZJwNI+mXOXAPNFcLhEq0tBEV55WZrG6hhG1kHqOK6NGkSB5/CKJWoHG1/KwoqJ/Q3Zi2LXejTb99JXlrDbo1EQ0plvcaVkNKuBpzvUKqe9+hPrDs0KTuKWVjSV9+HYKwVwz5J5tWVHehkbCzlSJB6uLUQnJTdxRbNBs+bgUlsfewff5/SC5+NHTV9SuEgcCPA4dlIt8xBKfEBD0jCZhmyr+UthZ3V8PKVSZZqXKdpBZqdddKEfzwttaaCe3SfJvXjMBT4S6W1ooLCNlCnpH2joh2wpyZsRE17g+4gPPyk4fFD6uATvSSOqB75ufcBUU7EuATOigbjq8jGioaBplWBjfpVQl3o68qEP55TWeif/EHjiQ76MxOkqPFfctQ4AERE7VC4DgIjQpn6T6MONkkzeP32NpA1saKlnb014oY2b5JRpr9FWyPhnB5YPM3bnyYgmk9pnMSrjzxQQCJtPa6X6u4F+e0pPI3ToD0uo06vE9I341cv6vYqLzYz9e4feFSRrV2RwzEc9u4Em8xvII6AftXKHoqXih0pXHopReL4i6jpfOqYmWJLg8NgLwdla9JV5YyPKraJiFb/ThbzM3IPUUlTT8987eeT+OomXRB9D5yk73CQq2Gp5SUbJS2IS5g4th4wWlVgrWaPfIaQw+W4F4Pw1DZIS/S6ON8GHE+3E5hR/LbXpw1XYwPVUV8UKdMDsPv1D0TrFyxuRhKzpQ2/8mzl6icM6HrJ38EKXWJotwWizISgwL3si+3CBi8FuLUAYf7o/MEyMuyH1Kzn2cRVtk7Lp1v7YUG8muslLRBoAYNiEG9U/Nz1PdJQ0BG1E4PXPyvSieTRCG+08KjrsZh71cs6js54AI6Pn7dvI6F0ay9L7YlabtVJR+9aFdDGhvDkRPBH/aN4wmNSonOANmytvmGMVesNmc+qEDYqUnBIEJA8VymMmVaIyXjMDgV2kEYq39w8HcxDMh8Y5qWdRWFhfzYIaAwxXRe6PDJAG/E5EuUj+4Y+oCKf3A1Ef/JC+USiNiPhv5cjgNrsomiQqtMaSXy6mKWzEBvNMJKVgnq2Ts9ABQEeiWGiyfxFqJQZLtKpK9L5RVvKE3TLDMZUISiZnnkilRbH1dfkFdUkAMUc3VaqkeSxqrd8hXGoKLjwUi5ZxQ0Lt4Vi3TkMciyfk9KfCmXGl3GhdaDjPup+gFCLH4SykcsS6iekowKEnVJ84fhz4EiECfFWaw4kAzUnhIRK0QQsneZmbNQ/oB9ars4Wrcr8cheTbLcjRr3/1D/WVmTGH7HyWWk6lVkG+aRB9mp/xMgHR1XL1I74B3SwpSsSGkGHGY4qGRgc6AbDuRzsP0448CRKmb3U79fvZFHZo/dhU083Zf52fkFXVT+IoRaWdJ/0gETjH9n+HeSFnxwL0tZ6Cb2IzYQYU0vQNkDc4GyCahtyHt+Pvzm4JzyPG2ufmj6z0ciAbcsCdH8MnZqGaAz7kTD/D6/XSofLbEP4Z1eeQqDrTU8JPXPDNYapHGo7HvzflYVDJYThbyGuGGI0LPEkvUGln8m2QbtL0aNU9kMjWBB3q2X2rZ/trQEWmqaFQo+E5pZBK5GcCY2EsqtVoAqIX/mio0UTKW8Un6hdMOOBqpEaTXsODaQwDprV7RFLkFpdwG8yUsKMMCo+q1zGTjqr38tSOv0WfN0VSNAn+aeANmL6Y78S06zoY/aUVDLqBVzQBxEtuWNWNISmeW3iLy6Je74yDB2oooDKZmDNGc/zf8lUonAFfFXsPItnW4ntTAK9gjLSps2e9pTMQj+T/4e1LoOMqrrTVrV0tyW2wjYxNaCv8E2ch4WQbkkMm6f4JCSEzySRMhnN+zpxoaVmNJbXcUhubY8AG2zEJGEFYDIbBkIAdwMRAIGYzYjdbEIQEE2MQu9lFgGDAmP/7vlv1+nWrbQzJjH30Xr+l6lXdqrp169a93y0WdGbYLqoTqk2eHi/I2aSCqdBbBpjjhKZ4i8NuogFyVOw+VuwWuUVUMdA5GtbMILnI5NvyslVgQYd+iqJeZm4U9j4tQbFS1ralSHBPNCa7CIuE7gOvW44wzoO3LvREgX8D4RdlLoJS30JliHMltt1cTLTYgrL+yuCEsmhQG0ysZsAb5xJSRVhJH11RCCjYqiBsLkMVygLBQhUaP7JQhRyHshEUUBqe0tgQ1WNURrMbdNk45+Q6FwCS8z2DJ9aRB8vW1puGUwzb4Aj/0SVow9IiAWFcY5JxwTXHZGhKHIoIvRPp2CB2dk86HqePMun49xE43cjyaihwUYKZYPK8RfjgxTioMvNckB58daOLD6vGJNqb9UGogjC4eNjbx331qzYozdjAAR50ZfJhuyUgKy327ouYO46iyDr/GJj2VesXLBEYI7MQLFbeQmDyYT8Pp2wJYr8KckHwWeqvUoNgo8oBq/qYtZhEzMIdy3QZ5OMXPMqdjfrnAkcGbj7Z0/2Cp1jTuXs+lh233/y9Sf6egMYU5NMxSoQaxugkxekUxrIbbhKM19C7uD1C+w0ZXIK8OTy9HLZ11wvkjDZ+6n/wo3IKBIA1BWEbbR292IJogo70mDa4MBoV+OCaRHIj70Z4TVDsIvFU95DeMIq6KRI/ADsHmcuU1/sUtDSR1AjvLsF8BXUlbcno1V3AF4fLP20uzIW7VL+y2HRM4yxvdJ9hAU2nFLpf0C1BcyNbnMWYAOjpDAObatrfuOgZtUtCOqZcLLbc9Zl1k70npzbuZZIEIeG4FOHUadlpEgIMKBvMGNrbdWoVYLHOebkOFqAcHidY45gVKdb3dttdm1eXXaQiMK6RRnQyCXwhjRACrq1SWGHgoXSYC2crmhLoR+7Dv8ECyEe8YxuC9yo8nLAiE0Bqw7Y623Ma+DP8DmhSYpGYJR0cRSTtRmj6xI7pg0u2rqBvxrwdRUIsGhvrcF4w+EW5wh+bGnPUp77PURde7gIIorVk+IXK1JeW0e1cAIhF75ozfpl3qWwredf8/su8axCLRe+aHeexqZH3S94VWgl+pvYEsnshjaBsLo8E0GJyjNq/4kGKsFrLg+VWCBwFkwcnF3JABBamNOSim9o0iXURjFU0TUJtQXcybg8ZPgoh7GnfURn/E3PblyIO4VFo+EHMY+YMQDogWzjNm70Osx3TUtegO240I0s0ySpOOULG1UqvFSpuZyIlLx+/g/1N+gbJdtnQXqR3JsQTxNM5gpBVkEN7SM2kBOGquXJ+dZvxVBgIgdnCrRvgWdVcJcZcNUHQ2+Cysrcv7N9DFvSbHIo2SRWETIQU21jTOF6v/oGMBLVAIUQEcdvMNXoEuhb5GSv8c/JhXKKg6pgEL9Gco5DkXEbAqyh+sQLHg/ZOZLUsShMY3sQzlkBv+DQ2WYG2ZxvLM2Ngi1aAbm7yI1rzJ2tp+4POiG6lTgnQh7Dlr3o2EnC+PXwtdVI/WbsA3Mu6qmyJCYJQ2cL0WKrhHShH9I6imlt8HqZTanxvweqjEK5nbzQ65mmORDT7TKJ/sc3p+eHa3CzaZ8ofzDAxNRjEH0kORIc1dGLo40PMNOQh4tpaPo846OUF6kAcUIWxbomqgIHhdqmdpfsFjnTCwj1+CVj5hvcv2XHVFVvPGkZyrMVTYEfxd6NYnXqVPbe08aaCjaGqSHLHzVuWnPn0xjV3MAkK60MwYbsbLzL2Julqr/P9qH9N9BXZ7KEBFx+/ZAGwnfVCC2XkMKyQ65VY77ADOh9R9UkiDGHutd6IWVW9kaIa19yuN3L7xG/CcJ9O1oXWGQFxJNVroTtaHkphUB+2AA56I1NYf6Tsov5owgJAKlYWJHvouMw1yYY1LfQEeCih1K0IhT2g8KRoGjbPYdMIYFNY/xWHIsVvBJCHkEOzJrSqLrTf5ycERXxmkWgb5By4OPY1XNYVtAhUwEWTt50AsZFBDhJxuHxHk/fbdYApyHce4b1Y/G6ujxlm02OmQscijY1WARCG3W+/ffIUkzULfx94g5TYDI1eHIgeEcEFwzT5C+fRnGA6lvhcL69jc9J8Pj16cc5BAiyMBI4oJsz5CPAWuTfgckQUdP40JnEJSoz9ICfLJN6AfDl2021i1E4ScItRb5ulLU8gJWqD8UyAWlkogALjdH5/slNE0FqpMaj84aRj6yZ0O7mbVcQh55tpppCZbYGg6P3CmLUNVtpRu1o5xz5AydI8H1DCq4GlRxEg6lHFzGr69IJWQkKT2TpGVlM9IkcplAHsiHpgGWIhwimxxbQRyd1PhVsF9io1xAYugfbB0k3ec1IvqT9agm6oH9jP7POJqJka4n3ZuHv9VWyR37gI3OVcNGk0oyDL2IxaxHowOLYV6+zaSi3u2gl+QwY9Jo2ZsT+HSO0WkNzPMImwgAUcFCGwAi4tgjnpcwvDikDVJItwu/UGK4KX3YUX8RGLcComheMwLchoBx6lyPGSq5b8HFGdKe+bzevA2uPYtIjcqWChxIs66gt0ZDvKvQDDv7WJGnsJ/YAMUOGpEDqBDWqgwGQzZsMrw0C5h4phuB6j9XVF7ApvzRGsJU+G6pNQUJHHBGBBRWgF6ETDr+SLDMaYvNZvIz2Hy7PcCyhgZXI5Lrj/GQFaJ6GiaQywj4c0AB6Dk8JBJWiRFNARJmZVyXORLAn9aXyx8LCFYZq8mDcZKzNKxgRrDK1wwFwJp0CPW/OFplYOCx16FB0yTfCZcI6urIhUYO+FYwgynzH0CGB2NYL4C36yQmwnL5A3B7cBNDLkLOKCFtHf0zQN0nFBHQAwMQbG0KCmTk1+2/IXJcM9y9iB5qXooRYUCNMHuoUmKRvUplWB8S22TsXHbA+COkDYRNQRILZ6tXZr0CdZQ238ukC8QuKU2TRzxABzuXjoE8foyB0+wFZV/4l4GItdUphHHSBFOJCaijthdnNDRU1NpKYmWlNTiZ2xJcMAm+YW2dKFsCfFZJP82TB/gKzLFtLVGF4ci+H3K9sTxN/0nsKGDoHWMEy3yFq6kkPEcmFCk2NwjXfLbOmviAbqZbmz1LgkmllmYG0lKxoSAzfgpo+WgDu+Oc3QAB3v1ksm0KpQjizQKnFhRWy6xcR54fgtBrNzaiUh9a3bAGZPOTscy6wVigU4auvDyYrvxO6wJVWwnNHi+tjC0hcuIuFHLcdiigyWUcHCueStePCWWSuUf6sueEs4YqG3/HpJy/3gLUm2btEUeluLpmOku3PoPqBKMw3Tp8owvXLugO08mnm9TWHjX5CNk8kuiO5A83g+Rd/VU5OUKvmgUg/QC/SgKnZy0frCuQMpXrcFvRMOVLSHUZS5bbAwzi0RzJIliwCIXY6rUVDTetmDFUh5j5hjpjpMAmwMYEtSkhd0476fLXXtKUioDyInQlYWFd36YQkUEktM4BWyqu7WLaG6gvdZTbaf3Y8H99lAbH273xLcZ/Mqf3guaVWO/KtwPxGbGxC8MjmBRGsS0RpANO4WSlY1oQBPo3oKHwI+pZbMnpJGJWkLaoHxKeXEX7LYc77zXGzCuMki+N4jrezdCt/DX1QiYp15t0wVaJKGDkTTM9K0GUSPw54AcTSlw9Xr+hF/3RAo92d+Gk7iFAVJ5Rd0zAFj8M4iZLvJNx3wPffi45cAx0Nhr2RxNXsu94lRawpMTq7hdoyWT9x8pVKlcpqQDiCqUqxnxeJvgFu5bBOyLo/A+1us0qVnYTA50+4gtCWiqNqcNejcYKq9xqPiN1holuj3/zn6fSdDRnh0vJhWPbyDY3AHtkAKWervmM5IjWgKVi9haOXq9znmFyF0/T0YWLsJuBWgYB3zIV/+x2N9BZ8+1sIVOFMJt2OA5mdCav4VT1+tja3SOeoMeAuDXtOxZg1LRuZgkpi9xu0HuZXxHaIJ4r4NFQN04d4BQid6znB5ayX5ArsAFZSwKxaMJcL7FtbCHOLSkVbyrl/4ursw2+NdF4gV7mK6i80E3hXPp4bO7mKjiHcTsSGvwQ2b70XGm+9h+Dk1rPNddMpXZ9AXclcOpoFA+RqB8hXpnQoYzEg62MhOdLBLnJZADBL0WIsS3BzoCVAgqasdq8R6P3V7oBHAQypNqC6htiRgnBhzqEeR0gRvFjhosdKAxIrYto0mfmrNuLSVlgtKOGeENaPKlrXcTYPeIoh8V+VxzrFmcTjnQrAFC7iRcQO0yjQ7AyKVKxKUmfQ5q+HABtA7unkbQOcEFVj9CULdkEaYFbddbf1NcJ0TimQwyVxcSVGYtY+btwt3+rRhJHlTOyEUDvkEe3oS480SNNaKAB96Ms5SyXnH23wued/NeyvUlGJqphTjbIoGMcj4FrM6ZYergS+88ylNTVHs6h2uB1WlPrHMdV/EsnFhrb0T7SQ+MhXvZ3xAbD2Kphr4SFC73B9YGvRPA16NneFLVlykhJUzKBmRcUqsSKsRJRVFmcL8WWAU0D4NrwB0fsb4ceVF+fhkODA5/YwvLoqHJ3Qz0pMaAgWgtLG8nw8MBlhaDqfN2ztQ5mnFgvtU2MWv4nKGLqdcvJOxGxiFXJfcWWNwZyo9rpTnBrOzwQfIjbOSKOGCA5Cumj4c8MS0XeHWKq5W5WQrh0HpQhRkIhR5B7zZlj9FMRedhpqzX6/bU/cxUGz3HWFV4B7moUKczbaPBxKC7dBWvxzDQl5lsrDFUo72OyVb+P9lG23QV1amvnkSI56ftATH2mVLCLi7/0k4VOJOTaoGd7y9MF6M6MUIXwQTIVBuLd+u1du17u26WN9u6Iwk8ZQohMLKIKfkka7zqORXd6FYimX/4Z97bFeKrKB6mJ7Lf88UGcLc0ve8eKHvmQID3zPnvt2v3j/uc//b1dvl57js9DOcTbjRYoSBEpaj2bmM1bmf38o9C6a2nVir+7UkmKXecLIAgAQ4FWnM1nCSkapgT/3iBqEmJikVKJniN0ZAYdXnmXFl0T1bIoZuaJpAYMXwPZaJoczC9xKxBVpBAlOOKysEPC67Oneimy3Gta7gQvtKLrQDdUsBfkMPF9pCffwqnDEB/Cr81ILqWrh9yVMMHc/sBk7GRfyLjFxeuJ0ccqIBOoOw8SxYC9c4msdp+ce3DdmP8VllEWD7qYrdqvakDkXmDfGFmtsNMaoiNq94d8Jcg5wRl8FpIKifTHkCZDoh2sncgbY9uC4/e8v4QftCblHuTLycQUJeapIkTEfjdzlNFWnAZReWKXdhF0SGI2DJhBrh9O/6v0KxFNZzrUAbxC4lN07mJC8Ri+KSTYGKnIOv849ldTOsBUwYmQBoEAvpk8PVOEJuItAYXWGS8bnfooXe8dR7RxT/ExZv3s7TbRCyAy9cCItjv1LHfnhhM5tSS+wcF9YZbhqwt3U6KlYxiKgq9ESUEZaaIenPBfTwOHSKszNO/JPw5/MxOfGGnb0oefMWLRhh7SUoOXbrHQrSQywF6jhFrfj/8+hzUoVrTadnfL/ykPgn0IMdNJ2C4iVrD6NmahC6zjnfztG0SUZBBsuu7LSvSqj3CMBb/TVoCNdVyx7vhsLQ6F25UIEvaPNYxayR9nf/ip/CTgo51X4H+43y6EDjNcjT05y9XHSbKG5Q22kme+tp5XcGbU62RIqlIDR8A0RSeCDyKV6Jxi+lSO4iARh0n3KEwR1fWUSYa+jUXNCQRB31AwglYtxaBm3JRVWMP6BAWBSZkUBb68SKpfWtfFrc1OAceJyWUE5R6Hgwh9fWND49LX6OVEJuG9A4vsK6QlT7cryDYybeir5KTa7zramMny6hKL6DG2H63Cz7nKEXOT1ACOuNbr6GxiY3N4+sVyIdOdx2CUdDJ0BKlDTq5SER7D8tGOYXT8Lh85Bkoqm9cKxbQFMCXEEmhVxUz0VTrVPyYb8achAEXKzdKBDtR9noE5KNpp6El+n+WhE7riDU2UzKpsMkGYdy321pGSwlS419L6knnFIjucnfcDqN5Gj4BpQZya3hG1rn20zswDRjWW845bdcnEJFgj41LwW9Cj7oTKYQu8cK5JZawV5c2FgqwLdxChPTHWT+t1bvoS+t/R/+UrctB2xla0hhfjmgmP3EtiJimK0IFAda8Z4nwcIjMHXxz6BSBDMjbpgA4QwsxJbAsV9XQ2VSrd0L2AFrLngHA0GGloZbQYCsEpC3AvCbg7SAyaVhnvrlAngKfJQxc8A5mS4BxMIImxvPs5b1aDw2umoEiiDfcoUYIIFlYgyLjHmpyuPofa+LhRFdITKVLpfZJQKU6XLILhG7Xpcr7HIFi8NPEhgwWLzU+Py9A74uEM0MFwfYxYG6ABasQijqQkutT1d+VxfflXsKshGuncxNYFpEQxOYFtGWBC4ItMgCmIrmQVTS+8lCVmJlBZJNtkpHVrJVy7wGHpTAIjg2cHWXp78rhj3sDh7uK1AAV2B7+NOih64CB7iHRxQ9dFWd6R7+8NjAtR8PgUNCYsnhDYWPpt61hAi/DwLAJ6K/cO8L8JPQve7wPUTL5r2fhu8RJQH3AMOUOvehDz64gPdq7R5itTlCGBRJLHYiNhqdyUqpPymNUxqxkB8NNF98y9byQTRrKQeEKGKWakT9Kww+wP2Z3mKHex4n9l+grmOUbcrBORP34FFn0gc1UndetrOofnTnou+Y45MFnJcC9ksBD8Z7pNJCIv62Q8Cui2Em4rbxLkQ9eYUWVvwfV8rr13fcFyL4gvdgoYZdIcy4LWCfcB9gxnh1YwQgPaZ7Ct5OVhUKs5p4PrhczY0BhHfm9u/GiPgbLiDa7VqYDWJOf9ya/URudISO1ZJAfrURxuOGdH0YEXQAPKwYn1wXmoU9zMidaKE4odhXkB7nO3BSx0rHsp0drAIkq5q1kOz+/7W1GlKQcGwEtiVQ4Yk11BICjVce5nLscjhUFjPE4YAHeXCrms5k5P2xXjHNFiy1RhDJSkWztQN2YolT7nol9m7N4Bt7t7Iv494t5NXkDUjFrdy7ecZO7q08QxH+O5xjig8aXoD9B1sGVIdOziMyybmR9+rVpYUQxkjDDs0wSSRdFJ0Rw8yfUXIcDflNpAPNjtLixdtzO1slSj+r0dxTAUj3dYsELzBg2P0Hu1ngOSWu9ObMP4D6w6Ee8mPYoR7+R2hxP3WaRsuMwkylCxWu+S47q2yocN01t3ZsuqOlzirsV5u70ve9t9I/ItuR18Zl+1+22i8ISIEm1LSyqQOXWvTzaizyHU+qTn2dccKrCorXg5aCjUY9z0O5Uv8imO/Y4c6J0Zmwc4LGIiD+AoeJTNc/jsH5YUWk0PbaRyEEqo9wJ67+f39eiNXo8vo37THLeaaavlYctYchKrb3DjX1KNUEPmI4t65cEH+tLIs0RBLPZZ6pKQP662DKiVP/bFNPaKJpSU3XXUw4oeklkYpbEyKCvGS7Q4MqB/75Cuzl3eyFGhjUlgasVlvbZ1fnceh44EKygkWZIZCmHodO/okPPphgHQoTqcxhU9Li87YJrHV4YL2ERcUFy6mLFlyYztwlqVBOCdxOxL4XLIrCcaUg90iRRKGGQoKWXxQS1Id4kyKXqCbhTuue/9Bmn+MuZjWF0AYRBivlMHFQ7trq4x4vf1RjC1ncIWaGTrDDDtk1caUX64xGjyOTkUHpj2zPKZI67vCcieYwbUjdMHzRuy+e9/tHrj/+8By4B8FOQvd+MgcFJEhH6vh/n4MpgHLE8AmPLrr/wbNfuPn4nwBVMIfxRGt9Z29lRhFSziHI/CqinXNhaQab4l0ecBB25A6lcLZzCnclJ+OPfUfWTYFJEq1YzJaLCCW2MgdD5xCVIt+BjHizJE14oNihscM4EzGGr3ljcQ7HCZRTGGowUg/MbwSWk95xtm2EAjqW6+AJDyuCsBWwTgUgYi1yTbQ8Siz3J4MIjxVxQKqb5urQwnrUR15VQGdh20vrIMbu+pDhalLSLPgmynkYOf1ryXaF34Fwuw9yVgyWIBFey5/wqDhwohTRJsJffqF6sOVGBZLlJk90wZixvwKvSEtMdF/6H5u3TgWwilwob+k0gM0Ai++aUEBOC3HyT7bSxtgqCHy0fT0g+HVgoDvmDqswwL4JhLvIbAWhJvrHoWsF5gOLQQT4FfC023AFxQHrQ0yBQ2ATiIcEhazlhiveCjZcGSM86l7AfmyiDrur8DIPm7qbchqqKr1FXLqCqbuAykwh8uNgcwo62OSIgy0oBEPRHnwyRlshPbVYQDdCT4B4KB40WJbM0qmqU/w4DIzsRQlpUymeMSSpkBmgJMPPnWx3QphEj2a0FfPyc93DbLDdXpxaA35YivSgCKZylkRvYdencCadq5fAzPRWJXRTU6AGGrfqDUPJWGNrrWwAoPJz+w+v6vm2kjkCBBvNitgU2mgOtB9hxNjCRnPs38xKQqZYCiruXPhkn2MGyHTlpqNxVOPZeCatWTWoS+J6kF8YcJVxLdKWigW2hhMJyWRkPAfpDnKcOWdyq54mH2Gx8UdBwD05Y4T3TOh/Ed4noe9FuPvRz8J5VbgQ5gnthHy7WOIyWgUxf7wUYA7nmkHjwFIx7HffTKT8R87lTEWWL87lnv8DI88WjnKCG5hOBjgOnAEX0+OHQAfsaIupMh1p8IxOke45wJuhNKKJO8PBxQn7ZoHyOZhjeBTcHcZdvFeHqKYVCSSyu0P2bpwQDIV3gdqG8KJQlfobQMNi4nhrUzjxKkvcQiCG0IeQmLkhA/cN3GC6ILdRy62FMA2F3BBl36wFgORQyG0EiZl9kNuYyw2fcKXADWYUZD9m2dPsIJT9KCPUhTMCeL1yRmau1rjBjIKc19FbOZzzOrzBPIIkwy4J8nF1xQ0mCfIAZL6S4C1XIfdGkGTM3cBbLgmalmCXNajAyu0Pnn7l7+6KHhdytpwMT5pXVj/y/MVPQwHlc0Ua3l907zV/ePuOdwuNYXkN18I1iVCKtQsAKUmwxxqEt6VDGrAda1rpxUR4qxpxcnixY29QAuM2/QBXZ8SDxYyWW65AU8oUaMgV6J2b/ojpypEP9/huaSEXWiGHagFjykKiOFBiopAoraATh1BamAgC4RA/mlUhFDrRUFLsjVbshkQjLmOJxp/w5ia7CfBgXW6sdVVbph8L8A9tQxOKD6vlXmVqucrVKFzLMUTT5LultRzFfdaFcNKsAWoppMhVqKVAJEfxw1AgUUu10lg1W4kkKVfdZb66zbhsTkzQzfV2c0Jioi5X2GU8MdGIYbVvSsR1uSIgBiYCI8ZHIEhLGYKsc5UPE2QE9/huKUFWGUFG6qzZx0CQvdFnPgehYprIgBvwm0ergzAw+8cr+KGesQ6EUYcYwQ91iNHqMhTaWl2mQ2yzm7HEJL2zxii0Z2KSnm41kuyR2FOXa+yyNrGHEUx0YjcqIliYZLVGslhZkk0tQ7JhR54wyYZwj++OGynufuhddY96iGSkGLZ0NGBGfedahx97oouSqOpbw75LDeEH/LSQiJSLlVBujSdSuG9tspsTEnHranYZT+yjy21GqumJfUSq9XY5LTHdCGmU2zsxDZdNib2tO3pybnPkRPNPEhkDuirWAulaY3Qtis+yBhVQLetRBVYO9Ve3GMKPZnREVlsjaSFqC+zSRAOKat0BjWnlb3QdYaNdWkfw7b/eSjjRtf9Wu6x3w2lZvSv/Gv1wRZ4S1EGmX67sFi+mpALrXAVGXAOOotyN6A0sdwOK26R+22QfK9ckK6wEdYkJVlxfoI1BgUAFK065wjSFC7OehZmKbxsxx1AWEExfN5LVe5bqv7LVfQUl5jeKvtBkX6gPf2GYX6hN1COXWtfRtlleU8MZMDnHE3QaG+lKyBhMoDFc8bHP4sziFP5ILdvAeT51w0X33vP4fW/CWdAxFzzl/Qvuf3ft69s2FUYQNL8EDW6g0DIuFUymlGrxyxdufuy+1yB7O56O+3y/NLcRy22ogaLMuNywjFNuH9z65nUvn/92MOJHXW6lXwEMOOWEcV9ZRfdlbDc1UDQa9xUA+ekr5z45tvk0QAr7ormPlH58nftI6ceBBkIRZNzHEQ9IXKI8mRG9SV8p+Ticq/SR0o/DrEMfKf34KO6Xay0gfSifkuyhLFQ2pdmPuGzGZe/eL8lm2L0+jkTufsnrwOgwlOWPIpchTTm5DDYS6ryVJgwA2drJZZGCXBYZL5cJJSSIBfZx5DKALo+Tyxi6rKxcZoUci9oEDdhyJ5dVumkGuNLGb1fhh6bhdSj0uGl4vRW7RC6zm14uW2bWrD6I2d8plxH7eZxchs3gcnKZzAAINO9EZNRSU+cwaim5bBUQYzV3DqGWaqV+L5aVqy3saMaLZQYtHYhlANgpEsus8l4s2yYSBKHZ/gFiGe1+SsUyhLAuJ5UxODPB+Z1QhipD/0X8fyeVDYEaksrG8GMfJ6+pW/zUdYZvub7wwzLEwWq2jERmN71EZiDbgUS2pqpIIttotPIS2VZPKwt19w+RyGD+VCqQQXtSRh4rJ4shpIKmcgDG2yBZCDqpQ43iR5EsdoDrRgCMkCSGpe84QQwBZcdN+hb5NpDDgDlWkMO8+LXNqObFrxV2aeIXRqTvcE4O80QE5lS4wxWksd2Tw8YqTXQYQmcx8RxVLpLDAKZRKoYp2FIghSnWbokQttUK74WwZXbphbA1nnMgHMbfJYQNM2SPgh3sXAgz+a9ELLbyeBlsmy8PInj8vTLYOtCvvAy20T6qaCJ/rwy23vLahQym+N0ycwnEr5EG7iFTm90pJ3vqsr6pzX7qEV2UYKHWY6fbbxSEA+bCkzoAiXMOz9yuKCB6mTWei9c+m3BI2rnHF68x+EKLwOfQCQVi5Axa/xPlSF5unuRy7Fnn3c4ZboyI1NLJGuC2qUo/XdHi9+AqAMhrO2wVUNTZDpwQuWNfx9ZFcl8Hr3O8lNSGoC0MQNpIVs4FHr72zWApQDiRQXOMiB1S7IXB+nrsEOenTmAmGPBC7SfUG9kvGOgMnSEd9I/bWPDx/yxEnuwQqUI3LKvQHopz+NQuCmCh3a4JFZdheynvmhH2ytCGZanhIS2vhI4Ck6LYdyMEe5UDl9SzsIQKNLNRXARqWV4UXLFwEShkeZGIfUtoRoK5pGkWA9oGuzXejAtoebyrqLIKeeuMIKFsb3H1GR/W/0L1oLJh/bX/V9BZ0ySUSnmLEoV/8wirH0OfCxThNFWOJi9HfENtprHhtsOH2LbrSvXf39r1bpLsyYCdGUBfThNkMKAvvT/LN5EBe5lU8bSBcx2KWxqopNlhu41lZ52CjgKbDSKDVc5GT6X9vMCZ5eEGbA4EcjIsDdn12BkRmGAUwZ3Bwub095gUpsHxf0fkBDq5Bg602vMyoxUZyTtARfOZrBmkYeUJ7Ltx2Jyxt4EMRfvRJJECZxIJVgCFDA8q42OvYi9AsUs5/g12DW1KaMcT8InGURioLLQLwfBVxbsQ2rf9xkcbcxpqTwVD7UBrw0I8bnqHhK0axBIric9ILviDILD1QdpscsHGsdVES2yhVIYCinOfSLAXIRYoW/WDnLVO/I6Qm5S/DMajvxEYAutG7KCiGGhEipohpCham3MHzePLW2QRpDyB+PKOaf5fMs2ZaDpsjqmo+L2z+PjiECzAsluIOB/0+685Yxw3aEuHsl1b+RFrPDyGVwabnUFzGUjbhBMJa+J/1h6HiRFyOtzwWuuPw9zIZ/jdAMeaGjgQQsxQuFjMxlxXoKfA7DBReRzEwQTeIXr14WvxHmY5OPJxKxL+b7SR0U6dTe+O51vYWZHmADcakzNDPJ/SjMaR35Vij3BjiAnG2Xm7mGnOlY3zGNrQ7eIBQVjbh7azXgV4bO92mYi4/XMD9VA/T5XEutNe3snPwSPm5Hjy8pdv5zl+o7asDE7KfgHkIPD5ODDIouCJ6LY0bxJQdJCQG5mhvcvPB1UrWIAH4eCQ+grt3POJKvZZWQ6gRi7coODJyKKKjAIMm34XZbp6l2X6WjABmDe/i+odv1OXsHyyYBahCQBqCzF9pnSGaODucfkXgWESA5YDdEWl53GR+L2yO7Pf90Q+LOXm6E5TfqF4lDr8sPh/Bm46wEgL4L9y34595sP7hret+IplDXsBwUlqNzVwTtHOP42S4knHsSK2Cf+5IJUzQEPMUZks8C38xI2LAxeGLzrhodxs7SPLB8OcTdcS+2oxWEcRrLAMTlyrGg5H4F78WQgYtFKxMKQAskmBNojkDYu0xd5d28L1RGP/XOYTWGXj88Bk3MU3vkI2KZQf7lKvh80tivVbzH6yMWykW9JwxZzkyCKiCDFwUNWcaTnQoCSkO6PtUy5BJHj21yrEiqcAwlhdLsD5l4uHrFmD7kyQ9YP0C2Kn2pMn5nt0tTNodCF35cM4G55P0Ffxrg024BIQtk4Oa1XCHq9IHnsoxBeLR8FHHG5sR2t0DjZnH1rUVYSyVtpPZNqDjOgV7LiSGcMVIj0S5L4q9nnwcw9lVhSR03X3S5HRVwTW4lhskbUesjmJ9GbQG22VKyhwhDfdvvlnXTCaAHzL+dIUmxVCZ4d3P43MaagLMHRDdqtw9ko0eirqR9a7PYS9rUAM078g6lDOtmUJxJ0YiL7bM7Yaw4t0AhhNRPp46Ic7lzBD/kniNfmXoIpQg3L2KbGn66JNAXVjfq1UB3nVSZ3Oz433aebW2IpI7VgyA0TK23lUYCIFKhsjRlTOTdb24KIO1h0Iajo3UUH0eqzJ+VgmC4DPgcWImLd3Saz4ThNs2oieOJis7cP4nAUMz6O0zJPpmg/9IAM02UUTaJHZHUoUsh/k5DZpNnlQ5xyK4AwC3gY3PSpGkYVW6C6cANzb5sJ+Tha5xMv/YMf779XmyPGIicCmQ51qk/JbVyzdSi72zFrewD8BzvolAnhh6cZXE4hI7myM1AX4rSbaly+Ep6WZoOBzREBTzJJmdR643bALNHOM3httnbAa0X0RUQthDK+LwE6qYfZAom5OElOcuK4Ts6vx+C6UWGCLZMYu32qid02gUOocnrTEltM9ltsOANGZkiCoot5INBicJJQRyNCQV6tm46N0SYYRsN0LfURWPszKZSR8R36NzQRymP05QjFiGqlDMBuFLmF5hQUK8Y9uU1WHTou1VqxNNR7XOoEYcWQgiQmAiuM3KdQRmczik5g/qkUkscmKhVIzUw4FpC0gtRP1/CyDjRjOJruB9UCMYaC/sDA0ADmZ4CEKigMUkLWJOoptAmUwlGTFkmFPOorOMLQCQ6XNVhu9hzFMZJ4rc/kKohDSQt4wL2GMpvAMEGJo9Fia1oWpoeOlNRKxIxy6mrWEbFSFvzZBjNxdGVi53nDExTcT5LlwuwNwuBgILWpBy9WtiMYmEL5q0BGMpJER3mVkRRt+xmNLNiKuB9OgZ2tiYKezvsY2Qn8s9CbEMyl0IyQoNDmjvlWgWoqULZzbslK9XCJt7YnCiyWT8cLiy1mWFRlyekH0/wRcW8KgJAf5aShuMCgjVg2mZp7yJj2z/bwfcp2BHGKeqojtZ1ya87aL9U54wOKgZGLlmh7gj1lY8jtRw5z2JQvVxT7ps/OR48vkNrN0Vg4QxLg8ii8PZmJ0C6PYWrGGyxEGiuurf2ut4NI9Eu+PnRlVzJEgJpN6MSGGOEkfmkMRODe3Ksy6nEXoo3UoNT1z4K+rIANRBMYP1tnmHYIfcP2OWQwdwhDBVZ6Jtep1zvBCFJNM40A48MsCJ7AdVHeLF4CZy/FYM1DTqDmWOEUWIpIX4RKgcioD3FgYGDGKYmjxZwHOQQx7y6kEODloTQgOWMF4PZyoPozCP+MUJwoHzTUzaC7vUIpllTXXp0zhCB8DqPTowsMj3TwrnOO0eSDE9t15z1W3nWkr9LCZoy3US1fjn3LeS0KBCoABTYjSckxDFxGrKIAsItCojEfpPhh80lQTbqQEMnYk/nPNrAH8pyQsEiHk08jXvqfe/lzBZe2fit8x1wsC0iNy+3Y2onuNlPqbi4r9uhBdg7opuk3Fd1guChxr5aMWhw2aM9JkqpAJ5rTFcPwN5CJn+Bn0cEorhWhBcYvQJ+1HIRRCcI+Gn5J8ISSqgx4PnVUBZ8vWMwwwIRRmBlHDi37Ua+iYM1lVEzyz5BWOl4GNRAUdvxabrmrSh4d8jwFp0RpzID+AH6FfSMG3wPmgARAwCgB9mgJrQRU71CHy/hS64cuuPnX7ab+6emwz2CqWM6kPfn3dsjtO+8sJK4//ZwZoS/31uRue/tXq91dfjGtMk6nn71s98ueRl66+AddoSOZ0Bnx9EFf3JhBUsoaAB01WPC8aA+mTb3oDZnr8bXOx6eDzxPsw+OWT2FS5TUGJLvbCLvHrKNEIvx3blxqbrS4L6ffnVB0ffw3i1gAWfbHYJxzVQFl+3xYMCxt6QFV22n3KPa4bROPw6dSiMeTdpthl9iJSohbYhZvk3yqo0ES9oxaZD59gPIqu0DXHHzfvdjtjwsGP2D42rl8NBGgEINMF0ZEtNT6ys9R7l41Uunjx4h+yqOqH7Or8RXBhIrtNYZbc9o7Ev6s3FNAh1lKGIoi4EIvtYSNfrQhZ5im03mSH82aucUgT/zleVMYoKxxNQ2W124J6LrodR/7WFW3ZFJsccEvUnrCIGKkTYpOYGluItiHAd8ciobTStloZub0PNrCcntjLK2O3IZDr8Vom0WHeUE62QZlL/5MIYhpSgUcR37uIEoLD4WtINwfM9wJadb/GK3bREUjNBVdhCCQXTka7KD62jKzNhbvttwT6LYYp9pzFj851sGbfmq2oaYGF/EEYx1pkSLeq54yvllw4zJEDgxohBVcgdCj1S3yy2JwCEL0FKAx7J4c5cBAlGR9Org/9XsioiEKKFQHkeJ7cqGiNpjg2j399SJKS0CLFFEBodoOLKcRDT3BIbEKhM8TfR09oVlgYrj0q4vQNDT1GxEZd2/pamOi6RjpDgEF6XT9q4Qpxjk0MLTVtLP53pVAtzYfHALdNA4cWlVoc/jwOeFeuCC6sl/k1UeFOlhri58LflSc+2aa4sw3x/Wz8EYDaZEcQJ6ElUgi/WC1P1ACWd4lm9Olm569dPnPDCD+dZKAY4ugUxjkFUNUO1wkWyGIQQ3U3TfK8YpegePR13WnxVfBGTSvadkeB43+ItlZzk9CIXT0bipwNwszzEQmtFLamR3SU8pkrRBYexpcSr9gBCpUrA+tJDSeUBg2o2Wp1FxuEb9wITSww743Ps/+Ik+ByE7QgsT35zl6Grb/lJXXKmIgDYV5ys70x095YhBh3fGMKOudtzh0luZ09V8yYCb/CeUJC6PN10WYEc3LTsdxpXVwzF2u8td4DhDPOuwcIT13h4L8rk2trLAJHZBAD5bYKIYXXB0jhkdC7keQVNRbAgzER7sO7LjYvZ5G5ifpDprU2c8iIVcSnGOQRg51QnmuUaoBdtjFYGXCtQ6HYFuaAZIWyXvoFt5DVupH8N9FMuaJWCQx+S/Irdy7r4k9Ktci4lQY8YBAEfPWrQCIRvO/BvIHYixY0hRsgiA6JGO4QavfDp9RPquypPCiDp76fG6TS97kJODN6sIQ/7qMg+mgrgqUTjr/Jw/HL90MRijEQQIeHJXY3as8YepqGQ5uwmwHdAeFLuFWLQPyD3NRr4OqVERsI+gQUb0HZAocIW0m5JkJtYNnYIpw+9f9qgCZNPNQeUAHh1hgYF1TiAvPgFJPO8Rg6S4G8S0Sngn22VrFc00GXxLBcWMQtmzExUY3FRg1yIVwuC8Uc48Q3ngEwHy5+IcnBRmOi1uVoGpeMMW+ku6LYTpcvH/MVagzMKFp/I7QNQ1Qw3E018o8fJOl0Aj+TmPgvikPHNTyCFyUj8LOtM/3LIU0N3KVhtuxNPrKBK2+odOQOfFpjpawpU0oGTVQpmZ3zdNKsq9atUilwspKZhtDC5zIwp4iFBbxg/hlUU/pGkhirFuKkMC8cRGUkITQNjIrg3Qdzg/iF5CtacdfChqQe1woQwvlHQYEtd4STEwkZz0N8zTBGuE9ZZ6GTqWf+kjy0eMOFGbE9SjzRdgzf/RLNCXUDeiN1THQ3AzAyD9pG27yBto93hTNyAClFLYLil3tVAoCMHBE05+E2YCt1x62MxOO+HHvkM9GEjwRLHjTBOTdxuiJ3UMw6whb4YOROLxDS97UgyCZlUeBu1sJjFr/nJhfuAPAuHs3NCXaXrrFuwTuBX2niqQrKIJziUKLhNAnIKBM+jQ2gVs00MzAAuR0kMIGqGZNtSt2LPe/TUZh/dONXK8FEoL/5KtAgQSizjwDnAZp+oumr0X7nd8zpGkZ12tWDSISmmpw87aQtJ0H3uFdyxRNrzsCEdLKmmh/OgGTKKOZQFMyMHoHuiNOR6IH6SI99hF/GRzrtIyzARCtA3AqAFTYL0MICKLZfYlJy88Y1V2GNs3fyymXbH6yaHXyuyT5Xb5/DiOHntP80HUODK7wZe2panjFVc/GMKfY5FgWfY1HwORYFn9s1LawoU5Ov/+r2B+CZMCW5efHme7Ai90WZbkXRBH8EMdZYlJoPqTnilfFzcJvk56Ap4uemFz63R/KyW5evrp6d2DP52LuLXq3ZnZp/zhphpjXCftYICTUCPsei4HMsCj7HouBzu1PzeHLRtaecgWXExOTWS5+8OVooiqp8uFX5CFaZRcFstsuaY07i51Aifg4l4udQIv+5luRt710Jz4zEtOSGX9x5IYICltRcm5tHzMAuCz8HNPWZ0YOMHAcaOb5sTXIAqcLPsSj4HIuCz7Eo+ByL0mxFwVYZi4K9s5KaT0+ecN6Sd2pnQ1f45vXvnFlbKMpOa44s+Tlkyc8hy49Q8/rkyecPvVE5G9Pjo3899cJQm6vKh1uVj7AqHzkDaDAJCFjMcrJlubdlOYlZMsMp8dvIHdUPeiBBHMlez4tuXBzBvs+LTlwczkbjxU9xgfUbpIHWT6BYsCeI38k8dkXGfawQqDoLgaqzEKg62AiEBWNEB4MtWS2xIgErIYdOvju29AQqMCBltO6VvPny0zdHCnUW4yo3rPA5FgWfY1HwORYFn9vpsAJ1PIn3Tt5321X0mpiUvPOGpTuwzPOfU3y6Mp0rMcWynGpZ7mlZ7uFJPNFIrA7nSaxO6EmsjulJDC7sSSz9E8iTmCQCz4z2k0XNjA4a/55Hjj0zuoDUKz96Uaud9mG0lq/xXslLT3roj5i8906+tunXr4WGkyOw2OQRxiaPFGZ02T6MLPk5fHw8NUIEnpL8y2nP/R4TxKTkY3+89dnqwufUgofbWDnCyH0kyb2LSYAZxozAJK+mdUdjUlj9ypGZRBY9HaXV6QqUnhIiszr9oDHJeTZZLCCvZN1Yb9SN9UbdQmQGFVhIUIGFRIOwkGiQAr/+5RvrN4Bfx5NXbFm6ITR2wX5Zb1G7iMzIkp9DlvwcsuTnkOV4MqMM/BwIVWCS1y08dwm2xaYl169744PQxLhTMjs2D6bPLMGamSVYs5GZY9AorX7nu7L6ou/K6p++K4upFAjckpgWEFhdftB48TzrXwvEi4sJjFqxxqjV7hB4z+R1W558KEpefMrWDzZWjpuFxjPHXRG4LM8q4sXPP/TrCzHpNSQfvPM3X/3wbixNUiLRFNYHIaq+UXdvI6362kdixCSt58EkrTrToM1v86wzLWDXKs8UHX/+MNJOhRLpZTp/TU4uOfOxm0Is4n+EtBOTvzx39BxM8NOT2zdf+UJIhtxp38XExiwx2zFLzG/MEozZqBs36qqjfTgP1kA06nKGm5iYbjPcx6OgZjgNmYOdYiciNtU6I3nDmWuuBiPU7DYl+fBzv4ETblBVkfRwI+kRJCmruu+HUHZfKwZKymKgpCwGSlrg9e9d8vuXa2ZjKfvQK2++XrsbXAFcl1liPtsF81U/85RV3/OUVX/0lBV/KPTbvbAcKz+1qbfb1IYqsbqoEquLKrG6qNLu9NuW5DVXn3UzeO7eySeuWPhidaG6Yk6HG28vmsx3Rd3imRQU4edAn8LUtuWxP9wO8WxScuiFB18JcaAP47mYSsrx3MlG3Rlh6mrEeeqqX3nq7mJGK2a4YizGcItnclSJ1UWVdoe605KPvbHyXjHc53/7uzdCYr+KFVBXw263ZzRHCkddDOgCwx0bvvREMdz3zrjriYrdoC4mkNAkiYktmCSLZzR1tw+f0XbBdtWfBo37BmwXA8HPaKhViMCo1e6x3WWbtryOGk9PnnXCL+9n5FBXY1E2kMzUJY5kL94lgdHI/BxKVCqn+mXcNe/cejH2kycm73v1wutDXH4nBP6QyUzd7MPZrdhFgapwBgyoKk48aN1pnrHCBZpdUBVWE1UJCWKoyu5QtTl5z8NP/Q3y7j7Jq88Zgx/d/yxVJyffeOK6WwCQsVfygTPeeGx35F03mYHJlpvMyrFc9TtPXfVFT11NHIXJbHJiL5vMPh4FNZlpTBSWa1qovXbnmXf4qawq+eqSDb8OrYXdslz86Qjj7UdKnt4VXd2844jgFq6hpfeU5Lb3nj4HS+9JyZdPffzR0FTm5Oli7gNyeWaLOawcs51udFUv83RVz/N0VW/0dFXvKM9si6cy9fUFZL2sEquLKrG6qFJo6Q8eNZ77heT5+uSZl2zYgqmsAfCji9/dDXUPsxzPepww/WEqnSnJ5cuvv09T2Unrz1kWLB+OtBCSR9h20uHYiJsgtaOKot0y2olRA6l4eROgasVFnSzOJ2Dc46JREQ8n4EPUUOIijgtYlEEVh4tJuJDSsgUXLbiQWnM6LsAnnH/dhZ+NJoRE6BSrrVSsTnCK1eTCZu6KKvpLoFuFPaN2U/TsqNZPJj5JqKipxP6cCqRJH6PrA8CL44ahGS9cOIqwIVNTdS4c074nLubDumWCOp7ARy38vb1WiWbi9w7E3kemy7DpXmyyQ/Vo01GJVn2VpwTciXGqgw8xTjPhQYxTHBoVnA5o3ZenFiwWcDqwFdM/3Gebod+/6LGLrjvljV/ccWvFgvjzVJSMIlM8HGuCOynO25rgZjoVggDcXzHcIS0C4qEZyKb333vTBaef/uDK133CEUs42gTfEZy3NsHFswl93yfGvaFmuPI/eNK95y9aessF91QcawmHLeFIE5xEcd7UBO9euWa6xLi3ohk+KLdv3PTG6l+cdPEUl26dpRtuggMszhub4BkL19UgLe6taoar/voXLzr35nvXXfY1V9BVlm6dq+F61hBdIkiLe2uaAQhxzqqz163ccPu2R30NhyzhKlfDNb6GPjEzbW7dI/Xs6Lk/u+ayC0Zf8TVcaAmHXA1XhGvIxCxFc+u01Nb37778oou3vv6wTzgGUy62lKvisjJVHG6GX/qG9954/q3Lz9z+KZdu1NKNNbpGbBxfxY3NrZNSG5645bIzRv98yx6+DS3daKNrw8bxNRxpbp2YOvnZ099+5vdPrtjPpRu2dCOwhlYTNjL+QXEFNzW37pl66oUdv71p/QVL/+RJus4SDje6NmxUBQuJWZhmABG8dvqrv3zgirOf+KtPuMoSruN+H8nXCC8BK6UlZumbgcj2wEMXrz5v+I9DH3iSDlnCVa6Ka1hFbkL7xCRbM1yH79389IOnXLbjtGeCRrSEQ66OK3wdfWLSuRmGvC9ftXnx1Q+eeNW/+DaMAfsfM+hk0I+sqCn+iJoIt2twcwpmBEwo+GqsFdMBMom1NtsrI3iFre+Is6wRaAC+fvxqc+qKF69f9txdF181zQ8lSzESM6psiokqhVSTU+f/7rabzjv11VVxP4gsxXAMu2psgJjC3BdSkY4xeHVfc9nVj21d//zoBE9/S7cuZtRYjyh32t73adlwMfCXZ9dfddNd161Z6nvKENLVodJ7oHkb8V6tVXUhbk/DzRb6fovMsVZMeiBzrLXBXhkDVg0bLmbUWBOD7z9L6L/akHpr8eV3v3XKvW/u71mZpRhrMGpsaxA1CqmmpE68e+Vbl5x54fX3BEzMkow2GDm2ApvFVcmSsRlQ5dTDb//sxXtvuHTTYz7hsCUcaTCf3U1AlAnRA4ID2hElTl2z+o4Va1Y+tf1vwQhAwkmoNwfmZH7FarsKt/fEzb3QaqLmuoZWGWKtb2idaK8M2SeHG4B5wKZrAAaCbJfdZyem/jT8zMkP/uml0eeDPmxJgKojigD3pgofLyRrSY2t/O3pa69a/vwjAQsCiB4L7ygCeB/L3SdjUzQAAuKWm365/m9Lr93xgE9IfD5Sv94oso1IUr5oTMy2RNFT5z1127LFP1v1x2GfkDh+jah4EygOIQjSqapLREBO/s2EKxCt61shTIHW9a1uTBFFkK1XD0qw9eqBNhCmSFNqw+iW0+9b9P6pX3PfIlQhiVvv2Eg9CLInvu5T7ZXafOWfnl/6yMrLP+P5h6VYVW/0WFPv6OFTsSXqwQZeW7x84X+/uOLZGtfOxEAk6R05VoTJwbRsSZQ7NfbYdSNjl99zxiSXjqiMk1FpwLmgl+wJA3VjH7iN0SM2qeYfq3Psoy5gHzQJEoSZOtCyUmo0p7Y/sfHah0du3fwp34ktBXDjjH3UgRrxEDUmpy45feWTS1ZvPOXzvvdaimHYRqnmDCzKvH0qtgJg+VKv/Gnoz3fcvPKs+wP+bQnXybEQhCdAri8YE7MZ68A/nnj+zy9fd9GJ5/0xmISRcAqqDcEPfaTAQHCbQ3QiSKXGBxqgMZC6gIFwNUHwOzAOthwAO4vo0ZB6/K6btmx88bwlzwbCkCUZq3UcpBYE2SNEkCmpNc8+/vTVj5xwTTCeCejJwtc6DlLrKOKTsSXqwEHOveju4ZV/uf+/dwRikCUcqXUcpDZEESZmU6LoqTvOfHvzFa+9eWcgXRDek/yDVg9hDsINEcJrBByk1nGQ2oCD2CeBYWkcpLaEIhNT571zw4qXXlqyakvAQSwJECWNg5Aik0IUaUl9cMHb599+7XN/LXAQrFRZeEeRZZ4iPhnbohYc5LWR87f99bTz//INz0AsHdA6jYEQqbHAQESQVSh5auTEtfc/cO9Ldx/o+QdXxlwllPAP3MbwCfGPGsc/agL+YV8Ebqfxj5px/GPr5ls3PrX9jms/7/mHpVhX4/hHzTj+Mbb2hYevv2HD1Z/2/MNSrKpx/ANYpOP4Rw34x59vvuH2Sx/467aYJ7ylG3LUWBGmhucfKHdq/a9eO/PE5WuuiXv+AaV3Of6B28X8o9rxj+qAf+AVtluN4x+l1GhObbzw3jtfumjdQ1M9/7AUI9WOf8DOqYR//PHPS3++ZNHmlZ/w/MNSDFc7/lFdhn9Ug3+c88gN2+9/4fxfe05FhEvSvdqxDyItlrKParCPNae9cvLjZ/1205c996AxRRnugdvF3KPacY/qgHvQFkmYjsY9qsdxj6d/d/EVN5514nK/ziD0GglLH1MSllALxczj3jOXnnvF3Ze+/IeAeViS0SrHPKrKMI9qMI837jz1hrfvvuoPmwPxwxKOwH1LlK8qwzxQ8tSvXr/nmpt2rDx7ayB+IGE55oHbxcyjyjGPqoB52CeB7WPMo2oc89j+7IbXnt0yeteb/mMEqSNxHUVWkCLFzGP08cdWvPnKpoe2+SQEpGPhHUWWeYqEmUcVmMfy39w0ds37T658LxA/LCGAk4x7EECplHug6KkzTn7t8h0bbj7vjUD8QMJy7AO3i9lHpWMflQH7sE+OVjr2UTmOfWy67Y1ntiwcXvWa/xjh/EjdSsc/Ksfxj7MXv/WLW5965pHNwQLGkgANyxhIZRkGUgkG8tIpz72weNHZJ94SsG5LOOQosiJMEc9BUPTUnx699pkHn7zwLi8jaZeuDAfB7WIOEkV9SepowEHwChuPWHxsvEqwmGIO8syNz11x2iXrXv6KnwQtBUDSjINEQQ92TJ+qMfXOe9tfP+X5B2/0HJhglSx51LjURtgqK2+fig0RxWr+qd9sH/rlHaOnT/aUt3TAHDQOAuxBVKeQlg0ZxZp82ZbbT140dPktDZ78SFfgINNgBmgcBLeLOUjUcZBo6x6Og0DtzoYjHB4bLoqVJ3wSg6/ukbr+iS1Dq986Z5uXGYmLSMLCuFiEZbQGEtynmpK65MqLzvrL+ieubPAMxFIA4RDaRNQ8AooDeitIxVYAhVJXrHzm7XsXPnfBRM8/LN0IAEpE9wioWQUq+LRsRaEzLn99xYPP3bp+mmcfSGfsow49qAbmsMY+cNvYxx7U2Qu9UKu29RFPDQIJst0iRg3EkGIJC1/dI7X4vdNWPLRjyyszPfewFEOOGisiToviU8VSv7z7vKW/e+3SZ7/omQe8F1ly9/FlpJ9XgTAVWwEUSt34/iVXXHjLbx84yNPd0vUbMeZp2VhIyTZEqVP3nTs8eve2R5ffFnBvYgGKc6Bp2ImspnDNMMaxhzXAD6HjwOmIVjf5wH4Vlz81VU03NDUMFxJ8MHXtknceffnst566z38GdtV48QCj24FOQ+PTTEhduv3Mpx+4+p6bA7UVfQaoHhTVZoZUTwpLwqh1L7+1+c9Xv7X52SdcEotFIZq1jNc4fSt19rrzH7r9yqUXvezeJ8yLSl+HHZVWvDlDwetakc4i1bWi/vsoLF0rcmKogBb8qk98QkEFWlHy6QKMacUX9mYgAfxqSky1kARQxFJFS8PYOPSPNEFHNLIYLj9Jr9pPVshNQBayPbptutrgN4xie9wr8BPpidWZ28n3/L1I/FOFHPKhVPlCquC2/OvsN97+RQRWyN6daUVl6GK5vWUX02P1LDy90eD+IhWykD7ooqvYNOY2iyBIMfhc6WXznqliIK7GitTD1z267NXfvPqX/Xhx1i+WPnnJb39++xxe/OzhTec9+vw9I/Wxas6vTBHBATlVwnePf7ETrmrope09Ioc9vTjykx8d8t22ge6Dv//tf/9hLpvtmpvr+no3D/2z+3PZuZm+WRUH8PJH35j1Xzk99KcBvZBGBj/ID/bnB5OJH2UGBnPpwcFs4scd3X3ZXC6Bh4msniZy6f5ceiDdN5juTLQNJNoSX/ri/u3zB9OhVB3ZXr4zgDf6s5m+wR/m23syHYel55fLul8PE7PT8z9O1j/OzOprG8zn0snEV7+cKHnZf2LAv+RuBG989+DDDubf/n3Zvo50R3dbpm//jmxn2sq0P8qkpwMdbT1tOf3UO3xlIN2BLIJXuttynSDn/n29+/fProN/OP+BagP5dnyrbTBdj+sq99cg/3GgLeCvKXS/GX8T8Bdx6ePuHT6jz3n4Ovx7D/f84Ui84hn3tyeuJ+FvMv6m4K+tva2vM9vX0Nae6ckMzse5J40DGpXHufxNyvOUzbXzhGJ36Dqf68QpP4B3OjpAe54ynXq5oyObt7M97s6kmRUe45DNDwxmOvBjTj6T491cVon5/mCGZekYzOZ4ZIvynG/raWjrbOvHG53IobMzw5c7O+1551HIEKfeDI/5Hh7ntqHheM7wlM5l2/nFrq62DDLu6sqy6F25NpZnFloOR7w2S2WflUvjd3e6Dc8yvfhDikyuP5vDs8wAqYNGx/2e9jyPHdnuLErXk+bznkwaefXwuicNYvb0ZI/GsTfLAvZk+5i4v7sNxxzy5wsDWRwG0/hGz9Ft81GbXnSKPC57247B4MQ5a0fRsxfkRLH62nrmM8e+jm4Sqq8Dn+XlLObTN4tl7JuVQ/Z9mV6Srm+2bvUhE5Kjr08E7csOdivBwNE6Dab7+lC0vsHMnDzfmpdJs0P04a+/jbXrz/ZkZ/GqP92GBP39zLVfXALnXAZ55jq6eVD7ooo8MM/cLOZIquV6WYFcL8ud60VmORSKd3IsPs9p1iyXyzDTXI7047dzg+kudZHcIEYpT0dnc7Mb2gb415/mk4GBNjU+uICOem9gIN+LjAYGu3tRjsHunvQgLgezKMrgYFsHUg+i3ijA4GBmMN/JZ66D511nzHeyX+VnqZOpFfKDInt+EG2XH8z34qW56Zy60NxsR1snbs/Nsmsd3TYb944GEXhEZY9OD2RZnKO78iDW0bPxCK/Nyww0tLe1z8ehozvdg7zxA59ub+tEnu1ts/DXow6NMx7wRfSx9rbe9mwWpz7856kPzdiOlsFfuocv5dS3ccY1ThiKOKBpcJwNGrWjrmjC9jQ+yyNeTaNCSJnuaOPAxZnFbU+nu3DAqOHvWcwy3Y0q85QB7drT6Pe6ZHfHEVmn0Td5THeBeu1s0/Y0CMu8QXCUMT14dBqDpT09P8ssMh3zO1gWkK09A6q1K+OM9bj2DMiEwyCyzFjyHrYdjmgxHFlIUEiV6kFj45hu43MyCPBs5tWTzeo4gCbgWRXsQb/EgRnmB5B7lg2CI3LIYny2Z9Gp27O97Thg8OKQR37ZLLLOcky3g5GwNNkcxypO7K/tZGftWcwj+I4NufbsPPwhP3QtFRKsB3VHn8fXcuikPJKCZAs8po/hRYZ1zGXUC3IZNkIuM6ubyfW5XAa9vz2XBbftyfDHbBI0l+1T4iw/n7MxjvPRfKQ65tvJ49vznaxgHpkjwzxYYw/6Uj7Tg+/ne1DhfA8yz4OP8XFfp5KAwsgMjJ8fyufIb3AiIUiX/ECmTwTPDzBna6j8fB2POaaho60dfTnNMyqPI7LsIHcfwEn30e6YUnt46MWhF4OKp34cmABsj8cOdGacUHocMUPzlGXKvrltzKoPPQqnfveB/syg0vUPkuYdGB/4Q0vy1MnDrCyP/agnTuCaOPInugcO3Txk+vjKAAcLTmSeHegh+APNZvGMvo5jelZWyTWqMILYVDaQcBQz6WAjd6Qx1aL9UI8030/3knt3pPsGSAn8zusuugK+g2lFxYZ8gYJ3t6FRcOztV27d4pk4ZZGwGzUEqXFGu/DE73aznJjLQMLuNHoTjhBReOriQdXt5ujEFI2eyTzZz3BEP8Cxtw/TGGYZTqM4ZZUWPQxMpKM738F5Bec+ZpzPIXVmFumbwUSCeQs/chzUHZnBzDHMmwJGR2YuxlRHD+dWHFEwTKeZLjzoaTuaB/4iL8IRDB5H8FacOBZwFKl6Ml0oY08G4xJHFaYnw5yyeoltgnGOD/eg+/OYR2XAm5hpnmny7FMY8SJYT17tlyUXxJHEyILLQgKiQIdDVxckgg6yAhyQRxaDAjMEzmDVOHIGAKNEr+Zr4EU4gFnyjV6WLdsrYkBE5WSKrNmqPHdijuG5K4OpEWeIHhg++NFn+fcNQJ7iJ/oGcxAycIbAzpYgB8KBtzAZ841+ZpxjjyGXxoEfBN9XPqoS+BHv5VVLzGNs+myeczhOOVILLFHVE8Gz87OYKTvIsHjk+MepCznl2lBYsC7d4AChHIsUubaj8flc2zHIGJ2XL6U5d+KUZh5pNC9ZGgdaLkMygYGhHXLoHqBSLsvf5J04qpRgWmi3XL4jw3rl8hz3uXyGRc3lezW6c2CvfJOMrYM1ykEw4tv5djyFOADpHmfknO835t6Rz2VQUZ4hm6AoeTfC8jmOTWSkoYW+Af7ZkScNNDN1gjF3QirD2MKpHwe2BI5kgp3owhjRnSRHpwa+bqLDdaI/d3Ikd6Yx3SJBmmwbJ8gJvMLob+e7aYrOPKE/64zG1OskJWrcmdZbXeASvOiytzBsOtMSWDvTHDk4Qm7ii72cWnAitcCtSUGK5pSJcOabkulwovSDU3YATYUzBgwXOhip6HoUwrCmQROBnFzcKAnXTTzN5qGfjAln9FAmAS35pUF2vE4M3R60Ks7kHzixS3VmIGKjd+CMNzNkFChApg2tB7mez/EdPkE/6cRAZ3Uys8TEce4jD+nM9KR7Ic91gtHocV8Wsh9/qMPjxMOAifL4YV0aP4yUGbZSZgC0QUNksK7hIMOPfpEQJLKmJSWZz1y1TGZuNqe7x6B/d2a1RMEJ0iU6USdYTifYAg/9kIlw7mWnwspKrZjFxMlUWGXiqAMLksV6kidSWWMLx1nofTixdhhdHBk4H40DR5SteDrBL/luhh9Ex0M75MD+cFBGpDjGBw74JHg0DmCUnXn2GHR+9lPKsp1iezjiLcihXQ2d88G18b00+niOR5QNgj4kSRz7eEDfAAUzuoMccMAvTAs4mKCGc18WUn2aIosGfxolIAnSXHThctashrRkmHRGkkm6px0iU7qHTYD5EGs+lqAnPQvrEJ5FXpyxarIfcyG889UMM+0BFTGA2jBR4ESJDSewLN5NcxpM92Y18aZ7+3vQP3HKcrGDM6qNpQnpjxM6DYcB/iQx4pwlR4T4ysqgj7FufagBc+6bRSaAE8dgug8F092jmH9fD0dYGiutWaBVHyqjE7sG53cwI6oxUAAMRbtAI6X7NE5w2Y/eiM6WnkMZA0e0KmUg/LE0OT0Di1SNIGsin1weq2KM0DYmxwoIuWH9oxKhH5NG+BwFp/QgZnhUjb1ZjzkNY0RC5sKxBz0nPU90mAfuRqrM05oeJ5My8EMkn4f5ksWYp6V9el5aPBLnXAd5TXpeNyQeZtOdgayOM8Yqj7qnG2gRNPE8TIag+Dyt3XASOeZhCGLY4MzxgZP6e3qelmg4kRbz8WA+uCi6TVcbZWScUB8cwO7n44zSYZ2P3oIjeiwE2x4ekGEXFwo4sAfjxGmgC5IG/jp4o2+QHbqL69QucHJSuQvyE/5APxzZX3HKcDHbpbVmFxZ6mL5wmZYiCWcI2WRlXWn0aCYDB8JfJw+8wnqcN9gCXWihzFy9w5HYJUGnC7NkF7gtfkHJoSJkMDr+P3FvGVfV07YNn7uDUpRUCQMx6A4DRQFFQUxURKQbacRAEBNUMDAQG0UEFQsFE0FMxG7FxkCwE95jFv/ruv/P8+F9Pt762+ew915r1qxZM2cc5zGzIYO5+llvQqCFoRxsAEPAamARDmcTINjsRcG0HBwL9hG7oVDmpgdBF3KHc9+x9/Gcxx4UmiwPikCgCcG6CDEUDohgNx/BbhEFu48IbuaiiIFgQRIk9Askdwg3tYIiEhDDQXI1oCOiobeCoChxFWjJIOZGBUWzO8KkYM+QhWUQqIybXizKZC2NxvTlCtQPzcG0F0qoNUgubA6Cq8DVxXlxQRyMEIQ4C7BOMNdLUKJMYhoxHYI/WIsQRrHjmBpkX7IWwZ1lXzMvCRI2G5K5q0HwNfARczuCEvA2IQp2MwhuLjfcmJMehOgfHRzM4vR4FBi6wYjUk1NYwTn3wawNwfBy4RczrYGCi4FQshgKBRxbVnB6LhjxC17saIwpCDbiguFPsDcI6gBQcYMKZSj6EwW7Os7E7aJIYAMgGL3HNSqE3VBwKFObwcxeBIcGM40OrcUGSHAoDE4QexuL+pjhCEYwzQQbmihYFRgGuEoEs3+QkTGYQsER0XAFIOEdQbJbjGD2CzIJAjMjmA2M4OgA+AQ4mT3pYPaIIdjpmC4REX4oAdrgwuwZ4naZfUZvsM6HbzCDCdYKLkqGZLcQyzQcJKsUsTJzA2De2aVg5NlRGHUQCF4g2afR8LLZMfBxmUTr4CziC0xPHJnAtQ5DFZUi6GWfw8VAv+BJB6dEykMQpMZDwrlB0BUEEQmLwgpuuEEnBkDEwO1GvIXAnxXsk1gMMshENoZZ8MXhJCGAeiBmcYewCB8iAqoJBWwiZCKqYTYzBOMxpN0+AghCQA4ZiaGFIgYiCq9YfBiKzsXfOA4C2g0eB45BR4aw+R4CXcseTEj0DGBKIZih8D0AUuKy0RgAEKHMK0XJnlkIC1hCgG6wT/CcQpghAr6F+hmcgRvjTCFGU3sgzQ2rEDhy7E/4XCGcbxWCsCqEjdOQBHieTDLLioJVgJmJSICVDJREgQqAIXAHsAgUkn0Sx6BoeUgKQzzkzBMMZSAYnpAfEzCY8HZD2VnwAlmQw+4cL7gKXMkpMuCdaEQooGA2g0LxzJi/jJLpD4xgZuFQsKGIgkMuUSYw44DIKoQJzrwxMB/9gqLd/YZ+DUxmMpTzZvAHU3koYOtwB6FRzHqwAtOZK6Ohc0PhG7DmRuGpYTBBJccznzc0KozZPBRMh4RGMcQXBfNkITFsuZrggkMyiJwdE8fCLRTtJ7KwkBWc0USJ58KqBZ7JvsX4ZKMPf0RDcCMRBbNSKDhLHwqVJweWzfobHgf0PD4DUgoZH4h2Q+OnyMPaoaowPzZjULAXUJwwDF1mOFFGMRkBHR8WmIThEBY9Ay/M2DDmVIRhcLBBxdyiMIYyQbKHGsZi7zAMBfQMilB0I4pwCLQzHK4GEOFoeTib0xAxEDCOmMJsEIczECAcowMvVnc4M3sQwXC3UeL5h6Of8QKmgdPZLUPAeUCRFCoPj4IRC48KhdoLRz+jqihMgAjoG7xwA5BoDdQgc0ZRpEDgTmASYyCi0A+4C0AW8fCwoSC5N0wZQOKuI1jcxyRGOzsz0Q+CVQ+lBhHHjAkCDO54hBDAOLjLBPoFMYH5Bolnw3xgpr8jAqGzMbjZC4MGkhmuiMBQzouEY4xHGNH+UVQwdAmKOIhohHXsM6Cc7HsOg2MQCmpAiAUB1wKqE2Usc1MwXLkZAkSFE7gkp30iGAbLASwQrOEsyohg7kgEsgN4ApyfCyecmR4Wc0Jw6g1uASdwYDRyRezqgMRxddbfiBFg7VgeBIMGBW4umvUlsAmmqzmcBoKZZs6owGVnpyKGwZcJwZzfDbSFeUcRCVHsdrjwPyIhmc2kiBQ4g3HySJZuwmyJREOgDXBByCiMZERk7BP4DFxsFukXhqcdyZ5wJJQ7LsQ0F17sKix8ZrMCJeBBSM7nRskc80g/5iBHQu+3F2gCJMPFUbRfOpZNHRSxCHbZe8TKEKxxXJ9gynMn4W+mEfAH9y4WbhiK9iOSQyPh7SANhPMxVjBSUeAS0EdsBKDEFVhykuFfyKqwehBy+UFGsEgIBTuA6y0UbEozJ4O7D/gKELHwetvDJEg8ZEjuIJgwCITP7Aum8yFDYBoiYXfYHWPycYMEfjRuC6qXqxPjBO1gMxKive2Iy3HtUEBp7CzYdO5szqowYIJdjE1aiHjuMbDbD02GqYDkJkEk8nbsHAQ+aEU04ACcgrmOF9OSmAOhLBpEydQDivbehUOHW4hmreIwMUhWSWwUC36RjMMIhm5EaMj8q38iRBRcTbBO3Ojg8gORbBRChEIySCoSODn7MoE1CgFAaAwGMpJy3I3hBHbTcHw57B1/sA5hai0SfiJrRgqAjSBWcMM9MgWtjPJjkweBNxMx0GUouCxCFEZKCiTXuPY0tTyK5d2ADYZDoJeioBkQQbDPoU2h+6P+CaqjEC4jjoBF4b5EC9j4x4vLmUUFJiCQikDJLHdUYFIcRDK+Z+q5/clGRbOhHRXNIjoE9BjTrIxmTx+PlM0VFKz1zJAij8jF0Sg5gdkXzEquOnQgOxiNSWCwLq7XPn+jOMiRgazRSNTAp0yB4OwiLh2KkQftAUiOK7nbiJ7BPZfoGYkcfIekB5wPGEtMCQbGsDqjEbXLgdayF3uLZ4UmRAcxA8DCjuhwuD3MD4IHxGqMSAGO7i/H/eGqzO1lOR4MKXR4NAJ57g2eLxwifACY1Q8SQ5t9HcO5ENEx3NPBGGMqC/lxVhHUAVOE7agSJAI0PGyEM6ylLPxgxwDQYnFbdCzDNeRwqTikoH1AIvfOeRco298xVwAFZ/WjWcCITsVJ7Okxjxkv9ldyCiyEPJobXPLoWexeOHcnBvYMTyeGTWcOrItBiIKbRREJAT3HJJ4SJHoDkmtFDPxtJgH9smM5rBRFOBPIKrEC4zOGKbUYTptBcoK7Q5QMsUbB4AeUbDbFMPsW45fCzV3kkFkj8Pxwd1xCGQJuDnsDq4ReYd2OFzxlXAcRM55gDOwbu5dADvXGK4iNGJTsEaJgRo8lcmKYQ8skpnlMCIeexISkYD6i82IQEuHTUH/ubuGusVEWEwokFjKYvQJZLcy7hGB3ymwfS7gwCDYmFO4xYJp4dnfM0YCcNQtd2N6ncBPY5VkOktXOeVYcrIhmc62I4KCxGGbTmMT1YMPYJ9FwvCBwMuOvQMLDYJJ9xaw0CqhWCNTFkP+YaLit3CHIiLMGMwD3nz/iQtl8xB+sHnjCuN1/TGwMGzWsPwGts7vhQvYYlvDmLoGAizWS4fasX2OBN7OvGVbMfcxRQVDGsypioT+4t+2nstEJCaPHvuPuAUg77Ar3lnsyACi5DolFOgiSKRncNIvU2CgCvJXA1RTNoAkUHEyMklMLKKGiua+jg5jE4+aqZpEkayS+bD8MTgRHbWLt4Qg7KEAZgVJCj6HjEhBLtbv8MfBFmcqN4dyImAQ8byYR1MUksGnMHdJ+BwlggLS/5SRMJJuVMchrsp5OQUvhXDDYjh2NElm8SFaCtxCLkkE96AEYHjx3Zn6YmAXBbgkRL9MceArI6USxkn2GAzH38IQhQ6Mh0TguIG5/SNDg0E24bgwEaz5LJsPstOsiRMtoD1w89id3CW5SsyQzqyAJr1lQMe0sFC7TyOIcdvFA5glDcplgwOkstEARyDQmSjb8UTACDQouM4LRwp4bBgtnhFCy4AcFm/Ox4Atw1SJMZ98Fc4M2NpB7pqAl+CUzyc0NlCx857gLsQDK2K0CxuXMBf5gngUKZpGhjNjoRQErx2mmWCgGdmcYqdBwKJh3hIKblSgZ9syQIBYwYRj7I9Rho5mLUvEHc2ZRIGThDo/DNOMaFMdAPjS8/TTwkbhaoTHYpVjwwsrE9u6Dk8Aaw2FTsSGw7eiD0BnsxZLN3CThlDw3UdqT+sDx2fU5k8tMAk5kwxTThr3n+DVcjh9DkPkPbPpwkt0787MhWMOjQTZgkrkamEzM9cRk4YAcbrJAhMOD4bwSTBf2FxceY6ogYmkn4EBynzCHOxYMAXYJFgjHQkXFMncH4Al7MRpLbAJzH+LQALyYbUHBRd9xfogi4thAjYONYV+D+hTFinYZzwS7ThzzdyDYHULnsyORmoJzhzIayCtKNqQgOS80jhkOhm0z9BJ/MesAgYcCybnLcQhj2LsQDBhWMA0Zx2hRrBYA00jyoHkYtlziHH9g8iKtBWAOksWaLMcFJB0FkAzkidiLOfYsZcTOYE8e0TfTwe0UP1Zwcxplu46IYz4ZRDhEMGfj4O6xYY4CrWEjGEMfKpTFvCjwIDhSI9dGOOCBaCFcHTZQ4tCb7XVzARYKRMBxTN/K40K4WAAFgjVIDsRByToDGBIT7GoMcoAnhL5k6DEK7mjm00CirhBuFMUxdIhJ9jHDYCHZl2y6QCZwaRn8wbo/BLqdfcdGRFwIHGHWsBDcNowNG7WwrqiKDe64UASrkGxYc7lC4LRcd7B4AQLzG5K7PoIGpg9QckOBy25DstowryE5bwaWLYEN2DgECHHMdsSFc285bAAFxks4s9eQOCecpf/iwpmuB8SBp4kAHoKBCZCc5ojjLCoka217xIuCHRXN3DQU7APWsRyOHQePF5XBtOFjtBgnRTKMA5IRDOKACOPGolgMA4nLAGNA3zO3Ny6avYe3yq4azWWyUeDoaPhdcfBNIbgegF8ayh2DRjHZThjBH6zvEe4whwYjET3DbATGM8wsJDsfXDIINjIZ1vmPFkPBmgYXEH9z9huSw59QwmuE1YTjzahz7Z9xgxeuF/c3qwshBHcS11OwJqxxMQwWgGSnh7KQETlTTjL3mtOabGjDP2EHcI2D4wHBiF+QDPpEwT1fGFnEYVy7YB4Z34mFZRxTDdEg08soAkJhRVGy3oznNAGCADaT45ndY4laVAjYFtfgNBokqo3n7iyeJVwgWQXs0TNYLBoFN0zjueEC2AYtieeeB9L9jACCknV0PKdAOBgVkj0Cjq2LNCCjCLPZD4+d9QXcXK4OzAqGaAF75xiwKLk2t+OgiOSYTGgPcFAydxUFU6ZxCe3kWZS4OhwVNuxxMuvuBMamgWSYPkruJA6GjoMyxgu+ICSjO8YlMCcIkgWkKJjhRMl6NyGWy4+hZP0HPwYmhfujXfHjj0QEX+AecZk4lFycFZf0j2ZJ4no6iY1imDZ0ZhLz1SHZVZM4tZLEZk4S15dJnEschzgTNacgJYteRJTFuBRxKchVQnKPpP0JMwImVwTjhREErIF1HopwCHjd8Qz0x/Nl6RUk59gHOB0SZJZoFMmhcjxsXBESlbLRy4I9vFggwQit4FqgYH+j7fGsH+NZrBuPsAu1MYQejhH6ChLnhQSyJ85cJe4T9ie7LUhUA33IFEV8CGMVQDKPCAU6KZ7h3UxyyoWNMNZeplyQLOQ+gemLB5rG/c2uFopHB/QAL4aMw/Yx8BUMVNYbnFFHRMvcQZQMq4eEncXJUNTx0egN5szFY9Kx63C0PzZ84eejaCchcsMYguUqUXAqjhvUENALDMLEC74xJFO9GOqsG4GRMP4qStSOYQJrjDuHu8BOhJnjWsa5OCi4NkCVxAPiZaRZdCgXLUKy0JuVDH5DgQEFGRXHRjX+wLU55hAkgwc4Xmi7c8UmFxMYmJhg7Koc9YSFx6x2pLC4GjDgIFg10YjrWMExKTALucPYPcNpYV/Aw2d9BIIQJ9mtsyfM6EHxmFBMx/4zSZFi9GOChcLw8BigxDl6ENxjAcTNHngSRhO+SWJqERLfJ3G9koReS2GjNQW9ioYnBOP6qBkKDfku1M2ugYJjAyPe4N61E1Pahw1kNARHUUfBcIoEJBBYNAJPk/OpUTJqNop4JnAuHhHAcxiaKJQcxgr8CjMpAURV5jImAP9nb2M4NDMhBiEVHlACImNWPRQ2BNMcCcjtoU4kJ/EJUxTtjhfz4DnKOQSjLKPgCBL/VI4rMccn0Q8OWTwrEqCuE5EwCIRkdgyS8eBRoOvAyWcvlntOBJc8FrKdigXaJjub+dqJYBSzrsGwSESD4PAwTIfFmUyXoWRVB2IhAgQDA1kXsGeIkr0B9SECBSY7u1Yo1+eJDOpmzQv1b78aQls2y1mAGA0Jrx1UCCS/2aEA/7gSVphVgLwz7hMld16cHxPoe8j2z9m8SGQEITkjfuNvjijJkb+RaWG8VFYyBjpHfUqEe43qk/4RaHcSKAoQ0HdM3zLB4JAk1l7GyWFjhdO6ECyYRoneg4hhAjUmcQmIJOYfM2MC3czyiijYo+U0NQTrFBSc0kgKnIFXezgMHQ7VEYCS8asxvrmcFzjquDg6P4nLXkGyP9nkhGQ1MU0JwZrGXEkILgJPYvoOgl2fZROSWAAJgTPQl3gxtxUF+4ZdnKEqEAy7QsHdBguzMJtYGIuC+5tV1s5RSIoGdprE4hpIbsYksXwlBK7A7A0HbkKwy3LuESRrDNM3SQhW8SVLjLF74hQZJOtBzoCnMJWWwvorheVdk+Qp0Qnsxb7iHKlZIHb4QSL9ykFrs2B/9MCOZRC0P9bR+Fh1ILa+xw0kZIz8YYyxGZPizuVmtP61lkcbry7/es9e/5wzETfRfsI/H2BlFPN2//X1P38OZVxeuAIzQmMs7OztOSqQvf0wVoxkOcr2o/QYuwiN0GvPEOkBY4jTgx75b7P1mMLSI/qCtmuwtUfW7eV/zm+HavWig/RY/8bphUbptYNp9npkiWN7/OtYqEvWVnxDNB3fsXVH//mOnf0/JxPNxvds7dF/vueoybidfHzO1i+xO40zt2wvzLjCzLa9sGovzLnrdP3XWqdueOngpYsXtpXU00uV95frperNMZQb9jdNNjU1NTM1N7UwtTS1MrU2tTG1NbUzMzUzMzM3szCzNLMyszazMbM1szM3NTczNze3MLc0tzK3NrcxtzW3szC1MLMwt7CwsLSwsrC2sLGwtbCzNLU0szS3tLC0tLSytLa0sbS1tLMytTKzMreysLK0srKytrKxsrWysza1NrM2t7awtrS2sra2trG2tbazMbUxszG3sbCxtLGysbaxsbG1sbM1tTWzNbe1sLW0tbK1trWxtbW1s0MT7XB5O1Rth9Ps8BGWCv7PuNHHqzte7DkQTyASicV8iVgqkXWUd1XQUtRW6qCspCLsIFBV7SRT52kINXlaAm1JF15Xvq66nqCfwAi/QW8qMOOb83bxi/h7hMXSX/zfor/8VkGbrCQ5ZVn2NtOJk5Zlrez6SFllpPvvP8Ymg6b6+D5bkL08J7fowPGK6poLFx+/eNlGwo6qfcwsbewdBriN8FmwHF8eOl5Rc/Fq3YuX+IFBZe5be4dhw91GTAsIXJCzcdOFq3VKHfvgI7eJU6ZO8w0IzM4pwinVF568eNms1HGYW0Bg2oKyypOnbt1pbsnIXLaj8OSp6vNX6+4/cF134krN1Tq30R4Tvaf5Llm+4sCRo6fO1Jy/01FdY8rUb99b29IiZz5+oqwbFd21m++cuaX75lVUqmvo6A53Ge0xafLUaXPnHa6+eethc8vX2LgV8QlrDYxNdu07eup83Z0nGwbnrTNdoXv95tW20R6Tp0ikKh16mzR9jIq2GTBoyLCVOWODE2ovXKu/e+91axvp+XZPfyJMd5Z2EYo7zt+rnFYs0pXN7yLQkvKEJkJLoUTAk4glHeWeKqqS8RKBsKtcJpAKJAK+QMB+olagIOYpq4lGS7pIJkr4YnUlT+FQgZGAJ+woVlG0F3br5asXKQzrlVYrSt8v0Ban/xV4S9RlmrLOip0Vw8RysbbYW9JPNFzeX6go5AnMFPoLtcUKgrS9+MrEbJQgbYfUUaAicJTYSvuJ0ts6akpNOhoJ9FX0VdKyhOl5Wgpqi1eLTEQOEr6ypiztZPd4xbTb2oqitDZR2hPFT5sENrL5UzunlUvTLonkmg4CudhWOlyqKI5X0BFMFnrL0jI0u8rVZe7CtKXi4h2KGkKzrcL59w0kiiJRWmGH+V8lPL2+YnybLUw7KegiUFEiMY+Hm+OLJBK+VCrjy0UKfGVhB15HvqqoU8fOPDW+Bl9Lqauom7QnL0wYzt8nqOTX8ev5NxVvyW7z7/Dv856KGvivhW/4TXrNwh98DFSeYm+HgaM9VhQUbE5dtmrttrLjCw+IJTLrAQMnfL5WL+ysaW0zYeK8PaX7Tlg9VV20ZHnBf0ciG4ijPQICpx452qWrRCpX6KxhbWe/u+juPZnNypzdErnDwKDQFbnRvqeaPk6e8eVP24aNxia9Dcdv2rJ1+45du0uOV54TKyiqdbMfNGxM4a7LV7ZItLS79xo46PX7j23VNUK9Hr0MDC1s7V1HuHuOHT+BDbrp/oFB4XHJc+Yt3bFn3/7T10r3RUWvmtY9VSQQGgmCBDwT47T0bgIzla7CnjIdUT+Rs1C5b9oecU9hT6Gh1FJh9ND5NjJ1uVTTYZidwF8qM1UX6Qu6iHiDbYUjRSZCuUQmGazXW6gosxbYi7QlQkWJp5uNhZKFxFgqn2/gNdpQ2ldd26BrZw3ZaFzAWUlLIhe7SnvLEhQGOfUVO4jk4jFinqiDQJS2bIaOq1SeVjit+zAFuVipk71Ybt1fqJF2zDFgrKKrTD58WBdX6Vglt/mS4fJuAhc3G4GyVC62k8jnW2ulHeWpmCtlbAxKUEg7t9TdX2mByYr6dJetx9LtJH2FU8UG8uFyQ1Gn9P1TAkcK7SQdB7MxkPdDuuB2X9m21/MtjAQdhdL5WUuE4SIlgUzSIXe6iyzeMe2bPE4aozY8bUNnxYkyrbRF810EmUNU1BZ46qY19Eu7ZSTQFvLnD9btaC/iLXia9r2Pu1Au5Gd0dHYfkHbWUcwTjhd1seTPV+4vDFCcIE8rte2m1F8ow7gXp23IuIubVhLEK3pLMItUFIW2uBlDaffR88cpqglEAomsm0BBJJbLxVJo1bRLveQLxEzXCogysJY+RzSdfDptIVUNPV1Fvem6H/tv6dfXVK9/dOHT/vzd0410fk83plY964K26dZ/eQ3WPLm+TU+lBptiZT87E82tdqZdG1w+6+i7N4c1eHhE63tuqtzqSXV+YwLrt46h+/pe9LRhrGmD3/jSZ1snXHvTMEGPoiY289omUgxJyIjH4/Hxn+eqYKrWgRcIJcLHLyf34Ol0maJgL5PxNIU8GeacqJ/AUdpXk6dngxOEUigLiZzfjWfPThdKcYicr83j8+0wOYV8KCeeDl+An5TFexEO4HXmq2Pq4mjULeVJBHK+Ds8B5yriTENUj1rRUTyhhK/A1cqahIvy2fuufDu07z9X6cZz5Ql5qJwn5Y3h8SWK0hk8vkxBPILfBfXxeDbKPFxRpMDrKeMFCXliNIqvxRcKOgiV8KeYp8JDvwu68XXwfzCfJ5Hy+AoyHlQmL4HfnZcoEPJlPLHgAToBrZWwGvlSsZzPM9U1E5rivYhnKFPEHgg4QGCLL3GiwF7K568T4JcyJeyCAn7NYOJV4ef2s3nY4lYcih+f5GHrCE8+rCvarsUX8fL42qpKPAOploKxwBT3xuf35g1Fz/PxW2RSngnPArXy+SLcd1++lNfEuo2HhdsdOnQg1PKMt0ZEAtyl0FAg5O1E/cRfr2AmTOVZq/TBXcoFZqhRwhsg6CniSQfiZyAtZRjNPF8B60gxbwtPIFXjepXHU+cpSwSiKim7EQ3Wo3hO7Cge/x3aJUbZhT9eyj4JY32BbwMFeKAikvH4X/E8MBp4K3E1IU9PbijmnpKYLzBGZ5MEncHzUkdDUMssMS6A/sZIY5fi4T5gN4g3SDiG/W3M1yDcs1AklfIlOsLV2M5baC7lKfPURTwV1NSRq0WEEcsbICRJpISmpzUTpTEHED9BT6bTeTzTmXyZSJUXwNNmfaXQDf2Mn0vklrt/eKUffMJVhSa/CN57+LiAury0etfWpkLsV3r/W2Jx/PZk704XRwnoRJSag+FuHvU5zZu+7bWIKhy3+NfYSajtyLOr1noi8m4pM1i9UUyzHvVN9PQUkFea4LRznYCSUgafz4oTU1tk9abIwXzav0V5RO8uYtqkueLPzlvwaRVP5E/7KKEC97TCNZkS6vZH6Gpezqe3g33S9vwlsrsx0dj1HZ8mVcbz/SREbbUD/BTGoL5fU1fWLpRQ4hnf1WdkQvL4s7WmWEtCC8RlK+dV8ehJ0/iLl8OJBvZb1lfSB10y6oPznskisjKwqBKsFZFhyoh9DpF8KsoLjSpEd50N2mezDJ+/524c9/X/KLsYp7pt+Sah6/vy5NEZPLJNPPnN5Y6E1gXMLZBMEJJl+acuqxIF5FDv1Rh4XUabC0+qnfdXImFiyKXAkyKapz/gfNNDAW0wnd3FCZsVfLjxdaq2P5/mB15JMXmrRD8fdyanrwvOkEJTBR/Oe6xD1teaVYr0rVfV/JlPpHTEfaCCwlcpmbnvyFxlLqKRA7bf+DlbSgNzBt8R2RFti7utYXgcMcGrL70NB/LJUvvs0+sWPJq/os/P6x5CCtkzaxGGBqXcWjVpTYqQtgRvNA1SElHTy5NKRjf5VNO85IhGi5hM85rcd+8X0YvxMy906CamDmGy2nwR+pu3O3v6LEVS3n2sIWCrhAKv/9nxRpdHl/d42JRXSshj1Mcvk01E1CH757rBZiI6MT5hUk4xn5bcvaY0aJWY1gxxr1g4VEhZnjPMIi8JqGZbbHkI7n9jv5aw9G0i0qvYKXWu5NOQcVsevUuWUncnK9UDbXLqv/BrdlOCAulGda6bulpOx2+77KhK59Gnj9YvA/BrimNpnG56Lo+mLk8uaPnJp8MHBr7eNY5Hmel957c8EFBe3qDjGr8wHmzzD+V/E1N25kGlyRjfFQfXviq2F9Kp7aNXX5sqpxmjtMvjJkjo5un6Xsc8ZdTJqc8920Eyqs3ILTzpJ6QD+uZ7NvSX0Kjv8c5JwXzKTCtr3B9AdKG3w9fRzQIye3n91ofbPNp2sJxXGykg02mrbu56SjRH6fLVo4951P+R3uiisUQ/t9Qc+F0koa7+uwuXBosp8ODdxTZvRZQyZP3t213k9OyFlvfrvRK6U2J7o2CkAgWkbRLM1RdT5FwL6Y7HYhKnz1A9M0tEccLngZdcxHShRHenKB8/ib5v2MpTb4R0++kw++edRaTSumyK41gJXeg8N3V8hoik+/X1NBwl9Lhv2tIF2AXj28tzouFPZfQrOK/LtdMiWmY7ZPNijOe7w3uVTu4tJNehC934UyTUzyCmQ4OxiK5M/j2uFD/CeHiP/bX6UwKauom/7vBSHjUumf63ur+ARBtXT/U0ENL1WYqLNcOEdP/yYs3uO4T0ZGw/r0CM+8h5tK37WSl9SHqw8egEBbqi2qrzRkdIc2SSE0V6MoqyfD/3ryWfVp2aZ+7Ak5BS2IcPURi/+z5XbAs8zKfxWt5Lro7lEz+xPj3ZgCh5u3Gc1laiiL7Lj7c4iGnDk5WXV28Wk+ufjUn1ZkLK23I/+ngexvnbuk6Cy2JavyN7QaftMpL10Boy9hKU59/Hj9euEdBj1Xk53XXEpFCXNXzhFQHNP63dfWymkKLko0cOvyAmgVBzwXFfCYmy9W9OdRCS+uFrG00S+XTw0qPfr2t4dOLZ3iqZN/p5oFEeT19Io0o7qN7uKKKoTcprPiaKadKnJU+1y2WUrrmmu5ujmGzMN4661SKnBQ9G5fa6oUyLHus5uy4UEH/+EZ+y23w6HWe49pCnmFZ36v23q1RI6T1bX83TltC42tqd5Rj3yyMHv7w0SEJjvtSZWj7G5jVZe4OPjcM89g4cGREvpH4baiIdUyUU9evswJYPQqp9m3pn8htFupe6vGzbAwk1ejzvtvOCiFw6xgfUDhfRSgPZ+idbMR9uf7mQdRGugcOVC/PCBTTtQZ5lkBafgpVbUupaoF/m9pNfchRSWFLbkyWeRIuX3WhY8IhH3aU1gmFpQjo0b3v/awWKlJG85vBZtCMjaP5y23LokfCj484dUSRR4JildmOVKKHe2v46Au5Il5o4i79C6nutSaePMn6bNta4zthETC+yM9c9nSmhJzrDkq9/hT6IW29xwFRCCaHv9MatFVOd+s5T26UCmtwW0u3DThFlKKu19lVVIjN+RdCFfdBz6Y4Zyed4tKLznyq7ZBn9WDZnyaURQvKO85pU/VREU+/si5tiJ6CYYy927ItFO1QKzDt3F9PfViveEQBMGSM7TescQnS5Kl228AWP1t/p5Psb7+eOc7YxvAD9H/Z48zlPHvXq6CJb80lAdWYXDzX1kVDlqYTD3fPFpPqscqI0R5HWVSRsOVymTCG7H+Y7LuSRTGNyH+UkAXX6q2cz+S6RuHimbhva4/s0JylyKezasS0uI2MkpFGs3Zheyqcr4nVDbmNzord3V6iNTxPT+JJzbed7SahsfV29GvTP4vxCp3F6cho78sqcIa5Cqj6x9E1OvYx0LiXlXl4todPrrnX93o/I9HrE5eJNQioT/bQIlAtpR7nx3o9xuG6m74xxV4Q01nPvWYNzYpomG3l1WqGIjoR/Wjj4HFFmslbImiESqv1zZGIGnI6mgUm2vYOlFOO3OeWUl4R6WDy/X3hITA/r364dflhC17QzG79HSclyxKT0is1wMGf1WjFhlpBySnRki0fxqOfVA5pTOvMpclPQ9lx7Hr2cM/F0V/SH1/plFeKLAlopuFU9H5v2vE+TWKpaCWnfth+P1p5Ff+3qfO+nmohuje/elmMmoY8ndpydip+xvbqs45+JjwR0fqWl3SboU6deuhXG0Oub2nocVXtDNHTcM/VDC/n05mS9besJoqR4Op+7m+jN9hPWPT/A38j5RH/7AvvZ/nh+3EmiVQfKbno1CsjE1NAoEeepTnnuKLOW0tVGr4RRRxTId4FC61MdCb0MvTBdvElM94qGb+lmokAnvhpf7bdcREujs76/yRJTmV/uc4Mm+Dt1CjvlAwSkET2gb3SIhMJme0cWqopoTMLOmA3TidyHOy49DT3WYNdUqzsWenPDUl9TPxGdLM19n50HNG7b7NKSUCmNU+nTo1FHRuE52UucMP5vWg2sLpVL6dbp/a8NL/PpRcTSd9Mx3wuTzmb2EQrp3Y3hqYHWYppd/al0qynRnuv2FPedR4kqZ/oHiIgK//T/4epA1GdoUwdH+GeBg8+eaVTgU2Hc2p53Fwmo7+zch7tPKtFH5cBby0+IqGHwlUHKH6VU3OxnUewJvTmN/2zEC2CGwt55qT/hP70/HWsZIqLZVw8YL17Mo7niYdUBedBzHX5syzDnU32PuT/3JWFeVlRmryknul3yJm8KwLeEmN8H13qIKCg3qI/wk4i+OrmV7lshpUWJ785l+MhomNPFAps6GcVXeOW33oG90DmgXrNPRB+7r3g/AuPL+F4v9YKDAopb7Hlzyg8R+bz5bReyXELhmeU2340EJB7dMiQD/ZzgdGdJ8loBee78LdHS59FislphoCIhF9+0AxnDxHStf8a+Lv3lpH7nZpfT5jJaPmVX1Zf3QlpcUjfsxmkJjf/8MEYPv68e8KJ7fttDCfWyeDr9/ggRbUj8uPzeVD5lbRREvES/L7VIzhqpi3nRr1L9T38x7bmXpvp1No8mF+lNK60Q0Ps9M1wSlPg07KjD+egqCdWPjMs7Xygk5TUHl/ZE/54fuPPCODNl+uAY/aKlXE5Dvx6zOtAqpNJVJbn1sG/fr6gWGo8WUnGG2vovMWI6tHLR/aXLBOTzc8yT/BFE5Wtv/fa/J6IRL/eGbDTi0/pq68XLi4S09V3/g6VuRGYpfxIU5kjJLeH4C/doHrmdHHT6xV4R5av1PaM8V05BKmM1mtZIaG7rQ3/HOWJq0q4taYa/GDgz3b15gIiaTQ9ZTGnl04xsxWlBXUU0/8R7L/kU+NMv/qwRPxTRHGFCteExAb1caDDmswOfxj10O6V1RUwLq/YF6vvBfxfM2K6twaM9u/V2GwfISWWQWWrFZxk97xNv3wV6cHu+htdKOPzX9jWvCjxDZBg/NeVcIPMHfcYM7ornrXBogAr0ztaJq248h148smv1dYtiAR384H085ZyQos1HaSpVCcnx4+ULuR2gj7uJ4vfeFVDJtaFfj8hltOK+yt7P15To+cu4Xt0+imhWp6NT7DUUKSsnQDDIiyh1qX/k10Vi6nRtae5aCZ8sPHaKFtwQ0UT+gP1qb4mW6v9sNosS0Q9+w2JffxGV7wy9V32JT7Msl134bSGi5zs6T5jwR0TL161MetUA/eH2YsOy5zIaO0Fy6LermGKvDL7bki2nwJuyeHd99NOsyHNKE+HXPcvpshl+VPGQQZpHrIW0br7Hnr2eIhp3rvO5jr3FFKMRKI6H3Q88u/CTc72Q5uc2NS+O55Fi4tQHEQU8Kn8fN7gI8cWP60M/+1+VUra1zpzd8OsaC3iVH4ZJ6do1ww8b8pRJ22N1pqRESC821qrKTsFuZn2+WAJ72//qwbVnpvEplefRNj5RQn4rOk+9sgcb4GWYVVli3B24JjR6BT+WFxxrsQ3+TGiekXBDAX7tZWW3S837BPTJsvqLwlAxOcd6vqgK4FNM7natze6YX5Xrvy+An7L+hPn3n5flNG2wnv2782in6b09h//C/8hyeDVxl5Am9MzLXb2cT9fdo9+87sCjF18FtwtgH38s5QnVdUSk2X3EwybojWsLVi0r6iKiVWsV5o6fSrRf+eyS/RUYpwUKv52eiCm6YdGHRR2UyHTX5qkP+DKarrmguXUJn6LnXtA1u8oj3QeHBw3ii2ndnzcJeYckNMzzVElMiYDWtSafGdcgplMbbrda+/Po/c8+x4KahbRqSkRBW6OQjpeNrFySxaOLa/oGnNonpmO7O/2M8VSiin57C/wCJeQd/6WXV7ECuUwp7vwhAsF5+QdHWX8Znbn+dYbiY6LDHnF1vLVC+tbsn151GP575OGvA2cISbCmS+bIB9iPTqtcumoe/DzdGVN7dBZS4mTtL7668JeP7YkLRhxtFZSfstteQAURan8WI/4Lad4xyslfQG+XHrkXBr9jaKl6p5k3hDQpu6viFVU5fZoqPaHzVUINX58H/+rPo7Cbz1sU03i0u9nXz2aoiPSXF3yqsUDceV5zXodbQpqmvfOGxwjo6wpX4ZUvQtJRG5p5Y6aYOmvlJCc94NER7ZhHoS4yCjpyqMUuA+Pk+dKR+sVCat2/5aPcV071Glt29y+VUPTZ8Nl2XgI6mdp9yyyM52W+b89kvYKf0W2W/cBWMfWNuj7rnraAZhzTk31AcuzvkbEOzxfxyL/zrJV9Jokod9dT109OYuoeZF+t+4FHRkayroVDxDSvvuNrGy0F0ne68mHkQ0V6PGCZ4uYJcto6a2fAbQH87E9LRi1v5FFe6x/10g6wQwpXYztq8Cnd+tSHnDEiOr3sk3W/AyKyUStayfy+od4n/7z6KSaVt6/emtjzSazLW5M1U0i6G6aFiEMF1C35rofjSSEtWfonbOYQOSU6nnrxJUJG08y/r/qKuH5KmrDu4XgBuRaElt9VQvuzV7yzHy4hi9M5UZnTYS+eLqd+dUQjXaS9O+K6DxIcL41aJ6Kkn3UXW98KKfXe3EniIB5NOTc5/26ZhF5M7p46aYGIquYWBqmcEZF8yQ/z2PUiyizpZLywVk6nGtt2DeuL/ls38njvaVIqnGjS4r9dQLE1czKTggQ07I7noyiemMYJFXd8SJJQxznlK3Kg90YtnKwzp1BMT893GFIN/OXI8bWDireIKMFl8X4r+D87A0YN+fxDQvsWupZJXPnk71Hpu/iuAh3sMX7gGjUeDbiuWXQH9lDZbMul8a9hr0an9LTuI6b7fvU6Oh+IqqLLVT4vJwpWaJs7foaArMzzRbsuIodmqp3oBbzBt9OVx9cB2YXZrg8KzIFdEc/qMVOTRwdjmvpGwN+pOnZZ//NHBdrY8XvfHfCb/j4LMZ6cJaJF30xMm+4JyG3HVBWfrWL6dXSTN3874pKHzj9EGEf5N45bieHfz+vzR6nNlk8ux53SnlRI6NbuU7KWBhGd6Vhg64w4t3hVjL8+9FqXK/l5c+DHXLEaHKk3VUS9Eh+vLPklIWe/rnYL4V8O3yw1Du4D3KL0w+VFqsoU09TdLvwKxssA53Lv+fCHjDe/vwccKbJO3pwKf1Y8XX61/1TEUfFXlv1J5tP5dxa3V8POSh5//zK8TkRuzgv2eVoivvDQ/NUH/u7i4hwvvxDYp3fut8bYwr95GVFyyltEuxYf2vdiiYCyilZO+DUEOImtlclALxFd/7hzXL6MR5ZNnz7LER9rd74z6CPi+CXnvRWbGsU0esnOoAfw7x7fvJYahXjYd6zj3EMRIlq7YMBNU33oo4H1s5wvS2i/9/hvWYYAKRffa+5zRE4t+lcb9syW07vznz6+M5bR9nO9v5s0SqnHMN/aGOirjYZ58upaEXl9c+nl6SOh0l/+O3veB9zon/LOWi6ggKLxh3mDMB8TbV/uRH+6Zmv19wOu4l6YNuzKOOijQ3VuBXuENKNYfZy6jZAWlvx99Bvj376y5epa9Fer+MjceIGYLmcpVh5+IKWZx1oyG6OFtGHkK2tDbNhp0H/0rlwdxP/3B9/KuSKh7btyzIfo8OjR2diHw98KaNeTZ4szAX+2jn30bssg2IPX+WtuzOTT+5EmEivYEfMvcy7uX0x0OqK1dZyyhBTTy7Z3TeBTQpP97BW3hfSr4yKPv26K9OGrPGb8ecQJe8bNthiG+HjHz8jaOgnZD3ngFzlcSCPeXTv/rZJHDR38xu2/JaG1ovN31tpLqFP0wOm+8E9+Pi+eJlhEFGbZQ6FsAua1/cgJU0uBB3rzBe4lPHLaGDMyewVwrY8eK5dqyEnwNC5tm5kC5WRrORXy5DQlO2bgwldEB06NO9J5PdHRtb2dEut5pBI/cJ2kSkAtS+fr1MGP6+e99ZlDN+jbdxmaE91FtCdqX38zjIuogh2VfVeJ6KmutaIcdnrVtyfSl76KlF42s/kMxsGIwbqd1jyWUUlT/KoeW3iktyxGResV/KePbg36UUKq0zO6SvAXhRkWZy8/45FHqf34u6vBp1DqsdkUcUtSefBe81LEB72d7q54y6Oli98cNgA+cDdV9fj+ndCPHtbrHruL6bVHxJH0Y8o0TXrsaZUmnyKuPRv4fpwynS12zFkrkBJ/SOfLwXky8gzQlby4DXv0YuDbKsQh959/uTJwJwDp63NTzmoi/jz0Mk37HJ9GVm9a/lRFTEe3yKpaysRUWXGpowM2SP6wa9LCiV941LU2KbVyFXCSrCshu4MVyMD6XomWC3DHzpPrR8CP6/F76rcBIwV0o2qD9+F3yjTeZdDRYcBVbHz84iQHeHQzds5bJKLo2aalD38jjhx98VrFVfj3J7ynm96vRjtcT13+uBdx59H1EZNx/eAQvoXmcOAwRYkdS65KqPurUTVSHQUaotg3d+Y+FXq3t6u+62n4i8pTNkbBL7z2wsNGvVxCGS4TQh6gf54ETUq/Yg8+xUV39xUViIObL7w8tZtPdzqfuxNnLKDLgzoKz3SRkJc8fLRWC4++tMSMWTmXR+/sr646f4Coee3V52FfxVR46NvChu18+rjbYF+AjiLNWS9qvW8pI/PzH45ti5fSntw/aysr5RSXq5P1YS3RruJL988CrygZNXfjQ+CsYfUba64sE9PBfa1FvdvE1Mdf128gnsN8o1q7DsDjq6+evrO/nEfX7fkxu4OEtOBZ5JTJ/SRUZbPdcDj0Qvbr6V+CI+AnxIY8frlSEXgT77oVsnev/xbOmuyKfaZfh3yIR7xnMHfNszl4Xgbxz5MIcVVp/mHD1oMY33lK6lu1xbRcdfy81KVCKnxRVr3/uJiMTB6Z6qcL6FDyt2PewPGymwSiqzVImWwcnvhKQ0J96v0dhcCbDlpcU+wD/Ib3cFzMohsyss2wOXz2h5SWGPrnH3iC/MKYAtdemQKymDIr1PU+7N6R2KRPN2E/DO7Vz3qN+G/qg0/dTPn0vNphO7LjlC5IGHQY+N3UJF5M5S/gwb3Oj9O5LKT8Bvvwuw0KyEHu0jDF/C2YpfjC45qUWusaulchTWO03aa7B/yt5f5DE4JOC2neXN0LSxQlNGfdtY0fCvm0ZeydF7NiedQ54erfz8awZwPnfNdII7oU6TpQCfom0SV1Vh7yFru6vL45zYtHQRPqF2UBt+4TKw265SKl4Rc035VNgN9UeCRihy30kenNPf0QZ252u3lGuVRIpvpzD09eIyS/7ScLauE3tJacCiz7wqcFifZ8fU0BrRgWr3FojoR2zTm5beMl5GX2H1fJ5+G6e7VU24DjXBh53Xci4nuz+36WXebxaKFhhGBAuIwsnD7nz36IOLvbO/57kYwuxO19fstARo7Og86lA5fyuiqw3KglpAsHuj6L8BDQguyym/mwC9tOqFeEdBJQUUmnDcdgr88lGMSowl6WnG40zAYe8Nr5VNsBVQmlltzI717Lo4r5J6S5h4iiJUry34hv5p2+3+2GkTId6lHcYzpfkawvXzgwvaecPI3uB8hfKJBTrKHRwYd8Omqwbn9uuZh8vry3m74dOPlc2e2qlYg/dI1TmybyaHPMxU3GwAFby/LaXicLaMiy1eNay4WUnHqnRGWyhH6Pn9oxCfmFIe6ZL/XvSSnYw7rmt5KE3rfklx9zlZKB4dEDLdBj142W5DR8kdJlyjBXw3iZMf7Hl/3wE7r91q96foRHe0+q5/eGf/VEo5i/Efb8g7nTe1XEwUnlRyf07ALcuH7RWJ2zIjK56DarCv3yqKDSeGiZgB7ePT8/b4mUnvAzzV4rySi4ZOVJTdi/LgfUOt6fLqUsc9NOf/0UyNs46+hZ4NRJR3NNbMUSehhg82USX0LfhBvaahBfPyjrqzu1GvH0erXA+Yrw+za82frDGPjP1GeqHd9gnisc2jtpKJ/6p+ZOXgAc+/IYrf53xErks61VpHtCkS7v/njHDvhcjzGTDu+ZIKO5Pc8vXQ+7sf9G9JMSNQlte377nTbsYFEtb2YX5JNCi62KF+E55tzf8kbfT0BXBvpUG0pwn1+C+l4BzqOUOcXBAonLY2F+29uyeXQrqDlCirh/9q0Th9Kmi2mv2fC8GlPE3Z++vmouE1Lahu7ztsGPaOm8cqsv86e1RG81xyDOKdcz+jGcaNiY8xcdRwjgx5zVSrAX0ZuaxWMrQERz+Br7OsoJ77eqboo7RvR8kMHQrpP4VNywunWiIVHcgvktoxcKqVv5NQX73SLaqpW5sEeSApU4aF3/PU5K80dttokzlFHFtzulggg5Hdzgn2cO/IX/ZKa2EgAxHd16x+bFIup2rtd04yMSOj6q6nTJLj5dndN1ksksMVWVGVmJMG97zXrbvNIAeOeAnRGusLvdCtaEjlkGvXA5dOLkWuDu8wKPN44ATv9r44Mt0Hd9FapfKt+XUn1lT/77iYqkpOnzZBzieN1tWfab2ojGad6cc86OTzu01xSvWiAgHZuVlZ1BQFu60mBFK+zvgOjJu8KQZ7ncNPmNQyf4MRsrqx/1BA7zx7I6FjhN3pr4pzRUgRYuXJemGKtIeQ9n5xj04NOl8b/d5Moi0poXpaC4BHGZ0ZTtjmXIF/W0WddrooSsDd+r7p6COPTcRq30zRJSPrIu+wnmwzmfO3+PDuZR7twbfF9sgK98ebm66nU+fdOcuVdtPOzKEp3Q0IlCKhlaOOXhADHpB0f2sAG++TtOf0higYz6Su3vDHNUphpReIzKez49MJpiKXouoPywOJ+0E8gr7tL5mjkReYrvpR15Z8R0hmfSI16BR3e9V0xfrc6nRZtXbD3/XUDlNr3OjrHlkZrNFMPasQL6sr3Xpl+3RXSxcHtZ62RFWnD4Mu/kZ6JDB9cfiQVupfA70ECwXIE2zV7s9CsecXlE1ItMJwk9cL3o8qIX8O9dRZrrv4jo1+9fpxxPIA5P+C58Dfv0S2fJ4/vw+3tp/X44DPqhrtHReZytiDqf2audsh4428VRE5WhN2Uje6weFCUmiW760BDE2Ys+6Od5dZSQ2931O7fZS+mBY/6v6cfl5DjGcost4pX3J+Psn7wRUdq6QetygVfUpHWduBrxaZdJ/fy/AL+7EHBDv6sb9PMhZ7cdiHeaQjR8YkHAfPp+8azi1zzyHXluvatIgh/QBQb2Dz8Rt/F/vAdszH2WPL0D9f7nc6S8CXA2AfInpyi9wABzKyszu5iQ/9mcXw80aj22EF+PbRKhlxCjhy38cZQelv0HgtEKeirbIBWrOg6h3sGsHmwmnhKnx7Ze0JsRqAfesx5bcPgPD9ZeTw8re/9DigVJ9P/3X389Y/qDejm+qV8Hjm9qiPLf711R8v/1fgRKRl6YwDjqbMMgMNT12J5+3B8gbuthdwQ0iS15DA0MoAU4nvXHf1vM/WABx7dtbyW+c1/NdvPH+MGx7DcDTqBkXNmhbAvkeD0Q8/Xaf45AD3zpED22N5QRCL96oPXTGxzLOKL/HMs2F23/tQS9YWznRzB7uTXn1HlGB44/6xmL7b3ZYsKh7f3aTkrm6MVc1/7rPdu4wtcP5/T/Fy8VP3NB7Q339TP+v7jP3Amg5XPfzuDege/PvfPn+iuFq3cI64D/6zrth43l7nI424UinvvKk7Xd+b/3hC7mPm7ftpTboMGwj15oHG4b37PdmwIcuO5ybt/wkzv4nzUUvmzDXyKTf7UZqQjwlNv3UOS+/le9ZviOcb7ZceZ4Rcf5clRsi3+db4nX+Pba9bhLgbmc5d+B+z0Hj7H//Yh24DP2+w9sFfdYtqIUVOr2Fd3/oWG3b/6GpQt62AgFK3LZPbHH+c+2UiBfB8TFB4Dfb6+HNSTYZ4DNEywV+qcaxqH/z/dR0f/6UK99waAeNizCWkw8GgzQSIydKKxQjrLXw466WL5ljIq8uFMmYAUvG5txemzZCttzEGPo3yewPU6M28/6P47ycvZyGu1sj/ay1XLc2tn2eYAVKCDq/88B/7T+n/1VMH+xYirOXm+o53jUh3VSemxzoogUr/gIl8Co9kahmVg+8c+Z6L72T4eC/M4NpP/j6/88DXSGvX1o9D+8eTy4qGh7vQBGe0ej2hd546dG2rdVSAzUA1U9Acta2TIm7oJsTRg0Elua9p8n8d87ab97joPDAxeJN33sOC+PIcMSzYxNjc1HBWLPvyg99gYVGcUFxvzzsx5k9a9xY/1/vbf557NDgR3IFiVcHUKYRkiJkSMbN1HBuG80m/2cyn/1qBHrKr32vTbRpe0rl7nfVIES+ueHUeL6szfcQlCmjZjW8Ro+1NbUwpzN3f8tPs+dmY6r/rxWpKFlR1qd6viUqD1H3nWShJrNR401Qpx1fdEv/9MrRbT71qEh03fyaGx9gdrlJTwSljrueYz8/d3DHT2a9/ApNz9osjfwdt9ZG3ceRBw7T/rR+yDyL/tED87t/iok0ZBrkt3HROT5ttOUfeBv/G/xiDbL/iw/Br9SWbRrx6kVYuqSt2mNW18h/S0Yrv0S+MEkHfMOjcinn9IMEclFKM3H614Gvtrr14XLTvP5lPFq5he/UXya7Hz+i0UKn2RtiecafyOuGGm8Lnwf0cvk42NUS8B/mN30oRR+81irb5eu/ZT8r/GXzGaqJb1rws8XSVrUtMBrm5AfcT8/SEYRlg/MT08Dzto/rGIi8ig7suakHgHp1qLPa+dfC+BnRvu8HA2cd2Wc8QKfIULSeKF9LgD5xJkj3/KDzYV02HS6jSUMZlrVT1XRR6IFvcZ8KgIP5HZzUc5y+G3/W7yp2QMfCYO8VchqmUh5zB9lUrxclq0YjLy9xdX1d/Pgt3cRJ07LkdI9y9zPH4BjjnPULbaGf3X/66SmFeBL2tze0mltA/wtvU4j+EUC0s7ZduHeVx79+PNrdQr8uursZxd334U/qigrOwB//tz7s9USEFi75Zv4Kz8S0r2d3Q3qr8rp3hAXv8ZsGd04/CC6KB/8CNpw0+YReBRj9riNQ36m2MflWnKDgFTztqq6IF9Z8kVl4VnEs2YDmm8nKoG38EKsr+GMPLPRh31j4JJM9viw8Y+liCy96uwm3xVRwBvVmaGKGCfnJ2Vswfhc3eAqdQZe2u/r7plHXRDv3Ag1Pw7+RJrn1+M/HaT02PfknN7nBJTrfnOfFeLkgQnrB6sjj9rjRTQtEiIOuH3yoh/wcGHQpMuGaNez8yuMGf+xzu/Ere3ID7/6pjPFUx344iTLhXeCMO9MJtdkDlEi3fgfl2dME5HzygN+x8IVyVZvpshSTUb2KZa+xz1kZCk9k795h4Rqui9N7gSe1hS7T1Ej20R0SvJt8nLEAVXvd1YmIO9y83tmqDryJBtey8kOuOesnwEp7sh7DJjys0HDmkfVg3Zf7ePKo53vZ442UZCQY8Cf5Z0NwYuZsl4wMEFKQcHFZb6nlOi21bDKKl8pnV3zKG9BqoDetB267aYmJtv6A0bbkPcp2G8srkOcOOn7y5n5f/n06PE+r1LgUHkvtIJ2bQJ/avz1cWLgPjedpl3XSgePqiYhPjEO/JPAnp0vrQE+sLew712+lDxdKzNahkBviuVdPYADSmRxIu9T4H2U1A/+u55P318KNzwGb8G76+XjTcAR5X1+HNgKHGnFgaoJb38DN53i1NCSLKEvZz7GT/oO3JyvNTh0KZ9GPQwvsukHXmphcJ0+nPj6aSZJesFC6n7b+/NpczF5PdveT1bGpzSDjrN7zVCmW7M3D0jgSWm11ya5QpOEel90f/cbOMsm/4H2ugsk5OtcZfoWedn0Tq930S8BWT4YsNaoB4+yJQqvcycISHdWUueLLny69udN+PgHwOGEv5759kOcpxNdYjBbgV6kdp8pA1/PfaORkkmskOyfjtYbDr4ewgTHRrR71PM/a8/9Bq+2dE74yQTkE15dzVTbLqQ2Uzt+I4yp6u+10UfdwI8rLSwVfuPTux6rVj20EZNLtnBjyV8BfZ8svLkfvBu+TnOH938Q54/ueW4T4sqTLme6pOaKyU661zLTVEqDBwkCrMG7K24NyknqJCRnnVa3QuQFl1z+WGoFXP74p0WuQ9t45Gyk3H3+T6Ixjpq7tFcKqfmHdta4ozxSn289Ngv90TjA9nUAFgaumD1p/2/g5fUGRxeVdxHSxpyg2d7uClSlsv6IJ+xOfPfcTe/wHLQXBsz8gHxBUU3M05m7pXRy+NB45znAbXcH7DySzqfwHgk/0sCj81Qc1u3kbzE9+KOaFfsO+cEllSPXH+bRdLH77tSREiovvdKSDD2o2HJ7vxi8F5+QTxTXJCDNBJ0FLilymvvm/uK4/gr0pkvejRLkeVuUTTI8NaW0+Hf/sNk3JXT09pyCF+P5dLzglr9+FvCdSdRXF/j1hdJL7jqMT5DSJ1ENcfHT283LO1/j0+9Fr7P7It96/Wf8NFETnzpJzb7ZDhaDV31jUh3m0eSEFxvmmEhoxB+VUJ2ZKqSmNMVqW7oSHTyS+abuoZQa39483posp97NlinfcoV003D8/GuPJaQapD3GD/PSWe2xpzF4qQ9uvdtq0iagILtVWbohfLJSX6UvAl7htdB0REu8mFa6Fi3OPwE73GhybVQHIe0Mkz0Qj5ZRj/2vluTry+j+toU3i3Ed3TXTc8sGy+nCR9fJU9Sl1HdIz47TTvFpQumE4M7Ic5u+WbTh3gge/U3bH3gReYevv+T7/Wvhr4Qt2BK/A3GBzrqPO6E3Xp0a6VgK/6N/Rud9llOF4G9vnHMkB/yfw5qbZx6UkfWNjCyzccBH8nKOaiDfNX2jdMH+YYj0BME/Di1BHmjjobSuwDt6Dc+ZM/cW+vlloH7saQF5PNWyPfZSRN93z37Pfyygj7nv7I068Gm4veKt7shPjl6SuWq3MfyOz+NPFYAPemntjgrfzeDdTszXyZohouLub6QHkOfVtu5TusIHfPPUovraEinFA2jVDpPSzbopSztsEKJ/5yzP0hBTgmBmnGUzj9ZNH+HnhvxS4amHC0dMB68lQGP2zXqMb+MwMyns1jDPC8MeHOSTomn2fA/wE+KfbX6zRIa85vu3mct6K9KVZ6mB3uAPRS+aFFpvokImCgaiskY5TYpRWXPMVIXmXTay/wvc0txN9XfRauBHahfTliM4DTV/71jfWULBF6/VD0Sw71U9epEVeFN9jrVkCz/zqMdGDYc7WCiiMGf7y9RX4MFmmI6LR96vb8prNX34sUdNj1UcAx5kYK61zAd+1oSbOitGqwMXF/c4MKdCRGfdywzX1PPps4lpeRDyKmNK/t6rhV/Y22bK1IPAf+S2krRd8GdPzrhYE4z8Tv8zPn17IA+0aH+n093GS+iKw/6OiqH4zb4VtwofDoY9GJosnJiFPPWOOEPPuzzKv/l4rk6AhGZ+db/14T2P9p+d4DXoNJ9GX63zkjQRNf5Wn/8IOOS7NpVOweABTF2TWZ4Ovu5b/yLf6348mrNjbGqCpoT0TVSWNWiJSfj+zIsnv8FDqNCpXXdHROH3Hiwbvh78C62isFcDlEh7o7f2D/Bpcp30T+z+rkBaFqo7RnUDbnru1bmGVXKqa73/ZTjm2/bvj3+tWA07W/n57xXkL3t9aF3RiDyzyM5lg34v8OlUx+SO7CSmD+JD/VbDn3726PSwc4hctt851/0ueGbmzS7nREdEZNf8urmmVUazXfqHVl4FH7dIK2xdkpSUlyVt3fNWTMXV7h9NwCNeMvucnneaiPrn/ZzpAj9y8OnNT07Aj5tflkuEPM+7pW8fJo7g0+Dzp5+UdUfetiHNUuuNhI45Dd1yb5CAKvWWBvvXghexdEyZBHwNXt3anV2HKpKwc9rs+2pSOtRhRfRGRympD17VPdRSShNe2Jl9Rh5TU/NJxIpuAlIf2XlkxA8ebRp4pzxhHfhYu9ruNf+G3b185OIsMfiOmwTS8Hl82vOE0kzAE+5VPWNLLvJUGpMkOW+PQ3/2XLj7Up6AXqd0qv1dJSK+ybReldDXngvXT/i+XZmcZj+9Oa+PjLro9OcfAi+4zNu7eZUpjzRrjE2sTiCP8XbxxuQEomOubzU6Is54FSQx3wR+yy4T+zELkUdV6dKw3h5568iy23XKsL8rshusQhxENHO9/pKtZsAnYxM22Zsg73FubCMBn19iEt3xCfLUi58+TTwLfHNDQJvW2r0y4Hgev4dFi2lb67Em28uwqw9iYgMkPKpVin/bAr7ZE4fymuCOAgrpMNJriC30SqvpphvIx1zb4qQ/FPFUr7Plo1uRn17W7OQ/VBXxhoGR9nM32NkDhfNmdQKOODcpt3S+Mnk+/FF9qjufVmZrbO/rhfzbktGLHgD/tuiy4HeakZjyfvVujhoIHqvF2gLHLeDDvpT1OIm8rq2bX+hYAC6LRNtKXsLu83+Gb67twqMHtVoB8Qh4h3p5qrz2FdLczmtq9dzk5OO+2u+9BHzh0xpPvXpLaFbjtkdHu8vAr3vwTQvxQ5aC4tpC9KtblxfVDfBrnbZHjhkE/VfwevdfQRiP7JTtZ9QbIq6Sbuc5w0+WzR9/7GYU+CCLt3xrgZ+n3yN6arS/kG4o3M5Vw3y9VZ2ZuvmIEr3znKBhNEtGm86cihwIf0n5ZJxtt4ES+iHvcuvbTvBs9yoVTgAPz+D90tQE6NETab5fBqA/C9duzhqULKYrBcm7LPl88ipLnnkEfMr7yv3vb4f+vBHT9fSwleA/dOillnqQh7zd2B4h4BE8/bI3ZDr4HJfjZ/3ZIAG/JUAhMA/zZf3o/L3F4F1dKSsbywcP5civRXen7ODR7DORElfw8nZ33ENpiGfjZdIL77cK6fQJ/8VZ4D+Zeg4fUbdfQEazvpaWY9F4Sa/GJHEJeIDD7gQ7IU+QHjZ96SXk7Y+bJZ38hV8f9bToWDUWfIz5StLWQORXtnbhBd2rFtC3mm8PBsPPr928KQvuDWWFp4zLRF6tF62JOVkuIFlhodGSW2IyG6ElHVCJcdOw2VTJVkxKTeX9He8I6cjp4yXpyIuddH/0qDhKQFp7zWf03gH8fK7zg9gzUpq766io+oeAOgya93PibjH8unkTTv9RJK3R6QWK0CO/FsQs7Y98UUjRbsfvqUIKNjRIzIF9udohzYPh14/V387WgL/19/DhYRvugRe3vqdHcA8RdTLQNPj1g2hdlnBd3AoQitVuehiAj3s1VdZaPEKBzO17Cf44KNKnozmt5zfySX3Eghd+u6Q0rSpWdcZUZcp/9vqBBuKcr6vj0uOGieiR57fCpkDwZs5nx3vqwa9aPDzOaCZ4H6vMrv4AP+blbI3ynsAzrgy2VPoVBz++4KYiFlXSVa1iWmcCnuvfqA2PNstpkKFh0eoa5E1Hvmi6Ar+1amqZxBy8nSxv21Ha4Adc+lEwcCn7beC9z6R7xqHDd60YlAv/0WTSjoI9seCludyOcBrEoyz3C+v3AB9xbsMWDt8w/nhZrqNDJXS7ybXxL/LlJ+J3euhLwdcSXBtboSans7v7pxRoYN4Mrg1rBN/iiH3Fs1U95HRxofvShF0KNLL19kA1xI+D1/0o7dFXQvmh671Ogm+q3qPTx5fgUxz/VaO8FveR6Fm66ltHxOMXV+85hbzJovLE1Sngp6S4DleVQX/Pe/xD7S/0mYLXnaa+o8Dj3HX2eiDaMfitrdeUGDmtdfApi4lQxPPfMU+zUoHmxfpH3sD6kRnTC7/9+AV79ni30ZIKPr16dr75Ju7n94/O3p/NBaR4duFbNdjl3SU97y+OxDq6vkHdxeugzydrVb4D3+a3uLHrXU8hDYov7br2Lubr8TlZVcjn+B9q2HXohoQ+lzx7PHIBeAj+a3uXXBJSgpde4dYjWBcReS2n9xvYc8eii7ED+PRlT0jx0WYRDfM/frPXYzxP3Ttbeq7kkXYH346BvjyS5nUOXgm+5b6dl+rvavFIotd69TfWI61eefZztY8ilaYc1vMapkBLxDr+Z2LwW9Qblf1Ph8sp60qk1pWf4AcYhhuEgZ/v8+RZXOkG2NMDWmV3lYSk9Fhj2G+sc0lIfWM1Lk9EITapYQwnMPd3N5mcIaTpTkN9TWF/SyeM5j3Cur4ti4ZKH2G+pl2eHqy5APl2i7GBE4YyXqe1f4iJlEyHfhs+rrsSKWi57nb0ViANoUFkf/AUV1douK5U5dPXceWPtRB/z7k//elN4BWK3W4rn4Ce3LVhwbQNyNMPKfPWrdgrJkX/sS4fsZ6wyKhvn+Hwt25vyzZdFwc8qGeM3F0Zefk7qdv33cf1lwx8GL5ZkV7ef/+wrZVHVbnjVp+NxTy8OW2oYTbwLMP1Wh5i6LGhX0+qYJ2BY/atjEd7cNybd7O8Me5Oml65Pew87ETyk/FJs/m0fd4qi5AkHo3XdFYfM1hElaIst0zgV57+p1S81JQp9H78qcZj4Jl21JNmtOKXsh/39vseJ6P9oVfGGqjgfhsUNi8Gn1YmGbM6LBr8DXWKdf0koZy6hnodlt/cHnPOGDzYTMUze2wvIIc0M+VDAOx55DTNMwdO4rmqTF85DvxOl7Vqg3q3YL2Twq7xd5ZJSfpq6mL7Aqxfm9xlcSZ+zdnH40ZIAvwm34dz159ZKqCOOk+Xzv7Do9dv4saPgv973e1rheNFEQ11qn6vh+d/JLMk9iXmh8OBMbs0wLO9nHYg5gZ4mNpf6nul2ICvIJ0+YcJo8GhbL937A3788qcOHQ55C+lRX6NBIzeI6N3yilpLjDfZCO+TjsjLPnZPT1rXChxJUanq6XXgbTODQvK+Cmi93ZG5k/YQadXkHj7/HHrbWRSRA76QQ85xeT14fw/q5h++MgwY8wr78U+fi6isTUd4EPgPtUk+C8BP/+B8T2mSAPMpMHfO92xFanQ7+Hwz7q9hnzxzyVsphcYUjzmgrkiZWWUat5FP95s857Xxa/D9Rmm0xRaBJ1YT5+//DPhSWfKKLrfBg7Y+0/jxDtEtecCSrsXgwep+KU33FZHSB43PE0Nh73vH79uWw6M3ysM9hvZTpt83fp2ugX+q4p66KiRDTFMWdejzA+vBhomePnhtIyezzo7VI6E/z96r8FEGzzJvamn+71rwPo82TJ2K+XD5sOeLp8+A7x7iBX8AHmBA2+Y1IC86dkjW4j/geZ5ZKll/HM9VrePG0F9Yt1bl6eDS1ZFPrt2edQt+Dbxmq8v4XwYCurfP9+woZSVavOI86FhS6nZkrN1G+FfHLjsafhkP/sh0rd/Bj4Artu7bKnEB/6tfvnFnrBtL0/zhqnmeaKFjj7v3RoIXM6l1+cQ3YjrsFBM5Besw1OZafr6N9QA+WivW/QFe1xC4faDGN+Bsw0p/3h+mTPYzHvjbIN7+uVju+XOZAl3QnXOm7r2EdDLSJYYXMf7uHJhjAR7X7zW2HyOxjs9l7p77f1fxEF+9sXG8wKdfGdWG2kMFlHJ32X032I+uZ2YN3n0I8XPzu/W/wbet6fHiyGH4UbcetTzx1AF/N2G0eeIA8Iac1oxzBc9gWv8vRX+Bd70bL51QgTjItaTTXFWsG3k/eaXwYI2Izm9cvDw8QUBLzEbkJCLOrD8h2n7giZD66M4XtWG9i/E9R8MZH8TU4PV+qJoP8OCTHaw04YdEzDIdygMfsvjzskMrwP+dteLM6Hfw86b1afPpaC0jwU1d59m2MupsVDLNNkiC9V7iZR5Y7zbDIf1bMvBgadyNJQvBIxaXa1yduUUM/n3eonrwEY8nptc27JNQSEnt/E/dEGf33HFCjPz1h5Y9Bl00BFTvsrTs7lElOm1Z0LnpLPTXnw0zvmIdQZHbH8+3iOt6OlsUdgZvZbf7hLyV4N31supROXoB+JVNf4cOg590vUvbnt7gTUrr4lz/6vPJyV/N3kOPTwE7Agc7Yd5m1H1wUAQPTK8wKmYuxkXPY9Hee7LBJ8lzr/WBv19wdrDpmzlCei0JLHu8REbrXR7+enUT+vbNlnkZWUp0Pn/n1CCsL7intFrtfCCP1nTdau+bjPh3wfM761JFtKDkcvQjtk5z5Z+1mSHgE/kJboZhHH6MTdrtDT9rx0nsq4t16hPD+g/6jvmwwHL2nyisv4m0fm+XvA5+6ry6NbrwSypfVC5PKFWgr/ePlngDb63Y4mt6woNPdVsTLq/DujuLBHn3hizgEmcaOszCet6AU/Vpe8HjONjvUI4bePaxQ9dPmY75OmnD1JnPzcS0IrbuY10j/OirrobqrfCXDsz2McrE/H859aSKEvCD1OfDn23F+s1bbaImbSW6l2QtdD8kJ+21qxs8sM7pUmORXSlw7u8/DQ7XgvffrTE4zQ12VeNCtPOmZCEtPzpaUrxISEOfZ01zuMGj4V3ebXYayKMdr3wm6MbyaUPFpyYvRTF1jCydfbZagYRRa3JWhynQzm6dLhzvKaOp/fQef8e6uMCN2T2TgKe0LPvrULkEfobT9rCB4Ne7lp65vR08ubBJCgaL8Nz+XFatuoC8wZQtZweOhF8wRs2xeRvW0aUW+g3XAA/f9tOSbZXQ69F59ifGAz88urclTxNxVbkk9Wh/8NK/hCYNkIJ3KLlq5GLYT4nGzI4bYwMe31hpfd+BiIOKrUtqHoInc/vErcHPCuHHtP7443FWQuqVrl0vYz1JkdahqBt8IXlt6Zz1DXxOu/qzU3ohnxGmaXbzNfBf9ZJdd43A56O5H8rnYL2GvZfJtabJ4A2tvpazpjPmRcwZ4adYMY0Nm99pYT8FUn4fvdlzNXhhe80u3gXP+tex8rhI4MkHfz5dfwn+mquddc2vpxjHV1xfnPwOu6xyv4NKg5Aa9YqPRSAPdS3irccftHuH1Xm1XA0h6V8JNzxmoUyr8x8cP3hRmX6eeDLXdrSE7qksre40FPFvzxkTdusqUN8PD++8Bl93ecflcb+Qn+nX5Ctn9vWmVvOmGOAJ66+YjrDEes0v3a2Nh0TwqfmwKEwMvkxhmnCF8zMhrWl+8PSKM+Kn9X3NykZin4WpP772VUTecfEn983go6le3Ho4Cvq0/vLHbc7LwM9r3bzver2UqoIfm2uA92+l3ie0CutvPa9/cv08EHZx69ZpSEfQ4oaZb563EtbtzjDfijjbwWqfe89+WBf39Ky7OFxMN05gzxC0zyxzZsoVxI8lRxYlV9eAN+R9R/dTsRKlLByrehN2coxZ75kKaQo0ff4Byw8BWIfQbaPRvlgJTRm9zHnhTegRzexHk67yaZmjZ/Bm6BH+qvCPT4F3b3hlouV+D+s6Qrd193IR0cHyhZuSkS98GPr7RBXyO4Mkfn+2ZCMOs1cMaUlD3u7mH0ef7XL6/uj8lZci8OL2JqctBv/ZNtxs5B7wxsJq+r009MF6xktjBDrK4OnrHog3AX9N8PiOouomAR2YUNbkAxy7fLaBVjb4az9/Hy56CNz22db+U/dX8MhizfIENcSJ94+Gyf0swWf6Wp/0OlBOO+x03L+2SGmYgdeaLs1YD/t404O7WAd9Oe941qJxYqyr+ZZ9frmAuodtP1nqiPUTvqNf1rzDejPlASux2QkpYRW3CXDJra+mikQv0K/mO61G8EW06dP9cSu/Ic5eNkupG9p9qaDMJxZ5ysxo0UZF5FXvtv061Qq+otvXUY0VIxRJz+z5nQrYvfU9TL8mwD5O7Dk64wBbV1yRXKVVinXMt+5NSx0GOygakKyE6wq0j7b9AQ9VR0NNaG0tosBkiczCjE+V+yyHOo/BOtsJNplV+/m0sG/fo5cQr65VbfV0n6ZEilUfOz1CvubDy7SqmtMy2jXj9/NuyD99lubcXoH9D2qLDrw1wbpWhe3HVmyDX7xuc5eLRyMRF2rGuE1CXBm+6bDcA/P2rH+IvxnyNvuHzC18KeeBx6rbXDEL1/d4dWxXGvJLb6X6xogT0xLGqiilyshowYXT/jOwzsFu2Nx0rFeyvzP0gRL0So9DKfan9BRp4/Unq9U6gTfqld3Yu1BAfhMynQYjH7ogY/O1BPhLRtnLppfBLrj0m9I1EHn43h1i/HssBB5eo3X2NtZHP560sG0A8ol1p4varqOfJo6+oT8R69DEirMSTT7DXkWdf1t8C+sbG4QNjV0V6cGZcSfVwL88UXuhn85krD+22f+5Futj1kUURU9EXjx60fPFYdCLddOPXe2B9QQj1ptrLfLhU5TCBIfbx7B+8GZtZ0PwnT/skD87iXzM+2TVhR+yRbTmwtkju6cI6FSm2bKd4P2fqOhxZTz8kR8Zrqe13mPdtNnhtYXwr6dWB31aZQPeo8OFosXIjz3o1WO78kaiabPPzCydDT/bNfOxXRtwjOqPVU0DRfTXmN+4+RfWcc7v1P88cNAfuid0EhC/1rm4Ofgjz/xdRdXNBfn5iddOf7+CdbkfspO7vEa8s1jRYUUM1leuOuh40gL89CHkl5O8TkixPJ95mzYhn1rgwFsFv/7iRTvf8rNE3qM2Fpn6gOeX1zj1tDOPPs6zXKoA/fs93qel433oidbTWnuxTjhy3+sPccjLRv30Gd3Al9PIwwMr+W+hX60WlyUsBt+20X5MFnDCNrUtmtaYvzJLm6EBGJ/7ujt4rsE+CU+eve2ih/uYFdfmNgl59V8Sl8C413w608M978sJPnhg12uPHRSSYWVR2Zsw2Kep6h3SxfDzrs2wcD4gpPJ8r66NwA3qYk/VrHOX0/q7VasDwR92+HVneyesfwvat9zJNkZGs3Sjjpw/inWc9z5mbsU6sh/jO8ys/AV8rtU6eTPygoVGCcO/pIMX4W6udyOVRzXrkjsuwX4dCk5bckfB/9hVnaxyD/Pa8H7lua3oH/PQE6Gu83F9nx05VUexzv2I1V51rN8PkzV2e471cqPM5AeLCpXIRagbfQ3rK93sFX7EYJ+H5A21A0eABz7Hbn7JG+xbERDd9cSkagkNGL72Rk815I+1C5zDJyFP+WHEyrnw15c7dlt4vQH8131bpo5APuBktFPfLtjPYUKEmUJYVyV60OVOwc4EJer2Xlebj/Wdy+dFjem9RoFuD90llwCfz+j46FJAOI+GvjNPHTkI+2NYpe8s1oKfX/Lw1BrggPkbfLSN0C6TIZkKehtglx/N3HMK6+j2JPu+BV2XjNILtqVgPeUTy0NenQ4DjzLoei0V68+21E53uGOJ/N/Q1bvvP1WgxG1lI8f0l5JG39Nuc5djXdubaMs1yEMMt1oRYbqE6Ntik/DNdxHXPL0wyhb8iGFHWpbdR55HFhlWdBv5rVEmTR5uVcj/hi/LXweynavaWj1s6gje70Zr9Qng4UfvXVj8XpEO0J1MqlGgxj9KDQP1pRSp43bH5puc9tTd7xOqjrzkN7PwdOAXc0aEBo8H/6X7ywPfv4C3uW5CZa8G8E9Opn7THr5RSGvt+89Uw/4gSoqTPgZvENOfupiPtqNE9Gx21LX0FgmpJOgvjx2JfBGvS95KfL/dv+jTYPhzJwtV9zYqyOick7nwMvT1+xBeccBy8Geid5ef2ManPqFG4Q6WyDc0Zu0RAl9tHFpVOwLrtpMmzvKoCBfRih6zZ5jmIk94p7+qdgn4BM89o3ZiPeqdvma19Vi3pPymy4EJ2M9hwP7UuZ1nKNKTUwPjtWCfDvUN8f4DP+Z8bdbz4jwppdtlKz7H8/2bPnzeIfhTXR+eL88Bnprx8ufKXfPAU71bX1MDvHeH0c65iy7waInf7oxU5Kt2Kpm57bOA/RB2VZ8P3sGbk5YjGpKwrunOqBMnr4pps/mQF2cGK9DAovo2lx4CelrRv9cS5P9k+1eMNEU/yh12+e1FvrHryZOWn8Q4/92lXYJDyJs7bW6ejvxt8t+1TbuwXqgmqs8oK8Ql59UdCr9iX5fOinUHFbBvyOSai5kHgZdYqV98ug5+YdP4o4d+7pHSJ+fSwznhfKo9MCs7Dfvp7DcdHxy6C+vr1402/F0ho88W/WyXisCfyFHXLEpA3Lw0/NgV2Mfr8+9fcIlDXmzyvXsD94jIL/De+Ubk1fZeFjdPQnzhtrd/RQVw+vfu69PNsd5qzZuXneduQd55R9K5K5MUKO0Fv3XxZQUKe/7l6B6s0xu7fviFrMFS+jnibul3OfDon0rrLqkK6WGfprvZ2G/LZ2LWtyfAQd0+frvug63EOt3IqToOvszLKd/UeBjHF0ZZ6/fvCT0zvTBgylExZZ7m8xyxn96J0nAzbeSBlp35fG9DiZzebrCwVYcdcNjtHegQIyLV26JRm38pUD/xxcdu+yX0J6b8yVzgj4YHkm43hYqAv+1/aCPD/mBvk/MFwEHte+t8yQZfOsPZ2WoWcMn1qdeP/sV6/hf6t7slIv5b4sc3dTQHftSn8vIAmZhGChZMPwk/KjVb/p1XhzxfcM047UNSuj++Yv1I4AguR9Ypaj5H/BTzNDNzg4Ba/Q1ez1YHz2nIg/edwSsvj/n5UB96c1b6gi06c5Cn2W+49fUR2EWfhI4J4LEHiladXZAJu+EUfT8VednUe4/WN4Jvc7B05LOHrlgfIHq/ZuJRPl2IvF+945QCdbMpCKzdI6MN0ZUpP83kdE63yerMUOAln7TWd90KHPK4z1l3C+AbdEjj/hqs41m18Ggj5lnN576XR4J/tPDd9o7ndMV02vjMhnrYxafC8poHiFNyF+0vOpUC/Tzk1ra0DzJKntb3fCt4BEbpfW+OwT5Ab8xuH3l3WEYiF+8DHh9l9EXJ9P4YEA1ju07odxh8j5UvO/Bzsf46c21yQSLWzWq4hsw7D0Li+1T1Ka+mianIs1zrPnDiPgGBgQuhj903RHvbFUvo1JYduU3AXZru7JAPq4Q/rOCQVPhFEevtlRW69BST2qpuHvlKivQl/fnrrWDC1ploLl2JdUjrjh/t1Ac8qqrMquQ68DuKiqc94oMHN+iK6szR2FCu2v7n22DkO8zkky7unQ48/FPNLV/kS4vfn1Wb1xXrlMcY7HyPfX/ehryanmiH+j/lTtgFffAxKGJuQZkCrb9fOakQ68a0O/2SdQUfJ19x0LDHWO8dkhwnaXoC/O7mru/vO4rpW8CJiLng662o1o9o2g/96NP8Vwnrcqe51G2aAD+oYl1876lY37+kyuceFnxSM+32+IR5HBeeZ/p1n5y8F5x2nXwX62mGWK99t1ZCBkfOeTYpiGlwRkSrKA04uNku7d9jwe8XZ7z/JcG6aK+BtdOwL9bfBaKVEzYDN/qTm3vTWUSLF3pZbj4OvNjokMq2BXxqjY651z8Q4+jVo5LUv2JS/2zax8UY+iSx7w2rbwr0lx7vfX9JSlZFb506Oglo9aXPQ3S6Yv14KzW/Rp7WQzo/Lwv74l3v+XBrCOKW3YOr5cmngBuPvXN1LuJR+7izb64Xiejl9weC+yL4P6VH1y/szqML4avKevSF/n4VtvMExuPgpzqi1SA1D87bJ6lYBb376+b7I69lNOT3dLVU2L0jvpctg/sg3/Go1995qYpUZnqjqgf0fWH99OdS7D9nHFv7+Sn8Y5sjmkfuLSQqPvnmfAr4LKqPpJX54DG2xYy9OwDrcfdqGbaKkf/6oJZbLH4A+/DWSu6FffSGnw7XHxyNvO89lY0TtynQsvdzBxvg+St4HB5xH/6fauSRKs9FCjRi+6XKQqw/1o6xEEqwX5jyop+TlmMfmcv0wK/WRkBN1xImXkN92i+7rx4MHmovo6snw4GjdBWY7EpD3v/4511pHQYKSWgxp7/ODKLPzQ/2rwUv4utt83wTRxU6MXds/fI9Yvpiq3khF3Ewv8PFJS+RL8vO8E6/jH1dPq+Z8vkG5kuPoqFnk8GbKOvSc5U58gr2J/Km43ZpZNEQ6Rrk5zXunn/ZMRx5AI9LJ5chLvTpKh8pwvqfS2cykgbA/zlvuOmy0AWK89OBdS/B+yiIjF/XNQr4wb41MQoYj+Md3wSkYd1dw6xtPh+3YV+fTcZP9yK+fdMc2OiNRRkWMrUbAcAL7+q8+bTTi09Kb4I8DRCf7/TLzlEpRJyg8vn7SGfs9+T4oUgJ+JHDghMxZ6A3Jly7ddrzijIdS3kdNv0o1i09Cu9+AvvS/NS1G6sD/l25RpxSFuKPtuhfAS/ei2nL9B2Vg5F3Vsz+LS+C/jRU3VqpjTzm5r2W007Djh08M77lZS8xrTWPjWbxx9WPIt467O9i3TRN3W8W4sKHoxqGwc8csuNkv2LgqQZmvT4N/iSjxaPNCh5XIT+348+OncAr/7xYSOuxPnyMW2eHkVhM8jZsbdISrAP7u9kuSmM57MqqQ9OmvoD/YafzeaEZj4wrnsw7CH9df6DvpqHw60eFzW2djv7rNmPj4o/AzxpviAYZY3+inP2PVPP9pVQ268pKoaYypQ7PS8/5LKC98zVOhiB+WvPUa4zWLPAYzxnnVyOOMApMKWgG/rXQ6FP3F9vFtCwiw2E59sUyLznvm4J9SWp9C2z54J2IExZVtnhDbyo6Ka8Xwq8qbb12B3FNs/m1jFasi+tT//FNtruUlPRfiWcDbwjtPG+FDfI8S66XXvXCviWTZmxYMt1ITqu3xYiOqWF9Wq8iaQNwL9mFsarfPsI/iDFS/ojhce5X3tHt2A9vbf2VmNPA61zcxx5YgXxZ318Z890I+aXHPc55g/+RklQuGbUSfITBP12DkGdYOHDR1p1YB10xTvvcCwn08e2RDgqIn2P3vdsrh77Ozzn+6Cbsy/oJh3Ma70oo4ryjixn2a7ht9spsLdYrPzrze6g+5smWNdum5GNfNbHvyF/DU9DOMZOLq3si/3ZjU7LFBOi/B7af7kMPbHbYdCbihpT8ut+Jcca4KS3SjBmQCR5M7dlRA7Fu7WWDRG071i29s7D6+vwYn6rFu3vfQf56u9rV2vGw/8p95BIP7HfiZHN34YjryOdcvdnmmiikTQUZOWvk4J1ozP98C36H8hnV0HP9se9b6YVuBogvxnRaE7FsgAzri1fM5QH3O/dzbMF42Mu3UYuH88oUaVCfntNG9ZNSRUrFYi0d5C8qDw43wbxxSk2/uvs71ofM1FCfhP0bEsu+ThUhP/Apu97w0ngerVbfmq9UhXyLWXFvZdjdI26zRs+Q8unGyw1pEYj/nUIHnJND/+z0nnDPHfta/DRMOKg0VYUscvv/rcT+WGfvCqw99eW0+ICS7pV3YorvOGfkO8QvUz2ehPhhff/S+miNlFNE8m8eGsHYz+dag4LdT+xbNKDf3Pwx2N9ivnTn9SrouQEWy52duiBvsiRu5JMDEsr6+kOiiX3jXi6zn58L3mXs+OyqdfeB2w4fN/6ejpSMrHx6rlsopp7byg4+/QR/oWv/bWHVWLNV1mL3HvvfiFvOf5VfgN1dEfjpKp7/LE3NvpnAbRJ/bzj8IAY4fm6dgiripUWDZ/pswzrm5vtx575gHbbRfLeWXeB79F4gD+0lUaFfKc2N9siv963xc859BP1717N0slhGP1+eK/gAvpF7yHTxdeQHQlLtYvrlgW//88YkO+COh0fXVy5axaeJSnpPeiHPnDm00f3nHay3fR9zhoAvN9/9LBCBR3S1JWC5FuKSDxerH1o6y0h3dtDmlefllHBYd1MG1jkmVlwEdqtIcw1O5BlgP6jKZO17T8FfVfx0WVW+HjiWgW7DWSfsQ2Cx89fVJ1hr4ZYbVmAtoYCQdZ1+Y3+gvZ2+l/cDvvQx71PyB+xj+bFbUO+YUPiX4x5kiIfw6Nrky2eigRtuCsq5VWuuROYRu0el7JPBzkbebXwqJUk39UMZGE959Zt66mCftxUT9DQvIZ68abp45gHgA6/yQuf/xf5fSz1PnfSHn+DRT1ygivzRX9UpTgYvgS/m9v67BTz1oztjvpUs45HnrRnvWuCPDMr6Ouf5YWVSqllo9xn59Fdvp2aUeyjS9pnLzzxeL6XN/QqPR++U0aQBZwM7YN8ilWUWK1URF+jHGxfMhR5ZclNDbyb2jVoSM2xCIe7n/YVNUz2Bgy7yer7wYzzyL2tOO9/Dfk56/e7YuWN/zUn5KdauwPvSri3zCfuNuGGS1O35UiVS3ZeaNwr7VD50ivd+C17slOUPFz0ETnqs4eDk4cCHXAzf924FH0Ps0fzgFfaPTDTv8idLIKBUf/sLachjdGx4EpWBPIpS/1Qr/kk+/bhZO6npoZhy/bpNMsfz/tvLxXkC9nFcVHtcSq+w3ltztu3UAXLaZfG1xacAeE9zdcvPV3Iysf/muWO7As1RnWHxA37DlwPp++wwP4rnfDI2X4w8ydZttjZ5wIW0uucMw/4WvYfb3TWDPmyhbauvpxLVxD+jk4HQ49ZHWt7A39xgb3evFvnwzBvdivsUYL1w+PmDmcBbvF0/2dSBD/KzdfnZvqlK5OFt3nWHTIm0Wtv6CnyENPpxxMYX2NS4ZbZ5pT/WjT5qCXWfhv2Gbm1NqTnfk0+NvX4WPgQPqTzplX8G4oO63y96/YI+Hz1YlngG9rfjUnN+2xSiF6rVSo+2yEjliu+p1VLwRvMH8dywHvS8lctxla8y0nr6eHbvROAyTy/2iEH8WGPwbr3VZB459hujHwvcvbGn1P4S9MKObYMulwNP9jX16FGJPO5jwZmKtG1Yn+8Tar0bfDjtpV5O+64hnuptsMgJvHijNUc6vXFRoOOOXc8GIF+/O/7KAzfs17UxfpXKbcS3ivKL5aM2yWnTgyUailLg5bt0Ps5GPJSWtilRCev9BYXO7nN8sU568tkBW8SYH2MtLPYhfrSqcPTbANwkcUPD6SdYBxxQXdZPB/yzS14ddtoC/1xy+pHvx3rkE+4fe/f2JOLyvVsUbkyS0orSw29zEc9fH70/vKtQgVbdCgnuBdzeI3WI9wLgkTyJf6It/ICXb0U3k7Hfw1LpQ+1H+chvNEy49xN6rfVMYMmrg1ifX3A0Vob1Pvt83HtkY784t8Hzb1cA3/RsmXfbd4MS9bW69nZdEeKEfTt8L2RIKcqA9+fBL2XEdyrbPgnlFPyhJcQM+z8PHJH8Wgn4eZKwLPkS9vNI1zeO2gb+767cmOos7HOWsv+d6QDYG75Wzc69EwU0vuft6pjDeG6aOgVlKgLK6T37gMpEzIue5Qrji+B39tCWf0Iet2ljjzs9wdOsUk+ocrQEj+Fpt5/VTtBjakf6zwMv6MmiUac3ABc68fLOsjXIM5irLfX/Aj/M1HTntCOIl/ZEPB7cB/tWdRkWbDxFCH/rz8DhEuy3khPVGr4M+4g++XPrgx7yqBUdvghHw58K23Lt9AdnrG8fdXfhuBfK9MXf9pLxaPBmu5l7BI6S0ohfMzKK9RDP3bviMhT96b/At2Qd9HyrwqVlLdj3L/HM74E77yFOPXzikTr2haor3llxqB52YuxO16XXhbReQThlOex9zhK/Tzuw/83Ivjb7chCH5Tm3Gpoqw38J87iYaiAH32TI2Sbsk608sHtnf+xTtMb3gC8fvNfVrTMzwrOxT+S9767OwM/ThiS3BsGumz26cs4TvMHbbTukzlhM+8jyQWk6eD4+tlcv1CGPqTNlx/oKQ+zP8urhi0rsFxatsOlclB9wmlczFvj8lFG1d87GgSXYd3XUloQdG+HXqU1o6i/EvhG9ej6bjLzb85tjD0xD3uRC0cZrn3cLaPk7oVIo8lOnZ46svwJ74LR3o3MK8qservrD8+EXZ4erfQrtIKZ9HRwmGrwjulp0YfBr8MLU9ipP/JaMfZrs8i0+OWMfu4g1R12wTvvaeN1Wc1cFmjHDZ9oQrE+6euyhZSlw3c171bRDZwtJcbBP1FPonQMDf9zrjvUyhYGrbYYhXo16fKelUIx9TSR+5063COnuy98PD2B9Vu9OqfKavWj/uBzpBsSV4hEVnW8+AB77oMVNukqFPl4M2lGNfU82vvMY1xP4xkbeR72x36TYc/N6Vbwui0ek2eWIE8Y4ieqSwaOeHW/c2wz7/NVP3TtiWlfgv0//XjyA57rS3jTsPPaF29jmGDoa+6H+XTjxZn/ofdOqx6mV4CUsuZ48aAXWk3T8cVBmuFqJNp79kWQOPlNwa7XDzw5SOrA3cL4b1ocYy/OlPZFPiRO+rgV9gDr16Fa8AHldhzXfPiicAe6lLxh0zA78uK0dc56DPzbLJEdZFftpDC3dG/DlEo8m+k1sjBsLXu6U2lVfkO8jp8QF18+Bn7BXfKq1FRU6pc/6Ddwm8O9rl+WH4Gd0G1VN8K9DJm/0ngSc+t4tp8qEv9CTPkW6f+7xqeNx5U+974PHoWVqfAy8lx9Thy+bD7ypXNbWbeUQ7CuRUePjjf3u/j+uzgIu6uZp4Hso0oqCLXZ3iy12d3d3oGIndneL3d2K3YWoiNinIuKJ2IqK/X7nfvt75P0/z+e8ZW9zdnZ2dmZ2ZsLdDgEtRuIvNeeOFMeRC6cZPKv1ZeT/HYtXvjMCPbNHpcNHfmHvuKrDqYmlLuNfwXHOnjmN0HMeXxgQ2jWJeh6QZugi7HW9vi5JvZp9OmZKVAlH7G7fTMjiFcx7kaJ9x6W/wD1hvneTJFM51yYcKte1Bu1EL4pwdY/Cv8K+4wN9wY+93RteaYhdxehMJZsEpEIPdmBm4IY+zirLkO0rP+H/r+bsGw6xc5EbN3gzcCl+zHKH7JpZ5CjvxlJF7knL/S3b7I77RvEejzhTwdPhQ8Jin/Qc+hh66L/RrR/2od7zsyxthV/H3bYeMx5iH9nuW8CKCYPxC+BQeleZJugPopP3iXzsooa6Lbx1ivcsPa4cXeB6xUXVrR9xsOelJCrNhRHVhzxEvul5qkhd5GYd3i/Lt5P3k80XDNuTrnUiVW7ihUlT8F/pPmH4yCzYP/V6Gf4yO/6k8259/P4Q9kSXbhc9HLEGPX98047p8JNwcMi+NOVfYKdfO3PTQRXc1IUL6+7cg99J2u5r3nOXeT/YMvvUFdjX97uy6mjRVY5q57as7Z3Q0w0sljzzAvxE9F/iu/kB9t1ewQ1alDzrpFY2XK8iNiZRGZY29xzhp1Rbp/5T7jRDf1TP9jkfflXujm474z5+F6sXLt0qYpmrOjKv/LU/tHM3vnxsMH5kRqRstCTpPPyZVErntY570CdricP++HkZuPjbxOursccc55ah+iP8nhUP3FYZu98RV0LXLKjFfXTe4lQf1/KurPi+ew3YF7veOmcIjbQor0y74k/yvmTOyWueiXincXdy1LA47MOu9C36Zv5bd/VrQ6IhTe4mVRHTSg+9jX+PGy1LDpiEXrTK3eK1qmD302h7+6rrI3gvOODlDP8w/FhdPn+4Buf6gwcb1w9F3nK54HqfitxD+wxeX3o8djlDytWNHNsZv7cva2yeh53+0eXFBu2Re8GcXTtPQwedZnqOmY++NtnjzX1TV3FWE33yz015B/ns65arqx5yVTVOlX/dGb9lL91SH7w330E92/q0R8gt7NeWfeo0nncvYzoPXF0f+/c/Qdbe4d7s7wHr0vdCj7Cz/4fcaZAb//r7wektduWPz92Lmo1h8XGnLvGX7ruqQS6T1/XJnVTdrjppr/UV8pLOxZr23uaiqhe15er60EOtrp52UfsS+MuaERs8Cr36wJU3p3VD7pa1z6Pwq/uQ6x78e+kl/mlCsu58Mu0SdhSJ/p4fgp3Y8bTRFTrCr1XPcKl5VfTXn0b82ZEHu+Cv15MOPI2f197Tc02+6Mx5U+yiLTa/u+qVLyZLel/ujZP9Bi1kP/Ws8HL2DuTEWU5G3HiP3PyUR0MXjl31dPKu7MPxj+U3rnZQZ/QG07ZecqmGc4iq3Qvu641d4/3xdcatD1VqdfL0H8/Cz78J2dvmE3asXmdPjX7wFfvPhaN/Lr3hrtLlTt56YmkX1Wz+w5HzeE/YzMXxxCbO3bd9O0XH78U/VHCyQxewf1lmsQ5eAj/zI9nEj3vxF1LJ+jPfVew3SrQev7KKC/ewwHHNanKfzl9mXfp6M7AX/e42o/hQpd5X3Xft6Cv0qaf2tbtDPIyTRb7VqI8/0Z1Jc9Voj7/52U+HN80KH3775ny/iO74pcnc4udc9NTDnq7LMg77o2pJjv1Nin1MkW3LKvVGTl/q84H6nthBec868akKdiGXB0/dtRc558qex9u+W8M78Kmp23ZHbrjwYp/6I3lv82jujfhu4G2LZRfTecI3/lyz6XjZB7znrVhq6XD04G+OuJcqRhwBlevr0NzYLUzt63Md8001ZGhA8nQfnNS8wHWbPEpgD5Ij6shM5I2hdwOnvOM9VfCI2IN7KV/Z2TdZVuztd0ZWPjYU+NieRl0agB/fTUmH1ZoehTx7lPe01Yy/8Psu/TO2d1P9/25Z4Yk+el7OBi82fIWv7RTUJgx70MWp5u0V/+25xh3xLLUJf+6B4Vsyoge8M+zSxvPQ09jiTreXn4U+hq64lhU6l8ohUTNXEOFn8jVpP8Jvz+uTPOzHJ96PHC57xOeBu7qQIrDJhA4e6nHKZblao+/7HnR97xH0VPUXfVqcFjvhpvV3L/LDLnPptLe/XeGHBzYc0ykF8QVWLimR7Db6wPeDatWuyb139JjYNWG/HFTe8NV9UixxwE96XstA7P2zNat3eQFynumVO4ZMF7ulD9VanyJwx+bdb2YeQJ92/JPfo+q/3ZTvjUPHp0Wwrz6s9ikwxkUF5U6ztBbytR2Xo3vMgG99vqdO0xPwpTNedChiAU+HjGoxeypy0t4VKjql2QP/nN2jciz+XRf9jZupljmojEseDZyP35u2l8p99c7qpA7nKRt3FD7owIZ3RWJruSjnVC29hnEfWNa+dMcR7Osm65pdqY0cb+FmpyaVxvGe5fCnvjboeZOg3d0rIy892iRmzOtoR5UhdctZccgdtjsunlOUe8WKCz6TJoBnTtl8pi95g31HwU9/u3x2UKV3R5XGbF3lPD4t9gvxHK4MGfdyQWHe56S9X6k0/gG8pgQ2KOjF+5BGY54sZXx3501t+wQ7uByv2zQNRl/39M+SmV3DOT/3+uyahl+CeyNtGybi1KP0UfdTl32Q97p4du+LP75+l65lrrse+cqU6Pev1idWAztPWpKiPT5TquXPfgV/nkdKlPVMwr2haObPtcdm431KkwPpKudE7pLDt90n7Oha1woqcIB3jw2XFhqWg/M82+myE2vcS6Jq3buT6j7ym2Ulz15VQegfVtUsMod796Eoz7GT0ZsP8t6eKqYs773r7LrdFb9mfw8MzcxxoAo43ziaaqybCq4wuUWhaehdM4XtXB3upFK+PNSqN2+Wv27rtLggercMwxevesa5Wq5ahs6hKRKp0U4PbTur4Yf5VdD7fPOVGnqiSvGx6HWutd90OI5z40bZwcf3vsZfkGNmx97oG3pljop+iz7RYfNH123gp+v9/W2yf3ZTv/p/zvzthbPqe6bjzdCjbirHiM/ZnmNXf3bohPyB3YhnkdG24ldcIpW9wI/XTicSqbURbQ9VPYIdTZYW+5sQF+B2ilX157K+Dzp75t1/KpHaenVC2SToNd8uPdtuA/4W35fflMSdd16pru07V5T774TAOyPzb3RXf1aPGNsdv5/rGl4JaF/QWS2fUr/TI/SMhXtM3jgwNXqPrfXCQ1mXNCM+/D6OvLl3ualTSuAPtsL3YU/fIkcbeLBU72aH4N8i6j3Ljnyr+aUlAdV4J1Pt+uGbfbA/8s6+N+YW9qzFtuRa5fQLOfzFKe5VZ2LfXDYkaAF0ueDTutGf8Oe3b/Oo5EUnJVVld+dzT+3He4dCp6fv5b1r6djiv9ugR/3SfkHd+YkcVLn6kX/H8d542Z43o5tnt6iDgy+4TsHu+e+WKaOzEsdkWNVzp1NwbgwpvHXwJtbV/0r3PJ14B6NmJy754xf67APHiw3knjC0+catlesgH5i8okH/WHe1dnjMuxYDXNUTj7zDr7pjv7Ddv3B9+MCSw5oWmYP91LICVfadXo1d99Iew7YjZ973fmrzO8Q9WdypUPu5vOOvlqj6qvnIyXOl2xV5Dmc1Gx49qJIWe+SQ7X3XV8HevuvV783nz0qswlZknJ2L+EeWk1vmvMDuzn18Hu+FBVzUktDXVY7xbnF4/OImj3lfOyi8RLpiTy0q6bfav9/Az1XpudTHFXlYg1albi8fBh/YcW7TGsR+qvZxeLMb49CT5vV2x+xYrSjhne37QYva133ZxsLEzRiR0+1Vvqrcg8Ysun8bOXzuzM3ONvvJe5XvzX3SIo9o5JJy+ire7V6rUaDAyRzYJZV9Of7MaEd1LdOgIZ7sp6Iftww6hD18z3kFdhbjXlzMf2Ph7+j5diVdH7ezAXxlpaPrv6E3+9xyS86L+N8ZGlr5Qyv0nTkeD611bh/z6LyvbXcfN9X8on908ymuKl/HTZE3G7urE4/ur44HTp/nzF40F/+KO0Ky3T5LfKdG/XNui+B+79Wk04WdOLR6Omx417XIhyM+LEwWiv3kvOTvc9aAP4tP8WXmHd4dByc+cO/ITd7Vvp++9Bz2PQ1PZHkei36gxPFdlc7nwB43X/S6Z/B9t4tfuBaBP9o/Q1YG90X+1DzpvDaziyVSTdI1GVOUdxRr0t/p1Ha/RQ2ZdyBr9TroR9a4hqZEDv30cNDR5PAfvuVeeQcRH2P5xY3jp2MfuWByjoFz8dfxbnPTBlV3u6qzF3+OLM098mf854nDPNDrTLnQocd2V+U1dHXBJPddVPPVyQ7V5Z6+wNL13C3spsLH9V1V/oxSZz27p7wOvHuPX5V9N3ZorUfP2zYZ/n5P3TdZSkEf1pfpufE29/33v5NOvcQ7jRzvZ9wI5px40i2La+wgV9U/rML7EYFJVMadf84cjXJXx7qkd8vzzk2NLjN+YGf8bO53//a+CX5MGl9MujsrdlTZcxXcVh4+Is3JrO4h+B2+cSfxpBnIWUoU6zXxEPxNveCnp4dyHjRY2/zmYt5fN653p1ajEtibd4s42Rl92pf23/Y9RN6y6egp97tRzOtPu9TncjmqTF/m5pux2kPt64yAEL3f+KfDb+dGX7V51pI4P+wdPPo96tPLKbH6+avQ/oHh0OEi44p0qIc9ZsiDHk1f8PuXKUW6sWE/FrC9mQa/ObDWpJL94DNXjW164QR2h78PNR28ejZy7LP93IZgv3F1pyXjtM7wIRafz/3gj3xWWFed5J3KVUu/XGx/1d5hzvz78Hevo1ZveYfeJriey6Q8V3mfsWHx6bmci08HtfyTET1r7xxpsk3l3V3HVl0CXwehB728cOhn9B+xacveyoAcsUmiNqs778FPQsy0tR+RUxXY+i7oF+9zam8oVG7KdA9V8v7WdZs/c/4MSDWgEfQu3ZUW/b6g3w7xre6bFbvPhq57PmZC35mqf+NESbCbdRtfvl1p5BW/npwqnxn9S7MNzW2zsC/Ln+ZE9+L4NfZ6Ef4kGf5BytcI7pmROCCLP49YGpqfd4LNJuxO/Ap+Y+Hn6ruJT9EyQ4lJDTu54x81xad0xFdxCzowPS32CqsHDLD2yok8rOKs/cWxm1p+xqFylm1KFVx7dPcZ7P0X3Fvc68x6/ChkaLHvGvfm/eN/lHTCL+ymttPD13KunLaErj48B7+UnwvMv3LQQ3l8OjdzHH4A9uwJSfWCOE25nvpWmokf842d25U7geOujM51k/154KTyf+rhfQc9lcutjO6hNuSzMQ/f+hAnwSE85KMr76/adQtbNR//n3XPphnTC3nCxvXH513BPi+ksuPCyLr4hXH7/LsZdj3fp0a8uISerpW1jtezOrxHGVDUv1Ul7HKyD56xoBZ6k7NJfn9Bv/a7SkaHfTvQiya/9+ME/hZKjUtc7izv6fqtzV2uPnxGwXTvumzBn0a99if/1sFudEGNY5tLcD7GrHrl0554NTc93vQ7PJ/4GF0fhs2pjV1mf5dqv96Av9MOLnz31kPNOdEo3dkDxB/wd5vZB/qypWjs5fLQj4xegx+dm2tRz1vMzdTtOfqUbR0cmzeHDkx2n10MPvbk4HTLsyDX8m8518+GU6kPq3fOOYt8/dzs5asj8eM8fG/BrRGFibd1ekXfauDrTg/PlJnx03jtz+JKz7Cn7uoy8u7iXdCRa2psBfyE5qj5/Vlh5EUulfr0Xoy+IPJQfIE/yKNt85NvfI6dxDDLxyZbsBfp0sUlqsIv7h09+h0tCX3c19Kp9xv84btkcXg6FTlOuowLztaHntYlmlPnTs4quP2fkMfZkYMWrR55Bz8UsysvmDeTc73HmSeHUvRzU+uDs5ddgT45yC113CH8fb5u9+zJGehMtYDP3Wy8RxmfK/nFKrcSqRbVUo6Yz/6vV9nPaS72uuUXtDjQH79DAwIetV+JfnDCscnDG73HnrJQm8I/8Z/yOMW9/SmAY1R0g6UByG83PF8yMh74rznglqfnCEdl3d1yVn30VJemFXceO8RJzTzxMu8l3qUEYIjij7yljPeOuUewV7Q8y+xahbiBz/9M81nNu90l9W7UOI6+qlTEpGMv8auw/Vy751WI15JmaYVcbfM6q/oz9z+9it1+2kd34uN4PzLXoe/SqaxHwwL3A3+inz//YMy0bt3ZD3t7uw7Fz33fCtkv25BnDftV3f/5UuJBtexhGcS5/eC507aLyE/L+vaZdZV4J9bQ9jm49qtWK7L6dsMPssf579mWYe9/bOqXnh8y8S7qevq0rtg9Z1+dOWgAeHdqe2iHjMPd4POKJF5J3IUYr0MbSkPfu3um/5KNd4nnHyS+Gcd7wpEr17Z24f1fveHlS0Vyj0ibZ0ybdXeRk2yq3nBLOuKr3T6Xccj8JOpClh47fJFfT3y2M2zLQOK8VH2WuTHxkwJL585bkvcfTZeUuD96iKua67Fv5HX8QgSkHnpzJe9k3Y5NvbK9APF8HrbbGXcEv3nLEud/yHna0ZJmew/sLbb097584jxyljwxiV/zvuzP2gEZYzfxXrJvlbZdWN+ZtyK2xmH3FpK36JZt+KneUfXBhtcRLira+jllMuSR2YeXTOqPfjBb+R0Lsi7g/I1J2vMo63Dxkl8hd7w6Bgwc/HQN77lejkkxbpA3/k+Ds43JxTkw0rtguqhF6Ic8XjyejL/ouPK1in87yz2s55Suj3in/GbO3MRjeK/XZ+Opvvdg3LPmGJ4xNfrFTKMf5uyHPdPRFZfT+2BX0LPRmmqZ1zir8PJnegUT72bRA/c3ffEr4droSKIV2NMPvDb/8S30JjVmHBzfgveSwxr3rFgMv6udXQ4XW4o/iOTdco5OyX0+5OPC+ErE2Zv09afzRuy3PL4F+2aEn0x+JXWHEuPcVOvA4k1isFuYEx3+eAf04EW1TKdiiSf39nrxAhXw//Fnz4OxoYRc/TTg1d5ZyNejBjVKnoH4dDl6nc4Qgf63YQPPX57YG67K3r/YxWTYmRT4Wbo7792Hj7o1MJ57UOLxY/uMQJC7LtnplmdzAbejjXZfmOuqbj8KPz29P3xdt6Frsz5zV+cci2feF4I/6lSrakzAX836EcsKVib+0Pk/V6q3wl5lWL75BQ/gV3dT5Jq19Yh/Ejc2bOp7/PYPeXCxY1b4d2um1CV7Yp99PKLSx0XQ86Zpmie+gN/jBU0yF3jgAF36GBl9GP9TR7o13rWU99u/pnitffTaRZXtfcC9EP57+lZ+/eXiW+xJc288sf4s/gcKHb9cmPv2uZmH0scSv6FT2yddWnB/C/k4tGy7pBbVY87DJnfxbzsj75UKi/E3M8p/y9zc+JkK9Fl4vkNp+M9OXhert0FO/nzcjMf1PFR42kt+ofjdmldvZ+duZdzV/ZNbdm56766yZPm8+8xZD7VuXIMip6FvuVPOWH1rPnK5DtO9fmCvM39T7OM5q/BDbi35YxT+oeY+GvHjBP6BnnUv+boO7+QSZw30WQC/f6No2fKT0J/vuD91YSf4jYk/2yyrOtZFZQnNealofQ+F2UMhvyW8z8ye7q4fcd0qH3uxYzL+fgpuqNpk+1fewSRP1nMi8o3t2b4GlqiL/c+1IS3FD97nUfvme/AufP+nTq+LYR8ZXi/vq4ppsS+Na7hpMfLO8tPKHB2AvDtp2c4rG5eAzk4sGHUiFfxKheDChK9VO/eEHcuLX6rp6W/X/4pdpmurRmsLLvVQae7c2nWP+DEZs0Vli+ddV9SY9v3vNsLOPN5/+XnsUTa03RzYBv1L8uFzrZnxv/LD8mXbdOwba/fpHe7JO+5W+5d4RL51VJ8dW1199Y24Ycsblyhf1Vn5vms9ZsxKN/W6eKEVjfDPNPxm9lqV0F/V8q79puAi7muFA1ucwN9R3TeBx0vwnq9czU7pe0AX89wL9a7O+vraFuxaiN33glrZdqeFXh9qEF5jFXKGr333TqtKXJ0UtQet3g4eBr33brJ5LfqVERnKXU+XVL0YMfVI9ZmO6tPIUztXlHRTtwMKB+x14V765HBpazP8feX6/m0c8qnDmy55/8AufnRYv0cnsWN2vjXi7E784p2rMSVLf87pw21mnxuNfCzb0C+nXxEPrMz0TNn34zdmUI9yGZtin7DedaDTBt7HXZ0YcLnCQBcV8uPOIEfkmIF/s9b/3N5VTU3u3WCR4NuNzYuOc64trZ1oTXveJ6w8MXlpkpzYIzaYfLk+dmQhNTc4bEBelHTj5aG/uEcUrNlmeV7itlzOq5wu887IL3XYoi7EaUj9Pl3ujejzR7ru7zUP/UXXR5cPzfpB/KuteZfZ0iRT6dKli1+82k396Nv18yLkt6WHzihcHn/wHln9O/sBnxxhvWZmZ//n6t0t1Qn0M7l7RN39i51mhS1lPM8hz3dc3TJRzhHoX1stWPaIOC7OBXaVk3vv4GPfGlrwj1El8nfZbw68j8rQ6FDkQ3fVLIL7M3Yh47O8vuXsR9zZ3SuThYLXrza2G3QSPL5UrcW4HbwP6eITHv+B99X5Yp03nkLukarf9IWPuP+e2dQ+fCn3vZ0tO3qO4v1Jr3du4fH4G29v6XaEZxHq6ujRxYr25J3S5lVn3/BeYdqP0Vsacc4d8gjxjwtyVfeXOfd3O4xc0/b3cWL8e7Q93enSW/zXefRq26sc8UXT3PRofAX7oaOLAurs4R6cI+v6ObXRX1dJ3fFe62zIAYZMd/K4hn2fe5MKRbBvd9mUff5x7m8fk7fuFkYc4iRP3fPdQI9q86/z4CnxYiJOV1ta0ZeBnb+Qazdys4oVe/ttxC/8jd2+nXLw3n3D5FkXynTlXhZcItcs/I4Mux+XrQR85Kp3M98m5rv6z/ubIuELPK7516wPfFp067evJve8z0tKDOuEnr9Mu1wd6vE+rV4jj8ATyFNnew0avGuVuwrwvP3iCXZtUY/Gtd+EvdC6/qnnLjvmqFq/eey0jTgGA7zicm4kXnHmI0mS/ELf9zCoxPoPaYgL82ZA9Av8Nbydc/NRPH6grIFhFYrwjq1y6nndN6BfHxuyMf9Ud/wdrFaLxmNXebpI7YPJUdO13eLauxd2RCGVd7Vw5V3zld9Jjqx44aJCT/ePcMa/TMPcBWYsw77ave+lin2x//lZ49jZY9jrz0k05GIJ7vdeQRcHnkTuUyIm1YOa6DsLZju5pwlyB4eOYRmP8z65zJ6NNXYjTzv3oLjbaBzzzii5v/Eu/AfF3Mx6IQz/55sGtsp1kPhH5XdlOLH4oZsaMrjN30a8c9s871rbEtwDU2WMvniJd8Pjt9ve9UDPOu9ZvjSrkG+P6DW2+QP0qv1yrKicrC/vuuZXmFdlEXKXx98v1ebcbrIgKkUt7Hjahfes0PUgepFjOeNieR8b4+G/4Sj2+T9rblcdRmPnmShk8rD5bmrZwsv7t7V2Vt+6fb38iXN2zZ/uDz2xQxhz96B1An49CwxJnfQPeoa5e69lfAJ/NT92X80lxONJO2ru5Krc2860zlO7PPL/iJ2N227hfuzpkXV8VfZxkxTfU9bAXv7SMduF8efQFw/tdGDDLjdVv2zbFC8K8f5jZ+1695O7qMejN910hb+ssvvrztz4yxozr/ncHczj0500KfYR1/fRwWyZI+ELuxVqe7rUSvgQ244x0dDNs1+rv6yGv8Qp1S83SdoSfrdij8TroM+3S3qlLc49t9KUz5nuBrmorekPXrjEO83+Jbe4f8OON6Ol78etxFU6mmi9UwvkqF/H5fz6BP/l5YY5B07uD12+9vhiCPgTt8Y1DPdEyrHd9T+/ryN/fvu1yQzegTfP4V3wGPZCLi5nJznyjsoHm4HM2B9E1wxfkgY/E2Ufhq2bT7wzV8ezl08jtzy1reD1+vWTqgGnZn7aN5Y4L3V+tV6If6jd6dP8To2er1/g0PzDXnCuT6+0JA33zeUBTyblxd/D2S4N7r1FX1/ePV+tS7zbLbjwdKVf2Gm6Fcv0MYZ38f3P1evVn/vErNzzDuVF/hB8q+huF+KERh9sHZwxxk1l3F1u4074rMFdGt9zJG7dsV2Xup9+5qyOjrofPSoc/9AH22XLhT1GqQKbk/bHbrt0TP+wuj3gU9T6HG0518dOyz/iFXL/Zid21BvE+aScew4fzf37sa3446e8b5+2u8TMpsjLij+/u64O56xb4edbcqLHufjz1+4zxG+Y0G1ipnXvXNXEqWNyrZ+MPUnw1msb8Cs25X5Uvsr4OzkxfYnfs8LEad22xaks8tpHyQ9WKY6+r/P0iGITOuD3M25P4rn4TUnRZcVvJ/xVrAwvdfk2/N73pIuHd+bd04ybU2I3DMZuMOjnjqhI4toVi/XNix1Hmj+f82R3451Mpzo1T890VWeuZLrTijjraWo8ubuWfVznyIAKZbBXu9NgWgcv9AaT0s9yTYWceHRfrwFtsZOq+6TU+ke8y6264/SNEyPwb9GrXsVtu8H/NC0PBOFvvn9g5Jf76J1/FXx0vNhk/JssSrFkqTf25lNSleyPn6aMq2433jHcXX18/u3dee6hOVWmc7eJh76tgOunUfhzeDJo0q/TxPE5sOFAoxHIS1vdarzgNvrfiDeq1XP8MU0ZtvR0DuJGNFlbIlVb7NJTrE++cSp2s/6O9e9EIScP6FDxwD30FafHTqv4BP9Ph0t3Opkdu9vNm4Ydmoc9ScrOSSq3Hotct+SyqjPXEdd3QMYnjdm/r+8XjMwH3fDtkOrKVOK13P0Wk34X/vW7xxVpsIr3EVVGxNUKxD9lngb5npclLvTd4in/TGgJXg8otygP+yNlm6aD/IujR3p570afrG7qyfS3db2wi21f6UaVeO6NdyeOGNIO+c310OKVv+CP6+CjGeVrD8dPcb5Z707hb2lA57lt/kzjXUjRGrVr4odjQYEml2pjB5BsctOp6ZEXXunk/fQBdGBg0ZdTl6B/PpPO/cqqUOKQRUzx7oHfjcGB7dN1GIB/xqffv9y+k1TZ7vWc64adxOYhzX29kaO+9yl/qAPnzOgF0wtuGAs93vql52bsF6wR63akxF5x6MND55tg1xM48naxrMhxTu4bOr4b/in+eha2BRIPJaBkzNR4vo9W2bz2NvY64Qvdu97P4KzyJbsXsvcI8o6qgdvqTXFT6dsV2F0KuU3y8uv8bxIv5s38NMfWEc8mskzFn/PR9zWOrRM4Kh367Kr9u60k3lyxZ5vfJsGfWjKnlrmK42dtyJmgapHLsIsa3XdXe+QC7X9H9M0I3x22f3n3FLzHfFm+4/rk7/DXU/fyl3PYDzv3TJs3LXQvxuK/d2ATd9XBVr2wK3b/vqs3Vk+HP5qtFzo1e+yK38XVT94e5L1Lh7Tp1pzm3a3biPj2s5GfPTr4K6f4xzz/vNazY9g1F3610XKX98aNk45I9BN7S5/dQ5K1H++scrlOaRXa1V29c9t75EVN7r1z3w9Zgn+YEk3rFn9OPKFCiWuWOove8kzRykP8wojf1mtK4YNZ4L+Cflaag74r/9ohl3ZCB95V2XT8KHEkVzfJXbAV/q7L3L++Y0I99JjPB52dQ1yf6t+PZGmMX7Y8I7+VyRnhqPbunp71cUXirB0d+60reJS/ku/E8PTYj5T23ZQHf7n9FoalCcqTWNWa4TfRDz3rnd1ZLqfJy/vWpROONdrHe9vLdZ68R4/x5d7+HFbiQb1L77y5JP4Jzr+YOq0I8oNnbdLV6offychTl7tlg1+scMC5UJLSbmrfzRa2z8SZ6tGq/5dvI5OqOXdXj7v7yF0VO9K2WWb86Y7LMrCa0y/2Te98K8PXwt+8eBw6HD/MPx6nd6zHvav+qAuJk/Oer27+5M0uehHv8sj3RI2IO+ecZYXPW+KC7DlXtlhW/NV2XRu3rAp+b3KnrVPBBbuNFImujB17w0VNnPvt5JAX+Ad+65Z2ZKakxGfv+3ZXPOf0yRsVHuB38ObXyGofsINadzNn8cPs//vJbmcqc9SiOm/o2aQSfjdX7D/yuzx+kHuWa9wcwqk6vMsyojH64bGBFa794r5RfvabQU+wsxyUK059jsWOrG6JaY2qeagd18rXDrGiv3h9Osz7tptqke9271/IQU+8XOFcbTJxns6ufTX3uUWNKhUVWZ13y5O3ujbPgB+H3Gl7nM6NPdmWxY3ep0Nf9vrQyc6FPqE/LNw4uCf+CE/+/nllUTHe/c0+bQnnvdaSlyObn4zjHdyR1AuvtEYvMv135rLE003Zq6jzJ6IXTNzQpnXQe1e1q8H7gBXIZU439u4Ugb3Ke5fYxG/4e9Irlesa/srLHftyoQrvaa4HrP7xlXfuT5vfjF6M/+gol0tlu2KXOTzmQd6ztYgD4l46pOUW7sPWTj4z8We98pZ7zobY9d8/WKr+DvjOe95NB8diX7aqyzgHX+y/F2ev/sATP37NA9T2PbwvT78hNncm7OzCOqjYgUMt6kiFOtl3YzcT+uxvi0L467MMdh5cmDh3xYMscS2QF2bflKmgM/6ReqcosXkW9hVJH5RvX4j3gpcv+tdeQfzd7L+Gb9+EHxk1ak3ZQstd1Po9F/Ymxm/q8GN7i05Dn/Fm9Mc1dYDf5Y6Rhcchrwq74tF00kRH4oBdsFbh3XO+4LgkO6vjd2ow0V2xU00xY1CGjNibPC+0sNca9Ou/b2UIq0g88c9Jh1ZoWTmZOpKqaIuz+M2pPfDe75rcxxM985rRIR794d+7+zPz7rXqxaXV6+DfOy7+299n2Cs++9ai5zPuwXe+tC3ujR1uoUOOA2ejr0mScfLqa/AtLxanqXGBeI3RXcvfuM59tW6dttX6ob+qs+FP0ea8Bz+XY9mEffPwW56jaKPbL53Vrh1Hnuc766I2BWUcPmwq99J2tWKXzvdQ9x+0+5aP942zTxV/nR/7scvti4de5f61cVnP77OR4w5ZFbcrC+8Ld7d+EZ22I35KM7f7dLEB+o23qxb2bo78JDLVyy74JfWvl8m6Bznaw32hN7PjX/rs4UHjd7RwVS4DeuRwSoG/hDn1w9KsdVd972x6Vw5/o/nuVRs/2YK/owIhkS/wWxU7s3DaI9hdHyqa3qP2AOyKS44/8Q56f2l2fddbvDuLK9mj5PIrrHPb77HH2d8zKs7ruLcf73S6p5jesqODKvRi6KVyc4jPtG3xgxEdXdU+5xFZRiOHbdXNlmioFf1Adrd1T584q8R/O07cjD+bCjOflAvFD+nfrslq3OHd2/TSi2efRf6e0hZ9Low4ZXkb5wu+gx/2y2PKB8fdRt168VHdcdhzlxrR62HjxMSJHrY93zXiogXkPrynJHY4lfYvylwOf/ojS4zLM/mcs4q6O755AfyudWnudMcL+Vv5fCk7NUYefLLcj2OP0AvcmZbjYhHsLtr27OpXBj+W/ZasmL8GvuFhkaLpSkJ/gy311aTGSVRHn1dlm/AeZs1W1deCHwvHDF55TxAn3vv4klzrgW9Ahao/O35OomJjMw+KRl6Yxv3jpk+/8E88cfaBce+Iw3Cx/Y3v8GVtDnSKmjzQUW3zT9q0Kf624p8nqhSIv+c6Z2oX6ck6z+ld1e8a+oSBef/m7IX/l68HlkQV+UQc+epXWmzAT83aE1eLJcE/0dPBv+JP5Mbv5OK/SZ4cdFMbkx/LtdGVuKf9Hp4uQn89xj89V4Z3rd1zPPpbolZi1b9v6n4W+LbdX1Il24vcIG+l5bOP8L7k7chJv7sR/3NU4/HvmsC3tj6w73ob/Hx1L7e+ohvv3F0nzPR1gt9v92DV8ZXIfToNXjNnN/YoRR86dPoGnzAzZHze0ck9VAmXdoe7p3NXPPL0Djzmos7lLNK7EvKnoWMGpUlL/Iikc2q5xb7Ajsu7aJLDGwjTuGZWyg74cW26vLL7z14W5fnuzYO3yF8d0kx+nYr3Hb4X2zZLzTo1mPGidCbs4q4NsPXb9BS5TCsnl2n4VVlYe/K1+7exz9zn/yqOeZ699rZxVfzILXTN1moI+zTThplPMqDfKt86IOLTRgc1Y31E5VVjlbre2n/iGe71lZYOuTgBOcyueQ+WFqvoqFLWi7lcGr/9kaXHZr2AfPHTwk3rHqDnWTTJ/W3y3y4qskWutwd4r3/x7NwX4ld0R6rqVzyxn+u6J/fTLfCXm685Bafsk0jd+5Nu9QziTWWa2zF/EPYRRwKvzXmMP/CIsZNqNtiv1OXY9I1OYae1ss3qB3i8Upb685f04jwef3PcjQ/c5wOb1gi4STy8ydtvDt+BH9wjTdv3z/IcO93Dg0tPwO/WpGnRk2q1dFUlf1YuvCK5swrpsXR43Uj8MAffzJ2+B+8zLz5bPxZ5t59f1ffbxS/E065nT95OpMakPhcThJ+LuPxpjqXAjmXp0BVnZ8APPRgUuv8HctHMTzLOdeae837O5+w7O7gphx1LO7XFb92WQhvP1cF+s2rgQc/rl9nXJWrGHiHebOr+Wz2TY4/fr3qHw/3xF5H5RodsmzNAf48vn/ELf7vO849eCsAfb/yAIsuzcF6/+rztY9N2xF7KdTLsIvrAXXfCgyexbquX5PB8Dl4k65ykS1LwsqOtxtIvxHdLG/Fm7hQ/4F12waz2nuBDmvIRMxzd1M+FL6Z+wZ65QMkbW+og5zzSI+eh7/BVrh8ia7aGT5q9Yrh3I/RlYV2GvvjNfquR5FxENfxRj06WumcF4r7fbX/xucQZLf+n/o9a/N2/e8U9teD3eh6P8MuDHKrc33aZivA+Ifxnpu+rKydVUfm9/ngQp/Tu9z4Zq+P3c2LBvXHvkP/dTDWrawPs+4o2OpY3dhzy0kqXfPrzPn7tjdSxM9BzJDtRMb4KdlnNmp6+kAj/AcvGzt82cwbvujrdt/j8wI5r0dNbaid2hLlOWrIcI97JhaPTprdIpsasiZt++hN6q1dzbt3Abr3oslZjFhEnbV7ajXn/VE+k2qQdMb4u9hm5jo36Gbqc92ZbLpVtPhj/UEFeXZyJB3Z37QOng5xnvRosCMk+x1E17/ryeHXO9a7BliM58ZtWMce6+VfQuxd6Muf2a/yROO5+/ONKP+L/lVrrNyaDqxrz48C+PvDxlgzz/eoil/x+clK1OOIFPplzKVMj/KV9L/G2TH7ew6e/PbDxHuwmVi5cMO478SBSn+23eBrvQS+v+t5ecY6FFtk/aD5xe/MOe93pMfHvLodbdnzf4axeuHaZ6oA84NHbNolDCrqpm0U7lKwyzkN9Od3q8Db24YLynxvG8C7hy9ejK5JjH/yqi63fAOxQLz1Jde3uFuLKfIw98Yr3i82aTlv0CvnQhF1BDw/h73fIK89LfVohL1zzyMN9K3SqbtsKD6Abn56/DO+IHMffd2gjT/xZbg9/E3lhFPqcwV6ZFuG3tHB+dfUq9h2fa0YV64GcYPrzOs+OYH9Ye/jXhx7oGRsOv5QpFv9j8z8+PuSCf+fQj9VbZcP+qeOpQseD8J/TuW3Nu5ugQ2eyveq+CL+fj39dKrwHf0gHm+5Ms+I7dhTvOi3ZsMxNRV2vlLEYcsfNaZ9cSHkdP2lr0gRF5XVRrpEBQytvSaTOBoxtUAh/YCnLzCqykPm8zJhvZ3r89Fb0XbC+NnEtb1o8Ml0jLmyxO19WVye++ekapab54pcvZl6ZF3nxS3FszuI/3pwbc64tPN3+D/Lml9dmPMyJP6exP9dPdObcvVl5uP8i/PUM6vh9MP4P8++olvtpAex4hxb93QC/cdUbp0szG/u8zK9H3NmMvV2NKS9y/l3IPXeZY88/xAfMcnh09BDi+6UNvbNpb3viAKxacMAFPwI1+ly5tpL+352bf7gjfomcbjz/dYw48X3He6dqft1dTd3n32lmS3cV6Bn2vBl2Kx28Ui+vjF89/w8j194k/nLV/ger74Cvftp3Y9mK2G+mexFVeSb+extUdXK3sZ+2+6yvMm03djIp3eZnwW5orN/mxenwL9tzy9bE83h/0Hdq2bRXVRLVbZjHjPTg77o5B8YtGOGm0kU+GjEU/3GvZk+v1DEOPzM3Ck2shjxocH/3cdfRh7R5HvP0J/jW5kWS9ml5N3CjTmBMqdLIWeNG5Uk1kPizS5N4rG6NXrDqlnTf4Hs37Jhx7QP60fY+0+vPIN7R+j5hqcfWJD52twKJ8vJu/WnNhWdyoy8/V+nG/j6jXFUvn+mfvm1G750sudNU4lXsL7At1dQB6CUKD0m//Tp6q5yHWp7C3qvxhBd3V8LH1Hq/ovds3jesG5DlSA/oxYSj55v8JU5k7iUPPTcndVCtmv7alQ599Zj4aw5Xwjiv6zZ7exq70c6V3/c4TPwN69jJOYtgH11p4bCZz4KSqnLxi2/2W8D7inxJU+TAv3bKHx/7vUJOG/r9c8M+6EsKHd57ti16/Wsjlu3Pjf6yfOsU4XO5FwX3DqgzG3+u7lkcKk7n/Z9ni90HlvBeNiR7o7Gp0MtUfHY8xhf732bzCi1qcwf50fxTi72D0NP9TJe9Pu+A14+YXzEcOF6IOfroB+dnTfc/+RrDL25r/X6iCwrtuENTh2ZDrvbFsVje09jhLet2P3s76NKfjll21eE8znurpU9i9IMje0ZvDimEnVTo1FyDiQNTKcm40ZUzuqguszr4tiqJn+k+Qx/EIk9VOfsW+4qfmC8rxlycTbzk4Q1OpT6FfUWdQvGzFqAHTD7AtWMz3kHeff0+aCznRoalfXdUwx711csu/XMj59mVbcaRTtgzWKod2rmc+1H3t07+89Fjhqxv8jh3euwJY6d2iCEejF/7reHPuS9u7nv1x9RTyL+d/2QuGeaiuu6dtKMt/v33Tp4wrAL+yqpE5ijii9+g8ln7H9rA+d5g0oBSx9AbNX1xcP117EkqxSfbkK8y868yqvtL3plU6PCwWWrsrOccbnzaH79BzwbNrnaa96grDy15uSSZu1q/asCqb8RjHRZyqscO/CZXeV1xbK+92McXcmtXh/tVw6atPF8R3bD9QMeBjsSV7JisSVZ//L+9d9n4objInTd0flobf2IPDs88+DbSUSU683NjbfwUZN/Ztn59zvf9fsXjSoXCJ+y+cfUj/O2b1rt2ZoC+tug7MGwW7wEqp1002As/Y4s/DvpWnXeaDYpebtsa/WTy2tnvrCWOhNdUvx578XO0+22zWWPgdxL5egaNx876Su+HUSmQY7Y+Vt61PHHl3eM2z7yKfPRy/w2JxE/j6PdfjyYXuVNswUaf8YPfM2+v0su6uKokjhOLr+dda0SiJO4LiC+9v2uGVe+bEX8z6dMvE+ELcy5bPD0HcTzuXk80tQv+fhwnTx+eCrm9//oVN2/wXtD55OCyx/x5FzTl2bch3tzX802/mh75QuvQvyt31HdQqX29nsQNwT72wMOyD/CTnCPi9Kad+EnuuDRDhsb4Jbv+PdeN8dDD2/mnuVVLllT9mpC6T6LGvKcOHLp3MYET9zsu+J6BuGYH37Tv35P3TXVT+T9dXp79ceZFlvPt8QtQKa7Uc+TLWwpUDJxDZLgy7nMK5SJ+ysP2L171OwM969XvbyX4wR/jSrlMS8/9q+6ttp15t38rdcEce/D/lO/2y/glyCOiLlTYcHckfjpvJ7deJJ5adLZlzbyxH98Xta7hDe4/j879WeeLXvJl2x8e3YijlnLRx62psGManuLlgKsevFOtYJuUCz5+fsf1t0OQ86w4/nj6T/y1lxr74E4J7Jz3538fUBJ71bmPm+ysgd/ZvMk3va2B3/HRX65OqIdfrcZ3N/dcgF3Bt0LjevbDj83aBznrN0B+79d0UXnYKnV7SqvfpXnv8XSlpUYW/IzsDwp72R3/uI8ThS9ug11U0/XFNzSEzyg5qumgasTVHeaVIbAleoX0qUNLXbrtrqKKjwkojB763pYfxxascFOlbvY69JZ47mvzWzctgs5t9mwf0Ar/b0NqqgpfOM+H7xmTfzNxb+rnWmjz4v3QxgP9R6aHnqScM6bXDeJYDdmbN09wdwcV1Lb72pLck3p5Zo5JzbkcsiF/u8B5zmrtcu/XHys6qzTPG37oWNpVeaa62qtkKQ+Vq2KhzDG8Uxif+nDBNXWRB/j7tJmHvP1WbED4FeyKh+/oOa4//tRaNE66YgfvYjbNHNdc4kxNKFc57yj84RW4MPLFPeS1U+f2aF0HPWqE09r1nbe7q34FvvomxV5jQo3QudPw7/03/aeJ+dg3XwveD09mdVV9f9Uu3Qd9ZGjJr3XSL6SfbEXDOmL/mmNm4KVcQkdezt5yAr62fkDa5JOwo3NcGB3T8SJ+9Da9eN8Au+ynWzpejOJ8+NjrwLP0+NMdVPna94UnnLH3G/zoO3YkF54diy2x31WlbZZn6mn0FHdeLvV8A3/+bsYi53rENc74dXaVUthL9vDP1HEy7+qb3LMdO8G77wI5iyc/TL8zxvdbf4/78qdTu84doP3G496sHo0es9/hZ6+PItea+mn+9arYS05MNLjzQvx0lwyq1mjEbyf1slaBRnUbIl+9WHbs26nYmV2uZdmHnndIgO/cGvCNFWb0eLAUvdHnoVebB47GHirr9Gb1Xjso17NnbS6Xmd+77lN7836h74N1I7bzHmZvoZV3FqAHcwpSlfKjl7vR+e+rnrwP//4p2PUO77ejX4zKviPYRU2O3m/b/8BD+XqtqLHph7vynzv4pBd+43cVPlvHFf5p8ZSFI9dh59LvefEfOcWeIzRjwVvYh2x4PTb+M3ZftQ+nfDEEO+oPGZ0a98KuM0nTJZX7cZ9Ys2ZZkk68q49yLVci4wqLOnlyyZ3rg5BLppr21Ae9indgg7s5E7uoBxu23W+AX+reOeeVPokfgvOOP451HJJYbSgUusOKHmPClJs35sOfdpxVZ9tA4iOcz5xhX3X85R08UHxhQ+LjbPffnd8TPWW1uPR3PIj3nmXZnkLd4Xt+TM3XOg/+uw7ELozq1NhDXeu2ckjOrs6qRu/ku7vhv/LEi2OJs8EX7lp8K9htKPr2u2O/TFuJffuGxGlPw2fmb1D/ei3eXT9wSTusIOMLb3y8Qsr6+OcLtF1PjR1VrmmexXdxjzvcrO3Fovmwm6uxsEMq7I93Fjvxqg709Myngd269XJXFSoPuNEJP2drc6W/V+m7m+p1a/Cqj5NdlNXWeVQQcuj9Z4aX6cq7/FGrG5yphr+btj8Kz75LvPHsheZU+Ir9SoEFH9Lkx99YnlVXWr9ALmAZ+Mb7IH5U5rk3Hi3vgZ69H7YyI3LQY9GTjnxh3evkD50e7u2m6p34GNWwuKv6vKBQ6YXXndXoPot6u5dyUUt/t/Yphz1bsRyZplnRuyS5OLTrJ+SMS70Dwp2wZzzwu//JC9yX1nVJfm8E8+p94NfbB/H4NS592hqDHanr5xnFG2APODroY/1BvJ+N8jrxfhNxZNyz3qgcXddFXUuVY8t4/D4P7R7sET8IP32NH2Yqxrl4Zf7QiCLYjw7M3Nnihp6r97r4Q10+4v84Il3xPb2J81T4fokly4DDNVwKjuSdY3zKM28zJla1J7/PNZs4Hd8XVm/5HLn/FpcDLYbXJn5gvVuTD8HvPsty4HlYdGJVaWf480zo92dvezf8K/YBu/70mDKZ+/asurbzBbDnS1YmYm175LHfQu+N8cJu0nfFkWOib+u9eXrVLHnxj5evWFAh3qmV7lD27nT0hUsqvhnxHbn21qODUsYQX6x2r07txuFvZGCXDZYfnEfley+clRT/KZmvH25ZFjuS8Tlf3r6PXqhz3jWPSq3Fr0r4vrRNiZr8t/yirId5n94yXcDX5cTd/1n0U1RaB/jH71sW7MZvQMi+z94liSf5YcKpoyf/oAf1XrC4JnqEJLkm+MY2IV7GlZvZR+NX2jVud5r1yCUWWUZVSEw8lJev3jdLz33vZ8DaS6O4x4Y2e54hGn/1Q75VvFUC/94Vvlz5URO7vd4lYi4FIBdZ/8gpyXDsoQ9XODy2DPbfU2Zt3/l8AffnEjMqvMJ+bOlVh9+eM9FHZwzeeY777YiyN5bNwk5rZ8N6f1LjL3BLlo9Dv6CPyDfo197v6BUu5/ZYuQj7s5zvU7ezcV9ZuiQ+91b8ggz9mjij+Puptu6T3xX4/4G+E3aOxR40Xcu+57cSM/bntsreQ4irZin9Z1535N2tT7Qu5IW9Ye47RRtNxB9ZixkH59Qhjt+Rr98S38EO4Hf38K8vkbdPG5zofUf8oE1J4fNm2lQXtWdOjQxVp+IntGmx3rH4G77T9PWB4RPRDy2au2U7/sbrbRkS48A7ldH7enhNRp793KllgX0Eal5S4LnfPOw6iji45EvCu5u5R152T01chDe+65olI47AjPn5My4hnl7Gitk+V+Vc7XrGYfUa7J+X9sz54kVv3sPOvP3w7Fzi4518EHsDucTa47b4SN5HlK3f6ddT3p1Glm2zw4e4GR8KZbkawXuLR/sq3uiDft/z3L3PSbEvTDU1cO0X/DMFlz43Kx49w6P4voWD8HMzt2Ebj6GL2We5HH6/5m/H5G/yTgh2VtdO5Ay/ectdnRxY68f+lMjbqn1pl5/fl3bZnvjZaeIY9V3+dxH8mmpZoXMj9vWpqpEX1/DOKc+1t1V+8E4yJO/vLrM4nzr9fprn+kXiwu6p+fpMQfTRR77PX4jddKD7zdUOvJM+utez/Xb8udXN0WxiJHLS2eeej2n5mjhpx8esOc6952RA3tYh6HOLVXhb8AD643Mx5fbOIN7cCc/gFR68l5j1Kvv6rtz7vc9vvn8H+9UqdxaPKloTP6Ebnwd25/x3r39+l/dU3jHNyZN0AO8Gn1xOUS0rfs1/DdlWecZxN/UudZ+Dd9BXvPAvknUbcg/bkecVBzbhvVWfcb9L4MekYPGLtfYQF69FotZP22Jf2/H43y2+WfBXWL36rW/4aQutOuNjO/QO3StfqRzGe+Uh1rl5n7+3KN8Uu1+2x26uaExY4II9vHf3SZv8O/p3wgn7d+o1yC9z6ZI6KnnjXsRv7hZAdOcmXXr2HzBokMQTljL+gwYEDCggkbqbELu9V/8eOny4RHIvYK+rKxQgRzLL+PeRL0ra/2ps/7eLUuUTxD0mZJTieYHqYXPpPXl3j+ODPvcvV+ZLg03jGidtNKun48odDyZmSns9so3z1ROfpUzZLSGTpFy++EV/pOzHkj4dpPytCbZdUidT3wr5pF6fk34/pe6ILGO9pH6ezOJ9Tdnjtst/E/A9KP/NML7H2//ne6bOp5w9FajzXXQ5jhb7f4TMsv9Hvv0XLLns39Q3vo2fx0/X9RLpbwf9rbsZ76oTuv54sz9dYLw5DmedD2VS2R1uYV/T1iE5cfDwsKMGSEx3tZKUOXb87Nh/S6Em2uNHG7MuYo9i38geT5qo1fYSFtrzUEntK8ErAnvEcy/8tCt1X/m9OXNeuVVMTiEuvjpANVNWdezfbcnFAZ497LsJWhQ7NFfSHi5e0lzolF/wWZrhrprGXll+EEtrnLdQORmRrjHHIYUPC/v4DLyQ/5LytyOjlZj7iJbs/0lcdRmOzMZvyTkaRmnrbi/iQ5B9HIwQqh31sL0wZsr2EXjqJr3sU5aw+r40ndKeB+tIg1KPx4/2j+QReVb/ismwPSU9CPD9Zp2n07+WpITEMv7LRj8GKHFfbB8+1wD73NnvfAtAs6hU/03LjVYw2LYDWcZowE5AISPxtLcjYCI4tUpuBwzHNrmu9hETKsr+r9RJCugQlWvwYQxFPWMs5nrIR2ZopqQf4z+zHKTQPiZjrRCE63LytyyJQFdKysfFji4Ck2TKb9lF4AAFNKr5bZc/xeO+fewCKQOaRrvSq/yWRucIxGVdUOTZy3rplo0R4ubtjzS3BgbB+M/bDifpzKhvrovUNpDbRGf53Vh1EwYG3GVGAh9jbNKf/EZAQT13RNbUdbbXE4gavxur+a8PGaGgpfwq+cbqGattjN4Ah/mv/CcwNOAtczR6Ndsz1l3+crXXd7fP7F/vAk3pw1g3whTZ2zPmIL/5bb0CnLgHSwH5QTadNCAdGY0YIJU8A9TSjdGYQQMA9gdpBCWa/GjMx/iWf6UA5uj2+UpzRhmzCWlURiVQMuoYcDFxT4ZhdsajbvtgQJboq3RItDQBtXQm/xodmRUTkYe0KQEoTIDY0WNzCA1ctBjLaQxHBmKUwfrPnja3v0zMHJIM1ChnpI3NZMBI+jMWTVqTlGwGE3L/kMCs/7+AMn4zwWRuI+PfhGAw+pMZGgjmNz6U2bz2kd9M1P1XR1oy6TV2xfYaMidjDAbMiOOpkcRYHmOkkrLV5g0F/rFs2f8o2+sCyjZ6s+pTC7subEetkQ4W28vMypaT395uVTb83ljxDWL7sFnZqoRbbK+3qqHBSZU1OJ2y7U2nXLanV9YCf/C1gb+Q6t6W+/63LLY7PsryPIOaFJBM2fqlV0/Qwdp4J2jDl6wNu7sUxOq35vujnEqmsEQWLKxsvJG2DaGtM8kttryRFhtvVq2zPZXtjY+y4Z/c1tRF2V4xzt/OaiTxRmx9vSzWo/R/nt930V/sVvUEfbstB27hTm1XNgfaebVVWZ/zd3QBFYOPO6eQ5BbrvQzKejvGYi3jarFhL2nDd31MS9ontkwsdvOZ8T1je8ecX/io5PgxsKWlfuE+Fsvn3hanE4zhoY96xb2kTx3mXxX+MRdvIfCDZovzUVbic9qIlWnbzng8Ii0TRjH3/umV7aOPuj/gliWQuMaWnrcs1rsxFhu2Bzbix9siMygb/iBsDxkXcukU+MR3qeeubMTmtWVy5h7MOP8WUFZsJWzP6AMfOrZnwKHaK4sVe3wbsd5csP+3fSigorelUS7hqZXNxvjxmWd77qMe5gW24IG1BGWxf7LxZs+GHxpbfAblMimZsuIT24Z+yYoNsg25mNOZlBYb1Nv6mPEgV7URI8IWTb/E9rS5RFo+VCNvDXiQOtJivcM8bgH/MZvREzDn3l4WWzR9/+SdODpYK+8MbNgexuBX2VbrlSX1aebAm3Ybdmo2fG7YiJ9tm8K44plPV2x6q3taXLEZd6nsbbHm/6Os6KmdytEv+kobb31tUbSNTNHmAH7k+KOy4XfL9hQY4cfQhg2yzUY72KK6FGftrzKuS3wOgiPtvZRLvtQW6yhgjw7BRkAOWx/Gin2eLRvj8ZJ1oB3kB1ZsUu93Zy74grcNAq+fsD4p6O8bbTeC6J5wZb2okz3SYnnAHqn5yhICn21LLjjro2KR1VpjMitLXG+LbTrtVH9lsVkpN5F5xrGOyBateZgbPiBf/fJRPtjm2fC7ZiM2tg2/5LYptyyWiAzKeQXr5kM/PRkn9j22Jz7K6cA2ZSUGvhX/v7ZWxBYqhxzuHHN/n1/ZvjH+trTNG39bH3AOW3frEeZ+nA9+oZzK4RMSf0i2GoyHi56VN+y2bOxvbMNsUcztCHvmHv3gu8yCnZPtXQHlkgR4Y9NkXU+9QpS9DDyJ7WbjHmZ7TPoDv3+kLvYJtkFeFsun3hbrb/L30tZ7cOYYfb8FP8uwj5GZ2BQ4gy4gthPp4elUyhO0kwS4/aFOKB/08baXfF/xUS6lPZWTDfijG7Lht8KWBxkr93lrXtI5qTOUtrGntmUk/ZY6zxnLYMojC7NlYay5yf8Inp5gruVoIwA44l/Y+p61iAO30fVZ87IOvJm38Z7UZmW82HnaivaxWOuBA+nJH0b9RJEWlxAPZcW2LfY6Zf7SF/dcGz5SbC8KKAtv32ztvNhTaVWP0kmVC3d9220ZD7+V5LeB9PuIPpFJ2DBot16CBtzOrKwd+NubMaL7tP0BhsWgMdHgGjbYPujpLR/Bn2ngT3rK+Lqy1/gNe++RV6B9yOltkQVUZuRsNmQftgLY2Q0Ct5FT2ZDx2CKBBb6NbD9oV7EX4AOs5xgT9rnWt7STOp2yxPCNf1lbZmBVgjq5WJublPki68qaYwNrI36eFd9z1jDoJbZpVu7F1pr8hh2oldgstrOss2ukxak4+HaXtkYAr8fUmwquf8yvQsJo6xNj2M9auVN3PPPhLY6V+An3+5NG/27F95zL2x2qaTPg9p5xj+QMqJjBYuMNpvUVOM2bP0/iS9tuMd6d1MkEPH6yF46ksth4j2vbQR52vsl44289uF1ZXgDrAYyjEvTEG1pI7HbbX9oZTbmcfD+lnZ/sQ3zgveqMPXgB9llmyiRjP/e4ZXHpyFgtwKwDazqAeQ1MryYMYj68lbL9Zi5pgBPvBmyjNiun897sefK6s8YjE1lsyGetuYDnLcbwkHmd43cf8KfJNpWxPnRpHGUf0T/vfmz4ELEN3awsH1jnu5mVSzHOpsBbFi/eStmww3Q5DR1e66iyYiNmy8ycJzAG3jXa3tJGFG0d9bTYPrDvE/Pbd9pER2wNZ53wqWZ7ybl30VHdL52M+yz1qrLnnwHba6zHG3ClG7C4xx6rB03AF4AN+ZItFzhHPEhbOG3xHsrGW26XetA6YhVY09IGPsGs2clHJmstmxbYkP7sozJg82Itxe9nOeMGAr+KqSxOg5kLMd5tVcMt1rKUQy/QpyZ4+5j1SBlpyZ6cPm2MJZoy+Ii3EV/cSgzSCWOSqT61KZeVPvAJZhuVTk0YSdtrgEms4CWfA+DHha0qOl9h5ca7bNtn4GGljf3g4ssCKksj4BVJuRdblcWWQaXHZ4qtZB+LDRtKWzJXi0sZzm30urZUrCN2otYf1L1P+a/gxDvWDd2tZfUJixdvn3r4JlXRyMqj+rG38m2DBoEj+Iq39gUvLMD9AvXuQhPQj9pioZfFUyvrfeD3inZ6wJ+0ou2klLvH368pi/xxwmjm40neO/7eyvjxaWcbAr76Cw9FH29YJ2d+L86Yid9lfZtZtWnO3qgM35WN/Km3LN7Eq7eEQ0OwF7M5Mo/SwGokbWAvbyMGqC0DeTM4R16DV1+By5cCKhO2o7YzPiomf2HlcjiV5VVb9scn+kQnYz0ETHcwJ+wnregMMqahbF9+j01hsQ1PBL/CnIalU5nQ27hUpRx+G20xjPMD84rgLRx6cZd67AHe5cQig7TV4Pco5ufPmRBLGa9ISwg+k20HGEuJPhaXcZ4Wq6+TcnqVwmIpDW0bB40eJ7jDuXyBfcy7XBs+PmyDabMu39jb25C1WfG7OPQo+IF/Ihtvs23YBVsJImJ5CT2fAE4XAWafBK/hGbCps7kDh43CmzmruzcYz2TKvJI9UIBzHJhGkP4One5Ffi9iUF6FfpdgzrwvsQ1nb75g3sHbldWDMeLD3uVzepWBN2K2EemU83LoBnY1toLs9xHs/V6s928LtN5HRRYqrJ6UTqss95n7L/Az6x9wkXRq6maBHlx3VdbMstfAHWKf24jPYM1NO3co84wP+ncbbxusJ6FFw2h7EXP4wvzRh1m/08ZFxv0R+BOfwfaZv90ExxgL8eRsYrPxIIOyRAGTW/Bnd/k9jHng49uGn0EbPkOcSvF3GPiDHy8bMnobcmVrmnT4XPhJG+z7M/AZ+cHFGPxVl2MN8FNmG8o43rNHcghPSP87aOs0sLExrpnC7/NtzaCcjnlaRl5jjQLAxwjm8oB7wEP6CoFml4IPWE0+fqNcrrsp6xt+J1adNSLGkv4D9bGTth4GF9CrWMeAD9ddVCrepNlGk9eGsdR+ZZnpKNIi7nKJcAauTllCLF76HjZBnVHd7akGar7KqgrZBSUOSLyq2W9AxfQFOQeXaRy4qg7/XcTlvoVHCoQxSqHC478dWqxT3i6NQgqpBTbmLRA/K/aecKCrCutrN7YC3MIqU64fJQhtbxeAiaAGqzYtNpGUKbMyxEwd9E2ulL1HuWnWJJA377jtt1Sp1UQhdtc952BGmVRByhh3OXBM3+uMmyiO0/VdUW78yektHf+KOAWPcfb8EtRBjU9POMvV98MM/JpT3w2JeGWXrckojXtoOmoYMgQpIUKONPYbp3FPxSO1qs93Ln6RdmV1DMGfecXnLRB9y7yNdcpB2hCPVOYeLeIVAzaOiMK4wce/4s7LQ/psVBR5COyj/XJLqCV9nTeEGZha2CVQvD1CnGlcihPTnDPNC+BEmieAlgnKR8Arcrdiys8aSxcTLTJcAYhxkTYXxBAOlP3vOi8TT2yflkyFAIH/iRTkV+nFGbmmSMDc+F0+hjjSQDaRbFS0iwsw5fxPWGDK2tIpv5jXjAX9iyFEk5/9fklWOwP4hoRIBA644LTLAA25kchMCJJrl/WZkkIBpTEn+V3mzvNie8OyaNJO0X+ihag3dDLAGJIpmjMFaUaDxDgEYG52wBlTRkujJ25IGgRDDAGQIcIz/stvH5JgDK907UJK6dyHRUpCt2/p1uKKaEkSM0kZsEiqkV2AIKtsDEG6NWbwT9zBUZVA6COdezCM1LoGBuF0JPA2kcyQUv+rY8grpW2R8RHoUqsckD7NeM+YVllSaHGJiIcMwBhyP3PrG/I242/5XVbdkMaa8jeZFa4P/5Pj+pBjyg8Fp00JovyGyssOTI5Re1tGKyaGiKTV/EtadFN+ez8wyg48PdJCNmlS6AYxb/8TOprDE7QxV1eQX9ZSGjTkU4YcTfap0do/1MTOe9lHupmMxYyHfbMZomBTDPiP4vwT6xrglu0hJVL/J/sSHYKBpESX0nIvk/KKXM0UPjvZxyo01lQYGOOVZfDb+onRcM00oWISboGZCSv5lr3h8Z+6QMpJjrFjBFkNIZsxdG9ww2jFFL6ZYON5gvIL+iyoCiQ2SwKXxwa5NFfIIJ0mUROSZ1AKAw9kjWWyxhj+4bajPVcomci5DYwwpuhip2IySlMy7IFz8TgZg6hKJIEZvqkp+N/lMDauIdyVWQh5drXrO0R3ID0IVsvIjI1p6BFMqfm/xRREgARt/SL9Qib2SwK3mP80B4Yg0RRFGv2aLZjCZQPWpqDS+BjLakq4ZXaGANVAOjmsTNm1Ud4QmPod/MoAiD9oylP/bUNDZG4OQRoWABi4bRD9f3JZU1Ir5BkqNOObUFgD/Y11NY5k41gTWiB6H1MwK3Mx1snEP2OeAl/Zk0ZJAyME1wxs8/sgnWyzmKL2fxQr4URMjZRBoY3fzaPWgIcpyjUp4P8XfmOIqgXUpq7DwAJTs2MSBEO8b+K6SVkEE4wtZh/x+u+MOKUUMf4zKL8hB/c7Iz+uZDrGMYsl03+8hxw20rGAUtDNOLhN9YdsUfO4NLag8Tcyqf+UArJlzWU35dX/9BSu+pQxJeYJJe6GPN5o0+/dD71d4iXRzVDgmL8aNY1tK7+YOgUj1yApBugNtDBOPFOl86/sv8Ux1B9+tp90lshOpn5JktdeJpExSY0pgTdGYRzfxrb/Nx+pY+hrzCU0ycc/dDEW2C/2F90MFMJqUj+TMTXoh+iiTLCYe1U6FN2i0YHRlEGMRcNppA0M+6fX+qcnM7gLv+jfAmBG8EMSuKP9xzQYm1D+EjrnF/SHAvdYC6E15h6QdmSnGaMw+pDj5Z+m7J8qxDgYDEpmjDghk2JQDgN4ouk0SpigNlgSaVNQ1ez53+L9U9uY5MMgGMYozFb+IZZZytQxQhj//BW1ptGZTOnfcIxhmwsiKUP3ZhwB/xr9dwYCzxvjLyg3R6GJwM4qf+BT1tiuBvANzDQJiTFZgzyYx425UKK4NZgXv82BNIRxvmwhAyrGnjeLGxvYYMGN+Rqn2z+aw2jeSCNEyE2o4zIJtEEuTSqQUKtlHKymNQdb8uAEmoF8+J2ShF3HZ+wAcx/LIP/ptP71Y+rFjF0IrMZPpAFMcP6p1cx1MRgKAbffYSlkbMpzkuRJVkLtqTmdf+TB5OqNc9lUHZpLaDLA/7TkBrzMLW60BHe2fxKdYXpgzttEJ4Pz+XcQmAphw7bBRFaT7phYZOSZWyWhetWgC0YZv/2TNWzPSGLPVvwn/Vslk1oZPZn6QJPCJlw7E4eNLWceKgltQv7Ry8SqLqYuzliIVePSiRBc8QhdoUhRKAuVA7cynIophEmqqZwkfDcYqdTpBnhYESM+PtAG9ZEInxnY1yh5FI8k7flSHyWTwimavT0p98CfGzKgQGGjLgmU+O4mt06+7SYZfB/mdZ7ZNg/b7GWkvLRrtrOYwmnxcnkMT0YEwVEI8VUIXvFH8PeLCUp1EpiRh4JK8YjJXn8cYxRLGjFpkDbbt6Q8ZYfIftZ9IRhVGRkjDlv/60u+5TeE9cqrN33T4RNeNuF00j5elIEKwbJ9HtKu5F3Aw4Ffv3/zkDyzTUkLXKoRZQFH2v/93RcvfxbMiuYw+KRTjXHJeLYM4xELnj5bIKTogJACgZU6wID66vVIzVh6STOkS1P/IhZYLJFCOK+O82LxOaiCgkalx4ttcyJAHuOVZRSeM6R9mVMA3yhPFEEz/oMZoLLPXWDVHKEJAWH+G/sBjSeD9FhujyV6LcZXXt3xqgweYWStnvIx8UDmdoSXnrfwUv6eMXgy9lHUQzFmhysKGvtYq+kxC57J91+8X74cjSXjIqIu0O7SRkrNGm6ME4GqfXzBRM7fwwdHgva/U8MvoUxDcmS0K3M5Dk6E4Ekcp5n2+a4FPjj2t89VcE5wQ+pizKda3rIohOoKxbeaqufZVX+bMJCyOKa1w1TkNzLWlCWUCiLKaxFwiqW35wl+mDBbwDw64zVV8M/EEZyKQdmM/SXlexE1lYCC9vH8YbwPu2J1Di7iDMzeZx7WOaD5v/1p4s0xPeZwxF4yzoasr6yttDkTQHSjX9kPMndpB7S0//aAaCEYbv7XjsxF1ttcE8nnAY69rOCp1JV2BeeKajjjcMC+d+U32QcYCagiRD2QvYBA2i5vEzjXB1nvapidAld+MBeRNgldqQVO1tDtZCZiW2MWpyJiphJ8VrHHZY0EZk0wdfvO/P9golcRBE3CYC7Tzh+iuNbT4xQcknmatELmtYAxHeEzh/U5VZ329Tzf0k5jFiucjDTQgRg9vgyOxviFpqSn7Xx6ri30nlhBndf0L39Ln0uI/i74hmDcPk6BkQm/qgBe8Ebq1Qd3hwF8gblJX29VIDIObMc9PjivtOcPwsuwwNukoY1YBJmX4MVFnX8ND9ECP2m3P0i1lH1eiU3fiz0iaybzA83tsOcxmcKgQSVinrJ3BD6yLwQX5RsntHbYS3tS7jzedUyaLGVr53ZQH6E9WcGjM9C+Onrf+zTllRZj7cL5sQqksbI+bjRWAy8uFfgI3prnQ8hgPMywD6VdGZPAJhiawAMHe1rGYu5XEz5ST9avmD5XghjXUL0XBa/sZ4f+W9Zbyh/XYyuGBaO0Y/YvOC1rlaE0eA6ABkL0ZJ2kjaN6/6DIVMMZ4Bx4pCTMdXxbw0xQ6vuzD0N4VSI0xNx7shbmOrr5OKhp0D+Zn/Qjc7wJvSMAhsJYQk3mBTjBlxTKXBVPudbgz2C9l3KzD4V+medEHPujAvRC6KtJI2XtZayyfmb7g/Tc5YyRMQ7Q5ROe3wI/kw5L24d6OKgIXv2emyXrx1jYA6czGWVl7NKOOUcTfmY7oezhVCD9btaxakMiFWhYPyMqsllHyrKd7eN1xFpZzn5pMzd4kxsaXlnv694rOGc1rZO6UqYL8+6I/ausi+w9nCfYYTeM/ghcqJrzyQ1dbAZAOBLtOF4cAlSFdgRPgzE1bgwOXtDjEpjKmO4zPsEXgXUZ1n8QayFzlj5dKJeLDfIS3sGfjiVCo7mulYKgkfSPUZAdxjLWweDOZOiTwErOW6H1Mg4cudtph5ybsj7pKFcTQMg+NvGlOURqJvCbD605D+4n5JPo3l4vGh5gD7CCzbCP1zyTZaxCY0wcMPfQD/Zewj5knVIziKJs5uLQLmfo5wx4AtEDCK5IWelP1lZgtkDTHmcivXeFdggspQ+Zr7SXq7VBF4QWXIQHkfWUPvygeTJXmXsFYHaJG+M5PgIXgRPV7L/t0GtRmvYFj2Vdg8B/R2ixGBnLHA9pPK4JPl6GPu9abOCwzFnaE7oq55ec+TyUsrf/MR8vBqFnedlE3jA/Jo+ZCH7Vhb29YIMxVnP/yz6W8+h+oFLtWJfq4BlOlv6jDfJbBV7D9uHslLNIYHADmiq0VGC9ENrDYy/7Gt/AO2ot6KG0L+VwJmkf01sO8p/Q+P60gWMze14P9ozQNpknj43t40nIWwosL0CozbGae60cL+eknsxdvgXXpL1aeNouAX7IeSB5WUHAIM4CQfBRGo5Cz4WOXwbvTX7XCVhd5TON8QjvI7iGUz07DtwAJ00aiHGbfT+aPJHwKFJG4C7fG4D1EHDXPJ+kzEui8wvvIHCKpo+17Ce2rH3OJn/bHpr6iUU06bz0D6tk7yc3ryXLA4PaeBOQ9Zbygj92ngc+dSabvYUe31FegOzlQ6BX++/DmH8lzvZDfMw5yJ6UvoW+Sj+C6wLX5zS+iczPrN07zkqcldvnZJ6p0q/Jw0vbxTmrO7Du9xnoE+odgPaY6zSbvXKcKCLCxwp+D+Wl1mZ+F37IxFtz38pekvXOBm2SM1H6FBopY2vEJpL9jDL2P9hIHV/uQKMT3MdMWAtudGLxBYfMMUue1DX72w8sMBZR/fBSI3Xld5Omye+daVvuDrKnzflIGYLB2fG7HnPrxVxmssdzwAsJ3UnIFwreyd6X/k6U48WNxkXzvBiuYdIKYESxF3YJX6DnIrRd9lo6cLYheHzULMsPLXQ6I3DvwxwzgL9V2YAJ5/+OFwoJ75My7nDOMBmb8JJrQLwcui+hqTKu5twjzPuAH8TMrG/CTvBF6v4C11bxxw5eX46ngtSRtcoJvB4yplpE2f/FmOPYL3L+CD3qyORN+AjeCJzNvWOeP9LPE+h0OT2u1uDTCs6gziD5VjbjVo3zJWoY/IbAVfao/W7HvnbmziRjljLnaMeEs/xt3le+QjslX8YQyhxL87nGmM0xyHjkTijjlLUX3JOygofCc90Bz837TXPNLwtZkTGU7IsXa40vMlZpa7Neq+YgeiaAcRWcETw2+RSh7cnhf4ROCWy3cqAJbOS30QuMfGlP9on0YZ6F0rac1fbzvAHeGDk3TDpoygoEPnK3krKV6Ff4efv9LQFcTB7IxBHZL+Yd3MR3uQcJPB4xtjvgquCm3MdkbCYNkLNAygi/IPXTwwcm4Z62D08dC4ge4glgFuh713nOQRmrtCH3Eakn57iM19yfgo8EIbTDKQc654J8UoNPXeE3TR5K+j3M/utO9JyM5R3UIxainoa34IXQdk/2Zi9w1aRXgjeypoKX0nYX9pzQP4Hx7DKIkdc72M8FKSPrKuNYAmx76zUSHOCxt33/yzrK30PYf9UBrsBF2pT5f4X2J2MyM2ncpB2S306PT/ahtC1zKKN5PRmTzF1gKd/7OXvH8qkB37uVvSB4IeXPwpN6gLceul4axhcCoZnCBpP1NvvKB8yjKZeYvZ4VGbbARMZXlH3en/NxGGtkwtsuy2BQeUH0AfBdv+CJhJ8RnItiHeV8l/HKWSTrZd5ZpJ9QznLZH9LOOzwymzIlmY/9rgnumeXvaN47J40/03A8w5o25FybCqxqat6/JnMUeArtSHjHE3ycDN8ylw7TM79Uk//RW5wo2NvDaNZOd2XsMtZeIPBV7suxnMnm/UFogLRl0kzzvmfivvS1n7PKvKPa7w28YhUaJmXkviJ9NQCx7rFPBSdNeLQFXji6sv/9ElxPwl3cG8/vclbLmERuI3u9NgAaovFhBTzjOk1P5D5qPw/hFyowAHNskiftC3zlHBQ6ZPbpyIRN2cVJaOYWXtre4M4puCx9peV8WYOX/7nkCX9l0ltZf2n3GHI0G3czUx5gwno5wDVpkLQtuCnf5ppImVT63m+eF1JXaKjsv53cNWR/idwsPQSrNDgn7Ymna/MMmMJeMdcO4277mEz6eATcGcF8ErYtfR5nIXphStQOPN2N10jpQ3BOcEFwWWAs/R/kxfJ7DePd4Nxy9rGsqcx9BfULsclfQOjNsUi+yAgFJvIt9LSepkM7wMlNnhaFwZdKTzsT9TmVVd+Rzf3cRPfnyN6Ve4LQOU/GKX1I+0KHzXNFZCMyblDtv/Gb4zBpsDnnG/DNJu8Tpmmp0ChZXxwqGXJj6PNyYNyfPSVjEjgLXkh/sm4Ce2l7EXgg92wMe+2/m+eyyDgFR4VPlTU3eUJTPp2Qv6rPZWmKhkG0NxZgvv94OKmz1YQPxKMHe0LwWtqUtZH+EvLG0t41zm9T1mC/E7D2DhwMsm8ENuZ9TuAsMjTh3TaAO8JDSxvhyALy44lPcFT+TnhWSvvmvULm/4BzIz0NJ6TNdp4xAe5Nlvsad75TfAiQYKdLsnZyN6tJwVTczQppmUshIiybdM++Dsh1b/LBkF7d1PiAU0g1DTiUp2/ZH+Z623lNYPcO4voGWLloup6ExXjBvjbvygKzhDIxGW8ItFdgLuMNx5vu1lR4fE4gIxK6LO3vZr/4wOiFcN6NAT8kEqGMux8wfgidEbySPt4wNvOeLH0ILAUfbpNvgV6F6/mZ9FzKPGXcXFXt4zPnbd5DpSzk7z95taz/Rw2PXsxvAHukJ4ghcJA1MGW0ImMSPhvjcBUL/e7F2E159hNn7p8QtjlM7jM0ZTX3CxMu0kYP9vxo8ELgJv2d1v0V1vtYzgApt0Pjp6yPnElPtd5DYCl7T8Z+nfPlB5+E904TVrJ+QiPk+6zuw7yDzuQMFXwz6Yl8Pwc/HxKJ36TTUk74RennAOXlbJH9+oQCJi8hY5mvx1mBO3lCWZ2dPnP+yJ4290VH+F45t2UtEtKPZAC/Tz+8Wugx2WCEZH9IGzi9tfd1hkVoBo2TcUhb0vcEGjPlKVLPPB/M/ZKCM3GCHt8XcEn4WVM2JmVkXWXNopjQDn2+7Wd++TT+iTzkLh+5Y0p5At8Ycn3NRwoPKN/h4B9OFOy/mfht3r/ld4GLKfsx714mf3pIxgU+mPoDyTPpbBx4JTyhlG8EojqwF9YxLh6+qdvQHnMdasIzLde0f59e64LIoEZy8EifAn+CdNrXtUhyi8rFR2iFnEHv2XPluUsL7yP1YsCDAgnooYz7tj7/6N6+dlf0Opj0xJSFCMytuqxJqwri9QIyYE+H6d8Ernf4fICmttH9yp1b2ttDRfM8lfZGcPabay59ldP0Z6Wer+xpoWPr9TqnYOxfaSOh/Pk1iG/yQIJvzvwu9wb5zZTf2u8HnLXmvIQ+pSNCTFf2Vx29tp30WEXebco8pb2KnGdbfPEyquEj9FPaFN2oHX6cr5nAffPeI20LvRBanRh5yVNoRGLOe6GHUl/wVGAv7dnPWvBrI2OOp42EcmC7vlHjDU4k7WeAiTvSv5zfUg6HmPa8ofCCO4hidJ9v837bE7wqyR3orK5v3rnkrJWz+zx0Zw0ytGp41TXPOJOPl/oyZlmbMZS7B1I/4ey+r2nWfT3/pdDBPRpvzbuu0FDpQ+ZrysMFP7tz7glfKPm/kBO845wTvOHxp52nlPncBA7pWcArnBWPdF8J9/41ZAmyv4Q/SrnI2FsyDrknyO892XMiLxAYVwd3WvAx5y0wHaZxaXQrB7WLPgTGsldOa7z9xJkSoXmcMmykcI0XafC4I3MReIhcTmCMs0o7/yl8gszRpHt2nl3DM4r9nxf5hNBic10aAtjE0F0/4N6buQptlN9+sVcP6vGd5PeZ4M1uuRcloC1vocXyxl/KCxwElgIDmQPOeux78ADjXk2f8rvgSln+lj6E/shZJGsh9F/qyJ6w44qpl8FzWUfohHjukjFLffOuYuJlHuSBU4hcYt4DpL7QBGnfxAEeKP3Hl0i97wzGDfmNyROK1xGZ5yLusNMZXxIWkOX4jz9LKBOQ9AY8rci5Kvx81wR3WTm3xmEoYb9v6X33DjjK/pXxyN1TcKEYLk8EjtJeBjZxBLoiZw3rq+xhk97KfHsySGlL9rLsa2k7obyio5Y9mTKImgl0XqadhClPNuvIGslvJs8rY5cyPtBo6Utkbjchwus5L0UfaJ6jJt4LrynrJThdgc9m887Gvdfk6z+h89mlYSOwtN8JEugp5O8F7I8g7uDrkN2Y/IDMU+TH0k9T1mEQDY5lE9VnQjI2gbHAR+qvBS/qUlHGI/PZD5E1eSeRTadhjeXslHYX6X0kNM/ENRmLL3SkEjzdI862poznG3uuOHRLfjd5D5Om2+ViGr42zavI3v/O3jBpSzbak3yTNzL5SOEZpT2h6TIeltkO10vcyRWRTNKC6xaxL2EOW8DpYLx73mCw7cDViXJIou+qz1xrwWTiCMpOp/ZCr4cxZkd9VoG+qjNjScK6CU236zCBXRx15C7DQ047HRVe5C6wEx2yzMvcJwKzj+BAV+RFBMe302nTzkLmcoaxmnTfLk/XOBwFYu6iX1kfKdsWgtsSPVIbxmzOX/aN0EWpJ3QWRwAqgHGZ93qhJ9toYwPr7Qk/8oezQPghU49t4p6pOxL6KO3J+ki/0obgkODPOCYpa3YGvi0eZA9DN3sEPVFt9lo18E3orJw5szlPhceSs3Ul/ZaCBgpuyZomtJswz2oZ42Lu4f7w6xzZ/+kNTNsXmYtdjwWQcHZrzxd+37SXMXlBU8Yn9MGEPQ951SR+FFoo7Q6bTbQhPYZCVBYYyDhHQQ8Haxx8wtqLjFXyTd6lKvr3VBrHRjJWoRkyV5Numnemp9gTCQ7Kev0GZxPaS8nvo7mLCWzkbzk/7TZYrFcdZPzf4SUkT+qG+6M7I/89e032rayH/d2Upusmr2nqEqVtk2dyAN4nwbddwNO0LemPEEDQXWBg02eIydtLmzdYP9HvtuBj6mKkXZMPlnuWwEHolfQlNFfw/hgbQmiZjGee1gGZ6yXju8zv1cEpHl2q7ppu3eP8HwRxERoq8PRlMWX9RJZRRa9BPujkdc1TSTvjWZNzFDL5c+lPcET6madpkPAt0r70L/TM3CPmfV3mK7iB43r7/eA55/ZV4CRyMuFBzDUROjaHCfZkXMvI6EanBSkreq9jfJZwzpjrbtd96PohlBUY4ojfvmekL8Ef+Za9Ie1/0GPcCT2szAazMq8K8Adlue/j+Ne+LiaPKHMVHJO2ZN0srGch9v5+DaOM7OX9yN4Snt0/wM0raZHZa9gIvZJ+MzGf6gnukeaZnZ1ORoFYz8FL4XFk7kJ/pE5l6IV5PnVjIVyxAStBwwTMUjhAsMufBDf6wOMLzyx1ZG/ZcV33cRTe2KTzoxlrNj32xzwNlO9UzL2ovtO4aXpr3pNNHZ6sdQqIsCmLtetEKYTDTHv/d9CNjARfFgNL01bRvCubOomEco2j2l7tGoPuQTQ62RcCq+S6/5MaTluw05AoYiI/FNmhuReknXvgZiXW8A9nShpkVXt0nazki17Ufr6BKyf5mPZtj4AnwTrsY+rLxMoB09SsSyL4vZPgmpf+Te5Sst4B/C2484P1KQuvN4Xzw9z7AZxRUUy2MxlCF2T8iTRsDzCuupp3KLzSQZ2CtgkuyXqYMjTpR3SEgrezGYfYWAjuJZR1mPZoMvYGen6Xwb9WOv0d/BvPeTScvfFb593n8Kig4Sg8i+zDR9qGJCGt/IEcpSJ3vW/UbU//FcBb5+oOKhYZUzbMixPqVk0bvj5cRE9zvmZlcUfKpoDQ/ganTBq7jfYIfqHu8aknMhoAI/MVGlNPw0b4FlkbgaPA7C6w2Qd/IDCXv2X/C88zTmw20X1cZl+cY43l7iwwy8r8TdyWscncBG6T6UsCjcpd4bKW6+VmX5SFfgeCZz/Q/wh/KOsq56ucp4IXAp9nYu+ArVYLPu7YVJhzv809fQpt/JiJTEqvuy9nr+C2zCkQ3JE2pC2xETB1c9JmCDCVe7vM6Q8VPBn3d/aanE2yxz/p9TrBHd7ECfs5oX+3AJB8THSBhtsU+jX1GwKH9sy3jcYxOS9kPKauX/o0z2/BH7v+Uuis3pMfNS8n4+6k209Iq+1yA32utwd+0WxQuSfKeGV+0pfcjQUvZR1lvi2wE/rIOj3jbDmg5bdd2B+TmbPAW8rKPhb9zUHk64Iz0n5nfhSZVkL5k+CnKbM37XTMcTVhf9/Xay4wlzLXIe7C/8rczfuQzNPUOxQE6JHwwSITxyGCms/CmLysKTeW9g9y3tfQvH8VzoOt7ANpz7xrmvaMcr4JTBtp+DfTsDHthV8DPPOuY9I/c/xXdFm5o0sbh4kKfVB4HeiPBdiZ+mO5Xwse1MJ2yTxzZU5l+WMiuh7hhaSceT4InMazGEJ/hc/rDyJ90fy7/L2KPbYtgS2FzGNvAhtzU/Ypa1kU+nVIj9O8v5hyOLOs4IHgz0uRf+l7puCu7N3c+nwfAkBMOZ3Ux9GznZ6avHF5Fj6U+smAdWpdx7Sl/QLxcoCxER5Y6q/S47nJWtaASJg8ksBVZHMCiyC9HtP53eQbJX81sC2TxEF95u5m6mbXa3mK2AtKu6HgpMw1oW4mod484fm1D3oiZQWuMhcZ3zb2SBg83KUEcBNYdoQX30qkiCcaFz2A7WDgInRDYDGVAVWB/oyivinfkvFl4qwydWVj9LqZ8k/B29nAzPxbxpnQniOLhqWp6zR504TyhRjOvIbQ64t0aspN5jFoOTME/ibNl7ZT6vaysYcSI5+fyZ2jD7gVynk/H526Kc+qxbwywrzImstdOwl//8LtqckLCJzMccgYzPuHjMnUFw2DHpryC/lN7B8Fblmgd1k03+PLPXY4dCWVHpeMWfaSa2FeoumzLz+2CWJ/YLepdHNQWSDgR5BhSDnxfurMGkn/wvO6wK8LDZI+ZV1kXU25y2/omglnGWcgfJB5RsscTJ5I9sJbdDQR4GdCGwwpcwjG7ojGC7azfa1MfZ2MT2ip0GzpW77TA7NLAO2BxutnnEG32Fw7gXeMziNInx3XTV2GeSeQ+uYdfx9jiUbvK2cywTj+OzdlrBWgUY30mGTusj4bad8Z79TZE8kzc/Ai3gFYGOka4GB+0vLCpiD3p+Kk7S9qsDWspMuU4wF+VV2mKxl1dboNntKb6jLdvnM31OnytNNWt1OGvnrq/DaMta+uu4cyAaRFdOJOepIun4p25unyBD5Vi3T5KDKCdDoP/2zU6VA+O3W6O3M8qOuWps1gnT+S8Z/R7fclP1Sn3zP++7r8DcZp1Wl/xhCp08lpIFq3k5r23+j8xeLtW6cDKB+n09voK163/0Z4h8RG3WK0705ayhQhw5O0fTzUzaDz29NmZp1+STvZdd1BpPPrtDdjLq7LdGUuvrodHM6pqjofR/qqpi5fl/Yb6vwcsl46XUjWS6fjZb10+cHgXledTkm/fXX7hSk/XJcPIT1ap8tSd7wus570LNKypl/pK0iXOUf+Wl3mMnDYqfNPMN+9Ol1R1k6nj1I3WKcHM4YTejyrKEM8VXt+Y8pc0ekO5IfqdEfwPkyXr0Vf93U+wZKUVecHMf5onZ+Hf2J0fhdZU51/hrpxOr1Q1tSECVFScOttz6/yk/UlLfl3GY+7zm9IO546vYO+vHXagbppdFoe32XQdRGPq+w6vVXWmrTAqitpX51eRJtVdd10wLOmzn/N/m2q6w5m7m11+h7lu+ry5RlDT52OJN1Xp/2Zo79OP4E3CtB1t9H+aN1+IdqZpsu4UneWTpeSfarTlWlnkU6PYQzLdDsfGP9a3U4w6Z06vy/pgzodQvsndN1RtHlGp38Dzws63Z/2r+h0atKhOl2W8mE6TVA5bJiNvo5xB400YcJcYnS6NXeIDzr9RNZUl/9Km4mTGO3kpk1nnQ6jrjtpKT9E1lHn5+CfNDq/IO1kJi3t4Bhd5ddlOiMfK6zzp7NG5XR5f9JVdToD7dfVZWqDSy11fnba7GimhX7qNp1k7XS6haydTntQPkCXry1rp9v8TvlpukwdWTudbkT5eboMTtxVkK5bkvyNOn1YomDo8nGU2avz59FvsM4fRZkTOp2a9BmdniN237r8Y/oN1fkNqBum0ysYZwRpoRUngFW0Ln8TmdMbnc4idFWXfyHrpfPX0Je53w9RRjnp84J0Yp3eQ3ln0nbaSNqbtLGODiqDLrOfMWTWZbLKvtNlYkkX1/lxpCuZdWXf6XQEDTTU6WLgVUuddpa103WHQEv76vwFzD1A95ueMsN1Pm5z1Xid/kGZabpMSfBhls5vwbwW6fzclFmm07VpJ0iXqcc+2qjzCbiltur8eOru1fnPqHtQp/3gpYJ1mZfkn9H5BDNSF3T+WoGzzt8me02nT9JXhE6/Jv++Tq8n36rTQ0lH6vRgobc6XZkxx+j2JeDBB53eCmzjNdwWArfEzkb+A9pxJy11rzMeT51uKWuqy4TJmur8uXKG6nRj+s2u0/3Iz63TNYFtfl03BXMvrvMRFStfnX+A/Eo6vz3rW1XnT6Dfujo9n/ab6jKlKd9Sp6dRpq0uEyx0WOcT0FH1JG2n27JndfoB7YzXZa4KL6Tr1mdes3R+NdqZp9NJKLNI1/WgzFqdHwoPvVHXjabMTp0+L2erLpNL+CJd14V+L+j8a3yu6PKNKBOm08upe1+XqSJnqM5PRr/R5nxpJ0anW5H/RqeHk/9Bp+cw3zhd14WMXzqdhPzELkY6o/BIpO17k3xP0jLOm6Qz6DKewhfpdE3Zszr9WNZR1/WRc9OsK+emzt/K2Grq9BDK19XpH8Ij6XRdzq+mus16lG+r889TpqNOXyC/q05L1JeeOr2B/L46PYm0v07XQf4UoNtsJ/RZj20HZabpMh8ZzyydPiv0WZcJpt8gnS/Ecq1u5ylltuoyk2jzIGmhpcXhsS/oMjNk/+q6wzl3wnR+Fure1+mB5Efq9E85K3X6BHD4oNOJ4FvidTuOlPml+40WGutqlFnP+D1J293nyFmp0+uATxqd7iM8jy5/EpqfnbS004vyhXWZ5MLf6vRg2vTV6W7kl9Pp63wq6XZKUKamznegnbo6XZRxNtTtNxf+Vqfj5TzVZS7KearTl5mLvy4zVvhbnV8fWjFe95VMzlOdnw150yydHyr8j84vKPRZpzvJnUWXGcT4N+p8L8azVfe1hDYP6nwCw/639zeTH6zzA0SeqNu5I/RZ193JmMN0OoB1tOoyj2g/WqcHUveNTq8mP4604Ekf0ondjLrThK6Slr42Mn5vna7JGNLo9Fu5p+j0MaGxOn2TdrKTlvZfiV81nS4sd0mdnkq6HGnpt6eska5bh74a6vQmoaU6XZ7xtNTpg8LT6naOUqarzi9Jmz31+P/K/HWZFODqaF3muNxNdH5m2Ws6P5Dxz9LpKpyD88xx0v4ynW8Tvkjn75E7tE73Fb5IlxlDeq9Op+THg7pMXXDmhE7PEhprwhP6fEXnTxZeSOePkPNUp6fK3tRlBtJ+pM4nqL2K1vn5hcbq/ANyZ9Hpi8AqTpfxlH2q01Mok9hd3yv5x5m05K+TPavzW1PGW6dvUDeNLpM3G7DT+V3pN7tOF2NeuXXal/z8Oj2INgvrdEPBAd2OG+tSTuf7AJ9KOp+gqURJNdKBQod1mSjaaarTJ4FJS7Md4a90ugzt9NTpzrJ/dboddYfruvWZ12idzir4QNouZ2A8s3R+M8rP0+m5zGWRTn8mvUynB1A3SNcdJ7RX93WLunt1mTVyzur0B/4J1mU2ivxB161LfqjO30x+hM6/Kmut6y6Q/Uva7iWUfPOO00X4YV3GkXS8Ts+i3186HcZ4lIe+w8q663R/6IMzaen3Eu176vReWWudXiQRkHW6Iv3m1nU9aTO/Tr9nUIV1mYcif9DprsIv6TLV+Keqzm9GO3V1/gmhyTr/MGNrqfM7Cr+k83vTTledH4Juu6fOfy13J50mIKUartM7wfnxOl1L9riui2m7mqXz7wh91vk5SJt8aVpwYJnOjxFarcu/BVYbdbqCyCt0mRuy33V6itBtnb4mPJUun5aMMzr9QngqnSa4nQrT6VMil9B1s4ncSafXCs+s0zbyo3X6/9g6F7irpq2N7+6pV6ULSQghXUhCiNNLCHWEUIRK7rcQkhDihFCE3EMIRci1EEJURFEUopCEkE++03G+5z/nM9qL31e/td9njz3mfYwxxxxzrrVqMy87bRXF5VabPgd5ML5J/GuNN0T3hZGrtszR9XLa7cTfQDitAdF34ynYeeMjVM/m5h+Mr2V8ETpunsvRceMWrJXMc63y6Wz6hfrosp6uOdr0jtLZ7qY3UP/3Mv1s4lHGLzJfm+dz1WegcT3xn2megeIfZHwZayvjb8U/xPx/ij7c9A/1McL0SuJU0S7hsO0T8KtFR+9uYD3ltDcxX5t+O7Ep07/Xx3Tnc6j6YaZwWr+wVjLPvdh24+nYdvO/ihyaPpv1kfEC0VcYXyE5XBVtx382Pk78sf56SPzrzK8XectJyTw9Ra8tDH07/Grj85AB421ZQ5n/dcbd+HDxtzTPq/LTWgnTLr2QrdTRuJ74u5ifJ6x1M/6OOd1p+zCnR1nqw95OuzNrItNbsiZy2o6iDzL9FPXzYGO92L80xDyDseHGDdB381zPnG68DP/ZZY1ijWz+yeyPOP7TlvE1/4uq80Tju1TnScYr0A2nvRh7blySHM4wz8HEqYyPV1/NMs90LW7nGevF5qVFxm8x7uY/Tevc5aZPU9pVxvX14xrjE1X/dcbzmU/drufw3xpk+mzGV5g82+DLGT8q3Nj4GvYRLecniN7U9IWMu/M5Al9OmPw3UbntjWvhe5t/uHAX44PVV12Nb0Te1seCJA+mj2KdZbwB9t9lNWG9bPq7rLOMh8me9zPPH6KfanoVjdeZxjX1Mcg8rxJLcT07sXY2/W7WzuZfIfpo038T/zjjdqrDePPw3OMJpi8mVuk8X1e5L5hnqfRxunnuUZ4zhbEJT6qsBeZ5UPRFpn9ArMP5XKixXuO0y9BZ88/hnomNMr2XcG1h+G9gDSWc9l+IN5rnWmJW5tmVOIbp9Vj/mv9frJuM66j+nY03Y+yM9VL1Ulen/ZGYhvPsy0soTf+38uln/mXYXNOrqA5nGl+s8RpsPFj5DzP/ldhe47tEH2FcoT4caf4L0FPjA1TPcebZmr0D45eU/3jzzFWfTDS9N2e9TK+B32X609hn40nin258mXhmGLdj7NzeU/DDTR9FTFKYsbsUm2z6hYyjy1oj/tWmb6e2rDH9UvTUeBZ+V0PP6fjbwunRk/jbpl+nshoLU1Yj5lnztFHatuZ5k3nWeEvWxcbni6eTsV5mXOrstOPQR9N7oIPGH4m/u3EbfGzjI/CxjcfhYzuf68Tfz/TTCvF5bcOWBopOvy1T/QcZNySmYfw2NtlpK9U/o5xnA+Uz1vQnWWcZDxf9buOvRB9v/APzstNux5rL9PewyaZvqY8XjG9mfM1zEvtExi8pn1nmGc+8bHo1xtp1PkG2d6l5XlHaiCVWMheb/ynxrzLPpuwNmX48frjxb8LrjBuj141y/sPYnxYm7R7Muab/zt6B6R8QnxQmbVOlbWv60bIbHY27MdbGE9QnXc1/NPt9pl/NPRLGa6QjvY1HM6bmP5D4lfHF7A0Zf66PM1231orDDzF9OXoddVOdhzvP74lXm/4lPpXpK1lDma7jvaVxpuvFrqXxxmfhU7msLUWfanpn9hSc9hD2FIx/IO5h/pWsc8w/ivOpxhX4z+bvpY/lpm/D2Dnt3cSZhdG7Ydjbxl4LsyYShqeSeKPpP+ALCSd/jDWR8bn6aGuejfGBnbYFfq/pc9kvMG6itD2ddlf8IuMpxDqMd2ceNO5AvNH4Lo3FQOdzlupzpumHMQ+a3oV50HhX9hSMF4o+0nX7mv1007fTsxnuNu6hPCc4z73UhxONOxJDdtob2PcxfQ5jZFyTMTIeh94ZVxE94tX/lBzOclm3EbMy7kds2fwDCnvBb7AmMl2h09JS87+LHTa+Wni18Z0qa635TyC2bPrv7Os1cT7y2WobVyhthTA8P6Orxt3ZRzDPpur/FsYvYZ/N04E51/gBxt34DOZZ8zcv2P+tWBebvoR1sTD9+TR22PR/Ig/GOyAPxnVZB5n/eJ6P4bKGEOswfS/Fr4aZfgFrHOPmwqOMr0Qfnef+2F7j85lnjfdUnccbzyXe5bQfYXtNP4W9JON6KneqeeYzR5i+G3tJxu2IfRkfgh12nQ9iTWT6tYV9/4nsJZm+ufAS42r4zMbbq+3LXW4n8awy/W7iYOvHTvbZ+CP2DV3ufsjDxpl+Nfu8xsOEK4xfYo421oOTS42FKeslZMP0tdht068TbmV8rNrYXpiyeuIzm/8ibIJ5zlQ9u5n+FTJn+rXKp5fxYPH0NU8f5dnP9IXIgPEg1krmqZRMDjb9YtV/mOnP44MZL1YbRxi3VOx6pPlL7OObfo4+xpp+O/Eu4fSuYmTAPEcRAzHeghiI8WP4XcZPsi52Pm1Vt5nuk5PRfeNq4l9i/hOJfRmvJO5hvBFxD+fzjPBq4x2w4cZTeDnIJt7HZ79eGPo61j7Caf0onqbm2YM9QdM/ZH4yf1fVs73xLPxn86xgHI13Uf5dnM9uxLFNX8W6xmkfI45h+u6Mo/H2yqef8aX6GGj+QZyxMe7Gmtc8F2qsh5jeS/Thpj8gf2CE6bXQceMNiHGZZzfilsZPsP51nfWyudJE06uwxnHazdg/Ms8O6K959GDq0kzzbMEZG9OPJyZp3JZYhHFD4hvm/4gzVKbvwV6hcSP2Co33ZV52ubzraK3TbsSeflP3FTpr/ATztTAyeaDoTU1vznwtTD5biNBKOO3Poo+m9+EMuen1RO9q+q1K29P01the56lbPUp9Tf+EmKTpjViTGuvoaelM88zmjLvxEvaPzNOO/SOXpSPopVHGO2KHzfMNe3zGN3JWym2sSWzZ9BHYSeOpzMXGs5mLjY8j9ug6fKN2zTI+G70zbseca/7fJWNLTL+I9Y7pM8WzwpihWGWeu/F7Ta/NnGu8DL/X+Cv83k1zG39grhUm7U7YUuMfiDkYL2BPQTidldJ9661M/0b09qZfrXVER9MPZp41/WLOZrisXmpLd/McK55e5vlVZfU2/WnWs6ZfwvrC88hQ4YHm6Ys+Os/BxJ1M74hPZbxYeKR5HiFmKMx4bSgfY4Lzv58zGOafK/9tivEhyv8F4wolmmE8hf1fx4XaFfZ3FnL2yXn+m7M0xkNYtxpvogwWOJ/nlf8S120W9sv0jQux5a+U/2qn3VZzwRrzfInv5LQnsW5tlumt2Is3fp79AuHkExIvEqbtvxB/EM7ncCSfjm+M5Iyz0/bBFzLPVcJdjffBT3aekznPZv7jxdPXPM9iP42/JRZhntMZL+NbOVPq+nxKzMH8l+ADO//G2EnTX0UHjUdjJ53PY8SCzH+F7O0U039mT9b8O3Mu0fShnKt0f55MPNA8HRk74zXs+5h/MmtP13M/9npc1lX4MOY/EV0zvp75zvxfMC6bZf7qxPCFUwxNezdNhZNvrzFtYdxAH62MHyaeYP7NJKsdjYcUzjCcoPMDncy/iHiReR7iDLDL/UxnBXsaz2N/1vyDub/B/C9gJ42vYc1iPAbf1fyfUrbxSHwV8xwmPMJ4AGtM4zryOUeZfzlnokyvyTgan8o4um7XsMYUpt+2IkbnOPmBjKP5PxHPdOe5lLEzvR9jZ/yD8pzjPP9Dv5i/PTplngnCy43vVz4rjJuiy8bHqW9XO+0HxA1Mn4b9NJ6LP9M8/HaNtXCKNeHbCFOHb4gHmqcue/HmOQvfxng+92uY5wTmQafdlz0a82yJ/TTPEo1pN+N/c7bN/JexN2f6APwW4z807mcaP6E8BzvP2zknbDwNX9T4E2I95n9F8ZaRzv8QzY9jTR/KWRHPIx8zJzptPeJCxm/S1+b/DL/U9BvxS42PYK40foexNq5QfaYbV1WfzHAd6ksX5pj+ltLOMz6eM6Uu69Xi2WDmTdPnsy9vfB7+jPGTxAaNPxD/OuPd8Wc2z/nchvz43HgP9Fr0FEskFmG8DXtz5l/NGQzj+sSBhdP5Mc5BGf/IushpX1e5XYx/w780Hk0swvkMUT69TF/F/Gd8GjEi84zjzIzxs9hbl3Uk86P5x+KjmqeeCCNMf5J5zfSP9THaab9S/9xtnqs5G2Oeq9FZYXT2FcbO9JnYW6d9g7PfpndFN53PKdhV83yO/2meh/A/jVeypjD/L8yDpq/jbIzpR6vwdcYbspbfwusF8dc2bsv99MKUtRljZHpPfFHTH1OerYTTG6ckY53MM4LzwMLp/CfzoOntlbab6ReypjA+m5i88dfEhcw/ibP6pk/Cxpp+vOzMINNnaQ99iHFPVWS48afCI40/Y3/E+DjRxxkvYi3gOMaVxAec//fimWCeKSJMMv6QdYTbPonnGZi+FF/U9IbolOmbEedxnocxXsadWOObf0k6R+4YFz6neVrhq5j+T3RqS5+RZh/KeIn6oUIYnp3ZTzF9XYqxel1JnMf0O+V/tjT9aelOW+OL2Jvwfuvr+Dnmb6X6dDJeQOzS/PPUP12Nd9T9192Nj2eNbzyVtaHTNmVMjT9WuQPNcyrnCU3fkv1u4w04OypM/+zC+sL8R+HnGFdjXW/+eaKPNf941hfGnZV2kvmXUyfjr1lTOO0NnF0xvb34Zxm/LbmaZ7yE+2jM3xfbaHptYrDGT6jfVplnJGt512Ga0q4zvTtzX4tM31tzfYVwWndoXBobf6p5qrnxJOlRS+MW7JsIp/MPnCc0rs6eqfPcWvQupu/OGtD0u5Q27qkZKdzTPP9gvJz/KcyD5l+HPTTPAuyh6b+rLUNMn0TM3PgP9M75DFD/jDTWqwtLo40/Vn3GGb/MfOe0q4nNGu/PuSPzvMd+qPdbHxWOuMFl+phinnXsWRtXZX/E+WxPXM74DXTT9Ydxgfn/QfzNPFsSfzPej3Wi8U3EY82/G2e5jf8QXmv8AAvIrTL/ZPTUuCG+jfHjnEt3/z+OnyM6NnN3bKkw+cyQT9vS+BNi78LUeThnfU2vxZkE4zeJszn//pxBMv6Ouc+4K887MX8n9NH0XVlrGL+ucgeapxX7nsbnooPGZ7DeN/+vnOU2HsQaJPJBtszfA3vr+v+Bv2p6e8ba/K8q7UTjHVW3ScafSn6mmP9Pxtd4DffOmOcLzgCb3k++1hyXdQbxGdO7FeKlz4m+1Dwno6fOpw4xdvOfyvki06fjr0bdZBNKW3uuIT5j/C3nTITT2Uhsr/F9zJXGn6ktzc1/OmtJ4WQTVLf25mmqj47mWUUsznRezdbF9F+YN43PQ3/NsxH6a3p32Y2+xuNY77usi2VDBpneF/112mbor/Fe7HmZZ4bs3kjjYzg3aJ73tMYfa/p/8V1Nn8/+tenncs7E9DeS/fL8K7mdalyVcq0LxypmNd30mzlfZHwS9zC6/muYp01fyRzq/Beip8bdWUfbPuyEzjrtoeqrNeYZxdxq3IfzhMat0d9trJvc6yucfEti5qavUh82MP1WzpaYvgh/1fg55lnjL9lPEU7nDRhr039TP3R0Phuz12m8J2tP4wM5P2Z8M+tup72B2J1xM330NU8LYnemf8eZYdNrF+6lOqEQs/1AdRhknhPYUzOej60xPg0bbtyVfS7n35U1qfH9rEmN53G20Px3EXcSTm/Rk0841TxnEDMx3pw1qfuHN7POctoTpcvzTP8Nm+y1wyPEfEx/nbWn85nN/apRH3TZ+Zyj8Vpr/CDnRVv6DDz3Txn3xY8yPpr9MuF0LwnnFox/EW4unO515Z5i8zfVj23Nc5L6qqOxHkFS6mw8rHAe4C7G1/QN9NHd+A72xZznB5wfM30HzgAb1yHOYJ5f2F8x/SjWpKZ/jl4bb6C2DzPPtuyJmP4pMT23pXEhLrQP9TTPO5wdctpN2Ms2/pM1vvu5LesX51Odec1pDyfuZ/pBqsNMp92GuJDx+/jGxl2VzxLz78U9qqZvr4/VxvOZZ9f3lT63dfyQe2qEU3yAs2Gmd2Fvy7gq5xDMM4BxFE5nitjPMv1g2cz2xo9ordHJeHPiQs7nGMbO9H2ZZ01/QuPe0/QjOVti3E8/9jN+jXnF+EPuZ3TaLdgHMd6LsTN+RvkMcz03ZP3itJdzb5R5tia+ZzyTezGMv8QmG+uxAaXxTqukpYnG7xNDMM8jjJ3x7syz5pnMPGv6FOIMvkdjhnRzpus2lXMm5tlD9VzgtE9ojlhi3JE1jrGSllYZb4tNdtpe6K/30B8TXmv6O9hn4/ro73aeL/CvjJ/CvzIeIBzn81uzbhU9jTWxXOPh+NLCaY+es75Ou1If7U2/j30x08er/p1Nv5NzR6YvYi52ni2ILZhnAc/ZM/6YM73GfQu6Vg1f2vQByIDz3Fx2cojxfsyPxtcTczB+BF02riH+kcYf4vd67XY7sQjTa4tntPET7I8bd2XvwH01Hfkx/XT2yo0ncm7QeC4+m/GWmpsmuv7Xs3dj+kbIknFN7rs0z0/EoEy/Qzwzjfci9mh8IPEN89dlnRX307GHbp4q7Jsbt2YuMP8dyJhxJXvl5vma9Zfp/SV8az1evbH/23uPGPkxPqcwl82XP1whejrLig0RTnF74pDmX6iPlqZfwTlS8+/LuTXzXM0+jvFs4pDm2Ymz4qavY4/V+En8OuNzuc/UcYDRyJjL+gz7Evlwb4jxGPbKnXYqfrv52+OrWH9Pxm83z/ecD/S9xq8VzpKdw5lV+wn3IG/m35Mzb8ZNua/E+DDWd67D4azvXO5s+ZATjPXYzNIU87TDzhg/yLrbuLPKmuU8X8H3M/4Pdsa4S+H880aqwwLTP2a/z3g1e+7Gx7Dnbtyc+Jjx3viHLncoZx1N/4L4mOnX4f+b3hP/sJXPk+ijunDaS2UdJ5ziY5zt8Z7+x+zFmz6EvT+nvZyzVcY/sb5zPidxxsb8erVfqYvp3bjvz/z/5ZkkpjfTRy/jGdgX48XsGRm/x7OFIr7HHq7pA3n2sstqI1sdceYD2JtwWTXwuxyr78N5G6f9mfPG5unC+s703uzFm/4NZypMf4Lz56ZfINs70fQm9JXprxFPM/0j7JHxPGQyeCRjs0y/kH150zfl3iLTz8XOOFZ2H36F6PifzVnrRbvwD82/HXON6ZO4l8T81+FL7GCfihi1cDorwpgaX4+fb56NOTtn/D3ja3wW8WrzNyzo5lOccTXPftgK49bYCuOvWOM77W+cezQ+jn184XQGlXNTxiV8fvOcwz25zqczcX7v2d3DXGP6x9w7ZjyIc61Ou5a1vOkb4iuafoDszGjjV/APXe4t3OPgvYwZ6pMJTttd+3QTzX+08p9i/nd535jpw1jrGW9duNfyV3Tf9DaMr/EqYjXOvzpredNflM+2wngp8RmXVUHMzfzdeBt+a8e45LPVNn6L+wiEU7ncE2rclr0n8zxa8JH2Fm5hnkHYf/N05flCxgtUz47muQdfwliv5yp1Ns8F3K9t+sHouPHPnFEXpv798SfNf6f0tJ/xJ5yPMq6qj0HGLdVvQ5x2O/GPcJ7VebeHeXZWzGS08anEe82zD36j8UWs5c1TyVka08/hLI3py+kT0//BOQ3jnziLbnwhPqTxW8TijG/nXkWv/afp/pFZznNj9No8d7DH4bYsUH2WmqcD6z7zHCIZW2W6XiFVWmNcoY91xntiq9tYtpVPhXFvxlo4nX3ijI1xL9byxiWV1cK4ueaalsZdpAutnM9p7Dkav13oz4uI15n+HjEc446cV3c+hzLvG6+U/PQ0TwvW6aav4ayscRvOyAmneA4xc9PPZE1hvAXzvvPpKsIw46/ZazbPROye/YqxrPHNM5/7FJx/R/xA81dio+wPzCJma/pd+ITGY4nZOp+rhKcYv8belnn6sd43vRm23fR/s89lPIt7+Y2P0/jOM//PsoeLjF9mTjfPUGLvpl/MvqTxu/SdcSPuQzH/zpzbaZvpw1n7Cyc/UP1fYfoSPVu2sfF/xdPcPDtpj6OF6buyT+SzHxXydVuZfgR+oDB9+CJrB9P7sXZwPk9xPsGx5RWsI8x/M3EA86zlPI/TPkyc1vTaxHmM5xOfNz6dM+3m74EMOM/buI9MmHltmp4XNNo8v+PrOu2bjLVxXdb75mmodk00foV4rPG/iOGY/0L2mo3bSC9mmOdx5jL7Qgs5E+v63Cv+BebfA5/NuJb0a4nxj/gexlNU7nLneSvzuOnLsPNRN9mQtcbvo7ftvJZX/rWFU5xHHVBh+jvovulN2Ys3/hTdN74K3TceU3imzb2cPTC9mvJs5TwrWD8aXyh6J+NreQei72n9gnNBTlsL+2/8PDF842Ox/057I/Jg+iXcR2x8SmHtfIB4+pq+FTEHpz2gcO9Ddcn2qaZfih9i/h686930DXiegOmbi2e4MWHvEebpzL0PwozjUJ5/Zfrh6IL591CCCaZfybl6YWRvO/a1Te+ptDONz0bfnfYYnmlm+iaqz6KgM+8bzyf2a/wnsmH+k5AN07tIbleb3lAfa4170JgdvW4ihi+cnt1H3F443QNO3N74IOTBeFP8E+OneMag8Tb4e8b9uX/ceBjn+oxPZG/OZXXjbK3rsH/B336PecH8L3Ifk/GBrAeNH+M+JmMCOnHf62jmC9NHEAM3PpX5wmU9T/zQ9Dk8n9D0DdhTM30JPqHxInxC85wl+RlhvEyDOcq4D/utxtW4v8lpb+FZPcZjCzpbRx8TzH8i++nGXThfbf7DsC3Gt2FbjH/knIDvc6nJfamm98KHdD6nc27Q9BmcBXWf76VxX2KepZy7Ns9u2ndYYfpszTWrjaezR2Ce04lBGW/PPOs+P5KA2k7e9yQeZbw351uEyed/OE9orFe/lZoaX4EPaf7uuvGjpekvID+m98evMH0g86/pr7A3ZPwD8UnjXYhPmr8K96KafihnnEwfipyYPot9XtN/JE5lXIt1ovGtxJbNfz17BKbfgtw6xjKCeIJ53idWYFyPWIFxLaUd5bT/K50da/x04fzqYuYg8+/J3r1wihuwZ+37EA/C/3Tas8Q/1fyPIDPGy7h31Twv4XOa3oQ5yHkuZg4yva9s4CLzLxXPUuPTiA+Y/1juUzb9Ot4n6OfMdCg863ILfE7z/El8qb3vK0QehJPusNYw/T1iSqYPUJ2bG49lf1AYm/krMQHT53GezWlfZh4xXsKzmM2j6V3PdfK5C2LU9tlGsD9oeiPOexv/wnNmnE8z7o8z7l94ltdN3Evu5yOtYC/JPEPUb4OcT1fshunPoi8+51CDGGbwc67Y/McVnv/ZWro50vTnOcth/v/lvLHpJyj/u01fi39i+tnsQQgzRt8SQzCeShzAeDDPUXTaTiprntOuxp80/g/+hnk6EEs0/XHhVc7nzoIdPkj5rDXPh8SFdo7na8kOGG+t+GFt4XQWmudkmn5UIX44Bxkwz/7sTQhTVk3ukTT/IdqbaGueReiC6ZdxJsf4S+Zm83yGHXA+c9F90w/XePU2Pop7z43nFOzbMTyjwPSjiSE4/0X6GOw8Z+JPGk/RR9wb+47yHOW09bi/xriKbPXdzuc/6LXxcGIFxg8Xnjf7GucBTJ9JXMb51OdZmsafMy+Y5wh0yvft/kQs0XV7kPs4zHMtZ8iNl7BP4XxOJkZk/pasK83zPmt2xw3OY8/C/Btwv5V5HuRcq3F1zmiZZwwy0MHxdp5FI5zWI8SRjM/FxzDPPxh34XQ+kzPM5jmKNYJ5nmNv0fQ/uO/e8+BTrC+cthZny42noe/mv5f1o/Ppp/r0M/0Axtr4v4V9vR04U2d6c864Ou0OrOXjnl/2p1zWRexPmb8q5x6NS+wpOO0D2HbjZpKH8cbHqKwJ5n+bsTa+HH8g6oxtN27D/VbRLnxI42OZ982zIzEE4yOJIbieH6qeS81/D/Ei47E8u8/8/+TZI+bvzH7TLo6DMb8bV3I20vhU7ncWTnqntjQ2HsR5D+PvWC+YfykhZNMfYn4Xxs4/jE9oPAk7Y/5/4VfHXo8+ejkthL7Gu/DcSPskr7E2dNofsefGb3OG2fzV9DHY+CLOLZtnPntMxvvIvo0wTy/2kkzfiXMgxnqMemmseeoSOzJ9GHtGxhPQceM3iQ8I07dzeJer1+YPsbdonv/BB3KeX0pWZxh/xdktp53JfVjm/5RzPqbvjT/mPeg63Gtg+gKe6+v7QfpyLt15/s69BuY5o/Aspg/QX+OrePZIx3jOs8ZXOO3Psp9ifBVrBOOfiN0Ik/9NPDfM9KOI85venbWAcNqHUn26mP4b+0Hm/4S523jngo/xI2e6TL+TtYDxkfh1xo2lX32N69Auy8ZBrAVcVlviBubZnziS8Tjsm+1wM+5fMH9r5nfz7MOcbtxOPw53W65gbWj8IfFh4604B+J8FnKO3WknEyMyz848R848n7I/aJ6+PEfO9G/Ra9Orc4+DcR/14SLz9OYeauN3eaaBeWprPbjK9Mm0MdrCPbOmd0Lfd/U4ou/GP+K/CafYDme9TN9Bz4trbNy/cM9pT+LG5u/NXG+eAzgLZPqOyIPxpsiDcRvuhfGebAXPkXPaJewbCqc5nbWAY3fj8fPNM5z1kXlW4dsbf8m6zzzPcXba+BaeayGMbF+D7pv+gmzFCNfnMmUwKujs9Zj+DrJifA3PvjY+unBO4LjCvZPtuUfMPLtw9sB5NsSHN16sirxgnhnca296dXx442bsFxuvFP8c8z/Bs/X8fN39ZNsXmL6G+d39sA3+vOkf4/8ZP8t5P+d5CXFC49mSq9JuPgPGs8WE03PtuBdJOJ114Z2f5vkA3Tduyhkh89hc423ovUJz9PqCZSW9DiI9iKeGgtbVShv5CZq8UYVfLtXzOCa/Vap7f9U6esLx5qUrSg2S1W6IRusdCFVLW+vbUH1vlN5cQiq9qDKd3/hI8lc74Zp645BeE6Gym5Rqq8Uj9fagTUp6mVZ6rlwt0ZuWttPoJ9ksbaCcU1Q2/V6rtG1pz/T2H95MQUfsL1qFytm2dLtyrpW4NkzvxdlH3zUD610Vm4hCLevpf/5909Jmukj/SJ63iOuknRXFYsS1UX6DRKLTD41KdZWqirayquU5T6no80uEtFQvtU3cw0t6nQSvXdT7JiofmKKe0jPmO7P/JfYN0wt9NFyq5Mapok3T57ZMvSkJmWsqS4JP1/MClD3SbxRBRepnwVNushvpX0tRwI1SBSrHPaVCv6hGw/KQtVeq/K2KUK58WpAJbZ/oDdMv2yQuzWzpG+Xr5ZKq347KvalwBwlBPZ7QlEOx6S+dWSV1Mi8ryp2Vv1EbGRCXVSvlmI78iYvak+4gcVURZTP92kKoRt4QVffzF45ts0nKT91Nw9bY7TpKeTfJN+imnBunoaectOAVqq/21HQ9oNLTddWPOSdyBzVR6RuJbwtxx2DXSi/Kyb831kiRXxX9rSEBCZGgf7IopQNtCW2l/uyfNzxFbaZv9VLrqqhNjFAWmFx+8/SJXKQ3mSSuWhoJ+jyPG5wVqZ+baQwZpTqJvrF4Ni5VXvmsxnkHMquSZDtrFjpSV5Qq6f3zZMBnHf2vnEqCJ6tRSK5iDaWhe6unytGNZK9HkqT0mSc3r0qS//p5/aQuY0ArJJZV9faZTZQK/UCX6HR+y42spmpukfJtoxy2SoNQXVyUUKO0ub7X02cMIKmq6n9FEoTGeX52LZJvaJXYLL15t16O3ZhOK7Mg7q38KTtFtVI9yC23hvZG90d/5UHeUn+xIHR+NfcKeeS2Z8GjTFSVOmRR0TycZwpz0fcoVYP1IrJhfjKWOOhZlA9x3FR5ZHUmHbXacX2dsX25rllYq5Uqf3xB4/ZtlfaJJ5Q31zsLXnVxb6q2M2rUjF7kX3tRyR+O+rpyXzZ2+jqqa4XK06MsU93CBlZTuTX1S0P9hnXOudG3WShraFTo29pCtJbf6Ms8urmMUN8GFvkWqXbY1zAPOc/gwlxUSX2jd1QvfUnt5UlebmY26NWlMWgmg1SetlJAIjUcLgYpC2/mySY63RSexKKqNTZPJ1rSmj9/z8NNh6oS30xLnV4tDVS2XTWSINX0kOaG82tV6XnacHFu2daVVSc3l3xzJ4dwMNRZ5Kll7jzUAI3PAs50g6AyVHnocseifDkXZhL6pqbyr6qUKQAtWvWkWChGWBzsC4LK70z+WViofwP9Xvn5y2rv7PQuMQZzs2RE6KEslPVSHtSMYc/tyuOSBziGNStEbgGqzpDWdJ/V1t9qSYhidOpYLIrikMWNz2zWaognVDbbTOYixDKXgrrkXMJkkS+9Hd/5i1owy9LmPHMy1zB+9VPq+kk0N0y0rFq5zGwia6fxyeOeBRZZyD2D0QulzLNALjHXLstIWQ6yKxHKWx7JpknV89yFOmCEwoiRP6Ujpdk08Z1+zZLDv7rrzVlW0nKvMoZZfkPBmRXzb9DQijyrIX/8QlnIeZb9nKIo0cXRyiObTTe9mP+Rkyacp1+XTF20kaqUOwnljW6g2SFAZYVA/JtI2LK6lDuNGYYKZpufhbea8shikjsiW6DcBdAqn35DxY+pUsOOTM6TvBFFnDFo2abmcug6ZkpSx6BWtxLSVNQzl0Q35e5CsLIblHPOtrtB6grsYsxfdfPzdtL/ygUzVbMjQqKwUDHh5v4P+SvbuGy3cmdlKxUjkmUfjU92a8qbyvodnhlja0eBlJG7h7yzz4QEU27kw/eixaq+XgJJk6UqSxBdlG1ZcOb8m8iDjGmMbqJmIdNoMR2LMGQ9y6mR6siFwS9PQ1kK82fkl60tAxwSne0VgwWupimY39GgnA7Xh5R5kCs8LMWWRitjEsyWHI7cx+XZJgQwW/8t7a2SpolFObshlIooI26IBzY4zxR5VGln1v/cU+UpM5dOXmU9rrzmHY2oNnliZVNXw1o2idlfyh2djR6GKQtQ7oA8ADEJheqXm1ujVLmKIrTnmfWYuvtd+m5tljFGKGea1Thb/OjNLOpIV3ZBQq1QjhgLtWbRuyqKWynWG8oYbKxEtgJljc8eLBNBbhVZVt47W1kouhNWt9iPZfkrmo9GUjkSPco5LPsLZbUvo2hfVCnmqWxwQh6zGcguUQpumx+jQoOie5HtXBPkIq+SsIthFLJURuNzk3PP09jKa+aqxgu588gmrdjXUZdia1kXlGfQsmYznrmN0U66FqsTdOaVsA9YjWh5NoLlMnLv5SVDOG/p9qhUI+qWJShmwiwh4bTSOsQ0C17lyvfUPl5CY9Gq/BPCHbwqMbGFsQn1z0pNw1HqPChlvzRPZOl9OmnAYzqkErGwyz545o0hyo5MbgZNAGEKkbpcg3JTWSaHA5hjErGULYtI/scyjvzyPMHAkipzlDu1RnJw8oI0BIHakC64G683VmXDmjljavirLsUMlfshRCz3TXntkKcYysI+hF8PF84aKhz9FSWSunL8hxqhA7Malu1vLBfpBLo9pCwkPryFLF+hPRrwX8juOwWdqAyeZtF7iW6PWSssa67Yhn/xSP46B5ImD1I0mYblGaRsy/F6yoYx82SBK/rkRS3LxjfTsndXdl3CmdEt8n9ZAGWbBH8OEuXcwunIA4Y9yPkjyvjyoa3ZCmffE/+wPD8U1xF/xWH5cm/mMnJKOR7LP1KPT+aO97/42YxAHtVy6rzSiuVjeSYMHyTbvqhpoLApxV7Jeh+L6ZCcmPezrxveb9G2RI9W3rlQtf6oSkxdZStVVLpIhQCHach9W7afZYVlHVC2TJG6XMfMn81JrC6zq5nVonYKA1BSjEZoBT1ZVtnyujCXR/QrbHkusfJ/F6l1epBttgtkiaiUVau4Oo9gVnGCQySLTkoWWxSkuFDL1Gzm83Kmcs0nKvgZ+cdhM2JKjapnk57Ljk7OJWSLS365PBqWPfTysOeFQXnqyTatbKvC1QoBKk+eZbcvfiuKGL9VTlmsuj+kyTGnycOXuaLfspOY1Z/OD48ip8jllie93IcEGMrCkx3vqGcIf9jccq3DbOSxyYv4oumo/HyJasvZlvWdGQ2tXMdP98tfj4mwmHl5CMtFh02LVWHWknJYK9u67MNl/Q2NzIMQvn5ZW6PaIfflusSv4a2XO6bcDdiOLO95MNDr6Gi4ysKXOxFdL7t91Dr0vOx5l9cpMbWGHS1P80UPKMrOa9gW63sxxDdmgSy2MQsUe7ZotfIclFdlZata+fBSjZQOQYSuZcNY+QrkHaJHIt8cA8Jzjmk7t0kj/gsJPuHOiPXTcFm8ie+XFZxc8/iVlbIY64gZpGjBiwoT37JQhiNQ9nKL66sQ/rwmzLIQDlNZfsojFwqT1T1MRPQpM3TZvucxjYVIKFvZ/oZ/GCqV562ixxplxWiEhJXXy2E8NVILlmV1y51ftmbYPH762p0fyvTXUF0xFlq0E+Xq5v9lA1+cfmMSiMqXF44hGCFcxSV+liaouUNzF4Ua5PIyR3Rd2QsM2xdLs1jxFRW2+C0PdHG4WBeWl+pl5Sr/j37Czc91CMei6IVmhc9r09Tby79Rb1/5RnLpoxNi9bil3suut9mXWmmUDtQ1QUybK2i5u/D+utrpYtNRb7kvfSisN9KXzmQbl1sc2d4X7SBdYxSNPsr7Z7ySfhfRDtbVS9dHuvitiTa1SK+3/qfX8cdFfvuK51+6SL8zR+zYPjf+Wq/vf1yvbX9ak/0P2oKZrdfcRx6D0tZkfh39PezOK4/BHP1k1054Z128ap9X2E8TzzNKy6v6KWes3glPGYOV7x70jf7SB2NGpzcHpa0b6kX7yJe/u7hOrygvNj6n6y+7g+xUba+9zvH6Tt9RfrTtYn0fJ/qLqjv91db9eiJ7av5+gP9SxlW6Gms/4HPxb3CK0nOrDTvNHB3wRX+SlnqzL/e+eB/RRbtoK+1iS4HX/EOjD6G9wCsRjs20Yb0yTV2S+oy2scP1qPK9hOMOloHWutgx/VI/Pu7X6c/S9asufh+lfuzOMSCOebLFTH7Skwt10Tebq6OGXKljbGkrKedxOhvGbu9EfW8j2eCiDrSHPGqr7Wxea+hLD4tvKm1xGsYp9RvHXj0u9A91jX48me1gt+FBpa2qMT1EQj+AY2WMv2jtJcgbqP7QkBPa+Yz4DubYnb7Qb8jYv/SXsWbQq4zTdr/r8pl4u+rv9pb1p0Sv0J46MkKdSF9V7Trtdo0V8shtQaYzBjpJs34MZvD6Bg32ffrLdzW/1Ilb6sQT445uHWT9QoboczbI6X++01b0TtmX3lW/ogNBe0350j98p//4y/WI6Is9rt97bAdyy6HbRF8O1XWm6qGuSmNM/1Uo3amiscX/oxTyLX3/VYaCcbjA8hd5pDppIKHVEB+7ANQNGaYO6Dsy/qI6m3Hqr+sXXYwhF7/vaT2J9pAvY3+05Pln8d6lfJtYB85SWfRrpEcX6Sv6fyh9pnq+ca/KdH70F2NPn19SGCdkkUMOYau6Of3Ztjv0J3VBFjrYfqFLlP3oKMmS6vMNx68tl/Duy/FOjqyJjuyvs17xtzE6r06mHfAx5mOcr+4kS/m+yVEW7LF47tRFGdRxFbfGSOewP8jC970V41WjqSv2iP6jDuRDfrqTtnSaLp3YLJ3tvMfpdyVL/XChxjTkhXTI03u6vuPx0tyiqXp8IV2gTfBw3AI7iJ0P+Q17ga3Ann3kvkBfjrBtiXmGOiE71ONJHtvLXpvK2FcX8h58/NVTMvRKeZWhvyFHtJF5ib59Wmmwvdh66kHe1I28Oyjj4oUd3sm8yBfl1lZ6bTuWXpA+InscK9nT+egkccrnUM+LzEW7uY/qauyWicDm+KPK6GTxzpawh31/TdetMjYNPRdSJvWkb97QhR0/VoI4XIP2ksp/m/lM1zvCB40p2zP64QSO+MGji7GFTv0+EB/1Y9yZo7G7XDqhX2p0n3TT44+MY1/gvU/0Sci76sVFm/kdfXwVvZb9ouzJSvuAZRVbQT70d8zV2O2dxIds8lvoMr/fo3z6CbfjVizJ6ZW6Qi+oe9SHeZV6v6U8Juv6WtdKl9laeo1dRTfJX3d9pLyftR2mX/qrAOqPjUU2kTHsHemgpzlc3+dYDklH/0/Q9aQufIxpltnXdNG35MM8gKw8KxrjicxhJ9FT6s7FnEV+Md6kG6i6Pau2h5xhG9uIjszwO5i/2BqujW0PqEe0Gxs/XDyMKTJ+m/KjPPgpi3bTF5tpng3bSJt1B2lqUzfL0ePajLpf1yTJ2Bnqy2g/V+KnPcr7IV3Ur1Pf3GeMC/25i+Y2+j38sy3VGGwB8yXzI34JdQz/TKZ5va0JORgvfeiivA/XdaQ6BRtMX97Cq1YsB+gbtuJBt585Cf1FX2gzcwV85I2vFnk/Zv6lPHpThng2vgavdws77fkAXvJYJgXGVuGn8FtHKSO/0Z/wM9fG9RR+kMp5nlvEdSHr1JO5E5sL/yHcjoEcSMc34bZp0Ziz6ZeZ+k7etL2nrv0Kc/DPx+W8Lj8+1wObAC+yP0v9Mls8i2zvaRP6pdP46+d3bD9tJi3zWNKJgkyjq3vKliH7XTXI6A96Efb0VI5+ynFEHpATxj7mZvJkviFP7DNygJxsb1832kCdsWnYMOrJOIQeMX70A2P4HLYMfdIV8y8XY8RffG3+3iG+H2R3Rthe6fRmqgPzHdfDupBDxoE64V+hc9DCx0I/qVPyL/TbDnJW7tG8jOzg68Zvz9yQbTm+jU52r9ch7MRTPP7WdaLepA1fRU9RT7IXc9qiO5WX6k2e5I+sUnd0lrr35zEL4h/N48qGSQ/v0DyjiQT9ONrtvF/1gxfM3Byyzfgyd/O9OH/rNHDpJF2Pmw8dQd5iHkOf6S9kgDkcm0Zf0ZZKNRrfJeQ97CrrDvJ6SbQ/5PDQT9hk/jKfYsfewEZYB5CzsJd1NAcyhpFnB9kI5Adfhj6kn7io+0T7uuR7nNL9Q5e25Esbaw2KXcSnCltKfrOUpoEaFusFLtrJXE29GUPqHbJAeeE78B2diHqGnZiiPMO+tbE9TesHjRXjzG8HSqmaSHamWIYP1hoxfMTlyoM6dLd9vUNX+IsD1LiHVTcwNhG5iLmJ+YB2hz1FXqg7fYc8UYekZ/+PjaZ9YdOCho2nraFHv3BLkOU0ZIn8o19Iy/zKPJPmUskhv8dv4X8RWWAeWo299NqAemO/KCvs2WG6sL8xD5MPbWRdhW3QU6RKjeS0jFF+f8re0X/YotDFK2SfTnSfY6dCfqlbLw0sdaNs/G/qRxnUg7Ubuh1zfayxWWt2VbroZ/o4fFUu+gP7ST9TBjpDGV943sWO4buGr/OqrvrWnbAFsd5MdlKKQT34vp1k+AKtL7bX3yXaM41y+Ttf5WJf+Y5NCxuIvWU8pqsPmEORZa6Ipdzt9Rt89FGaj10eY6FT9aU+tg2sB2gL9cY+QDtO/QuNtuFrYpP5nbT0Gb590AfJHoYN7SF57qAr1rTYtMvlBzA+dVUn5IZ5k+/Y/fBF6Z+i/WfxGH3PHIxMnKu6hT9LOybp+/Vq/zPCi7W2YH4hH/xX2sDY04ZzefyVeHdlLvM1gL70fIC+EWNgPXWEBIT11HPqTOaMR12n0DnqHfKbbF/B5tJefLrT9f1N7KXHIuZu8BL5saSjvLDbxNVi/YnsMW4xdxCzoV9jnos5ljgKaYaobTeIxjoj9POnwth0V2TvVG4DzF263l8JfxM6PkjUBbuT5m71wxyl30X2WHeXlnpKF5vLzsKDjsLzltYOC6UIk+n/v/n5+LmRJzEZ8P0a/7nYP9k5+rGR7cXVyh+9Q19vliKGjiM7L+v3WBfSNsaiM36h1iA7S1/GYAMsE2fIdsHL/ILc9tDigH5hfFjP41NQH2Q8xizqcYfm1rAxjLVc2dK1klvGMPnLyq+9+iL8Z8aHtc0/1LiJkr2Ic0wrxBtmFWKUsVaNdQtjqrctrvedsMuku9frV2hha6h3GhPNK8xzyMAB9kuQYfoJe0mbBkoXGQt0K+ZZ5CDGmzmSvtxDHRJ1IT1lUgfKw0enPOQi9ZkEJ9ZeSeYte6xxSIvM8hcfnPU+Zd4uZ153NJXuVZ3o4114BbrHFf+YNUAn6dimyqu1HMr6kq9msg37yO5c41hVxE+inREHY31D+ejqSGV4ndcs1GGAfMCI4YRtod11lT/6fbTyQL/Re8aa9v+qoHZRZy6RTMU65hCVgc+BTxbjyth8ozmJeCMX7fun7VTYquhb5tMYI+ImIQu0hTpAJ673wN/i3MXYFf3MmqOFMmfdhG+FPaAe9OfjuluHeAMX9aGPiEfTR6wD8OmZj0I/wwZGPIV8wo+I+Sri6tizm4k1On67fv6yzIWPTd4hd2H7aTt/Ux9foTi4/X5s32Hq46/vli/m9XH4AMgSF+niL79zRf8jw/Q5Nph1AXXBdlCXk5TvbpKpWGNThzc09lH3mA/xQ5k3qctG8gvRw9DrYvwo+RPOO8onzoJuH84dvc5rqezAN1pDhr4ztmH/sAvgTWQ/zym0I/JH5vl9geaG524r+6/Jx/bfk6VPV/EIYwXcaHuPmIPcJnjO0HiwT4GNoB0N1LcnioZe3m/dDBnHBjDfho9EfLaX8meNgi/EHIoc4hswt4euhMyQf/iO1LWe7DEyFzqLnxvydqX0HBvN+qiF+FaIRvwBexVyspUCQ6sl38gHZeL/M8/MVL3uVzr6E75aGqtYx9NnT+kv+y7UAVuFnsb8EfaCgx/wHqn2zVFdov+pe/QF9QwZpG3kxRwWcyo6BB99yDqAelMnyqFe4QdQF/JHj/i7nX3yQ9inEfNnmpOwP6Fn8ER94LtSctTbPljE2xpqHkIm6b8RuqJvo+5viablYelW5lKN/2XeT8HvIM+Lbs2Ycli706/kz14R+cccQH7YifBj2YOCDzlIsVD3bcwjtKet7APtGa9ysVHsJ90ufbtGCT6QT/uO+G7U9YX7JnwYZBz5QZYDx9qFeWiUrmXXZvmmvFjb9lE54b+8KmclfPvUhxpb2oLNos7oN+uNQ60rEROhbcRlaCf7VtiDiHPEeNBu8gkfgbUN68awT/QFPKzH4eGuPL4TD+f7WarreYqvhe+XYknS4bCXyW9WfYeL1uMa6ZXmdsrFzoU/E3aY+YLx2e3yPBfE3mn4h8kPlD+QYlL+HrGWsGvkzXjhNzJezO3Id4wFaZnnUqyr4AsQX40+QIZvts5y6ek06+UYn4r5jTgDe6RhGyiXvcCwibQj5IB6RYwVHXqIW4QLv1M+7aV85jxiVaOlw4wxNjdiN3fdVI4Zhi38WvNzSx4dq7Lx0/BJYg2eYjGyNdNkbCLGRb8R471WBbGmi9hupEPPkYfod67kS6vMvhpHYsLwIlffGv/b+oNvC28dxQRiLy3WvdS1qujhk4YvgbzG/BW+oJ56VRqjK2KY7fCdPH4RW3qeQ26O9SD7jNnulg181PBBQ96v1pz0meT6CelSH3Vw+MPEgUjDvhVprlO/U1fifWGv8LlirqJ+tTVRPujxjPmii3WKNvSXXSjGK05Tv62QnUJG+R7+FNdD7ndk/w8JIW2hX6LuEZ+PPf/ifk/E57Hpl7HvpzJYd6W9YNs92oYPGnM0PihYT0ZYP8YRY2HM8DPOUx9g4+JsAn4s9m6EZOacR7IMcfUkhux5kLpQD+Qp1t/Us7ECb+cXYofYcOw7PPQrfTRaEzG+xmPUyekYD+qAncEOFGPOx6pcxo9bwvTEydKhqhz+InPqJRrniG3Qd2tld/bmdW3yy5jjsIWxzqJfsSuXYCfYW9RmXcgt9UefY/6hbdiLFKPFBrjujLdUcL3txLZjC2lHaqfHL5294HEhXhfznT4PuY7YEvGyWHNPlTzEuBG/DIwOgPF/sKNRD+qNf08+NXlcsC76car9ceoRsVf2p8njRflh5EG7S9cphuH6k1/EAiJWhm2K+TH0agf77fxGubW8Dxu2m8V4xM+inad5nV7Nv2FHmklHVqpvInaHPsS+UegdMeeYr7GRzO/4dbGOHKx8w88fJRwxOcaA8mIOOYszMbatbxXij8wLj6r+e6ku8FI+7WLvmr1w2tRHaW/2mRrqxvmfiD8VY4d/lx3yDp+RPVr0DH76JOY3xuZg+Y2x7x/nGeBBZot+LXvk9AP6VvSRwubQN6+onnNVcNgMysPfjPMRP6mdL2kMhqpS3b2HiT0P/4HvdXTV1cG/t2Vb75DPprc6rbcZyEVxX4O9nDgLhK36y55yYW2LHUQ3iBljP1op3hC6yT4OeYW9oO20hdg6eh3zK2XT78hurGNin4S2cp0tv4Tf6I9oE+2j38JG8dttales8yJeEvuWYYebqo60GZmBd6XsSayVyKMej8bmXJL6vCib2FBk6O+x6fO1p9VAa+7kj6gtYQtirRRzOPRLNWcVz4dRx2flC0SsgotxYC5gDGK/OvasuegvPZkr6RU4xQCpH+tkyx4xQMaIdlQV5uzWiZIf+p0LWxw2GHkuxrHjLEb03wfSZfyLC9QfT0t+ztU1XNet+s6aI9Y9C8X/s/0HfPY0DxV+f0i+NbKCvoy134B9HCyZjZg08T7mOPxgbGz4whP0Q3O1gTFHvxi7KZK/WIczFvgx5AFPrH3ChvB3J/HHXgyyTd2xER1FRz+K8o8O1tX1iiZe2oPNSPFA/BKPE3Wj/szD+bkamQfZivl+d8la7HtzoSO0jzYwduHrnuv5JdaAE3Q9U+jr9wp7hDEunEHjnMFp2qvBLlFv1s2xNtxQV/j+f18L0vd17C9RbswF1CniOOhCfQlEzDfUi76kvott39P62Gv7BercNd7fZcxD97hqScCgE1OJuY/9sOSPyq8dJUMWsZv/T+f47XzJ2zk8mtPycaXwRO1HNnQ8JuI8zKXgQbbt1JE+KOZVhXMsqkuXkXlu5XfSwUv8lPQRH0aelnovIuYGPRmy9KH6IPZDoBV9m+aaiyPWXlzbpD6zfCADVXVWIOIhxP7o87CfsScTa9uXdZ2gNm0vv428OddK3swjfOdcTvRtxHL01r9UH/Q94gohP2GX0/rNMlnsJ+Y49kLjHBY6gr2NefBqZbLTXVqD2H8n36Eaf2Kxzxfi1KxBsWcxt9JG8ow2xpxAmburfXwvxmjDtif76nNv4MXq8MDskcX+GfLxd3mP85x6alSKt8DPeGO/8ZEo4yt16Isa5/PUhlhzHf541rOzdMV8FXsb6AF+3e7iIR/qSD/hCzFHxbgxhnHGjvZGf/Ib9o54XqzdoLHfkPxKx9j+vu/Js3P4nb3tWOdy1iRiXswLb9u+Rhwh/IbiGddtvTfCGEc+HKIurks466S3pyQZIX5ymNbzpMGHCP3GfsSamusL6eTximmH7U26pL4NH5T+u0/jfKP2QhgLfAfGjXG/zvlj+9P8UYjBIK/sT+MH3648NEylvo570+bifibnRehr7AR6ia0Pn01PN0w6l/rSdjXWouHfRnnMrcgBc2tqZ+HcK/0VfhprhSPtZ4ftD3knL71dpvSZ1wvUKeSWM3YpVqB1ZviQEVPBFt2i9VRVjRNl7W97Hev4GtrDoR3wzuKcg89M8NsSzi4IoyPUBf3eS4YVuaRf8C3Cj8KuRLzmP5qj2eMO3ypip9SJs0pnqL+LZxO4in4EuhdrE+wn+UAPH+AT1YmxiT0e1gFxfjLmCtIeI7uC3p1hvQs/dIXsasj1ChW2WAs2fI3I/zbtiZ2rjbCYB7GN+AWcHU/7fO7XudrvfVrXxeqTK9SmdBa+sNcW50UZf/oO3cJOoOMdVLeQuXSmQryxbxMxIPZHQp4iDhBrQcqEzryD/Mc5wmKcAzsTexPRV7Qn5KmH9jHjbFDsNYVPN1djuFVhnqGexNLDfz9fgVf40Ivr5Z/Mlq7G+pn2dFb7qFP4rJEPZcQcx+//V9iXwHk9fm1PezGYalIIU5Jpn2ratymthFYt2qZmaqqppmamXQstU6KkaFVRaZNpY6QUihCSkAyiEEIIIbzX9eu6/+/1PJ/nfR+fz4zTmfM997n3c59z7nMzzi+MY8YGEJ4C+2fQF4bDRkife7CXRfQanQtcR2NsTyg72FJj2bccOPhbWHPZx5zDIW6CfljKGGxc7DfKcI4+BHy7RrY99iV1/PWak+z/G3Ge4DrRGXUvg7kTfDXh/BbOyYwvJs8uOMtxLMyBDYJrAcc59ziWzzUt+H65VoWzJOWlLZK6OdcfZBiOmga7Ns/Y7PcvMLbDGsmy2b5sq3C+9vND0NG4B3McB/9IsLvy+6sw7pkWL+iIwRbFuswBnnsNbQ8cd1zz+eM6/ynpY/Sl8Cf0O21iwS/IvZ37Vehj4qhzc59lneg3OooxMBmLc4g7YDdy3AT7Ev02QQ8nD/YJ95bS+OBmjL1o9M1CDK6wT4b4vnlYI8O8ug12oICnT4jjiGOLeyj76UPoQuyn+bjoEWKaw3wMbRrszuwbysZ4XPLherGZT7FqnIY43PA95WZ9wli5EcrLeFyqiKR5PFYgarLg1Xh7fhrgSCp1vJOXI3wvrOfzBI/5GzYzwJF0ze8XiFoh/Bfgs1rwVj4nIfhRDIQN4nkt6HOFj/qgQNROwf+i3DzRfPsv7l0Ivw08Dwi+F219SPBJ8DkseCRyfR4RfBblHpNsn6Lck4LHYXCcBcwLWO+BZ5D5Ift2MeS5KPj4P5cMV5Gn38CzcIBh7C4OmHxOgn85wJHUb2jPONFsgfyVBC8HHC/4LtBUF/wmZEgQ3B6yJQqeC54NxbMp2j9J+A1o/9aCd0O29oK7gX9HwQ+BZyfBMahXN8E7APcUfCdo+giehjYcIHgnykoJNJAzTfAi0KQLroSBnwE4koof5U4W/l98O01wHQywGYK/gZw5gp8Az3mCX8C3CwSPhDyLBE/BGFiiug+wcotgvK0W/h7IsEHwvSg3VzQZ1obTOa4E34f2zBP9ZcDvF/4ZG5+VINsB4VuAzyHBt6LNQ1u9jLocFvw+eB5ROwzhExXCt7XxvwaynRR+EvgfVkrVe1H306FNwPOM4KdQ97OScwb4nBf+GuAvCL8U7cCg+sjThCg3GjBpeoJPjOAf0D6xguv/jGShggeDZ3nBL4AmDjB53vlTgah48WyAcZIomgUY5w1FMxcyJwk/Fv0yXs/TDAO+tfBJnLNKeV0JPNuL58d87lB8ElBuH+HfAp8wbrehrdLEpzLaKl1wY4430Re18fkO2n+yePYGzQzBD6FN5unbe9AmCwQ/a2tOE7TholB3m/tLQL9C9N8a/SDAq4XviHLXAuZ10y9Anyd8S9Q3jLeikH+P8O9Atv2SfzDa87DwpfmcgWRYgX45LnxTjM8Ax6Hv8gU/AJ4nBbfHGnha374P/meFvwl8zgnugDFzXjTvgeai8F3RR2G9rc4D2bPqX65pgl8FfYzgebQ7Ao6sFZCtvODRkD9OcCb6pZLgEig3Xt9+CDhB8AjI1lA0WahLeL7qS/BpKvw2lJsk+tXoo/aA2W6rMQe7ieZKG3sbwL+n6J+ADANEkww+KYI749s0wYcgf1hLb+TaIvwc4DMEPwI+WYIfxzo2XvB94Dk5yI8xME2yLQJNwD+Ntp0nuBHGwwLBvVDfRYIXgM8SwVW4BwluC/xqwa9CtrCG9wFNWAN3Qba1oikJnhsE7wS8RfB0roeCK2Bs7xTcDnBYZ26FnGFtGQX580TzO8bzHtVrE/gcEv5erl2CJ9t4OMs1UPQfow3zhc/lWBV8Fco9LfgH0J8RfUHU97zgo6hjWJMXgQ8dq5GnlCBDYcFLQV9c8LOgiRY8HzxjAEd0BtCXEz4XPMO+1hd1LC/8R6CPA8xyN6Cdqwv/PsZ/GGMxplds5RgW/wrYFxrq294Yn60F38A9V3xi8W2YIzPRzt2Efwn0PUV/FPKnCD8G/NPE/2/IH9aHRaDPEH068JNF35xjDzB1j4ngE+bCFMi2QDTPgVnQ5XpCttCef2KuLRLPHejrsO71B361aCbYntIb7bZW+I3gs0HwRNvjDvApKPG8m2NJNIfQnoGmHOj3CJ+OsbFfcLbxTLP5+yHqdUD4mlgDDwl+3cbDLIzDw4JTMMePCC4K/DHBQ9G2xyXbnzanLoMMp0VzG/dftf8wwOeEfxky/Gf8oy/Oi08GDzR5l+BRGJPRgCPPJqLusYAjOi3asJzwpTAG4oRvZGvgv7anXIc5Ukk0P3D91Le/gU+CynoR3wbdZj7kr6RU/yXRPk317X2QIUnwALRVa8H9qCsKrsOc+OJzM+TvKP6FUFZPwWVAE/bBZ1Buir59DX0a9rjvuV8L3wRtlS64MWNtBM+yeTEE34a5eQjyZ4nmI9CEdfJd3ltWud+gHcarHd6CnNMkWzfu7/r2U84X8XwU/BeIZhLmwgrBC3juEJ8HAOcKzuZZQ/BwwPsFb0Ddg473DHgeEp+b0M7HVO5E9OlxwYsB5wvegnFyUvSvoKyz4vkz1zrRFAf+AmDO35bgWfz5S/Q1MYZjAUfWTLRJOcE/4Y9hrRjPtTfMI7R5mOMPok3Ki/5y6nXi+QFoqgufifGWIPh14EM7J0CeRNE/Av5Jomlm/bKMOp7wFVBWe8GV0W4dAUeePUWfdhN+EWToKXgZ+PcRzR7QpwjuiLGaLpobqOMBpvv/AT4pJXx19GNok9mQeZ7gHMomOI17q+D7Mc7n6XmvFahvaJ/u6JclqmMb7MvhLHmUa7XaIZ56nWR7DPXdIp7pkCFXcD3wCXvBoxh7O4V/DjLkCf4EddwjPg0hzwHhx9i8e4+6h8bDqyj3EGgiOd4AHxf8HdrkjL79FXzOSv67IcMFwR1tXf0FPMP+NQHjtvBuPUuK9owBHNFv0b9hDeRT6bGied/OuTdC/jjgI08hcC0SnIT+ShCfLaBPFNwd+IaC94O+qehfwHgOddyLerUWfjD6saPoK6Ftg951hPkvhD8K+m6SrRT6a4DgBuAZ9rseqEs68JF8kOAzWTS9wT+sOV/y7CmeM/kchmhGU/8UvhD4r5BspUG/VvjN6N8gTyGeN/Xth3bOHYv23ymafJ4xxWcn1xPBHTCWwrq9HnwOiX4921Bjbwvwh4W/Dv0YxvkN+PaI8F8BPib4Na4/gjdRRxT/H7gWCT/OzlNHIc9JyfOp6c8bMTbOiH6SrfO3YF06K/xos/NMQpufE/4D1Pe82qQN98QX9Nye7WV90M7RwEfGP/iHcsvb2bYeyooRzafou1jB47AYlAMcecIDdYkT/knufYJ7QbZ4lZvI9hS+ItohrBsFUN+wpi0Fn4ai6Wtn84WQJ4zJdhgPof3/MH3pOGRrqm+38BytcfsWyg31rWx7bnW0eZLkvw34sA7/Aj6h3K9trtXEGGivumzj+Ne33TC/Ql/PQVlxeNaf+Hboiz6iGczzjmTbzj1RT9QdMdnepj1HNPlon3TBd6C/whyJRV+Ec+tMrCEZoIk8ZQgD8TTRf4FvZwiuhfNjjmQYAZkXSP7LIMMK0exAuasFnwHPsN7eh3LXCr8ePDcILgQ+W8RnC+jzBGcAPqCynuQeLfoHOEcEZ9iZ9Cq0yTHJPx1wqNcKyHZa9Kvx7RnB84APY+8K4M8K3g986PfZOPSfkwwnGPCqdaan6Z97uD5L5tFch/dIr0B/RQv+gvYZwBHdEgEhYT8qRVsi8JR5JWjiRdMc/IM+0B/46uJzF5PYq9xo4BOBZ7nP0Fajb4uabe0NjLfW+nYUcjF0FM3nKLeT8GXM1pphZ8AOtB+KfhXx4rkOPPvo29IoN0U0XSFPmvAf2P6yHeM/zJGLPOOovm15VlJZt/KMI3xFjivV60+UtUI84/Ft0A9/sXPTWO7joimI8bxF8lxj9sBj4JMrmkNctwW/QVuNyrqcY0zfvoayjgh/kGus8Pmcy6GdsQedFs1yniOEL86zg/hPQrkXBd+M8VB4r55LBn004MjY43kWMOt+DH0RJ3xvjO1Kgtuj3HA+fQH08eLzEOSfp+cUF6NNEkSfg3GYKJqO3KMFP2ZnkFN2Dr0Da05rfTsb87e94OXU9wCzjpmg6Sn8eLRJH8EnjeZryB/W0rFYzweo3Bd5FgvjFnUJdfwEfs000fRFuRnCDzdbfSWUFeAitOeIfwc7x70DmnBuvZxnDfH5mWNGbXsVvg368C/4NoztqzlOgj4DHSlH8nxtusRRVG6BeFZCXYIuuhc0i4SvRh1D8F/ooxVqk6m02wj/Gfol2H/aY98Julx1jL1gV6yBcRVsI9mg3yI+FTG288TnNT6tKDknQZ6wVhQ3W+KzkOGAaCZg7AUd5ozZ/2txXIlnNso9Ivom1DeEr2DjqgzGW77a83uumcJP5fjXt0+ZntMXZQXfSjzkvyD6p0wPaYQ+uqhvN0Gewi9KDwdNccGf2fnoZp6vw7zAehhsILm0Y2AfjKQAtD2xINo5Gnwiz5mhTWIBU/7XAFcCzLbdzrtfwR4L+jDX/qD9WePkC/OR3W7j/DXQBNvFs2ifBJVVDnBDlRWDtg12p/qoY9g7LoMM7SXDMbRb8N0M4NlKdb8G34a6f8lzlvA30fYefCumgzWhj0n06+nLEH0n08Guoz1K9Bk2ZmrZ+tAa9R2guqzBOEyTnPm0l4rnL2Z/vp6+ReEfMF20icl2NWQO5/cZtOeLf3Xa88U/ivqn8IMhf9DJB6IdlojmV5QbxtVy+nRU7ofUKwT3tW//5N6qun8MeItoCpi9tCXaPzeMN/oCwpyinV/yPAT+e0K/AA5zqrPV9zeeBUT/ONqko57YywPPMN/f5TgX/BbPg6L/jP4mjbeD+DY8s94M8BGVWw40xwQvMFvxQZPhG9sfe5h/Z6zZ0PJQYNDNrkabh312sZ0fmxnPGuw7tXljtEnQ7XNAf1zy3A58vuryOdr5dGhnngGDvxIynBF+Fdfk4C/jmVffvsA9VH39MtotnKcSGHy3T+stbbZaB6IhW2HhE0FTXHAn7h3q36cwhqOBJ8808981xbgKffE5bZiq7zLznTUwv9L1tFWqHUaAfzmV9TfPoWq3j+g3Ef4z6qiCE9CeYR9pyPUHeK4PN9lZPhv7bGKgx1hqCJht0h30SYI/4R4k+hTq86rL05C/vepYEjIEmht5vlBZk8ynUJXjE4GfEduX2e2Hm71iMtonzLXTPJeFdQPfpkjOHqBJU7m78G1on67oxyzhvwA+7LMnAAcd9WHIOU18RpkMjbFfzBA+G7pEjuo+iuuDeC6zuV+W53rhv6QNUPR53BsEv2J9lAk+eaJ/H/KE82M3szUd4R6qb98GTVi3b7fzdTXQHAYNbVnDIMNp0T+Dtjor+ReA/pzw8yBDWId/os1ZcDrPEZLnerRn0F0P49vC++WPABwt+B/3ffAcDXxE30a/lBPc1Wxos+kTEb4+dSe1WxHaD4Fnue+ZrriYZ2TJ0NNkfsfswD9xHEqGAuiv6pLtKM8mKutPxjaI/1k7C6y0NWE3zyn69gLoO4p+n82L8cD3FH4nxkmK+JdFuWmCl9KPLLiIne+uMz9CKsoNa8JF2nM0VoebvjGUZ2HJswbljhe8zmykK1DWNJXVEf0+QzTP0ycofArqtUAyH0ebrBD+VttfnmKcg2gG8ywsONb8Wc9Tb5Sct+PbsHePA888lbuBtibV8SL6d7/weyDnIZW7H3zCul3D7AAHqAeKppjpD0moV7B7zAf/EDu0hfuL6JeD5xHJXJnrv+AnsP+eEc3j5u+bg3F4NpSFcX5OcH/z45w0f9k4yH9eNLsBXxD8NH3cgtPMn96OwU4vSccAXFjwhxazNNXasD79jKChzOtMd72OZ3bguWaeA1xJfP4wH+5+87VNoI4BGrb59dQDATOt9GuoS1gHsjm2RdPA1tiVkDOM4ZdwBukmea4H/QDBW80HdxL80yVPBYuTOQ188D/+jrGXobIaMq5b9M1QVvBZx0G2oJN8bnbOI7bOvwz+kyXDbtAHn91PjBMTzzo8hwaZMa6WCJ+N/loheAfqslryPMT1WfBVmC+5ormPNnbBxTCW8kRTBPT7xf9RyH9YNBt5Thd+KfD5wr/JGDB9G2tn5xy0yRnh+Vb0OdGvNt/KCozbsNZ1tr1+I3UzrSeH6U/Xt9egX4JNex/oLwgfg7q31tPPj0Oeiyq3JWiCT3AQdR7xzEEbFn5Zvl2zpy2njqe+KETdRjR/4G5FtODKkCfw7Mm1TutYN9QlRjTjUPdYwJThT8gwo6r0QLRheeDZhu2t/T8HYdj364N/aIezpsemoc3jxb8k5m91wTVgJ0wQzxn41VTlVkSftha+JmOBwvoDGToJnwy4j+A4tFsaYMbebGLsmfh/TXuReHa1uI5NZuseyPO76M/a2edTrFdBZ34IbTJPfLbxiXzRdze/wF7Gb4imN22boqmLtg06TBWzld0EmrWiKYT1bYO+rYZ9Klf4kfSrCv8LbZXCj+G6LXw0z55q53zYSQ4JP5rndME90P5hHJa1M+kDZsv62/bxjpDtuMrqaHbO2oDzhc8E/5Pi344xe8EnxVgO9ctK+gJE08f8YrNRr4vAc838E/0Y/UrJyBubg2nrAxzxXaKPgr5XF/iwpr1m+nwf7vWgJ/8r0D4DAEfWZ/BMF/wH8MFHGcs9WvQt6TsWTQWL86ln+kY6v1VZ99tZeIbp0rdxbIjnJ1iTF4nnEsqsujyOMbBWcDTaLeyb6TyHCj+Oe7r4nKDtS23e1vr3O5S1UzRbzBZ0nr5FlXuM+7t4fmJrL55E+49uswvtc1j0OfQtCk7hWUzfTqKvU2NjIeQJZ6uGGBtnRLOAuqvg2sCfE9wFdTwPmP2bgLEa7Jl1MLYLH9DeBERxwWkW69vW4lXyGEcBmojewv4TnIU1JNgWfrR53QL05UHDunTAGhL6NANjO9hVfsGvePG5mzE8gr+2eLPV1I1xqSZiE6ZeKpputg/+Qz+O8O1o09O3nzDGQ76ALoxVkzxlaLdRfR+iHUz98g3XmRAHgv23p2hSGYejtWU1feXiswI80wS/iD7KEn1txkVInptR92miuQ3fzgPMc8dXZpNJw5gM4+oLfBTafxptpOJZE+0WzjKtIc8G4euAf9DTnrOzyQWLExsPObdIhl9dZ0B9g1+yE89WojlPm6Ha4QzHg+ZIHPo3rMkPguaAZGiAbw+pvhewxx0R/gD64pjgqzCWjgu+iJyO+YJzGY+hcmdb/FuGxUUPp/4p+pko9wL8a5H68oymcrejrS6I5gHGuoRzMW2V4l/PYmY+oA55UHZp/IoGHNlTzCZ5B9o2VvhhFoeQZ3vTCdO7LkKe8qJPZryl+D+GORL25SfprxfNKYyHBMFdzSbZw+RPhPwNRXMPZAi2u60WE1vD4uHz0e9JKvdZxoQIHgqZw3l5FtqzvfAjzHa9kP76EIuOsdERNGy3kRYv+isQwZ9ygbZN8cmjf0FwA67/+na/2ds7o77pwHMtOgiek1WvKsDPEH0fi8dYjvGzQDyPQp7Q5tmme5zGt4vEpy723BWC/+bZQW24CN+uFf9p4Jkrnp9wrol+Dfd04efRxyR4Be+zieYvW8Mncd0Wz2SLzbuJa3goi2u4+DTEWArr3hzqtOJZEN+eE1zSbM5VsT6HmNUxdnbrj767IJ530JautprDca5y64Gm+Ks6h4ImWvBjtBMK/sB8js+iTWKF74VxFfrrVovbLwn+5UBDOW+kPV/0u9C2lQBHfMEoK0H4PIs7mkr7mPANeOdH9BfQR+Es1on+LNG8bn03hfZtje099L9LhrpAdBLcBm3VUzyb0zaodfVBm1PX0fYl/p+DZ4hp/AntEHSbJXa/5qjZ9otSpxX/TNQ3S+UWBp9whh3I8SyaWMiZA5jj/GXqoqKvbncl3gCfYCuoy7gvwcPQhkHH+x3yBP2qJ9pnteR/g2cH7Ud5tBUL/py2NdHUgTwbVO7NtCuqvqcsHv459GmuZH4PNCEmeQPaLZw1Jpkv4Gbw3yP+6yD/fn27w/TYWoyTEX4p54Jk6Gs2wyza4oRfh7qHc9DP1Ff17V3Ub4UfTNuy8BV4qQsXkAkn0JarckuZrbKOxS9t5/gHfeSsyvEveCPjTwSXtHFSlv594Hl+WYlLfdVFk2Q+0LUc58Jfj3mdKHn2Qc4kwXUsHvha0HQUfhvarafg5hyT4vM17eri39zicGZDzjTRjKSNWn2XYzGQH5rvvgt13XA3weyiDTFH0sVnLMZShuBG9L0KXsJ9R3zyGMcl/I1mkxyGcsP+MoljJsQiYt6FNeouswmvQH0nq75rUVaOeN7Ae0aCZ0Hm4COrZHbLcWZzex99t0D0Lbnmi+fzrGPQnWi3kd5bEm2+WjS54B/i4n43W+gO0Ic9+mOeg0JMBcoNfb3U1sMFtl69ZGeicRaPfZPFLK2zM1oc5NkieaoDn6e67GGcj+p4wPjP4ln46ktz5Gm7u1EXMof+/Zp7lvjczphtwW/h7HNAZeWgr48IfxDtdgwweX7HGAnhH0bdT4r+asYvaY53s/POj+ZXfZvtrG+vBM9zgLnWbTBbXKLZ9+6nPSTEjZhfuDxkYFL6iF+VZ43Q16hLYeHXoqzigvdyLgseZrbfahaz+qnF+9XEfIwBfSSuGG1VTt92QTsHvfdJu9t1OepSHjSRGDmL5bjM4+Iwj+LFZwB9rBpLLc2/M5rxPyq3Iu+7Cb7GxlIBnq+lr14N+qagYRu+ZP6jfejHjvp2JOOlNT6fp685tAn3BsnclLE9wo+yeO9Ys73PtRj1XaTXXtPQ2mo649DEJ4bxyRoD+yBbumju5DiUPE3Rhlmif8X2rIG8d6OyUulrFs2jtE9K5q/Nrvscx4P0q4nQE4It6H0QhvW5Dfs3nF+4z4pnCa4ngkeYnXwXdUjhv7V7jifNb4upGbVI9VqNfl8h+l+p14W2tXPrnRb/f9L23PsZ+6F+/AljaY++TUU7HBLPuzGGg26z0nxhlcDzsGToBviY4EFcQ/TtBp6VxPM72iTVd+VRgbPCP2Dxhz1oe9e35SyGZIbFOn7JeCeV9Sjn3evaF0w/b2/66sd2vljM+2igj8TRoc3DXdcxtMMDT/pl4FlePJvxXg9g7q25FldZEPVKFP13dj7dbXF6s8C/qfgMNx/044yjE/5mzM3WgpfSryrZzqCsbuJ/Hdqqj/BFzIc4xNbtt6nvib4AY5zEswX4ZAlfkXfNxOc46HMAs99LWQx5PeCXiGYT6NeKz3kbV3dA/hDvvZt2qBAfgjqGO92FaJvSt89bbOqDGFdbhJ9v864s5k6u5HzQ4i520fckfB0g9gu+mv4m8VlOW73gqbw7pno1BT7clb4X8p8UzSLQnFYdq5tvbgrgcDdzn50Bv+d+IfpY9MVFwbV5z+INnRN5V1rz91XzCa7iewygocwf2T7+A/jH6tt6WCfD3YdH6H8J96TsznUn+kQE32G+75vNjlGJ9zjE8x36FjVnq5md9hmObdHswEehrAfMB1qAsQSS+W2L9f2C9mSVO5Ex0qBhOww1m2cD8E8U//Zon4aiuYc2XpXVD/VtLfzPFiM3Ct920rdzObaF78G4AtEfps4cxgYEHCD6noxVlsxrLeZwNvAhTi+G+qToXwTPDNEvpe1L/B81f8EFi3t5HXIG/bA6YwbEJxtJOnPEZyzjNwRfTz1f9FNR39CPhdG2S1TWMMaUCr7T4swfQDvnis/rZlcfYmeuknYe/MHsOfMYe6yx1IdnqADzDp1krmFn1R+55kuGXnbmeoh3lCRDA+pj+nY+5AyxTD/YPayTvEcgmjG0m4nnNvaXZL4FNOH8vgzj57RoBptuOY1zTeWWtxiteig35Ge4hjF+Kquq2ZY/sXt/2+kLE5/tjG148xKcYuflaYydBj6yH5ktOt7uj6zEmIwRzfcWIzEadQn7eBbGQCxoIjZw8Al3SK/GWhEnfH3IUx1w5H43acRzqPl06vOelOTca3rUX+az6EGbsHiWod8nxIpQDxH8K2i6gYZr4Ifox6Dzv8k5om9P0WchGc5yjgh+kLGsoinMeDnBNzBeWjxT6WMVvg33gnAOtRiwZRarXNTOgDsYF6c6vm/xYyk8DwZdy+zGMxifJtm2YO7kCR5vdyWesdjU1xmzKv5toLccEP0r3C8EF2dfh3M0dSrh7zIfzWL6fFXHY2Yz2Wj99STaIV80Bc3Wer2d77LNfjvH7DYf0PYbbGIWQ76O9gTJv9nOku+ZHa+F7S9v2t2WshZHdx3jQ+qpT2lzFs9U5nyQzIWM/mHLb1AKdQ+xhYM45pHQLmLfsDPRKoyrGOGfRDuXBxyJQ7M7tncylk/jtiBzmIhmEGPS9G1T4BOEX4h1JtgeF1K/Ek0RzKMkwJTnMP7YXvAws5MncY0VnxOm7yVgrQj22JGcF+L5NuQPvpgudvdzAGgGiOYmlJsu+Bxoxgv+GPAMlfW0rcPL0Q45whfmfR/JeR1jqpE0LuJT4L1C0STT7yN4BmNvAHN+DbTxX4Vn8CCzxQp2R1l5+ravxX3diPG2R/i6tqcUYLyo+NSlvSvUkXGVoi9jeUL625qzCXLmi+ZmsyG8SN1efAba/ZcclHv+Gtk8La5ghJ1/K+Lbs2qflux3rb2beadVZY0wXTfB7Dw7UfcLoqmEtr0ouD/kj3pLfi7zCdZHG4Z9Z7LduX6cvmPRn6LvQDS9IE854CP9Qp+g4Ods/K83W1lDzjXJecjsD8/TTxZ8c7zHrTVnIs8R4BmJgUdbxYt/jt3DLWj3mAbxbKJvD6Cs6kE2i5GYCfqgT7agbqm5X4f+GtDTfzcF37bXt4epY4SYE7MDvIpfHdUmD6MuYY8YwT1CZ/+uaP+e4nMb6tVHcAfIP0D1Gs9YTcHXWl6gya6H2xm/L/dclbuWZ23BswHnCG5B/Vzt/Bbnkcp9FvUNfNJtre6PMRB8T4/wXCM+d1HvEjzObDuX2x2BuXaWv5b+F5V1BWh2ql6Vzf5wm9n832GeFtEvNH2po90leZRx9aJ51PLDTKSPUvzvYcyn4I6gD2eiZNPfruX9cfHZZe0wmf53zbX2jMcQzXvcs8RzI89Bgu9FW4V1rJbZQq/iXqlvpzCWSXB/xmbo24J212CH2UYmW86KJ82286bF/48C/4viecbuHT9k8diX0X6OhL/sr9Zm28ni+VFtstnOOFU4R0TzGOcOkllGbB12v68O89UE/mYf3gx8NMqKrHV2r3OAnRNfxvyNAQ3r3th0m+Jmb9lHm7xoUmzt+sTuyN9puYB+tpwDDRirJvw3tD+o7i/amfSM3Rti0rjqornWbFwrMU8bqi5P00Yne0gp5nYQfjDjEPTtGltvXze7wY2Wu+ZmO5sXN5tzZcYcis89zEkiuDjqEvT2Np5nA/Qpap8y9LEC5hpV22wy26l/iqYn4xAEv2C5aBrbOTEL9ItEM5V3+gS3M/oLwK8VfgDacIva4XOz0S2yvl5IG6z6qxl9T/q2iq0DHRjrqHm32XTUdtz31Q7Pgv6A4D2WY20x70xpP51o/qBnOddUrzcYW6h7RldinQz0XejLkJyvWA6x75gDSmUVtDxvZWyOR3NPV91nQv6TgqvaneVJ2CNOi88UxucEGu6haodlkD+sRWNQ7kXRFLK40970Fwi+k3e637mk55ygbwtwZI+2+vahn0v4ihb3tdziE+IYly6aIrRpCL6atgvAlG0abZ6CX7L2eYo6p+hngCZRNIm2H71k4/wNyNxUNLdClwjr2060T2vg2T6vA/6PTdju2s8HvpO+nUGfkcqtxJgctcM5i1FpRz1WfbSWsT3i35lx0eKzkHfEBH9m83eFnbmSLKdZEsZhjvgU474pGTK5J4pPOdorgt+ZcTW6g9YJ364W/QDG9gguavrbG7x7KPwptP8Wwd9C5nCH+pzlVrrX/LyzQZ8r+heYFy7kwrK+OGZ+tM2WIyID43anvp1KmVXHomZ3/YvzDvjijLuwGK2ZgE+HMYM6nhF8yPzdH1t81yjqxmqrSdRRBRdG3S/q29/sXL+RuugR3cGnLVR1H87YWuAj9Gbf20pdFHjKP8ZyCf5mOTqe4Vqkb58H/5Br7gNrn/N2X+Mbixl+jXqs5MlnjEe462T2tMM8l4lmmsUt/4Kyqku2JoxnA0w7xmrTtTLsvsxOnusUt1nD7JO7wbOj5K+CNg9nvZ4c8+LfwPJj9OYdcMmTa7FV9bCvhX32KdCHWOjR9m0ju8N7P9ao4AesShuIyrradLZ6lh/yU9heMkTzuOk2q3iXUPh3zC7ajD4d4YvRxqU63oK1YonwLRlrJPnvYf4r0czl3BFcymJll9pcftfiOg5Bzi1qkyYod6f4/ws7837hH7WYmccZzyn+HXhXUXXpZ/E/tzAPm2jm8Q6g4LsZCye4mN1rWMT8VyqrBe+5CD+E50HJU4J2SOmfa01PeM/q0gjyBP2tvNm3H8M6cFZ8Hma+U/XvePqGJM9O2vckw1MWgzeLuRHevbSu1jcd4GbalpEQORIzwNgh0ET84MwfBZhl3QL6SoAjbWj70WbUq7poWtGmLXgm88+IfrnZZtswjkj4n1GvYNvsaP6s9cwLJz7fAx/m6XHTIR+h7oqk5ZH9kbmA8IhLZF3lnVnxr4AxliY+HXjPRfPxguX4esNs12+Yfft5KzeD/lDxfIA+ULVPK+7dQdey+Kvdds6daPO6L+OixaeL2Ycng2eOeFay+ywvMP5Z9HPt/v691OXUj68yv0fIhYi+WKv6/gSaXPFsbLnIltBPIZpVtLdr/EyhXUv4UTxbCX7B9LEveSddPCvaGbwfYw+Er2dnllcYFyT5WzFuX3KetpilsvQjS4aHmStJddwMOc9Ihq/Nvvcxz1biuQdz5KLKLUGn71Hd02QsqOA/7P77PrsrvYq2a9BE7LFo/7BPZXNc6ds43ssQfLmdr2sxH46+rWj+95rmTy/M/MOi2WZ6eyfauoGP5LDlfiF4CueLynqR80H4v5kjTnz6o9w+gtvzXhJgjoGSjClS/77OvF76doHtC78zV2S428IYHn27ye7UPGg+jonU21VWNfO7/QzG4bxQjr540bRjDA9g7n2pjKcKsZ12B7Ob6XKp3Pf17eP0s0vmipzLwo+2WLJhdn+tmeGX8j611s8ujNVXGyZaLrLp1HPEv4DJM5T2JZXV23TmTXZOqcA1XzTXUsfT+jCWuW5U1gCUmy/+GyxmabzlQHjN7hdkWQ7MXrRpi8+NkPOc4AmMC1W5T9hcG8LzvubCt7xPLTnncgyLfjxp8LA++dTmexBqn1l2JlrHOQKaiM+OdYRNMrKfWmxAlLXh5bz3Kp6TOUcAs69jGSevvewO1DfcuR7NthX9Uur20mdesXvli3nWkAylGXcHmPjpppt1x7qdJPwm1KWj6N+kPhO+NZvhMMbSCD/PcvTdA3xP4R813SnebLOplhs53e6AvAOdp49kaMU4NLVJGe4vwre2/KXPQc4slfWc+X0O2DlrPA7049U+P0DOaeJzl92Hepr+X9EXtLuZ69GG80RfG20VdLnnba3uYfbJYqYD1GeMsdq2En0lOkeUMF20iNlLX7G4zUN29k9g3IvgXHwUzt0v2RhIhD6wRO3wOfMACE6j303yXG1xBUMtb9hsy33RB2Ngtep7u9myhtNGIZ5NMP6DbWqr2T32cE0L8Us2jyZY7FYP5iZSXzTm+iOef6BN9qjcSnYvqZDZyq6h70z0t6AfDwu+iT4y8axqNrSx8IceF8+hzEku+lHc70RfmvYE4YsZn1VmN+hicSnj6FMQTVfmChD/Oyzn0jOgCee+81hzih+7RDMX/GMFL7dYxNLWj49YfsXWtLmJfq3lUphqMcNtzVazxuKv6ltuq6amq/cCTXXwjPgZqZsBJv5HyNxQ+NdpZxB+qq35jdGGYa3INH37Gt5zlJzlzb7Xwew8c+zufG2saZ1E35B2e5V7L+O6AXOv/Ij3eSXDVsbTiuZFi7/6jOcg8ZnIOCLR9+NeKfoM3KlZJHi+2ZOfZ2y56FuD/2rRYBpFrRV+kL1f0Jb32lTWaosTeJSPaahew6yP2jNfivq0juVSOEn/jvqrL20F4pmIsRTO+zdYTFdlCHRAsp2gDVPwUPqUxbMCdUWNpTZozxCXWB9wyDv3M+eLyvoN/I+rnR+yfJKj7C78Nzw3qawP8e1ZwXXB81yAwSecU5ozb4zqtZtnTOmlnXjWU73K0g8rOT9COwT9cJ7FBD5msWRFmeNdfVHFdMsmnHeqyxDAxd+/VJd7LHfT7cwpB3zELs18yFoTnuEYBT5ivwK+KR4QidhhLKYimWdqfTuafm21SUmzzdaysdGad+FFX958YQtpP5fOvJi6qMrNsnj4r8wW9BRkThSftdRXAbOO35odtYDtTe9Qx5AM8bx/rW+nQ/7itS+VddxsQePBv71oZjIXiuAY5sdTG+41P0sv3kWSzJwYaYJ78G6y+qKs+VmqmZ+rH8/U2u/6WW7q+7gOS4epAJ4ZkuER5k5RfXNt/Txo+QcW2l3vO3gnWjKXtpwt8yxfWRnGxkh/+5u5KST/Ros5eR80S0LfMUZC8JugXy36xebnqmy2sv6oY4gt7253b3dR/9c63J73DcVzG+suffUf6DlbxP8X2vBVl2csRvEG83P9bGfSPvTN6dvJFkNyP8+SwlfkGzEqdwPm2nG17QGeSTVPW1HvlS/1OHPoqdxVjIkSfT/69AWXZtxaXeUEMx9iQ+amEM115pu+0u7ZbWK86weyyVCnFTyB+iRg8pnJWD7hb7M8dX8xvwrwETn5Zrvo5zFHkOCt9CmL5hGuseITj3Wpp+DFFgOzmfdHRP8a8ywpr+AHjNkTzxSMqxDfeD99AdJzFjGuVd9+b/cgbrY7lYPQ/lmiacy4PvEcSFu09L0/7R5rOsez5NwK+ecJ3mQx+d3Nb/Ur79lpbKzm/X2t8xu49mp9TqMfNsRO2/i5m7nFxP8Rfis5f7W42b8sN2wu81dI/o/wK1fwHXZ2uI35K4TPt7iUqoy3DPk3KLPKbWbr6jc25vfzbqBonrS3mSqCJtgtVzDnsGRO43srav91mI/Hha/Me7ji8zx9zdJvO1tM1BE7c43kfqdvy6B/zwr+ink+Nb/ied9Q+FvMR/8T9ynV/SDnguA041/Z9tn78G1hPMob0ZeYD1NwaYsfe5r3KYR/hvsj4EjuR7PvrWX8jNa3vbyvqj1lo9mFqnMPEs+vzM7cjXde1G7F7T7UBJ4BRZ9L2wLKjZx/LXbioO3FX9rdlp/NPtPP4iEnWG6uI/RzqS4pNkdiLF/9U8x5qzmym3f6JMOPNjcncO6rfW63O2iTOfeF38j4EH171vbBooxjlwy17V2hGrxLLvou7HfR7GeMruCRloO3s73/km/nmo30kYnPIca669sinBeCc+wO/tvMJyP8Iuzvi/TtRXuj4TfGK4Y87ZA/2GRehMxLRP+lxbieY447tcMawBsE77O2uhr12gk8/d0Pc+8QzT20q0ueG9GnIR67rPmSTtDeKJplPE/p2zmsu8bku8xlJNmWmC+goflretp55DHevdVZrKD5E1tzDQlvBFjcRTfeZ5cMffhu1HG9uwSakPMtGvWKBp57azHOKcCs72cW83krxyTwEb+q5U1ty3u1miPLbsA4FM1Sq0ss7cCy7b9r98RbmT55hcU1rUKu6dbgE4mvZgytZO7EXEaCO2OfHSCauhbjcYvZFmaazXw5xkywFayi/q9v7+bdvRCrZjbn2ow/1PmiLvU60Vc1G/jbNl9qWd77lWY3aGK+mPlotzBOpvPtA/FsxByS6q/dGCdB7y3IOQUa2rUut1wizTAfZ+jbBLOpTqf9X+OqL/PziD4ab3DniH4r55FgPnIY9OTpZg8cYP6mATwfaf9dZrnNnwCfBeJTwc6tO+lTE34gfdbqr6YWj1GdMV0ab9Usv8Q/nGuiT4Rs+wU/YWf22par7XfOR9FU53lNY++86bdjmZNWY7ii5eSvgXJPij6FeU4k81fgH+yuLfiWitbtVqZDbrWcFXw8M7RhDd4xCbYXuy9Tku+AqL6P8T6UZP4afR3GCR+tLI4HZiN2GOakFdwKa1ewR5W29/saWD7kTOqHoI/ctbH3sAZSVxSfdyy2M4VnZ+HnoO5JgCPrJHNeBX+W5fwsy3eOxL8xY4cAsy79mJdJfDKpb+gscwXv94lnKeYlE/1+rvPi0x/1nSF4IO/Wib6wvdfTw9a9Mmjb8fIJFuC7Wvp2Oe0kwqea7bEoY+pkf2tB2aT7JVqsaSvaNyR/LN8NURzmDbzvH6PzHWOQVNattO9Jzh60/aov3rX9vbXl6Zpl8RIn7I5nUdvjki23xnazoXVgHKPK+ou5ECVDZ8szM9/iwF/EWApr/mG7N3HQ7rY3tJxmO5mbQvy3Mv85YK4zv1O3VH/9Y/7HSdQPJUO02aKr8K0W+XEu51lScDHLKXqT5RupxngGtflHgMMbOk/wXCD+U02H72S2gnNm95tmb3Hmmd/2Pd7lhO+VNDs41tUv96F9LqheQxnXcULrA8ZhNOBIXlnG1Qi/ncujZHvEzuxLLDa7O3MHaV1aw7gmfduQc1bj8EnwDLag+uYzuh/tHKdyE80vudjG23xrhxzzVZ01W2VV2kzE53vT2//hXqlzdAJyrzUUzUj69QSPw/rWSTL3470twOT5vd13+9jeDKpKnVDf1rS3uubxnrK+HU77p3j+ZPfF/sBHgf4Tuxv7LM/dattXGLcsPivtXuoxi7dMpl1F/M9b7sF7eTbUt4XNT9rDcjEdoP0zyMn74KrLHOZmBxy5h2jxD03MN7fG8kJ/ae8jXEOdU9++ZetPcZ6dtafUR1l7JHM1yB/WgQWMKxZ+G22VgtdbTNT3vIOv/Xcc9vFDkrmWnftOo0LH9O1m5sQQzTmzVyfyfpPqtdfy++01P2w6Y/vF5zDv12i8/c13iIQvYb7OJxn7obK28E0rwbNMV3yVd34/Vvye5fK6zfwsd9t9rj74tjjoI7YLyBOjbydzTArf0uxOJeyMnMk5KPrnzZ/SgT4CffsGc4IJXmn5tTZY/vknLE54OmPyRT+B7Rn42L2PctgvklTuLabjHTXbxUK371ncb2WLne5rOQFymY9OPLNNNx5lZ6tP+Jao6K9lbhDZVVbSzqNvt9t59jLmCZH8N0LmbqJZZL7mHYwHBp5tcr/lM6nAGGDguUfEMO5aeu+VqEuIM3na/NQLbS+bz3tq4nkb39gN9jTzj7ezXB9JoJkh2W6nPib8j+aX3Mc3PdVH6zmvxb+XxT+PsHizlxgPoLrHU+cXzzPgGebIGsvVcNpy7bZkzlLJw8fMV6sdmvO+gPCNLB57DH12wg8xG+8NlhdiNe80Sea7Tc/ZC3yQrTG+Db6hXnaX52qLd3qUMWMqawXv+KuO9zInvOCHaecRzW3MUanz5nt8Ly/knGdeF53XhtgZarLZe5+zfE1V7e7kVXb3rZCdKRbwfSLRl6O+rfr2t3tbc/get/B77Rzxk93hutvsWimQOdirk+2+bR+bO+1Q9/BWxTKef1X3VuZv/cPysl4D+ouSYQHkLJ6v9wEtRjqZNijhb0I7lxPcmfMRcGSdZEwmYPLpybwBapMLdue3NWMMRF/Y3naZjrYKMTMrzVY5AWt+onheablYh/FsIj5d+M5aOMOiXiF+4C6eB4X/kXZFreGlubbgW+5ZsZC/m+qygnZC8WyAdgjjsJTlcDiFX6Fe2Za3dgXkD33RjbFA4MM5ci36N8SD9bf7boMYp6GyVjBXp2SYZHeOynFPl5xv0d6rck+AcIHol1kuprGgWaK2asG839JhStg90IFmT+vNc6j4XDQd4wm+bxX2PvggQnzsdLvLf4L7vnguZ/5DlduFc1/1+o73tYXfbvtdSYu/GsZzdPBlWDzMtWjzQ5Jtltn8Y+0dtHWM+4KvIRI7Qf+Xyl1uObWaYmwE2/gce/PlYeYAEf/j5rt80+IPuwAOOQoG2Ju8x3iG0jgsYvN9IO2o2u+y8G2++N9pMn9jbdiJPkfJXI9n8DAeLG/Jjcw9ojY8bXeUhlGfF/977KwdbeeIWnRUfyL7FXMpA474O/i2teDJtHcBjtw7YE5vwc9QrwZMO1gKfbLa157h+/vi2cniOmqDJsi21+4Oz7G3MHrTt6hv14E+5NB7l2dqlTvF3sLYwTevRb8H9Q377AuMHRL+KdPP68MW0Uf4x7jGqo4lGQco/k8zFkg071ks+l12D+Iq7teib4v2D2NyA+cj8JyPK7D+LBCf+3hPQXBrvtUY9Bzzsd5iuSWftlxkD/Ferb5Ns5jkemYnTLI3y5ZTV5dspexdzrE8Nwn/Is9HglvRpqR2+NzeWKlm75e1pZ1fMrRE+wT5C1n822uoS4ibnWJ+t34Ws1TR/EevMsZP5d7KnAzif4zjRDSfMN+gfBANUJdjollv6+1Q2rXEZzDfFxP8kd3H2cj4HH1blPcdRPOF3e8Ya3raC5ZHN4s24U9lU+VZWPAZnoUBR9YT2HV7Il9fRB7uEZL5ceYjBQ3xX9n69hJtGqJZZ7Fbr9pbacdQSOGbLn17n51nl1i+wT8Y4y3+pTkfAXM+vmbxn3G088jm9in3Nclch+NfZ+o1nHfCD+aaprr32Yw+Ff5Kuyf1gMXlbuedILVJf/qptTeNog9R37Y0W8dTvAen+j5hMdjNOa/lC15i9ziaMn5A/CfyDpHgeWZj6WQ6xjHua4otv9biuguabWGN3acYzPfrJWd1+v5CjlmzU9UwPSqN76iqzf+1+I0rWS/gOfeH8D6L5HzO7rEmMt+X9p0ipoueA2HIe/Ai37gX/9aWF+Ip+k/F8zDvSoimJvdQ9Xt/5i1RXbJoDw93ECymcR/vz4pmKPP/Cx4JnifFc6i99XOF5fKqyz1I9C3w66zo34YOcF6yDaLdXnW5jbYdlTuGOT0+U1tx7oQxQD8m8Px2Ee38Omufs7NhbeqWoilhOnYB6k7CX2tx++OsvldYvt+37S7DOoyBeMnzMucOYPZdAcjTFHDknpT5JorbPj7e1p9bOKckQzt7H/Ym2l2FX8k8z4Iv2p2sy+xNn8eY80rlXmP+tQR7w/Ea+jtAw75eaXFNze3e3/0We/Owxb2M4Z0F1fcfi1HPt3vHbe2t/A8gW5gvn/C+qmRLsljorzjOhc83/Kfmy74P7RZ0+/3md+jCsae1bqfdJWnIey7iOcdiWVtaPpyRfC9AdWnDO0eCfzQ/YyPoNotuVtwpbezhfVvzj9TBt1v0bQL25TD3+/INdMnQH2tgnmi+5Nkz+GLs/ZeyzMsq+ll2hh3IWCzBC+zu/GyL1TzH95I0Nhpyj9NZMg7tcEQ8l9AOLBkq2VuZfSFbvvDLbPx3pb1U3460XLKdmH9e5a5irIK+vc/88gUtH3Ut3ivX3L+efmqtz93MFzALsp0Vn6ssr2xT5j7SnOpuft71ZuefiLKiTioOljGugEn/Jv5YTvjraJsSPolvxACO+FPsfkeO5VW42+IHHrG8HzNtTr1s8Veb0Y/BHnKBc19lFWQONMARGz7nsspdy3N0BdmBGR+ld5+noE36SObf7b5Sb9QxRd8OYd5X8Xzc7vIctjNFMu+qiz7K9Od/zJ7Wy+7zfmnyP2l+wLa8Vyt5bqf9RzyXmg12uvkITlk+tz60gUjOXRaf08/uU/exXKlP8Fwp/rWZs138H7dz+ilbGy/a+jPB4iHzIexayXyeZ0b1RSl7x+dN9Eueyh2N9twjOR+g30Hf/kr7g8bhBMZ7i6Y5Y10kZzrt6qIfS71a+P32zstexvDo22KW82Er9UnhH+J81LcjGAP2uc4m9u7YL2j/wsCTZjPflxHNZuYv0j3NOsDHCj+KuXxV3x2MY5HuWtpsgFstZnsufUzC34X2Lwc+5DmGc0fwQdPPh9k90JnmE1lvNt4Myyc2EfWKl2y1IVuwaTxoukEM86urjnVN/ml8+17fbuf8Ek0J5gmUbK3sDZps5irRvOjledJ4J1c27f6Wy+Jl2njDG1vmm76VdyRV7vW2p9ews89kvttbTWOD+WBFP9byDKxi/I/wDfgejXyCd1PPl/w1aPsFTHtOFcuz3c3ufffiuUb7S3XGOYv/NXbe30U7j3gu5FlSbXWU95jUd/fynpfk2cX1SH3Rw3IepnFflo/4c8asimcWvl2ib8vybTXAkfWZYyzkmuNbG5LnBouV3cb5KHmiLLdwa+aFEP5Ky1W4k/GloVyzE5ajb0X62GzLrZRrtosvGLegb0vz/Wu9AzXT3paazTsFkuFTey+yHW19IaaFsQfis8DyBx5kvKVo/qAdRvJ3w5g8E2DOa8E/WizuSL6V9oVyBkLvnaf3/dubPbwy11XRzDXb7EbGrwJP+r6mm9U1O/xj9L3qDawbuJaKvglzjonnM4yZF34u92XArONZ5qUXTXWzR31l+VUe4TtcWsdiTB9oyxg5fTufcapq2ydMD7zfbCAz7I7zdPP9TaVbI+TVhIBJki2L+WAl81TGGeocUZdvUIp+NX2ykmGQxWY0svzbPU2HHMFYDvEfYndhyqOtBojPn9a/fe2dtWYoN+iT3c2uXox36iXnG7yTJT7bLN/vFIyBLOEXW76jhmavXsxzpWhusVwfAxnDGeIbGe8h+d+3+wvjLH7sY4udSGRcltrhL7Mh1LI8G49wT5Q80+z8Oxlv6Iez2DK7S3KH5VV7BX0U2qQy30yRzf9evmEkmcvbO5s96YdSHa+0GOPhlne9lsW4xti9m7U8C6suN1hs6kHeYRfNm4DDfG9EHUb98p3Fh4+zvTvKYoca0J8l+gf5Rq3aOdVie/pxPZS+Pdja5DDPFKrX+ygr7Hfr7bxWgnd5xL+B5UN+ibnIJH9Pi8e41+IqG1gul8uYE0AyPMm7POKZxvg0yVDHcuX1g85/SPho3E07DDgSJ2Y2yWT0Ub7qu4R5sQTPoT9acAveyxb8Fe8Xq51r2Tl3E+VUPFgj5lEPsTfm32/Pu1ca2++Yzlnb7mZuYn4D1WuEvdk6grGap7T/WtvezXhL4HnO7eA5u0xf/cj87Av5BgroI29SQM4wB3+zu4T32B3nl+ljUrmn7f30M+bjyKEtQrbfZHsTpAxkSMS3kVhN3tvV2WeP+Z6a830f+VC+5T04yZZue/EW6h6S4Re7V/Wv7U3jqbOprFVcG0Vfk/ZtwaOZe0f8n0M7BN27nNkJm1jsYnPLx3Kv9WMNuzM1wfJA5jFWTWUlM/YyvKNq++9E80nVoP1N9N9A5qTwLpvlSehv9skRZotLpH1D/T4MMueo7jvwrtACwdfbPdnR9rbsYsaqqdwdllN0gN1xexYMVohmNv3U4lke324AzHnUl7kORLObsSWi2UdfsMrKM5ve/ZDzgGgm27uZ+5mHRHz+YB5v9dF42j2En2N+twlcx0QTwzO15PmZa5rwD1vMfGGLVVtl56xmvKev9aQe74yfVu4Ii4f8xnz6exhLCZrIusE8+cJPtJxLve3t48dYR82prpZrdL75Lx6xOMy77T2LAszbI3keNh/fFWbb6YT5Gy+aKyymtwXPNWGcmE3jXYslTkJdEvEt9fCltv6UsHFyHdqzverbBLprJ8ARvdHuFPTgXBPNUMgQdJ4RtOMJX8psZd2tHWbQNoL36yNrr/k+htEOoG9f5xxRudNAnyE43nJ09wJ9ltrhfsbDa82fZnkFv7P3FOpbzt4hvDcqnq3RpyHeuKG9Y/WXvXf8rb2F/YP5x1+1M2NHxvyoDdeZDaQu1oEZqtc8e/vgPebbke/1FN8p07lsnq0DD9LHrbl8xM4UhWysnrQcUNvsbHKabygLP9befxnLWFnVPZVnQ9EMYjyb5NxseTJ3WazCYPra9O11puf8ZjFI2xjrIpqadjdtNNoh0LxgdsiLXGfUjy/R3qhv/7I1cDx1BtHs4Y/gCxZvXM/G+R7PywE5D6le9dCeQSfPZfuITw3GtwgubXaYeywWaxDf1dIc32V33B5Avc5pH/mQZ95wf9zijh6mX0D1Gk4dQ/KsZ1/oTly8nb8e5J0O0R+yMZZjfvAyZvvdYnM2y2xi5y1+soD5Q88wpkX85zKvjs7sv1EPCWuL5VFsZb6/vbwzojcrC9Mm+eWl9WQJ18bwJgLP8sBH2p9lKV7rDO0twPPbt6g7Ce5KfUP0MebTOWV3tT63HDvFzG/YmW8Q6Ns1PN8JLgX6EOf5FXUMlfUh41cFR5tt/3vmYAc+8nY/c55Ip7qDtqxCit01n/gBzlnxOcX6yvaSxPtNGj+pFitSnH468b9Ie7vkXGR3A59krhvhE6mPqe4z7a2ly0z/LGtj7E36rWrI5sbzl/h8xnc91P5TuE5K5rUWq3Y/350X/WnGrgSYeUVkS29CP77Kepd+RvXRB9z3hR9vOUOW2d2i3+mzU3xmBvUWydDRbEczLEffh3ZHPod5BiTPY3aWzOA9EeF78iysd1huZ1xByF9kZ8mnuXaJPpZrlOBOjAWVPMPpQ1QfJdKHKPgo/fuiv5W5AoRvZWe6JPw6Ij776I8QzMd7Tgp+m349jaufIPMZ8alNG6D4n+C5Q/R3sh/Vd3Nt7+gKfJhfcbyXLfqPLBd6C8bthJwktiZM4vv1X0n3g5yh3EJmE6tg8SdlaEvRXDtgvqfJ9oZsc8sLlGRzagNtNSprN88sgCNzhHXRnYs49HusaJ7nG46AI2dYs6U8x7gafVvO9tnHLYZwjJ2P5jGHm/hMY55JwBHfJWRoL/gH80NtYsyq6F+1e8QjzbbTyOKBqzA2WzI3Yxyp4EzOa8l5ueXuqM/xKd0pDTJkqaw/zV/wLPhME58Jpp/vNjmfNnvy1bz/orIepP9R8DHGG6hNitjZvLidrR4zv/y/tANInvssR/GnFmNfyM7vhW39acR5rW8X2X2fQYxhU1ulm83nVatvU/DZIpmzmXND68ME5tWRrnUPdQzxH8icq5JnjeVuirfcmOMYE6Xx39n05wF8619lPWQ2nzb2Ztmzdj/rEH4dEn0KzyaSYZW1YWPLy5Fp9tvepgu9QjuedPsUi9nowrsw4l/V4rqP292Bc/Y24nv06SgeoCbWk9P6dqzF8T5u+m0jO6NlMZd4eHcDc/+MxtUCu/tzF3Pga6+cbHbaIXbn6xU/v9Dvo7F6hcVwtsF4OCd8EcY2hPeCLR7mUVuTc82PMJG2btXrCOeO5GzFXIWKXXnYfMSzLH9mHvUWfbuAc7OE5injvqTDHwSi8Ne6D8h4CcFt7N70aOoVwEdiV8wH18XmYx3mLQFNJBaFfh/BM80vU8LmyEnTZ2aBvrrot1ourMbMwSh74GCLLRlCvUj0W2xvPc83jkNctMn2sef041kP33Ktu8zy2V5meewHMSdPeMeEb5OprN+trzMYY6Y2yeObqip3mr0LP9viwVbgTdJO4hNtsRlHGGsqX1Ixa58Zdo/pWt4hwre0bwy0u2PNzIaw0853bZkrQ/3YjrqNyh1g7xTfZfbbkrQnq02mMx5YcLz5aofT3q76zjfdIMbuhz4I+YPfrTP6LrzR0NXONbG0S0h3Omvn0JsZMyyZd9p5rRRzC2sP3cX7X6rLLYw/lDwP2lvw+VznwxnHYhGr2L2na2mfUR1Xc28Idh57y6+zvYlzwPSED+xc+azFPwwy+8Zz9ENJttlW920Wm5Fsvo8xkPmY6D9g/J74p1luhDl8K0dnk1/tzgLrwP+SBPOnJdcH6mQ8x+vvkXWIY4Njgu1HWz33S8YC0594KVURr8tG8HRX8f9MMdWM9pjUmKgE/FyLn79SYqK+wM8O/CzETzp+muCnDH5+HRQTlYefwpH/ChQoXDiq5ZLNb0RdXqKDJLktqmUuEWuKBEyHkWOT04emxA1OTx6SGTUoa3xchWZxY7IzszJTB2XUqVd/eO3+YxP6J/av3X/QqJFZqeOz+o8c1T9jTOqgUSMyojJT0wfHZaVmZsUNTh6anpoS1XbUmListKGZcZnJIzLSU6tf+kf9ujUGTshKjcvMGjN05JC4cUPT0+MGpsZlZ6amxCVnxg0dmZGdFZeSnJUcFR8RI65yXNc2t3ZC6bfX7t+2Y8t2Xft369WpTf87Wna9vUpcs2b/819vveuOTl3adO3a4a47Idig4akTWJU7u3fsGJWRPdD/OSo7iyWGf14q/7/+MT115H8wmUOHODwyOSt7TOp/MGgKNN9//bp+4n9lbv8ekTkkLTkzrW6d/8agebO4hLjKleMu/atps7i6Uf9jL6QOGpGdnvWfzhia2X9g9tD0rPjK6LoazcNfs8ZX+f9+PiR15P/CIkJBNhX+Rz6DU/ndxNQxo+IrD0mt0RyEVf9vy6Ey8f/PrmzVoZv3VZW4FnF162bHNY6rXy+7Ckbopf/aR7W8kIuRWqBAVMvV2wBUODd3/Ju7fyherUjVkxnz6/x5Q6eDBypsGldt3cc7iz7x7fBTraZFtZy2HYR3Lil74ep7pheMWrX4wS/yt18RdXF5wWKXz74yqk+Vor0P7r48Kv+PKYNfnMAUbDF/zT9SLOrA0pbd0+YWjtpZ9u8NxUteGbV/310nureNjnqy8rgTjSHHSXJN6JaGATwoOT15TNzgMMrHx+FX9sjhI0eNGym5kTTh33//+ffff6NabtyB72IiF6zgZ3njRI0vfnvtlmLgR3zsD7tfrzVmzRVRBVtfzL58cYGomzq3QVVzduJvSS1b1j8yr1/BqL9fKDT3/LAro/K37gbLq6LAFv+F/2OxidAdbfHDtIp7l2W+UPW7S39A2e+STzmV/dKd4zYtjfo58dJlL65HLRfsUtvmEYh55fS+yzZO7TYqPufKAh9MufV0VMvjxK8vUP3ubc02vJX64YjErGIHL4ufy5r5f7VzP26zLO6RM1PfODM6du6mZmW+m7Hw9IL0M28NP/ZUhaOzEkZPPTB3687RZV4t+uvKLcVLVTzw3woas/em6yY/WvCz8YOnx31bsWap3imlcgqWr7zuZEKf/R2fHtT1hwKLR8enl4gq3Wdpz1qdi0V1OLfim8TE6KhvJ7T+quhobJ2p1YZ9MxH1eY71KRvVckMEKBfVcg+B0pHnSNUzhM8sKhU1uETGmFEp2YNSx2QWiAY4KDUTKxGWqELR3Qdmj8zKjhuUnjxySMnaiTUTaibUqJ0dQdauWbvouOR0zIaiCTVrN6qZED0uOXNEjYFDR6ZgrpRKqFmnZoNGcfGNBiakJCYMapBcJariVVnJY4akZmGyRJaMzALVrhqRnZU8MD21xpD0UQOT0zP/D6UhBWI=";

},{}],"fRM9H":[function(require,module,exports) {
var __dirname = "node_modules/@polkadot/wasm-crypto-init/cjs";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.packageInfo = void 0;
exports.packageInfo = {
    name: "@polkadot/wasm-crypto-init",
    path: typeof __dirname === "string" ? __dirname : "auto",
    type: "cjs",
    version: "7.3.2"
};

},{}],"j5ZWw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addressToEvm", ()=>(0, _addressToEvmJs.addressToEvm));
parcelHelpers.export(exports, "checkAddress", ()=>(0, _checkJs.checkAddress));
parcelHelpers.export(exports, "checkAddressChecksum", ()=>(0, _checksumJs.checkAddressChecksum));
parcelHelpers.export(exports, "decodeAddress", ()=>(0, _decodeJs.decodeAddress));
parcelHelpers.export(exports, "deriveAddress", ()=>(0, _deriveJs.deriveAddress));
parcelHelpers.export(exports, "encodeAddress", ()=>(0, _encodeJs.encodeAddress));
parcelHelpers.export(exports, "encodeDerivedAddress", ()=>(0, _encodeDerivedJs.encodeDerivedAddress));
parcelHelpers.export(exports, "encodeMultiAddress", ()=>(0, _encodeMultiJs.encodeMultiAddress));
parcelHelpers.export(exports, "addressEq", ()=>(0, _eqJs.addressEq));
parcelHelpers.export(exports, "evmToAddress", ()=>(0, _evmToAddressJs.evmToAddress));
parcelHelpers.export(exports, "isAddress", ()=>(0, _isJs.isAddress));
parcelHelpers.export(exports, "createKeyDerived", ()=>(0, _keyDerivedJs.createKeyDerived));
parcelHelpers.export(exports, "createKeyMulti", ()=>(0, _keyMultiJs.createKeyMulti));
parcelHelpers.export(exports, "sortAddresses", ()=>(0, _sortJs.sortAddresses));
parcelHelpers.export(exports, "validateAddress", ()=>(0, _validateJs.validateAddress));
parcelHelpers.export(exports, "setSS58Format", ()=>(0, _setSS58FormatJs.setSS58Format));
var _addressToEvmJs = require("./addressToEvm.js");
var _checkJs = require("./check.js");
var _checksumJs = require("./checksum.js");
var _decodeJs = require("./decode.js");
var _deriveJs = require("./derive.js");
var _encodeJs = require("./encode.js");
var _encodeDerivedJs = require("./encodeDerived.js");
var _encodeMultiJs = require("./encodeMulti.js");
var _eqJs = require("./eq.js");
var _evmToAddressJs = require("./evmToAddress.js");
var _isJs = require("./is.js");
var _keyDerivedJs = require("./keyDerived.js");
var _keyMultiJs = require("./keyMulti.js");
var _sortJs = require("./sort.js");
var _validateJs = require("./validate.js");
var _setSS58FormatJs = require("./setSS58Format.js");

},{"./addressToEvm.js":false,"./check.js":false,"./checksum.js":false,"./decode.js":"1wUOF","./derive.js":false,"./encode.js":"gkF5r","./encodeDerived.js":false,"./encodeMulti.js":false,"./eq.js":false,"./evmToAddress.js":false,"./is.js":false,"./keyDerived.js":false,"./keyMulti.js":false,"./sort.js":false,"./validate.js":false,"./setSS58Format.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hXHdg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkAddressChecksum", ()=>checkAddressChecksum);
var _sshashJs = require("./sshash.js");
function checkAddressChecksum(decoded) {
    const ss58Length = decoded[0] & 64 ? 2 : 1;
    const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
    // 32/33 bytes public + 2 bytes checksum + prefix
    const isPublicKey = [
        34 + ss58Length,
        35 + ss58Length
    ].includes(decoded.length);
    const length = decoded.length - (isPublicKey ? 2 : 1);
    // calculate the hash and do the checksum byte checks
    const hash = (0, _sshashJs.sshash)(decoded.subarray(0, length));
    const isValid = (decoded[0] & 128) === 0 && ![
        46,
        47
    ].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);
    return [
        isValid,
        length,
        ss58Length,
        ss58Decoded
    ];
}

},{"./sshash.js":"4NFl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4NFl1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sshash", ()=>sshash);
var _util = require("@polkadot/util");
var _asU8AJs = require("../blake2/asU8a.js");
const SS58_PREFIX = (0, _util.stringToU8a)("SS58PRE");
function sshash(key) {
    return (0, _asU8AJs.blake2AsU8a)((0, _util.u8aConcat)(SS58_PREFIX, key), 512);
}

},{"@polkadot/util":"3HnHw","../blake2/asU8a.js":"3rNsT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3rNsT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name blake2AsU8a
 * @summary Creates a blake2b u8a from the input.
 * @description
 * From a `Uint8Array` input, create the blake2b and return the result as a u8a with the specified `bitLength`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { blake2AsU8a } from '@polkadot/util-crypto';
 *
 * blake2AsU8a('abc'); // => [0xba, 0x80, 0xa5, 0x3f, 0x98, 0x1c, 0x4d, 0x0d]
 * ```
 */ parcelHelpers.export(exports, "blake2AsU8a", ()=>blake2AsU8a);
parcelHelpers.export(exports, "blake2AsHex", ()=>blake2AsHex);
var _blake2B = require("@noble/hashes/blake2b");
var _util = require("@polkadot/util");
var _wasmCrypto = require("@polkadot/wasm-crypto");
var _helpersJs = require("../helpers.js");
function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
    const byteLength = Math.ceil(bitLength / 8);
    const u8a = (0, _util.u8aToU8a)(data);
    return !(0, _util.hasBigInt) || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.blake2b)(u8a, (0, _util.u8aToU8a)(key), byteLength) : key ? (0, _blake2B.blake2b)(u8a, {
        dkLen: byteLength,
        key
    }) : (0, _blake2B.blake2b)(u8a, {
        dkLen: byteLength
    });
}
const blake2AsHex = /*#__PURE__*/ (0, _helpersJs.createAsHex)(blake2AsU8a);

},{"@noble/hashes/blake2b":"f8gy4","@polkadot/util":"3HnHw","@polkadot/wasm-crypto":"19VJZ","../helpers.js":"by01j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f8gy4":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.blake2b = void 0;
const _blake2_js_1 = require("543bd867b377e601");
const _u64_js_1 = require("7d885222a9901ee6");
const utils_js_1 = require("de52f0d17331202");
// Same as SHA-512 but LE
// prettier-ignore
const IV = /* @__PURE__ */ new Uint32Array([
    0xf3bcc908,
    0x6a09e667,
    0x84caa73b,
    0xbb67ae85,
    0xfe94f82b,
    0x3c6ef372,
    0x5f1d36f1,
    0xa54ff53a,
    0xade682d1,
    0x510e527f,
    0x2b3e6c1f,
    0x9b05688c,
    0xfb41bd6b,
    0x1f83d9ab,
    0x137e2179,
    0x5be0cd19
]);
// Temporary buffer
const BUF = /* @__PURE__ */ new Uint32Array(32);
// Mixing function G splitted in two halfs
function G1(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = _u64_js_1.default.add3L(Al, Bl, Xl);
    Ah = _u64_js_1.default.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 32)
    ({ Dh, Dl } = {
        Dh: Dh ^ Ah,
        Dl: Dl ^ Al
    });
    ({ Dh, Dl } = {
        Dh: _u64_js_1.default.rotr32H(Dh, Dl),
        Dl: _u64_js_1.default.rotr32L(Dh, Dl)
    });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = _u64_js_1.default.add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 24)
    ({ Bh, Bl } = {
        Bh: Bh ^ Ch,
        Bl: Bl ^ Cl
    });
    ({ Bh, Bl } = {
        Bh: _u64_js_1.default.rotrSH(Bh, Bl, 24),
        Bl: _u64_js_1.default.rotrSL(Bh, Bl, 24)
    });
    BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
    BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
    BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
    BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
}
function G2(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = _u64_js_1.default.add3L(Al, Bl, Xl);
    Ah = _u64_js_1.default.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 16)
    ({ Dh, Dl } = {
        Dh: Dh ^ Ah,
        Dl: Dl ^ Al
    });
    ({ Dh, Dl } = {
        Dh: _u64_js_1.default.rotrSH(Dh, Dl, 16),
        Dl: _u64_js_1.default.rotrSL(Dh, Dl, 16)
    });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = _u64_js_1.default.add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 63)
    ({ Bh, Bl } = {
        Bh: Bh ^ Ch,
        Bl: Bl ^ Cl
    });
    ({ Bh, Bl } = {
        Bh: _u64_js_1.default.rotrBH(Bh, Bl, 63),
        Bl: _u64_js_1.default.rotrBL(Bh, Bl, 63)
    });
    BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
    BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
    BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
    BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
}
class BLAKE2b extends _blake2_js_1.BLAKE2 {
    constructor(opts = {}){
        super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);
        // Same as SHA-512, but LE
        this.v0l = IV[0] | 0;
        this.v0h = IV[1] | 0;
        this.v1l = IV[2] | 0;
        this.v1h = IV[3] | 0;
        this.v2l = IV[4] | 0;
        this.v2h = IV[5] | 0;
        this.v3l = IV[6] | 0;
        this.v3h = IV[7] | 0;
        this.v4l = IV[8] | 0;
        this.v4h = IV[9] | 0;
        this.v5l = IV[10] | 0;
        this.v5h = IV[11] | 0;
        this.v6l = IV[12] | 0;
        this.v6h = IV[13] | 0;
        this.v7l = IV[14] | 0;
        this.v7h = IV[15] | 0;
        const keyLength = opts.key ? opts.key.length : 0;
        this.v0l ^= this.outputLen | keyLength << 8 | 16842752;
        if (opts.salt) {
            const salt = (0, utils_js_1.u32)((0, utils_js_1.toBytes)(opts.salt));
            this.v4l ^= salt[0];
            this.v4h ^= salt[1];
            this.v5l ^= salt[2];
            this.v5h ^= salt[3];
        }
        if (opts.personalization) {
            const pers = (0, utils_js_1.u32)((0, utils_js_1.toBytes)(opts.personalization));
            this.v6l ^= pers[0];
            this.v6h ^= pers[1];
            this.v7l ^= pers[2];
            this.v7h ^= pers[3];
        }
        if (opts.key) {
            // Pad to blockLen and update
            const tmp = new Uint8Array(this.blockLen);
            tmp.set((0, utils_js_1.toBytes)(opts.key));
            this.update(tmp);
        }
    }
    // prettier-ignore
    get() {
        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
        return [
            v0l,
            v0h,
            v1l,
            v1h,
            v2l,
            v2h,
            v3l,
            v3h,
            v4l,
            v4h,
            v5l,
            v5h,
            v6l,
            v6h,
            v7l,
            v7h
        ];
    }
    // prettier-ignore
    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
        this.v0l = v0l | 0;
        this.v0h = v0h | 0;
        this.v1l = v1l | 0;
        this.v1h = v1h | 0;
        this.v2l = v2l | 0;
        this.v2h = v2h | 0;
        this.v3l = v3l | 0;
        this.v3h = v3h | 0;
        this.v4l = v4l | 0;
        this.v4h = v4h | 0;
        this.v5l = v5l | 0;
        this.v5h = v5h | 0;
        this.v6l = v6l | 0;
        this.v6h = v6h | 0;
        this.v7l = v7l | 0;
        this.v7h = v7h | 0;
    }
    compress(msg, offset, isLast) {
        this.get().forEach((v, i)=>BUF[i] = v); // First half from state.
        BUF.set(IV, 16); // Second half from IV.
        let { h, l } = _u64_js_1.default.fromBig(BigInt(this.length));
        BUF[24] = IV[8] ^ l; // Low word of the offset.
        BUF[25] = IV[9] ^ h; // High word.
        // Invert all bits for last block
        if (isLast) {
            BUF[28] = ~BUF[28];
            BUF[29] = ~BUF[29];
        }
        let j = 0;
        const s = _blake2_js_1.SIGMA;
        for(let i = 0; i < 12; i++){
            G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
            G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
        }
        this.v0l ^= BUF[0] ^ BUF[16];
        this.v0h ^= BUF[1] ^ BUF[17];
        this.v1l ^= BUF[2] ^ BUF[18];
        this.v1h ^= BUF[3] ^ BUF[19];
        this.v2l ^= BUF[4] ^ BUF[20];
        this.v2h ^= BUF[5] ^ BUF[21];
        this.v3l ^= BUF[6] ^ BUF[22];
        this.v3h ^= BUF[7] ^ BUF[23];
        this.v4l ^= BUF[8] ^ BUF[24];
        this.v4h ^= BUF[9] ^ BUF[25];
        this.v5l ^= BUF[10] ^ BUF[26];
        this.v5h ^= BUF[11] ^ BUF[27];
        this.v6l ^= BUF[12] ^ BUF[28];
        this.v6h ^= BUF[13] ^ BUF[29];
        this.v7l ^= BUF[14] ^ BUF[30];
        this.v7h ^= BUF[15] ^ BUF[31];
        BUF.fill(0);
    }
    destroy() {
        this.destroyed = true;
        this.buffer32.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
/**
 * BLAKE2b - optimized for 64-bit platforms. JS doesn't have uint64, so it's slower than BLAKE2s.
 * @param msg - message that would be hashed
 * @param opts - dkLen, key, salt, personalization
 */ exports.blake2b = (0, utils_js_1.wrapConstructorWithOpts)((opts)=>new BLAKE2b(opts));

},{"543bd867b377e601":"kbe9J","7d885222a9901ee6":"8TbxJ","de52f0d17331202":"2ehgp"}],"kbe9J":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BLAKE2 = exports.SIGMA = void 0;
const _assert_js_1 = require("c61267a369489457");
const utils_js_1 = require("d45d5be94315783e");
// Blake is based on ChaCha permutation.
// For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
// prettier-ignore
exports.SIGMA = new Uint8Array([
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3
]);
class BLAKE2 extends utils_js_1.Hash {
    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen){
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.length = 0;
        this.pos = 0;
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.number)(blockLen);
        (0, _assert_js_1.number)(outputLen);
        (0, _assert_js_1.number)(keyLen);
        if (outputLen < 0 || outputLen > keyLen) throw new Error("outputLen bigger than keyLen");
        if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen)) throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
        if (opts.salt !== undefined && opts.salt.length !== saltLen) throw new Error(`salt must be ${saltLen} byte long or undefined`);
        if (opts.personalization !== undefined && opts.personalization.length !== persLen) throw new Error(`personalization must be ${persLen} byte long or undefined`);
        this.buffer32 = (0, utils_js_1.u32)(this.buffer = new Uint8Array(blockLen));
    }
    update(data) {
        (0, _assert_js_1.exists)(this);
        // Main difference with other hashes: there is flag for last block,
        // so we cannot process current block before we know that there
        // is the next one. This significantly complicates logic and reduces ability
        // to do zero-copy processing
        const { blockLen, buffer, buffer32 } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        const offset = data.byteOffset;
        const buf = data.buffer;
        for(let pos = 0; pos < len;){
            // If buffer is full and we still have input (don't process last block, same as blake2s)
            if (this.pos === blockLen) {
                this.compress(buffer32, 0, false);
                this.pos = 0;
            }
            const take = Math.min(blockLen - this.pos, len - pos);
            const dataOffset = offset + pos;
            // full block && aligned to 4 bytes && not last in input
            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
                for(let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen){
                    this.length += blockLen;
                    this.compress(data32, pos32, false);
                }
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            this.length += take;
            pos += take;
        }
        return this;
    }
    digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        const { pos, buffer32 } = this;
        this.finished = true;
        // Padding
        this.buffer.subarray(pos).fill(0);
        this.compress(buffer32, 0, true);
        const out32 = (0, utils_js_1.u32)(out);
        this.get().forEach((v, i)=>out32[i] = v);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        const { buffer, length, finished, destroyed, outputLen, pos } = this;
        to || (to = new this.constructor({
            dkLen: outputLen
        }));
        to.set(...this.get());
        to.length = length;
        to.finished = finished;
        to.destroyed = destroyed;
        to.outputLen = outputLen;
        to.buffer.set(buffer);
        to.pos = pos;
        return to;
    }
}
exports.BLAKE2 = BLAKE2;

},{"c61267a369489457":"BFdql","d45d5be94315783e":"2ehgp"}],"BFdql":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);
}
exports.number = number;
function bool(b) {
    if (typeof b !== "boolean") throw new Error(`Expected boolean, not ${b}`);
}
exports.bool = bool;
// copied from utils
function isBytes(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
function bytes(b, ...lengths) {
    if (!isBytes(b)) throw new Error("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
exports.bytes = bytes;
function hash(hash) {
    if (typeof hash !== "function" || typeof hash.create !== "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(hash.outputLen);
    number(hash.blockLen);
}
exports.hash = hash;
function exists(instance, checkFinished = true) {
    if (instance.destroyed) throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished) throw new Error("Hash#digest() has already been called");
}
exports.exists = exists;
function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) throw new Error(`digestInto() expects output buffer of length at least ${min}`);
}
exports.output = output;
const assert = {
    number,
    bool,
    bytes,
    hash,
    exists,
    output
};
exports.default = assert;

},{}],"2ehgp":[function(require,module,exports) {
"use strict";
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
// node.js versions earlier than v19 don't declare it in global scope.
// For node.js, package.json#exports field mapping rewrites import
// from `crypto` to `cryptoNode`, which imports native module.
// Makes the utils un-importable in browsers without a bundler.
// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.
const crypto_1 = require("308a0f9b8753b4af");
// Cast array to different type
const u8 = (arr)=>new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
exports.u8 = u8;
const u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
exports.u32 = u32;
function isBytes(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
// Cast array to view
const createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
exports.createView = createView;
// The rotate right (circular right shift) operation for uint32
const rotr = (word, shift)=>word << 32 - shift | word >>> shift;
exports.rotr = rotr;
// big-endian hardware is rare. Just in case someone still decides to run hashes:
// early-throw an error because we don't support BE yet.
// Other libraries would silently corrupt the data instead of throwing an error,
// when they don't support it.
exports.isLE = new Uint8Array(new Uint32Array([
    0x11223344
]).buffer)[0] === 0x44;
if (!exports.isLE) throw new Error("Non little-endian hardware is not supported");
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({
    length: 256
}, (_, i)=>i.toString(16).padStart(2, "0"));
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */ function bytesToHex(bytes) {
    if (!isBytes(bytes)) throw new Error("Uint8Array expected");
    // pre-caching improves the speed 6x
    let hex = "";
    for(let i = 0; i < bytes.length; i++)hex += hexes[bytes[i]];
    return hex;
}
exports.bytesToHex = bytesToHex;
// We use optimized technique to convert hex string to byte array
const asciis = {
    _0: 48,
    _9: 57,
    _A: 65,
    _F: 70,
    _a: 97,
    _f: 102
};
function asciiToBase16(char) {
    if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;
    if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);
    if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);
    return;
}
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */ function hexToBytes(hex) {
    if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2) throw new Error("padded hex string expected, got unpadded hex of length " + hl);
    const array = new Uint8Array(al);
    for(let ai = 0, hi = 0; ai < al; ai++, hi += 2){
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
    }
    return array;
}
exports.hexToBytes = hexToBytes;
// There is no setImmediate in browser and setTimeout is slow.
// call of async fn will return Promise, which will be fullfiled only on
// next scheduler queue processing step and this is exactly what we need.
const nextTick = async ()=>{};
exports.nextTick = nextTick;
// Returns control to thread each 'tick' ms to avoid blocking
async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for(let i = 0; i < iters; i++){
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick) continue;
        await (0, exports.nextTick)();
        ts += diff;
    }
}
exports.asyncLoop = asyncLoop;
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */ function utf8ToBytes(str) {
    if (typeof str !== "string") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
exports.utf8ToBytes = utf8ToBytes;
/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */ function toBytes(data) {
    if (typeof data === "string") data = utf8ToBytes(data);
    if (!isBytes(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);
    return data;
}
exports.toBytes = toBytes;
/**
 * Copies several Uint8Arrays into one.
 */ function concatBytes(...arrays) {
    let sum = 0;
    for(let i = 0; i < arrays.length; i++){
        const a = arrays[i];
        if (!isBytes(a)) throw new Error("Uint8Array expected");
        sum += a.length;
    }
    const res = new Uint8Array(sum);
    for(let i = 0, pad = 0; i < arrays.length; i++){
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
exports.concatBytes = concatBytes;
// For runtime check if class implements interface
class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
exports.Hash = Hash;
const toStr = {}.toString;
function checkOpts(defaults, opts) {
    if (opts !== undefined && toStr.call(opts) !== "[object Object]") throw new Error("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
}
exports.checkOpts = checkOpts;
function wrapConstructor(hashCons) {
    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = ()=>hashCons();
    return hashC;
}
exports.wrapConstructor = wrapConstructor;
function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
function wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
/**
 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
 */ function randomBytes(bytesLength = 32) {
    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
    throw new Error("crypto.getRandomValues must be defined");
}
exports.randomBytes = randomBytes;

},{"308a0f9b8753b4af":"85XD8"}],"85XD8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.crypto = void 0;
exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : undefined;

},{}],"8TbxJ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n = /* @__PURE__ */ BigInt(32);
// We are not using BigUint64Array, because they are extremely slow as per 2022
function fromBig(n, le = false) {
    if (le) return {
        h: Number(n & U32_MASK64),
        l: Number(n >> _32n & U32_MASK64)
    };
    return {
        h: Number(n >> _32n & U32_MASK64) | 0,
        l: Number(n & U32_MASK64) | 0
    };
}
exports.fromBig = fromBig;
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for(let i = 0; i < lst.length; i++){
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [
            h,
            l
        ];
    }
    return [
        Ah,
        Al
    ];
}
exports.split = split;
const toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
exports.toBig = toBig;
// for Shift in [0, 32)
const shrSH = (h, _l, s)=>h >>> s;
exports.shrSH = shrSH;
const shrSL = (h, l, s)=>h << 32 - s | l >>> s;
exports.shrSL = shrSL;
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s)=>h >>> s | l << 32 - s;
exports.rotrSH = rotrSH;
const rotrSL = (h, l, s)=>h << 32 - s | l >>> s;
exports.rotrSL = rotrSL;
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;
exports.rotrBH = rotrBH;
const rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;
exports.rotrBL = rotrBL;
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (_h, l)=>l;
exports.rotr32H = rotr32H;
const rotr32L = (h, _l)=>h;
exports.rotr32L = rotr32L;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s)=>h << s | l >>> 32 - s;
exports.rotlSH = rotlSH;
const rotlSL = (h, l, s)=>l << s | h >>> 32 - s;
exports.rotlSL = rotlSL;
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;
exports.rotlBH = rotlBH;
const rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;
exports.rotlBL = rotlBL;
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return {
        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
        l: l | 0
    };
}
exports.add = add;
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
exports.add3L = add3L;
const add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
exports.add3H = add3H;
const add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
exports.add4L = add4L;
const add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
exports.add4H = add4H;
const add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
exports.add5L = add5L;
const add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
exports.add5H = add5H;
// prettier-ignore
const u64 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
};
exports.default = u64;

},{}],"by01j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "createAsHex", ()=>createAsHex);
/** @internal */ parcelHelpers.export(exports, "createBitHasher", ()=>createBitHasher);
/** @internal */ parcelHelpers.export(exports, "createDualHasher", ()=>createDualHasher);
var _util = require("@polkadot/util");
var _wasmCrypto = require("@polkadot/wasm-crypto");
function createAsHex(fn) {
    return (...args)=>(0, _util.u8aToHex)(fn(...args));
}
function createBitHasher(bitLength, fn) {
    return (data, onlyJs)=>fn(data, bitLength, onlyJs);
}
function createDualHasher(wa, js) {
    return (value, bitLength = 256, onlyJs)=>{
        const u8a = (0, _util.u8aToU8a)(value);
        return !(0, _util.hasBigInt) || !onlyJs && (0, _wasmCrypto.isReady)() ? wa[bitLength](u8a) : js[bitLength](u8a);
    };
}

},{"@polkadot/util":"3HnHw","@polkadot/wasm-crypto":"19VJZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wUOF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeAddress", ()=>decodeAddress);
var _util = require("@polkadot/util");
var _indexJs = require("../base58/index.js");
var _checksumJs = require("./checksum.js");
var _defaultsJs = require("./defaults.js");
function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
    if (!encoded) throw new Error("Invalid empty address passed");
    if ((0, _util.isU8a)(encoded) || (0, _util.isHex)(encoded)) return (0, _util.u8aToU8a)(encoded);
    try {
        const decoded = (0, _indexJs.base58Decode)(encoded);
        if (!(0, _defaultsJs.defaults).allowedEncodedLengths.includes(decoded.length)) throw new Error("Invalid decoded address length");
        const [isValid, endPos, ss58Length, ss58Decoded] = (0, _checksumJs.checkAddressChecksum)(decoded);
        if (!isValid && !ignoreChecksum) throw new Error("Invalid decoded address checksum");
        else if (ss58Format !== -1 && ss58Format !== ss58Decoded) throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
        return decoded.slice(ss58Length, endPos);
    } catch (error) {
        throw new Error(`Decoding ${encoded}: ${error.message}`);
    }
}

},{"@polkadot/util":"3HnHw","../base58/index.js":"kXPnW","./checksum.js":"hXHdg","./defaults.js":"cxlL5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kXPnW":[function(require,module,exports) {
/**
 * @summary Encode and decode base58 values
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "base58Decode", ()=>(0, _bs58Js.base58Decode));
parcelHelpers.export(exports, "base58Encode", ()=>(0, _bs58Js.base58Encode));
parcelHelpers.export(exports, "base58Validate", ()=>(0, _bs58Js.base58Validate));
parcelHelpers.export(exports, "isBase58", ()=>(0, _bs58Js.isBase58));
var _bs58Js = require("./bs58.js");

},{"./bs58.js":"01wtS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"01wtS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "base58Validate", ()=>base58Validate);
parcelHelpers.export(exports, "base58Decode", ()=>base58Decode);
parcelHelpers.export(exports, "base58Encode", ()=>base58Encode);
parcelHelpers.export(exports, "isBase58", ()=>isBase58);
var _base = require("@scure/base");
var _helpersJs = require("../base32/helpers.js");
const config = {
    chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
    coder: (0, _base.base58),
    ipfs: "z",
    type: "base58"
};
const base58Validate = /*#__PURE__*/ (0, _helpersJs.createValidate)(config);
const base58Decode = /*#__PURE__*/ (0, _helpersJs.createDecode)(config, base58Validate);
const base58Encode = /*#__PURE__*/ (0, _helpersJs.createEncode)(config);
const isBase58 = /*#__PURE__*/ (0, _helpersJs.createIs)(base58Validate);

},{"@scure/base":"cvmUK","../base32/helpers.js":"azXie","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cvmUK":[function(require,module,exports) {
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Utilities
/**
 * @__NO_SIDE_EFFECTS__
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertNumber", ()=>assertNumber);
parcelHelpers.export(exports, "utils", ()=>utils);
parcelHelpers.export(exports, "base16", ()=>base16);
parcelHelpers.export(exports, "base32", ()=>base32);
parcelHelpers.export(exports, "base32hex", ()=>base32hex);
parcelHelpers.export(exports, "base32crockford", ()=>base32crockford);
parcelHelpers.export(exports, "base64", ()=>base64);
parcelHelpers.export(exports, "base64url", ()=>base64url);
parcelHelpers.export(exports, "base64urlnopad", ()=>base64urlnopad);
parcelHelpers.export(exports, "base58", ()=>base58);
parcelHelpers.export(exports, "base58flickr", ()=>base58flickr);
parcelHelpers.export(exports, "base58xrp", ()=>base58xrp);
parcelHelpers.export(exports, "base58xmr", ()=>base58xmr);
parcelHelpers.export(exports, "createBase58check", ()=>createBase58check);
parcelHelpers.export(exports, "base58check", ()=>base58check);
parcelHelpers.export(exports, "bech32", ()=>bech32);
parcelHelpers.export(exports, "bech32m", ()=>bech32m);
parcelHelpers.export(exports, "utf8", ()=>utf8);
parcelHelpers.export(exports, "hex", ()=>hex);
parcelHelpers.export(exports, "bytesToString", ()=>bytesToString);
parcelHelpers.export(exports, "str", ()=>str);
parcelHelpers.export(exports, "stringToBytes", ()=>stringToBytes);
parcelHelpers.export(exports, "bytes", ()=>bytes);
function assertNumber(n) {
    if (!Number.isSafeInteger(n)) throw new Error(`Wrong integer: ${n}`);
}
function isBytes(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
/**
 * @__NO_SIDE_EFFECTS__
 */ function chain(...args) {
    const id = (a)=>a;
    // Wrap call in closure so JIT can inline calls
    const wrap = (a, b)=>(c)=>a(b(c));
    // Construct chain of args[-1].encode(args[-2].encode([...]))
    const encode = args.map((x)=>x.encode).reduceRight(wrap, id);
    // Construct chain of args[0].decode(args[1].decode(...))
    const decode = args.map((x)=>x.decode).reduce(wrap, id);
    return {
        encode,
        decode
    };
}
/**
 * Encodes integer radix representation to array of strings using alphabet and back
 * @__NO_SIDE_EFFECTS__
 */ function alphabet(alphabet) {
    return {
        encode: (digits)=>{
            if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number") throw new Error("alphabet.encode input should be an array of numbers");
            return digits.map((i)=>{
                assertNumber(i);
                if (i < 0 || i >= alphabet.length) throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);
                return alphabet[i];
            });
        },
        decode: (input)=>{
            if (!Array.isArray(input) || input.length && typeof input[0] !== "string") throw new Error("alphabet.decode input should be array of strings");
            return input.map((letter)=>{
                if (typeof letter !== "string") throw new Error(`alphabet.decode: not string element=${letter}`);
                const index = alphabet.indexOf(letter);
                if (index === -1) throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet}`);
                return index;
            });
        }
    };
}
/**
 * @__NO_SIDE_EFFECTS__
 */ function join(separator = "") {
    if (typeof separator !== "string") throw new Error("join separator should be string");
    return {
        encode: (from)=>{
            if (!Array.isArray(from) || from.length && typeof from[0] !== "string") throw new Error("join.encode input should be array of strings");
            for (let i of from)if (typeof i !== "string") throw new Error(`join.encode: non-string input=${i}`);
            return from.join(separator);
        },
        decode: (to)=>{
            if (typeof to !== "string") throw new Error("join.decode input should be string");
            return to.split(separator);
        }
    };
}
/**
 * Pad strings array so it has integer number of bits
 * @__NO_SIDE_EFFECTS__
 */ function padding(bits, chr = "=") {
    assertNumber(bits);
    if (typeof chr !== "string") throw new Error("padding chr should be string");
    return {
        encode (data) {
            if (!Array.isArray(data) || data.length && typeof data[0] !== "string") throw new Error("padding.encode input should be array of strings");
            for (let i of data)if (typeof i !== "string") throw new Error(`padding.encode: non-string input=${i}`);
            while(data.length * bits % 8)data.push(chr);
            return data;
        },
        decode (input) {
            if (!Array.isArray(input) || input.length && typeof input[0] !== "string") throw new Error("padding.encode input should be array of strings");
            for (let i of input)if (typeof i !== "string") throw new Error(`padding.decode: non-string input=${i}`);
            let end = input.length;
            if (end * bits % 8) throw new Error("Invalid padding: string should have whole number of bytes");
            for(; end > 0 && input[end - 1] === chr; end--){
                if (!((end - 1) * bits % 8)) throw new Error("Invalid padding: string has too much padding");
            }
            return input.slice(0, end);
        }
    };
}
/**
 * @__NO_SIDE_EFFECTS__
 */ function normalize(fn) {
    if (typeof fn !== "function") throw new Error("normalize fn should be function");
    return {
        encode: (from)=>from,
        decode: (to)=>fn(to)
    };
}
/**
 * Slow: O(n^2) time complexity
 * @__NO_SIDE_EFFECTS__
 */ function convertRadix(data, from, to) {
    // base 1 is impossible
    if (from < 2) throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
    if (to < 2) throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
    if (!Array.isArray(data)) throw new Error("convertRadix: data should be array");
    if (!data.length) return [];
    let pos = 0;
    const res = [];
    const digits = Array.from(data);
    digits.forEach((d)=>{
        assertNumber(d);
        if (d < 0 || d >= from) throw new Error(`Wrong integer: ${d}`);
    });
    while(true){
        let carry = 0;
        let done = true;
        for(let i = pos; i < digits.length; i++){
            const digit = digits[i];
            const digitBase = from * carry + digit;
            if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) throw new Error("convertRadix: carry overflow");
            carry = digitBase % to;
            const rounded = Math.floor(digitBase / to);
            digits[i] = rounded;
            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase) throw new Error("convertRadix: carry overflow");
            if (!done) continue;
            else if (!rounded) pos = i;
            else done = false;
        }
        res.push(carry);
        if (done) break;
    }
    for(let i = 0; i < data.length - 1 && data[i] === 0; i++)res.push(0);
    return res.reverse();
}
const gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b)=>!b ? a : gcd(b, a % b);
const radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to)=>from + (to - gcd(from, to));
/**
 * Implemented with numbers, because BigInt is 5x slower
 * @__NO_SIDE_EFFECTS__
 */ function convertRadix2(data, from, to, padding) {
    if (!Array.isArray(data)) throw new Error("convertRadix2: data should be array");
    if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);
    if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);
    if (radix2carry(from, to) > 32) throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
    let carry = 0;
    let pos = 0; // bitwise position in current element
    const mask = 2 ** to - 1;
    const res = [];
    for (const n of data){
        assertNumber(n);
        if (n >= 2 ** from) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
        carry = carry << from | n;
        if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
        pos += from;
        for(; pos >= to; pos -= to)res.push((carry >> pos - to & mask) >>> 0);
        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow
    }
    carry = carry << to - pos & mask;
    if (!padding && pos >= from) throw new Error("Excess padding");
    if (!padding && carry) throw new Error(`Non-zero padding: ${carry}`);
    if (padding && pos > 0) res.push(carry >>> 0);
    return res;
}
/**
 * @__NO_SIDE_EFFECTS__
 */ function radix(num) {
    assertNumber(num);
    return {
        encode: (bytes)=>{
            if (!isBytes(bytes)) throw new Error("radix.encode input should be Uint8Array");
            return convertRadix(Array.from(bytes), 256, num);
        },
        decode: (digits)=>{
            if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number") throw new Error("radix.decode input should be array of numbers");
            return Uint8Array.from(convertRadix(digits, num, 256));
        }
    };
}
/**
 * If both bases are power of same number (like `2**8 <-> 2**64`),
 * there is a linear algorithm. For now we have implementation for power-of-two bases only.
 * @__NO_SIDE_EFFECTS__
 */ function radix2(bits, revPadding = false) {
    assertNumber(bits);
    if (bits <= 0 || bits > 32) throw new Error("radix2: bits should be in (0..32]");
    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32) throw new Error("radix2: carry overflow");
    return {
        encode: (bytes)=>{
            if (!isBytes(bytes)) throw new Error("radix2.encode input should be Uint8Array");
            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
        },
        decode: (digits)=>{
            if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number") throw new Error("radix2.decode input should be array of numbers");
            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
        }
    };
}
/**
 * @__NO_SIDE_EFFECTS__
 */ function unsafeWrapper(fn) {
    if (typeof fn !== "function") throw new Error("unsafeWrapper fn should be function");
    return function(...args) {
        try {
            return fn.apply(null, args);
        } catch (e) {}
    };
}
/**
 * @__NO_SIDE_EFFECTS__
 */ function checksum(len, fn) {
    assertNumber(len);
    if (typeof fn !== "function") throw new Error("checksum fn should be function");
    return {
        encode (data) {
            if (!isBytes(data)) throw new Error("checksum.encode: input should be Uint8Array");
            const checksum = fn(data).slice(0, len);
            const res = new Uint8Array(data.length + len);
            res.set(data);
            res.set(checksum, data.length);
            return res;
        },
        decode (data) {
            if (!isBytes(data)) throw new Error("checksum.decode: input should be Uint8Array");
            const payload = data.slice(0, -len);
            const newChecksum = fn(payload).slice(0, len);
            const oldChecksum = data.slice(-len);
            for(let i = 0; i < len; i++)if (newChecksum[i] !== oldChecksum[i]) throw new Error("Invalid checksum");
            return payload;
        }
    };
}
const utils = {
    alphabet,
    chain,
    checksum,
    convertRadix,
    convertRadix2,
    radix,
    radix2,
    join,
    padding
};
const base16 = /* @__PURE__ */ chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
const base32 = /* @__PURE__ */ chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
const base32hex = /* @__PURE__ */ chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
const base32crockford = /* @__PURE__ */ chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s)=>s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
const base64 = /* @__PURE__ */ chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
const base64url = /* @__PURE__ */ chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
const base64urlnopad = /* @__PURE__ */ chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
// base58 code
// -----------
const genBase58 = (abc)=>chain(radix(58), alphabet(abc), join(""));
const base58 = /* @__PURE__ */ genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
const base58flickr = /* @__PURE__ */ genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
const base58xrp = /* @__PURE__ */ genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.
// Block encoding significantly reduces quadratic complexity of base58.
// Data len (index) -> encoded block len
const XMR_BLOCK_LEN = [
    0,
    2,
    3,
    5,
    6,
    7,
    9,
    10,
    11
];
const base58xmr = {
    encode (data) {
        let res = "";
        for(let i = 0; i < data.length; i += 8){
            const block = data.subarray(i, i + 8);
            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
        }
        return res;
    },
    decode (str) {
        let res = [];
        for(let i = 0; i < str.length; i += 11){
            const slice = str.slice(i, i + 11);
            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
            const block = base58.decode(slice);
            for(let j = 0; j < block.length - blockLen; j++){
                if (block[j] !== 0) throw new Error("base58xmr: wrong padding");
            }
            res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
    }
};
const createBase58check = /* @__PURE__ */ (sha256)=>chain(checksum(4, (data)=>sha256(sha256(data))), base58);
const base58check = createBase58check;
const BECH_ALPHABET = /* @__PURE__ */ chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
const POLYMOD_GENERATORS = [
    0x3b6a57b2,
    0x26508e6d,
    0x1ea119fa,
    0x3d4233dd,
    0x2a1462b3
];
/**
 * @__NO_SIDE_EFFECTS__
 */ function bech32Polymod(pre) {
    const b = pre >> 25;
    let chk = (pre & 0x1ffffff) << 5;
    for(let i = 0; i < POLYMOD_GENERATORS.length; i++)if ((b >> i & 1) === 1) chk ^= POLYMOD_GENERATORS[i];
    return chk;
}
/**
 * @__NO_SIDE_EFFECTS__
 */ function bechChecksum(prefix, words, encodingConst = 1) {
    const len = prefix.length;
    let chk = 1;
    for(let i = 0; i < len; i++){
        const c = prefix.charCodeAt(i);
        if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);
        chk = bech32Polymod(chk) ^ c >> 5;
    }
    chk = bech32Polymod(chk);
    for(let i = 0; i < len; i++)chk = bech32Polymod(chk) ^ prefix.charCodeAt(i) & 0x1f;
    for (let v of words)chk = bech32Polymod(chk) ^ v;
    for(let i = 0; i < 6; i++)chk = bech32Polymod(chk);
    chk ^= encodingConst;
    return BECH_ALPHABET.encode(convertRadix2([
        chk % 2 ** 30
    ], 30, 5, false));
}
/**
 * @__NO_SIDE_EFFECTS__
 */ function genBech32(encoding) {
    const ENCODING_CONST = encoding === "bech32" ? 1 : 0x2bc830a3;
    const _words = radix2(5);
    const fromWords = _words.decode;
    const toWords = _words.encode;
    const fromWordsUnsafe = unsafeWrapper(fromWords);
    function encode(prefix, words, limit = 90) {
        if (typeof prefix !== "string") throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
        if (!Array.isArray(words) || words.length && typeof words[0] !== "number") throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
        const actualLength = prefix.length + 7 + words.length;
        if (limit !== false && actualLength > limit) throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
        const lowered = prefix.toLowerCase();
        const sum = bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
    }
    function decode(str, limit = 90) {
        if (typeof str !== "string") throw new Error(`bech32.decode input should be string, not ${typeof str}`);
        if (str.length < 8 || limit !== false && str.length > limit) throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
        // don't allow mixed case
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase()) throw new Error(`String must be lowercase or uppercase`);
        str = lowered;
        const sepIndex = str.lastIndexOf("1");
        if (sepIndex === 0 || sepIndex === -1) throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix = str.slice(0, sepIndex);
        const _words = str.slice(sepIndex + 1);
        if (_words.length < 6) throw new Error("Data must be at least 6 characters long");
        const words = BECH_ALPHABET.decode(_words).slice(0, -6);
        const sum = bechChecksum(prefix, words, ENCODING_CONST);
        if (!_words.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return {
            prefix,
            words
        };
    }
    const decodeUnsafe = unsafeWrapper(decode);
    function decodeToBytes(str) {
        const { prefix, words } = decode(str, false);
        return {
            prefix,
            words,
            bytes: fromWords(words)
        };
    }
    return {
        encode,
        decode,
        decodeToBytes,
        decodeUnsafe,
        fromWords,
        fromWordsUnsafe,
        toWords
    };
}
const bech32 = /* @__PURE__ */ genBech32("bech32");
const bech32m = /* @__PURE__ */ genBech32("bech32m");
const utf8 = {
    encode: (data)=>new TextDecoder().decode(data),
    decode: (str)=>new TextEncoder().encode(str)
};
const hex = /* @__PURE__ */ chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s)=>{
    if (typeof s !== "string" || s.length % 2) throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
    return s.toLowerCase();
}));
// prettier-ignore
const CODERS = {
    utf8,
    hex,
    base16,
    base32,
    base64,
    base64url,
    base58,
    base58xmr
};
const coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
const bytesToString = (type, bytes)=>{
    if (typeof type !== "string" || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);
    if (!isBytes(bytes)) throw new TypeError("bytesToString() expects Uint8Array");
    return CODERS[type].encode(bytes);
};
const str = bytesToString; // as in python, but for bytes only
const stringToBytes = (type, str)=>{
    if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);
    if (typeof str !== "string") throw new TypeError("stringToBytes() expects string");
    return CODERS[type].decode(str);
};
const bytes = stringToBytes;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"azXie":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "createDecode", ()=>createDecode);
/** @internal */ parcelHelpers.export(exports, "createEncode", ()=>createEncode);
/** @internal */ parcelHelpers.export(exports, "createIs", ()=>createIs);
/** @internal */ parcelHelpers.export(exports, "createValidate", ()=>createValidate);
var _util = require("@polkadot/util");
function createDecode({ coder, ipfs }, validate) {
    return (value, ipfsCompat)=>{
        validate(value, ipfsCompat);
        return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
    };
}
function createEncode({ coder, ipfs }) {
    return (value, ipfsCompat)=>{
        const out = coder.encode((0, _util.u8aToU8a)(value));
        return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
    };
}
function createIs(validate) {
    return (value, ipfsCompat)=>{
        try {
            return validate(value, ipfsCompat);
        } catch  {
            return false;
        }
    };
}
function createValidate({ chars, ipfs, type, withPadding }) {
    return (value, ipfsCompat)=>{
        if (typeof value !== "string") throw new Error(`Expected ${type} string input`);
        else if (ipfs && ipfsCompat && !value.startsWith(ipfs)) throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
        for(let i = ipfsCompat ? 1 : 0, count = value.length; i < count; i++){
            if (chars.includes(value[i])) ;
            else if (withPadding && value[i] === "=") {
                if (i === count - 1) ;
                else if (value[i + 1] === "=") ;
                else throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
            } else throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
        }
        return true;
    };
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cxlL5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaults", ()=>defaults);
var _networksJs = require("../networks.js");
const defaults = {
    allowedDecodedLengths: [
        1,
        2,
        4,
        8,
        32,
        33
    ],
    // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
    allowedEncodedLengths: [
        3,
        4,
        6,
        10,
        35,
        36,
        37,
        38
    ],
    allowedPrefix: (0, _networksJs.availableNetworks).map(({ prefix })=>prefix),
    prefix: 42
};

},{"../networks.js":"fgfoM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fgfoM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "allNetworks", ()=>(0, _networks.allNetworks));
parcelHelpers.export(exports, "availableNetworks", ()=>(0, _networks.availableNetworks));
parcelHelpers.export(exports, "selectableNetworks", ()=>(0, _networks.selectableNetworks));
var _networks = require("@polkadot/networks");

},{"@polkadot/networks":"1v38R","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1v38R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
var _interfacesJs = require("./interfaces.js");
parcelHelpers.exportAll(_interfacesJs, exports);
var _packageInfoJs = require("./packageInfo.js");

},{"./interfaces.js":"3cEnh","./packageInfo.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3cEnh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "allNetworks", ()=>allNetworks);
parcelHelpers.export(exports, "availableNetworks", ()=>availableNetworks);
parcelHelpers.export(exports, "selectableNetworks", ()=>selectableNetworks);
var _ss58Registry = require("@substrate/ss58-registry");
var _ss58RegistryDefault = parcelHelpers.interopDefault(_ss58Registry);
var _indexJs = require("./defaults/index.js");
const UNSORTED = [
    0,
    2,
    42
];
const TESTNETS = [
    "testnet"
];
function toExpanded(o) {
    const network = o.network || "";
    const nameParts = network.replace(/_/g, "-").split("-");
    const n = o;
    // ledger additions
    n.slip44 = (0, _indexJs.knownLedger)[network];
    n.hasLedgerSupport = !!n.slip44;
    // general items
    n.genesisHash = (0, _indexJs.knownGenesis)[network] || [];
    n.icon = (0, _indexJs.knownIcon)[network] || "substrate";
    // filtering
    n.isTestnet = !!(0, _indexJs.knownTestnet)[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
    n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals?.length && o.symbols?.length) && o.prefix !== 42;
    return n;
}
function filterSelectable({ genesisHash, prefix }) {
    return !!genesisHash.length || prefix === 42;
}
function filterAvailable(n) {
    return !n.isIgnored && !!n.network;
}
function sortNetworks(a, b) {
    const isUnSortedA = UNSORTED.includes(a.prefix);
    const isUnSortedB = UNSORTED.includes(b.prefix);
    return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
}
const allNetworks = (0, _ss58RegistryDefault.default).map(toExpanded);
const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
const selectableNetworks = availableNetworks.filter(filterSelectable);

},{"@substrate/ss58-registry":"e0Lzj","./defaults/index.js":"f5nUP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e0Lzj":[function(require,module,exports) {
// Copyright (C) 2021-2023 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = [
    {
        "prefix": 0,
        "network": "polkadot",
        "displayName": "Polkadot Relay Chain",
        "symbols": [
            "DOT"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://polkadot.network"
    },
    {
        "prefix": 1,
        "network": "BareSr25519",
        "displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
        "symbols": [],
        "decimals": [],
        "standardAccount": "Sr25519",
        "website": null
    },
    {
        "prefix": 2,
        "network": "kusama",
        "displayName": "Kusama Relay Chain",
        "symbols": [
            "KSM"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://kusama.network"
    },
    {
        "prefix": 3,
        "network": "BareEd25519",
        "displayName": "Bare 32-bit Ed25519 public key.",
        "symbols": [],
        "decimals": [],
        "standardAccount": "Ed25519",
        "website": null
    },
    {
        "prefix": 4,
        "network": "katalchain",
        "displayName": "Katal Chain",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
    },
    {
        "prefix": 5,
        "network": "astar",
        "displayName": "Astar Network",
        "symbols": [
            "ASTR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://astar.network"
    },
    {
        "prefix": 6,
        "network": "bifrost",
        "displayName": "Bifrost",
        "symbols": [
            "BNC"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://bifrost.finance/"
    },
    {
        "prefix": 7,
        "network": "edgeware",
        "displayName": "Edgeware",
        "symbols": [
            "EDG"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://edgewa.re"
    },
    {
        "prefix": 8,
        "network": "karura",
        "displayName": "Karura",
        "symbols": [
            "KAR"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://karura.network/"
    },
    {
        "prefix": 9,
        "network": "reynolds",
        "displayName": "Laminar Reynolds Canary",
        "symbols": [
            "REY"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "http://laminar.network/"
    },
    {
        "prefix": 10,
        "network": "acala",
        "displayName": "Acala",
        "symbols": [
            "ACA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://acala.network/"
    },
    {
        "prefix": 11,
        "network": "laminar",
        "displayName": "Laminar",
        "symbols": [
            "LAMI"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "http://laminar.network/"
    },
    {
        "prefix": 12,
        "network": "polymesh",
        "displayName": "Polymesh",
        "symbols": [
            "POLYX"
        ],
        "decimals": [
            6
        ],
        "standardAccount": "*25519",
        "website": "https://polymath.network/"
    },
    {
        "prefix": 13,
        "network": "integritee",
        "displayName": "Integritee",
        "symbols": [
            "TEER"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://integritee.network"
    },
    {
        "prefix": 14,
        "network": "totem",
        "displayName": "Totem",
        "symbols": [
            "TOTEM"
        ],
        "decimals": [
            0
        ],
        "standardAccount": "*25519",
        "website": "https://totemaccounting.com"
    },
    {
        "prefix": 15,
        "network": "synesthesia",
        "displayName": "Synesthesia",
        "symbols": [
            "SYN"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://synesthesia.network/"
    },
    {
        "prefix": 16,
        "network": "kulupu",
        "displayName": "Kulupu",
        "symbols": [
            "KLP"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://kulupu.network/"
    },
    {
        "prefix": 17,
        "network": "dark",
        "displayName": "Dark Mainnet",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
    },
    {
        "prefix": 18,
        "network": "darwinia",
        "displayName": "Darwinia Network",
        "symbols": [
            "RING"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "secp256k1",
        "website": "https://darwinia.network"
    },
    {
        "prefix": 19,
        "network": "watr",
        "displayName": "Watr Protocol",
        "symbols": [
            "WATR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://www.watr.org"
    },
    {
        "prefix": 20,
        "network": "stafi",
        "displayName": "Stafi",
        "symbols": [
            "FIS"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://stafi.io"
    },
    {
        "prefix": 21,
        "network": "karmachain",
        "displayName": "Karmacoin",
        "symbols": [
            "KCOIN"
        ],
        "decimals": [
            6
        ],
        "standardAccount": "*25519",
        "website": "https://karmaco.in"
    },
    {
        "prefix": 22,
        "network": "dock-pos-mainnet",
        "displayName": "Dock Mainnet",
        "symbols": [
            "DCK"
        ],
        "decimals": [
            6
        ],
        "standardAccount": "*25519",
        "website": "https://dock.io"
    },
    {
        "prefix": 23,
        "network": "shift",
        "displayName": "ShiftNrg",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
    },
    {
        "prefix": 24,
        "network": "zero",
        "displayName": "ZERO",
        "symbols": [
            "ZERO"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://zero.io"
    },
    {
        "prefix": 25,
        "network": "zero-alphaville",
        "displayName": "ZERO Alphaville",
        "symbols": [
            "ZERO"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://zero.io"
    },
    {
        "prefix": 26,
        "network": "jupiter",
        "displayName": "Jupiter",
        "symbols": [
            "jDOT"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://jupiter.patract.io"
    },
    {
        "prefix": 27,
        "network": "kabocha",
        "displayName": "Kabocha",
        "symbols": [
            "KAB"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://kabocha.network"
    },
    {
        "prefix": 28,
        "network": "subsocial",
        "displayName": "Subsocial",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
    },
    {
        "prefix": 29,
        "network": "cord",
        "displayName": "CORD Network",
        "symbols": [
            "DHI",
            "WAY"
        ],
        "decimals": [
            12,
            12
        ],
        "standardAccount": "*25519",
        "website": "https://cord.network/"
    },
    {
        "prefix": 30,
        "network": "phala",
        "displayName": "Phala Network",
        "symbols": [
            "PHA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://phala.network"
    },
    {
        "prefix": 31,
        "network": "litentry",
        "displayName": "Litentry Network",
        "symbols": [
            "LIT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://litentry.com/"
    },
    {
        "prefix": 32,
        "network": "robonomics",
        "displayName": "Robonomics",
        "symbols": [
            "XRT"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://robonomics.network"
    },
    {
        "prefix": 33,
        "network": "datahighway",
        "displayName": "DataHighway",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
    },
    {
        "prefix": 34,
        "network": "ares",
        "displayName": "Ares Protocol",
        "symbols": [
            "ARES"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://www.aresprotocol.com/"
    },
    {
        "prefix": 35,
        "network": "vln",
        "displayName": "Valiu Liquidity Network",
        "symbols": [
            "USDv"
        ],
        "decimals": [
            15
        ],
        "standardAccount": "*25519",
        "website": "https://valiu.com/"
    },
    {
        "prefix": 36,
        "network": "centrifuge",
        "displayName": "Centrifuge Chain",
        "symbols": [
            "CFG"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://centrifuge.io/"
    },
    {
        "prefix": 37,
        "network": "nodle",
        "displayName": "Nodle Chain",
        "symbols": [
            "NODL"
        ],
        "decimals": [
            11
        ],
        "standardAccount": "*25519",
        "website": "https://nodle.io/"
    },
    {
        "prefix": 38,
        "network": "kilt",
        "displayName": "KILT Spiritnet",
        "symbols": [
            "KILT"
        ],
        "decimals": [
            15
        ],
        "standardAccount": "*25519",
        "website": "https://kilt.io/"
    },
    {
        "prefix": 39,
        "network": "mathchain",
        "displayName": "MathChain mainnet",
        "symbols": [
            "MATH"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://mathwallet.org"
    },
    {
        "prefix": 40,
        "network": "mathchain-testnet",
        "displayName": "MathChain testnet",
        "symbols": [
            "MATH"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://mathwallet.org"
    },
    {
        "prefix": 41,
        "network": "polimec",
        "displayName": "Polimec Protocol",
        "symbols": [
            "PLMC"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://www.polimec.org/"
    },
    {
        "prefix": 42,
        "network": "substrate",
        "displayName": "Substrate",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": "https://substrate.io/"
    },
    {
        "prefix": 43,
        "network": "BareSecp256k1",
        "displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
        "symbols": [],
        "decimals": [],
        "standardAccount": "secp256k1",
        "website": null
    },
    {
        "prefix": 44,
        "network": "chainx",
        "displayName": "ChainX",
        "symbols": [
            "PCX"
        ],
        "decimals": [
            8
        ],
        "standardAccount": "*25519",
        "website": "https://chainx.org/"
    },
    {
        "prefix": 45,
        "network": "uniarts",
        "displayName": "UniArts Network",
        "symbols": [
            "UART",
            "UINK"
        ],
        "decimals": [
            12,
            12
        ],
        "standardAccount": "*25519",
        "website": "https://uniarts.me"
    },
    {
        "prefix": 46,
        "network": "reserved46",
        "displayName": "This prefix is reserved.",
        "symbols": [],
        "decimals": [],
        "standardAccount": null,
        "website": null
    },
    {
        "prefix": 47,
        "network": "reserved47",
        "displayName": "This prefix is reserved.",
        "symbols": [],
        "decimals": [],
        "standardAccount": null,
        "website": null
    },
    {
        "prefix": 48,
        "network": "neatcoin",
        "displayName": "Neatcoin Mainnet",
        "symbols": [
            "NEAT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://neatcoin.org"
    },
    {
        "prefix": 49,
        "network": "picasso",
        "displayName": "Picasso",
        "symbols": [
            "PICA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://picasso.composable.finance"
    },
    {
        "prefix": 50,
        "network": "composable",
        "displayName": "Composable Finance",
        "symbols": [
            "LAYR"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://composable.finance"
    },
    {
        "prefix": 51,
        "network": "oak",
        "displayName": "OAK Network",
        "symbols": [
            "OAK",
            "TUR"
        ],
        "decimals": [
            10,
            10
        ],
        "standardAccount": "*25519",
        "website": "https://oak.tech"
    },
    {
        "prefix": 52,
        "network": "KICO",
        "displayName": "KICO",
        "symbols": [
            "KICO"
        ],
        "decimals": [
            14
        ],
        "standardAccount": "*25519",
        "website": "https://dico.io"
    },
    {
        "prefix": 53,
        "network": "DICO",
        "displayName": "DICO",
        "symbols": [
            "DICO"
        ],
        "decimals": [
            14
        ],
        "standardAccount": "*25519",
        "website": "https://dico.io"
    },
    {
        "prefix": 54,
        "network": "cere",
        "displayName": "Cere Network",
        "symbols": [
            "CERE"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://cere.network"
    },
    {
        "prefix": 55,
        "network": "xxnetwork",
        "displayName": "xx network",
        "symbols": [
            "XX"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://xx.network"
    },
    {
        "prefix": 56,
        "network": "pendulum",
        "displayName": "Pendulum chain",
        "symbols": [
            "PEN"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://pendulumchain.org/"
    },
    {
        "prefix": 57,
        "network": "amplitude",
        "displayName": "Amplitude chain",
        "symbols": [
            "AMPE"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://pendulumchain.org/"
    },
    {
        "prefix": 63,
        "network": "hydradx",
        "displayName": "HydraDX",
        "symbols": [
            "HDX"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://hydradx.io"
    },
    {
        "prefix": 64,
        "network": "ewx",
        "displayName": "Energy Web X",
        "symbols": [
            "EWT"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://www.energyweb.org"
    },
    {
        "prefix": 65,
        "network": "aventus",
        "displayName": "Aventus Mainnet",
        "symbols": [
            "AVT"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://aventus.io"
    },
    {
        "prefix": 66,
        "network": "crust",
        "displayName": "Crust Network",
        "symbols": [
            "CRU"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://crust.network"
    },
    {
        "prefix": 67,
        "network": "genshiro",
        "displayName": "Genshiro Network",
        "symbols": [
            "GENS",
            "EQD",
            "LPT0"
        ],
        "decimals": [
            9,
            9,
            9
        ],
        "standardAccount": "*25519",
        "website": "https://genshiro.equilibrium.io"
    },
    {
        "prefix": 68,
        "network": "equilibrium",
        "displayName": "Equilibrium Network",
        "symbols": [
            "EQ"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://equilibrium.io"
    },
    {
        "prefix": 69,
        "network": "sora",
        "displayName": "SORA Network",
        "symbols": [
            "XOR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://sora.org"
    },
    {
        "prefix": 71,
        "network": "p3d",
        "displayName": "3DP network",
        "symbols": [
            "P3D"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://3dpass.org"
    },
    {
        "prefix": 72,
        "network": "p3dt",
        "displayName": "3DP test network",
        "symbols": [
            "P3Dt"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://3dpass.org"
    },
    {
        "prefix": 73,
        "network": "zeitgeist",
        "displayName": "Zeitgeist",
        "symbols": [
            "ZTG"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://zeitgeist.pm"
    },
    {
        "prefix": 77,
        "network": "manta",
        "displayName": "Manta network",
        "symbols": [
            "MANTA"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://manta.network"
    },
    {
        "prefix": 78,
        "network": "calamari",
        "displayName": "Calamari: Manta Canary Network",
        "symbols": [
            "KMA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://manta.network"
    },
    {
        "prefix": 81,
        "network": "sora_dot_para",
        "displayName": "SORA Polkadot Parachain",
        "symbols": [
            "XOR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://sora.org"
    },
    {
        "prefix": 88,
        "network": "polkadex",
        "displayName": "Polkadex Mainnet",
        "symbols": [
            "PDEX"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://polkadex.trade"
    },
    {
        "prefix": 89,
        "network": "polkadexparachain",
        "displayName": "Polkadex Parachain",
        "symbols": [
            "PDEX"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://polkadex.trade"
    },
    {
        "prefix": 90,
        "network": "frequency",
        "displayName": "Frequency",
        "symbols": [
            "FRQCY"
        ],
        "decimals": [
            8
        ],
        "standardAccount": "*25519",
        "website": "https://www.frequency.xyz"
    },
    {
        "prefix": 92,
        "network": "anmol",
        "displayName": "Anmol Network",
        "symbols": [
            "ANML"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://anmol.network/"
    },
    {
        "prefix": 93,
        "network": "fragnova",
        "displayName": "Fragnova Network",
        "symbols": [
            "NOVA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://fragnova.com"
    },
    {
        "prefix": 98,
        "network": "polkasmith",
        "displayName": "PolkaSmith Canary Network",
        "symbols": [
            "PKS"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://polkafoundry.com"
    },
    {
        "prefix": 99,
        "network": "polkafoundry",
        "displayName": "PolkaFoundry Network",
        "symbols": [
            "PKF"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://polkafoundry.com"
    },
    {
        "prefix": 100,
        "network": "ibtida",
        "displayName": "Anmol Network Ibtida Canary network",
        "symbols": [
            "IANML"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://anmol.network/"
    },
    {
        "prefix": 101,
        "network": "origintrail-parachain",
        "displayName": "OriginTrail Parachain",
        "symbols": [
            "OTP"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://parachain.origintrail.io/"
    },
    {
        "prefix": 105,
        "network": "pontem-network",
        "displayName": "Pontem Network",
        "symbols": [
            "PONT"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://pontem.network"
    },
    {
        "prefix": 110,
        "network": "heiko",
        "displayName": "Heiko",
        "symbols": [
            "HKO"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://parallel.fi/"
    },
    {
        "prefix": 113,
        "network": "integritee-incognito",
        "displayName": "Integritee Incognito",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": "https://integritee.network"
    },
    {
        "prefix": 117,
        "network": "tinker",
        "displayName": "Tinker",
        "symbols": [
            "TNKR"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://invarch.network"
    },
    {
        "prefix": 126,
        "network": "joystream",
        "displayName": "Joystream",
        "symbols": [
            "JOY"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://www.joystream.org"
    },
    {
        "prefix": 128,
        "network": "clover",
        "displayName": "Clover Finance",
        "symbols": [
            "CLV"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://clover.finance"
    },
    {
        "prefix": 129,
        "network": "dorafactory-polkadot",
        "displayName": "Dorafactory Polkadot Network",
        "symbols": [
            "DORA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://dorafactory.org"
    },
    {
        "prefix": 131,
        "network": "litmus",
        "displayName": "Litmus Network",
        "symbols": [
            "LIT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://litentry.com/"
    },
    {
        "prefix": 136,
        "network": "altair",
        "displayName": "Altair",
        "symbols": [
            "AIR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://centrifuge.io/"
    },
    {
        "prefix": 137,
        "network": "vara",
        "displayName": "Vara Network",
        "symbols": [
            "VARA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://vara-network.io/"
    },
    {
        "prefix": 172,
        "network": "parallel",
        "displayName": "Parallel",
        "symbols": [
            "PARA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://parallel.fi/"
    },
    {
        "prefix": 252,
        "network": "social-network",
        "displayName": "Social Network",
        "symbols": [
            "NET"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://social.network"
    },
    {
        "prefix": 255,
        "network": "quartz_mainnet",
        "displayName": "QUARTZ by UNIQUE",
        "symbols": [
            "QTZ"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://unique.network"
    },
    {
        "prefix": 268,
        "network": "pioneer_network",
        "displayName": "Pioneer Network by Bit.Country",
        "symbols": [
            "NEER"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://bit.country"
    },
    {
        "prefix": 420,
        "network": "sora_kusama_para",
        "displayName": "SORA Kusama Parachain",
        "symbols": [
            "XOR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://sora.org"
    },
    {
        "prefix": 440,
        "network": "allfeat_network",
        "displayName": "Allfeat Network",
        "symbols": [
            "AFT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://allfeat.network"
    },
    {
        "prefix": 666,
        "network": "metaquity_network",
        "displayName": "Metaquity Network",
        "symbols": [
            "MQTY"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://metaquity.xyz/"
    },
    {
        "prefix": 789,
        "network": "geek",
        "displayName": "GEEK Network",
        "symbols": [
            "GEEK"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://geek.gl"
    },
    {
        "prefix": 995,
        "network": "ternoa",
        "displayName": "Ternoa",
        "symbols": [
            "CAPS"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://www.ternoa.network"
    },
    {
        "prefix": 1110,
        "network": "efinity",
        "displayName": "Efinity",
        "symbols": [
            "EFI"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://efinity.io/"
    },
    {
        "prefix": 1221,
        "network": "peaq",
        "displayName": "Peaq Network",
        "symbols": [
            "PEAQ"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "Sr25519",
        "website": "https://www.peaq.network/"
    },
    {
        "prefix": 1222,
        "network": "krest",
        "displayName": "Krest Network",
        "symbols": [
            "KREST"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "Sr25519",
        "website": "https://www.peaq.network/"
    },
    {
        "prefix": 1284,
        "network": "moonbeam",
        "displayName": "Moonbeam",
        "symbols": [
            "GLMR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "secp256k1",
        "website": "https://moonbeam.network"
    },
    {
        "prefix": 1285,
        "network": "moonriver",
        "displayName": "Moonriver",
        "symbols": [
            "MOVR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "secp256k1",
        "website": "https://moonbeam.network"
    },
    {
        "prefix": 1328,
        "network": "ajuna",
        "displayName": "Ajuna Network",
        "symbols": [
            "AJUN"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://ajuna.io"
    },
    {
        "prefix": 1337,
        "network": "bajun",
        "displayName": "Bajun Network",
        "symbols": [
            "BAJU"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://ajuna.io"
    },
    {
        "prefix": 1516,
        "network": "societal",
        "displayName": "Societal",
        "symbols": [
            "SCTL"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://www.sctl.xyz"
    },
    {
        "prefix": 1985,
        "network": "seals",
        "displayName": "Seals Network",
        "symbols": [
            "SEAL"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://seals.app"
    },
    {
        "prefix": 2007,
        "network": "kapex",
        "displayName": "Kapex",
        "symbols": [
            "KAPEX"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://totemaccounting.com"
    },
    {
        "prefix": 2009,
        "network": "cloudwalk_mainnet",
        "displayName": "CloudWalk Network Mainnet",
        "symbols": [
            "CWN"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://explorer.mainnet.cloudwalk.io"
    },
    {
        "prefix": 2021,
        "network": "logion",
        "displayName": "logion network",
        "symbols": [
            "LGNT"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://logion.network"
    },
    {
        "prefix": 2032,
        "network": "interlay",
        "displayName": "Interlay",
        "symbols": [
            "INTR"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://interlay.io/"
    },
    {
        "prefix": 2092,
        "network": "kintsugi",
        "displayName": "Kintsugi",
        "symbols": [
            "KINT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://interlay.io/"
    },
    {
        "prefix": 2106,
        "network": "bitgreen",
        "displayName": "Bitgreen",
        "symbols": [
            "BBB"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://bitgreen.org/"
    },
    {
        "prefix": 2112,
        "network": "chainflip",
        "displayName": "Chainflip",
        "symbols": [
            "FLIP"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://chainflip.io/"
    },
    {
        "prefix": 2199,
        "network": "moonsama",
        "displayName": "Moonsama",
        "symbols": [
            "SAMA"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "secp256k1",
        "website": "https://moonsama.com"
    },
    {
        "prefix": 2206,
        "network": "ICE",
        "displayName": "ICE Network",
        "symbols": [
            "ICY"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://icenetwork.io"
    },
    {
        "prefix": 2207,
        "network": "SNOW",
        "displayName": "SNOW: ICE Canary Network",
        "symbols": [
            "ICZ"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://icenetwork.io"
    },
    {
        "prefix": 2254,
        "network": "subspace_testnet",
        "displayName": "Subspace testnet",
        "symbols": [
            "tSSC"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://subspace.network"
    },
    {
        "prefix": 3333,
        "network": "peerplays",
        "displayName": "Peerplays",
        "symbols": [
            "PPY"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "secp256k1",
        "website": "https://www.peerplays.com/"
    },
    {
        "prefix": 4006,
        "network": "tangle",
        "displayName": "Tangle Network",
        "symbols": [
            "TNT"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://www.webb.tools/"
    },
    {
        "prefix": 4450,
        "network": "g1",
        "displayName": "\u011E1",
        "symbols": [
            "G1"
        ],
        "decimals": [
            2
        ],
        "standardAccount": "*25519",
        "website": "https://duniter.org"
    },
    {
        "prefix": 5234,
        "network": "humanode",
        "displayName": "Humanode Network",
        "symbols": [
            "HMND"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://humanode.io"
    },
    {
        "prefix": 6094,
        "network": "subspace",
        "displayName": "Subspace",
        "symbols": [
            "SSC"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://subspace.network"
    },
    {
        "prefix": 7007,
        "network": "tidefi",
        "displayName": "Tidefi",
        "symbols": [
            "TDFY"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://tidefi.com"
    },
    {
        "prefix": 7013,
        "network": "gm",
        "displayName": "GM",
        "symbols": [
            "FREN",
            "GM",
            "GN"
        ],
        "decimals": [
            12,
            0,
            0
        ],
        "standardAccount": "*25519",
        "website": "https://gmordie.com"
    },
    {
        "prefix": 7306,
        "network": "krigan",
        "displayName": "Krigan Network",
        "symbols": [
            "KRGN"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://krigan.network"
    },
    {
        "prefix": 7391,
        "network": "unique_mainnet",
        "displayName": "Unique Network",
        "symbols": [
            "UNQ"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://unique.network"
    },
    {
        "prefix": 8866,
        "network": "golden_gate",
        "displayName": "Golden Gate",
        "symbols": [
            "GGX"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://ggxchain.io/"
    },
    {
        "prefix": 8883,
        "network": "sapphire_mainnet",
        "displayName": "Sapphire by Unique",
        "symbols": [
            "QTZ"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://unique.network"
    },
    {
        "prefix": 8886,
        "network": "golden_gate_sydney",
        "displayName": "Golden Gate Sydney",
        "symbols": [
            "GGXT"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://ggxchain.io/"
    },
    {
        "prefix": 9072,
        "network": "hashed",
        "displayName": "Hashed Network",
        "symbols": [
            "HASH"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://hashed.network"
    },
    {
        "prefix": 9807,
        "network": "dentnet",
        "displayName": "DENTNet",
        "symbols": [
            "DENTX"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://www.dentnet.io"
    },
    {
        "prefix": 9935,
        "network": "t3rn",
        "displayName": "t3rn",
        "symbols": [
            "TRN"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://t3rn.io/"
    },
    {
        "prefix": 10041,
        "network": "basilisk",
        "displayName": "Basilisk",
        "symbols": [
            "BSX"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://bsx.fi"
    },
    {
        "prefix": 11330,
        "network": "cess-testnet",
        "displayName": "CESS Testnet",
        "symbols": [
            "TCESS"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://cess.cloud"
    },
    {
        "prefix": 11331,
        "network": "cess",
        "displayName": "CESS",
        "symbols": [
            "CESS"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://cess.cloud"
    },
    {
        "prefix": 11486,
        "network": "luhn",
        "displayName": "Luhn Network",
        "symbols": [
            "LUHN"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://luhn.network"
    },
    {
        "prefix": 11820,
        "network": "contextfree",
        "displayName": "Automata ContextFree",
        "symbols": [
            "CTX"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://ata.network"
    },
    {
        "prefix": 12155,
        "network": "impact",
        "displayName": "Impact Protocol Network",
        "symbols": [
            "BSTY"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://impactprotocol.network/"
    },
    {
        "prefix": 12191,
        "network": "nftmart",
        "displayName": "NFTMart",
        "symbols": [
            "NMT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://nftmart.io"
    },
    {
        "prefix": 13116,
        "network": "bittensor",
        "displayName": "Bittensor",
        "symbols": [
            "TAO"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://bittensor.com"
    },
    {
        "prefix": 14697,
        "network": "goro",
        "displayName": "GORO Network",
        "symbols": [
            "GORO"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://goro.network"
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f5nUP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "knownGenesis", ()=>(0, _genesisJs.knownGenesis));
parcelHelpers.export(exports, "knownIcon", ()=>(0, _iconsJs.knownIcon));
parcelHelpers.export(exports, "knownLedger", ()=>(0, _ledgerJs.knownLedger));
parcelHelpers.export(exports, "knownTestnet", ()=>(0, _testnetsJs.knownTestnet));
var _genesisJs = require("./genesis.js");
var _iconsJs = require("./icons.js");
var _ledgerJs = require("./ledger.js");
var _testnetsJs = require("./testnets.js");

},{"./genesis.js":"dDhqE","./icons.js":"kPmBV","./ledger.js":"gBi33","./testnets.js":"60HYb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDhqE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "knownGenesis", ()=>knownGenesis);
const knownGenesis = {
    acala: [
        "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"
    ],
    ajuna: [
        "0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"
    ],
    "aleph-node": [
        "0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"
    ],
    astar: [
        "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"
    ],
    basilisk: [
        "0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"
    ],
    bifrost: [
        "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"
    ],
    "bifrost-kusama": [
        "0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"
    ],
    bittensor: [
        "0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"
    ],
    centrifuge: [
        "0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
        "0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"
    ],
    cere: [
        "0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"
    ],
    composable: [
        "0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"
    ],
    darwinia: [
        "0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"
    ],
    "dock-mainnet": [
        "0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae",
        "0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"
    ],
    edgeware: [
        "0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"
    ],
    enjin: [
        "0xd8761d3c88f26dc12875c00d3165f7d67243d56fc85b4cf19937601a7916e5a9"
    ],
    equilibrium: [
        "0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"
    ],
    genshiro: [
        "0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"
    ],
    hydradx: [
        "0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
        "0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc",
        "0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9",
        "0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047",
        "0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2" // Snakenet Gen1
    ],
    "interlay-parachain": [
        "0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"
    ],
    karura: [
        "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"
    ],
    khala: [
        "0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"
    ],
    kulupu: [
        "0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"
    ],
    kusama: [
        "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
        "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
        "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf" // Kusama CC1
    ],
    matrixchain: [
        "0x3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615"
    ],
    nodle: [
        "0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"
    ],
    origintrail: [
        "0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"
    ],
    p3d: [
        "0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"
    ],
    parallel: [
        "0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"
    ],
    pendulum: [
        "0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"
    ],
    phala: [
        "0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"
    ],
    picasso: [
        "0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
        "0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"
    ],
    polkadex: [
        "0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"
    ],
    polkadot: [
        "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"
    ],
    polymesh: [
        "0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"
    ],
    quartz: [
        "0xcd4d732201ebe5d6b014edda071c4203e16867305332301dc8d092044b28e554"
    ],
    rococo: [
        "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
        "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
        "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
        "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
        "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
        "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
        "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
        "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
        "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
        "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
        "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
        "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
    ],
    sora: [
        "0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"
    ],
    stafi: [
        "0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"
    ],
    statemine: [
        "0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"
    ],
    statemint: [
        "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"
    ],
    subsocial: [
        "0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"
    ],
    ternoa: [
        "0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"
    ],
    unique: [
        "0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"
    ],
    vtb: [
        "0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f",
        "0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"
    ],
    westend: [
        "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
    ],
    xxnetwork: [
        "0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"
    ],
    zeitgeist: [
        "0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kPmBV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "knownIcon", ()=>knownIcon);
const knownIcon = {
    centrifuge: "polkadot",
    kusama: "polkadot",
    polkadot: "polkadot",
    sora: "polkadot",
    statemine: "polkadot",
    statemint: "polkadot",
    westmint: "polkadot"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gBi33":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "knownLedger", ()=>knownLedger);
const knownLedger = {
    acala: 0x00000313,
    ajuna: 0x00000162,
    "aleph-node": 0x00000283,
    astar: 0x0000032a,
    bifrost: 0x00000314,
    "bifrost-kusama": 0x00000314,
    centrifuge: 0x000002eb,
    composable: 0x00000162,
    darwinia: 0x00000162,
    "dock-mainnet": 0x00000252,
    edgeware: 0x0000020b,
    enjin: 0x00000483,
    equilibrium: 0x05f5e0fd,
    genshiro: 0x05f5e0fc,
    hydradx: 0x00000162,
    "interlay-parachain": 0x00000162,
    karura: 0x000002ae,
    khala: 0x000001b2,
    kusama: 0x000001b2,
    matrixchain: 0x00000483,
    nodle: 0x000003eb,
    origintrail: 0x00000162,
    parallel: 0x00000162,
    pendulum: 0x00000162,
    phala: 0x00000162,
    picasso: 0x000001b2,
    polkadex: 0x0000031f,
    polkadot: 0x00000162,
    polymesh: 0x00000253,
    quartz: 0x00000277,
    sora: 0x00000269,
    stafi: 0x0000038b,
    statemine: 0x000001b2,
    statemint: 0x00000162,
    ternoa: 0x00003e3,
    unique: 0x00000295,
    vtb: 0x000002b6,
    xxnetwork: 0x000007a3,
    zeitgeist: 0x00000162
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"60HYb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "knownTestnet", ()=>knownTestnet);
const knownTestnet = {
    "": true,
    "cess-testnet": true,
    "dock-testnet": true,
    jupiter: true,
    "mathchain-testnet": true,
    p3dt: true,
    subspace_testnet: true,
    "zero-alphaville": true
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkF5r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeAddress", ()=>encodeAddress);
var _util = require("@polkadot/util");
var _indexJs = require("../base58/index.js");
var _decodeJs = require("./decode.js");
var _defaultsJs = require("./defaults.js");
var _sshashJs = require("./sshash.js");
function encodeAddress(key, ss58Format = (0, _defaultsJs.defaults).prefix) {
    // decode it, this means we can re-encode an address
    const u8a = (0, _decodeJs.decodeAddress)(key);
    if (ss58Format < 0 || ss58Format > 16383 || [
        46,
        47
    ].includes(ss58Format)) throw new Error("Out of range ss58Format specified");
    else if (!(0, _defaultsJs.defaults).allowedDecodedLengths.includes(u8a.length)) throw new Error(`Expected a valid key to convert, with length ${(0, _defaultsJs.defaults).allowedDecodedLengths.join(", ")}`);
    const input = (0, _util.u8aConcat)(ss58Format < 64 ? [
        ss58Format
    ] : [
        (ss58Format & 252) >> 2 | 64,
        ss58Format >> 8 | (ss58Format & 3) << 6
    ], u8a);
    return (0, _indexJs.base58Encode)((0, _util.u8aConcat)(input, (0, _sshashJs.sshash)(input).subarray(0, [
        32,
        33
    ].includes(u8a.length) ? 2 : 1)));
}

},{"@polkadot/util":"3HnHw","../base58/index.js":"kXPnW","./decode.js":"1wUOF","./defaults.js":"cxlL5","./sshash.js":"4NFl1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fBtmb":[function(require,module,exports) {
/**
 * @summary Create blake2b values with specified bitlengths
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "blake2AsHex", ()=>(0, _asU8AJs.blake2AsHex));
parcelHelpers.export(exports, "blake2AsU8a", ()=>(0, _asU8AJs.blake2AsU8a));
var _asU8AJs = require("./asU8a.js");

},{"./asU8a.js":"3rNsT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"huQFg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ethereumEncode", ()=>(0, _encodeJs.ethereumEncode));
parcelHelpers.export(exports, "isEthereumAddress", ()=>(0, _isAddressJs.isEthereumAddress));
parcelHelpers.export(exports, "isEthereumChecksum", ()=>(0, _isChecksumJs.isEthereumChecksum));
var _encodeJs = require("./encode.js");
var _isAddressJs = require("./isAddress.js");
var _isChecksumJs = require("./isChecksum.js");

},{"./encode.js":"323SV","./isAddress.js":"iNBtl","./isChecksum.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"323SV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ethereumEncode", ()=>ethereumEncode);
var _util = require("@polkadot/util");
var _indexJs = require("../keccak/index.js");
var _indexJs1 = require("../secp256k1/index.js");
function getH160(u8a) {
    if ([
        33,
        65
    ].includes(u8a.length)) u8a = (0, _indexJs.keccakAsU8a)((0, _indexJs1.secp256k1Expand)(u8a));
    return u8a.slice(-20);
}
function ethereumEncode(addressOrPublic) {
    if (!addressOrPublic) return "0x";
    const u8aAddress = (0, _util.u8aToU8a)(addressOrPublic);
    if (![
        20,
        32,
        33,
        65
    ].includes(u8aAddress.length)) throw new Error(`Invalid address or publicKey provided, received ${u8aAddress.length} bytes input`);
    const address = (0, _util.u8aToHex)(getH160(u8aAddress), -1, false);
    const hash = (0, _util.u8aToHex)((0, _indexJs.keccakAsU8a)(address), -1, false);
    let result = "";
    for(let i = 0; i < 40; i++)result = `${result}${parseInt(hash[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
    return `0x${result}`;
}

},{"@polkadot/util":"3HnHw","../keccak/index.js":"6zB64","../secp256k1/index.js":"iZGLu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6zB64":[function(require,module,exports) {
/**
 * @summary Create Keccak256/512 values as hex & Uint8Array output
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "keccak256AsU8a", ()=>(0, _asU8AJs.keccak256AsU8a));
parcelHelpers.export(exports, "keccak512AsU8a", ()=>(0, _asU8AJs.keccak512AsU8a));
parcelHelpers.export(exports, "keccakAsHex", ()=>(0, _asU8AJs.keccakAsHex));
parcelHelpers.export(exports, "keccakAsU8a", ()=>(0, _asU8AJs.keccakAsU8a));
var _asU8AJs = require("./asU8a.js");

},{"./asU8a.js":"9I4NF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9I4NF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "keccakAsU8a", ()=>keccakAsU8a);
parcelHelpers.export(exports, "keccak256AsU8a", ()=>keccak256AsU8a);
parcelHelpers.export(exports, "keccak512AsU8a", ()=>keccak512AsU8a);
parcelHelpers.export(exports, "keccakAsHex", ()=>keccakAsHex);
var _sha3 = require("@noble/hashes/sha3");
var _wasmCrypto = require("@polkadot/wasm-crypto");
var _helpersJs = require("../helpers.js");
const keccakAsU8a = /*#__PURE__*/ (0, _helpersJs.createDualHasher)({
    256: (0, _wasmCrypto.keccak256),
    512: (0, _wasmCrypto.keccak512)
}, {
    256: (0, _sha3.keccak_256),
    512: (0, _sha3.keccak_512)
});
const keccak256AsU8a = /*#__PURE__*/ (0, _helpersJs.createBitHasher)(256, keccakAsU8a);
const keccak512AsU8a = /*#__PURE__*/ (0, _helpersJs.createBitHasher)(512, keccakAsU8a);
const keccakAsHex = /*#__PURE__*/ (0, _helpersJs.createAsHex)(keccakAsU8a);

},{"@noble/hashes/sha3":"7YJSg","@polkadot/wasm-crypto":"19VJZ","../helpers.js":"by01j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7YJSg":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
const _assert_js_1 = require("14db7b8ea2b5bceb");
const _u64_js_1 = require("45e8a44e40fd6b7f");
const utils_js_1 = require("5a04751f3e786b49");
// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
// It's called a sponge function.
// Various per round constants calculations
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [
    [],
    [],
    []
];
const _0n = /* @__PURE__ */ BigInt(0);
const _1n = /* @__PURE__ */ BigInt(1);
const _2n = /* @__PURE__ */ BigInt(2);
const _7n = /* @__PURE__ */ BigInt(7);
const _256n = /* @__PURE__ */ BigInt(256);
const _0x71n = /* @__PURE__ */ BigInt(0x71);
for(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){
    // Pi
    [x, y] = [
        y,
        (2 * x + 3 * y) % 5
    ];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    // Iota
    let t = _0n;
    for(let j = 0; j < 7; j++){
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n) t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s)=>s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
const rotlL = (h, l, s)=>s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
// Same as keccakf1600, but allows to skip some rounds
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(10);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for(let round = 24 - rounds; round < 24; round++){
        // Theta θ
        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for(let x = 0; x < 10; x += 2){
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for(let y = 0; y < 50; y += 10){
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for(let t = 0; t < 24; t++){
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for(let y = 0; y < 50; y += 10){
            for(let x = 0; x < 10; x++)B[x] = s[y + x];
            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
exports.keccakP = keccakP;
class Keccak extends utils_js_1.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        (0, _assert_js_1.number)(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
    }
    keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen) this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished) return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for(let pos = 0, len = out.length; pos < len;){
            if (this.posOut >= blockLen) this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
    }
    xof(bytes) {
        (0, _assert_js_1.number)(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished) throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
exports.Keccak = Keccak;
const gen = (suffix, blockLen, outputLen)=>(0, utils_js_1.wrapConstructor)(()=>new Keccak(blockLen, suffix, outputLen));
exports.sha3_224 = gen(0x06, 144, 28);
/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */ exports.sha3_256 = gen(0x06, 136, 32);
exports.sha3_384 = gen(0x06, 104, 48);
exports.sha3_512 = gen(0x06, 72, 64);
exports.keccak_224 = gen(0x01, 144, 28);
/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */ exports.keccak_256 = gen(0x01, 136, 32);
exports.keccak_384 = gen(0x01, 104, 48);
exports.keccak_512 = gen(0x01, 72, 64);
const genShake = (suffix, blockLen, outputLen)=>(0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {})=>new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
exports.shake128 = genShake(0x1f, 168, 16);
exports.shake256 = genShake(0x1f, 136, 32);

},{"14db7b8ea2b5bceb":"BFdql","45e8a44e40fd6b7f":"8TbxJ","5a04751f3e786b49":"2ehgp"}],"iZGLu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "secp256k1Compress", ()=>(0, _compressJs.secp256k1Compress));
parcelHelpers.export(exports, "secp256k1Expand", ()=>(0, _expandJs.secp256k1Expand));
parcelHelpers.export(exports, "secp256k1PairFromSeed", ()=>(0, _fromSeedJs.secp256k1PairFromSeed));
parcelHelpers.export(exports, "secp256k1Recover", ()=>(0, _recoverJs.secp256k1Recover));
parcelHelpers.export(exports, "secp256k1Sign", ()=>(0, _signJs.secp256k1Sign));
parcelHelpers.export(exports, "secp256k1PrivateKeyTweakAdd", ()=>(0, _tweakAddJs.secp256k1PrivateKeyTweakAdd));
parcelHelpers.export(exports, "secp256k1Verify", ()=>(0, _verifyJs.secp256k1Verify));
var _compressJs = require("./compress.js");
var _expandJs = require("./expand.js");
var _fromSeedJs = require("./pair/fromSeed.js");
var _recoverJs = require("./recover.js");
var _signJs = require("./sign.js");
var _tweakAddJs = require("./tweakAdd.js");
var _verifyJs = require("./verify.js");

},{"./compress.js":false,"./expand.js":"dAmfU","./pair/fromSeed.js":false,"./recover.js":false,"./sign.js":false,"./tweakAdd.js":false,"./verify.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dAmfU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "secp256k1Expand", ()=>secp256k1Expand);
var _secp256K1 = require("@noble/curves/secp256k1");
var _util = require("@polkadot/util");
var _wasmCrypto = require("@polkadot/wasm-crypto");
var _bnJs = require("../bn.js");
function secp256k1Expand(publicKey, onlyJs) {
    if (![
        33,
        65
    ].includes(publicKey.length)) throw new Error(`Invalid publicKey provided, received ${publicKey.length} bytes input`);
    if (publicKey.length === 65) return publicKey.subarray(1);
    if (!(0, _util.hasBigInt) || !onlyJs && (0, _wasmCrypto.isReady)()) return (0, _wasmCrypto.secp256k1Expand)(publicKey).subarray(1);
    const { px, py } = (0, _secp256K1.secp256k1).ProjectivePoint.fromHex(publicKey);
    return (0, _util.u8aConcat)((0, _util.bnToU8a)(px, (0, _bnJs.BN_BE_256_OPTS)), (0, _util.bnToU8a)(py, (0, _bnJs.BN_BE_256_OPTS)));
}

},{"@noble/curves/secp256k1":"9sjVG","@polkadot/util":"3HnHw","@polkadot/wasm-crypto":"19VJZ","../bn.js":"h6UHx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9sjVG":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ const sha256_1 = require("a89c1505decc763e");
const utils_1 = require("362802f5a451efcb");
const modular_js_1 = require("6a274edd04635854");
const weierstrass_js_1 = require("4687d8e71912c9bd");
const utils_js_1 = require("49209a65a14a4a44");
const hash_to_curve_js_1 = require("992867e7d1ef8b");
const _shortw_utils_js_1 = require("8a5ef77428763709");
const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
const secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
const _1n = BigInt(1);
const _2n = BigInt(2);
const divNearest = (a, b)=>(a + b / _2n) / b;
/**
 * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
 * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
 */ function sqrtMod(y) {
    const P = secp256k1P;
    // prettier-ignore
    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
    // prettier-ignore
    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = y * y * y % P; // x^3, 11
    const b3 = b2 * b2 * y % P; // x^7
    const b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;
    const b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;
    const b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;
    const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;
    const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;
    const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;
    const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;
    const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;
    const b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;
    const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;
    const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;
    const root = (0, modular_js_1.pow2)(t2, _2n, P);
    if (!Fp.eql(Fp.sqr(root), y)) throw new Error("Cannot find square root");
    return root;
}
const Fp = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, {
    sqrt: sqrtMod
});
exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
    a: BigInt(0),
    b: BigInt(7),
    Fp,
    n: secp256k1N,
    // Base point (x, y) aka generator point
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    h: BigInt(1),
    lowS: true,
    /**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */ endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k)=>{
            const n = secp256k1N;
            const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
            const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
            const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
            const b2 = a1;
            const POW_2_128 = BigInt("0x100000000000000000000000000000000"); // (2n**128n).toString(16)
            const c1 = divNearest(b2 * k, n);
            const c2 = divNearest(-b1 * k, n);
            let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
            let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
            const k1neg = k1 > POW_2_128;
            const k2neg = k2 > POW_2_128;
            if (k1neg) k1 = n - k1;
            if (k2neg) k2 = n - k2;
            if (k1 > POW_2_128 || k2 > POW_2_128) throw new Error("splitScalar: Endomorphism failed, k=" + k);
            return {
                k1neg,
                k1,
                k2neg,
                k2
            };
        }
    }
}, sha256_1.sha256);
// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
const _0n = BigInt(0);
const fe = (x)=>typeof x === "bigint" && _0n < x && x < secp256k1P;
const ge = (x)=>typeof x === "bigint" && _0n < x && x < secp256k1N;
/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */ const TAGGED_HASH_PREFIXES = {};
function taggedHash(tag, ...messages) {
    let tagP = TAGGED_HASH_PREFIXES[tag];
    if (tagP === undefined) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c)=>c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
    }
    return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
}
// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03
const pointToBytes = (point)=>point.toRawBytes(true).slice(1);
const numTo32b = (n)=>(0, utils_js_1.numberToBytesBE)(n, 32);
const modP = (x)=>(0, modular_js_1.mod)(x, secp256k1P);
const modN = (x)=>(0, modular_js_1.mod)(x, secp256k1N);
const Point = exports.secp256k1.ProjectivePoint;
const GmulAdd = (Q, a, b)=>Point.BASE.multiplyAndAddUnsafe(Q, a, b);
// Calculate point, scalar and bytes
function schnorrGetExtPubKey(priv) {
    let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey
    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside
    const scalar = p.hasEvenY() ? d_ : modN(-d_);
    return {
        scalar: scalar,
        bytes: pointToBytes(p)
    };
}
/**
 * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.
 * @returns valid point checked for being on-curve
 */ function lift_x(x) {
    if (!fe(x)) throw new Error("bad x: need 0 < x < p"); // Fail if x ≥ p.
    const xx = modP(x * x);
    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.
    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.
    if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and
    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.
    p.assertValidity();
    return p;
}
/**
 * Create tagged hash, convert it to bigint, reduce modulo-n.
 */ function challenge(...args) {
    return modN((0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/challenge", ...args)));
}
/**
 * Schnorr public key is just `x` coordinate of Point as per BIP340.
 */ function schnorrGetPublicKey(privateKey) {
    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)
}
/**
 * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.
 * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.
 */ function schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
    const m = (0, utils_js_1.ensureBytes)("message", message);
    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder
    const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32); // Auxiliary random data a: a 32-byte array
    const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/aux", a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)
    const rand = taggedHash("BIP0340/nonce", t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)
    const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n
    if (k_ === _0n) throw new Error("sign failed: k is zero"); // Fail if k' = 0.
    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.
    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.
    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).
    sig.set(rx, 0);
    sig.set(numTo32b(modN(k + e * d)), 32);
    // If Verify(bytes(P), m, sig) (see below) returns failure, abort
    if (!schnorrVerify(sig, m, px)) throw new Error("sign: Invalid signature produced");
    return sig;
}
/**
 * Verifies Schnorr signature.
 * Will swallow errors & return false except for initial type validation of arguments.
 */ function schnorrVerify(signature, message, publicKey) {
    const sig = (0, utils_js_1.ensureBytes)("signature", signature, 64);
    const m = (0, utils_js_1.ensureBytes)("message", message);
    const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey, 32);
    try {
        const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails
        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.
        if (!fe(r)) return false;
        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.
        if (!ge(s)) return false;
        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n
        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P
        if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P
        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.
    } catch (error) {
        return false;
    }
}
exports.schnorr = (()=>({
        getPublicKey: schnorrGetPublicKey,
        sign: schnorrSign,
        verify: schnorrVerify,
        utils: {
            randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
            lift_x,
            pointToBytes,
            numberToBytesBE: utils_js_1.numberToBytesBE,
            bytesToNumberBE: utils_js_1.bytesToNumberBE,
            taggedHash,
            mod: modular_js_1.mod
        }
    }))();
const isoMap = /* @__PURE__ */ (()=>(0, hash_to_curve_js_1.isogenyMap)(Fp, [
        // xNum
        [
            "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
            "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
            "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
            "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
        ],
        // xDen
        [
            "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
            "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
            "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        // yNum
        [
            "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
            "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
            "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
            "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
        ],
        // yDen
        [
            "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
            "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
            "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
            "0x0000000000000000000000000000000000000000000000000000000000000001"
        ]
    ].map((i)=>i.map((j)=>BigInt(j)))))();
const mapSWU = /* @__PURE__ */ (()=>(0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
        A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
        B: BigInt("1771"),
        Z: Fp.create(BigInt("-11"))
    }))();
const htf = /* @__PURE__ */ (()=>(0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars)=>{
        const { x, y } = mapSWU(Fp.create(scalars[0]));
        return isoMap(x, y);
    }, {
        DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
        encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
        p: Fp.ORDER,
        m: 1,
        k: 128,
        expand: "xmd",
        hash: sha256_1.sha256
    }))();
exports.hashToCurve = (()=>htf.hashToCurve)();
exports.encodeToCurve = (()=>htf.encodeToCurve)();

},{"a89c1505decc763e":"JjjO8","362802f5a451efcb":"2ehgp","6a274edd04635854":"cB5Z5","4687d8e71912c9bd":"5TEzS","49209a65a14a4a44":"cBmkf","992867e7d1ef8b":"2yuJj","8a5ef77428763709":"jmUYM"}],"JjjO8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sha224 = exports.sha256 = void 0;
const _sha2_js_1 = require("f0369f0173e40550");
const utils_js_1 = require("dd2d5fab8dc388cf");
// SHA2-256 need to try 2^128 hashes to execute birthday attack.
// BTC network is doing 2^67 hashes/sec as per early 2023.
// Choice: a ? b : c
const Chi = (a, b, c)=>a & b ^ ~a & c;
// Majority function, true if any two inpust is true
const Maj = (a, b, c)=>a & b ^ a & c ^ b & c;
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = /* @__PURE__ */ new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const IV = /* @__PURE__ */ new Uint32Array([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
class SHA256 extends _sha2_js_1.SHA2 {
    constructor(){
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [
            A,
            B,
            C,
            D,
            E,
            F,
            G,
            H
        ];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);
        for(let i = 16; i < 64; i++){
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for(let i = 0; i < 64; i++){
            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
            const T2 = sigma0 + Maj(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T1 | 0;
            D = C;
            C = B;
            B = A;
            A = T1 + T2 | 0;
        }
        // Add the compressed chunk to the current hash value
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class SHA224 extends SHA256 {
    constructor(){
        super();
        this.A = -1056596264;
        this.B = 914150663;
        this.C = 812702999;
        this.D = -150054599;
        this.E = -4191439;
        this.F = 1750603025;
        this.G = 1694076839;
        this.H = -1090891868;
        this.outputLen = 28;
    }
}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */ exports.sha256 = (0, utils_js_1.wrapConstructor)(()=>new SHA256());
exports.sha224 = (0, utils_js_1.wrapConstructor)(()=>new SHA224());

},{"f0369f0173e40550":"6HKeB","dd2d5fab8dc388cf":"2ehgp"}],"6HKeB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SHA2 = void 0;
const _assert_js_1 = require("96995f5a2c2249c4");
const utils_js_1 = require("c59c675893fdf798");
// Polyfill for Safari 14
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === "function") return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number(value >> _32n & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
// Base SHA2 class (RFC 6234)
class SHA2 extends utils_js_1.Hash {
    constructor(blockLen, outputLen, padOffset, isLE){
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
    }
    update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0, utils_js_1.createView)(data);
                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for(let i = pos; i < blockLen; i++)buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length) throw new Error("_sha2: outputLen bigger than state");
        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen) to.buffer.set(buffer);
        return to;
    }
}
exports.SHA2 = SHA2;

},{"96995f5a2c2249c4":"BFdql","c59c675893fdf798":"2ehgp"}],"cB5Z5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mapHashToField = exports.getMinHashLength = exports.getFieldBytesLength = exports.hashToPrivateScalar = exports.FpSqrtEven = exports.FpSqrtOdd = exports.Field = exports.nLength = exports.FpIsSquare = exports.FpDiv = exports.FpInvertBatch = exports.FpPow = exports.validateField = exports.isNegativeLE = exports.FpSqrt = exports.tonelliShanks = exports.invert = exports.pow2 = exports.pow = exports.mod = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Utilities for modular arithmetics and finite fields
const utils_js_1 = require("d8ac4b6c79c60614");
// prettier-ignore
const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);
// prettier-ignore
const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
// prettier-ignore
const _9n = BigInt(9), _16n = BigInt(16);
// Calculates a modulo b
function mod(a, b) {
    const result = a % b;
    return result >= _0n ? result : b + result;
}
exports.mod = mod;
/**
 * Efficiently raise num to power and do modular division.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 * @example
 * pow(2n, 6n, 11n) // 64n % 11n == 9n
 */ // TODO: use field version && remove
function pow(num, power, modulo) {
    if (modulo <= _0n || power < _0n) throw new Error("Expected power/modulo > 0");
    if (modulo === _1n) return _0n;
    let res = _1n;
    while(power > _0n){
        if (power & _1n) res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n;
    }
    return res;
}
exports.pow = pow;
// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
function pow2(x, power, modulo) {
    let res = x;
    while(power-- > _0n){
        res *= res;
        res %= modulo;
    }
    return res;
}
exports.pow2 = pow2;
// Inverses number over modulo
function invert(number, modulo) {
    if (number === _0n || modulo <= _0n) throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
    // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
    let a = mod(number, modulo);
    let b = modulo;
    // prettier-ignore
    let x = _0n, y = _1n, u = _1n, v = _0n;
    while(a !== _0n){
        // JIT applies optimization if those two lines follow each other
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        // prettier-ignore
        b = a, a = r, x = u, y = v, u = m, v = n;
    }
    const gcd = b;
    if (gcd !== _1n) throw new Error("invert: does not exist");
    return mod(x, modulo);
}
exports.invert = invert;
/**
 * Tonelli-Shanks square root search algorithm.
 * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
 * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
 * Will start an infinite loop if field order P is not prime.
 * @param P field order
 * @returns function that takes field Fp (created from P) and number n
 */ function tonelliShanks(P) {
    // Legendre constant: used to calculate Legendre symbol (a | p),
    // which denotes the value of a^((p-1)/2) (mod p).
    // (a | p) ≡ 1    if a is a square (mod p)
    // (a | p) ≡ -1   if a is not a square (mod p)
    // (a | p) ≡ 0    if a ≡ 0 (mod p)
    const legendreC = (P - _1n) / _2n;
    let Q, S, Z;
    // Step 1: By factoring out powers of 2 from p - 1,
    // find q and s such that p - 1 = q*(2^s) with q odd
    for(Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);
    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
    for(Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);
    // Fast-path
    if (S === 1) {
        const p1div4 = (P + _1n) / _4n;
        return function tonelliFast(Fp, n) {
            const root = Fp.pow(n, p1div4);
            if (!Fp.eql(Fp.sqr(root), n)) throw new Error("Cannot find square root");
            return root;
        };
    }
    // Slow-path
    const Q1div2 = (Q + _1n) / _2n;
    return function tonelliSlow(Fp, n) {
        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error("Cannot find square root");
        let r = S;
        // TODO: will fail at Fp2/etc
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
        let x = Fp.pow(n, Q1div2); // first guess at the square root
        let b = Fp.pow(n, Q); // first guess at the fudge factor
        while(!Fp.eql(b, Fp.ONE)){
            if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
            // Find m such b^(2^m)==1
            let m = 1;
            for(let t2 = Fp.sqr(b); m < r; m++){
                if (Fp.eql(t2, Fp.ONE)) break;
                t2 = Fp.sqr(t2); // t2 *= t2
            }
            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)
            g = Fp.sqr(ge); // g = ge * ge
            x = Fp.mul(x, ge); // x *= ge
            b = Fp.mul(b, g); // b *= g
            r = m;
        }
        return x;
    };
}
exports.tonelliShanks = tonelliShanks;
function FpSqrt(P) {
    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
    // P ≡ 3 (mod 4)
    // √n = n^((P+1)/4)
    if (P % _4n === _3n) {
        // Not all roots possible!
        // const ORDER =
        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
        // const NUM = 72057594037927816n;
        const p1div4 = (P + _1n) / _4n;
        return function sqrt3mod4(Fp, n) {
            const root = Fp.pow(n, p1div4);
            // Throw if root**2 != n
            if (!Fp.eql(Fp.sqr(root), n)) throw new Error("Cannot find square root");
            return root;
        };
    }
    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
    if (P % _8n === _5n) {
        const c1 = (P - _5n) / _8n;
        return function sqrt5mod8(Fp, n) {
            const n2 = Fp.mul(n, _2n);
            const v = Fp.pow(n2, c1);
            const nv = Fp.mul(n, v);
            const i = Fp.mul(Fp.mul(nv, _2n), v);
            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
            if (!Fp.eql(Fp.sqr(root), n)) throw new Error("Cannot find square root");
            return root;
        };
    }
    // P ≡ 9 (mod 16)
    _9n;
    // Other cases: Tonelli-Shanks algorithm
    return tonelliShanks(P);
}
exports.FpSqrt = FpSqrt;
// Little-endian check for first LE bit (last BE bit);
const isNegativeLE = (num, modulo)=>(mod(num, modulo) & _1n) === _1n;
exports.isNegativeLE = isNegativeLE;
// prettier-ignore
const FIELD_FIELDS = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
];
function validateField(field) {
    const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS.reduce((map, val)=>{
        map[val] = "function";
        return map;
    }, initial);
    return (0, utils_js_1.validateObject)(field, opts);
}
exports.validateField = validateField;
// Generic field functions
/**
 * Same as `pow` but for Fp: non-constant-time.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 */ function FpPow(f, num, power) {
    // Should have same speed as pow for bigints
    // TODO: benchmark!
    if (power < _0n) throw new Error("Expected power > 0");
    if (power === _0n) return f.ONE;
    if (power === _1n) return num;
    let p = f.ONE;
    let d = num;
    while(power > _0n){
        if (power & _1n) p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n;
    }
    return p;
}
exports.FpPow = FpPow;
/**
 * Efficiently invert an array of Field elements.
 * `inv(0)` will return `undefined` here: make sure to throw an error.
 */ function FpInvertBatch(f, nums) {
    const tmp = new Array(nums.length);
    // Walk from first to last, multiply them by each other MOD p
    const lastMultiplied = nums.reduce((acc, num, i)=>{
        if (f.is0(num)) return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
    }, f.ONE);
    // Invert last element
    const inverted = f.inv(lastMultiplied);
    // Walk from last to first, multiply them by inverted each other MOD p
    nums.reduceRight((acc, num, i)=>{
        if (f.is0(num)) return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
    }, inverted);
    return tmp;
}
exports.FpInvertBatch = FpInvertBatch;
function FpDiv(f, lhs, rhs) {
    return f.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f.ORDER) : f.inv(rhs));
}
exports.FpDiv = FpDiv;
// This function returns True whenever the value x is a square in the field F.
function FpIsSquare(f) {
    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic
    return (x)=>{
        const p = f.pow(x, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
    };
}
exports.FpIsSquare = FpIsSquare;
// CURVE.n lengths
function nLength(n, nBitLength) {
    // Bit size, byte size of CURVE.n
    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return {
        nBitLength: _nBitLength,
        nByteLength
    };
}
exports.nLength = nLength;
/**
 * Initializes a finite field over prime. **Non-primes are not supported.**
 * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
 * Major performance optimizations:
 * * a) denormalized operations like mulN instead of mul
 * * b) same object shape: never add or remove keys
 * * c) Object.freeze
 * @param ORDER prime positive bigint
 * @param bitLen how many bits the field consumes
 * @param isLE (def: false) if encoding / decoding should be in little-endian
 * @param redef optional faster redefinitions of sqrt and other methods
 */ function Field(ORDER, bitLen, isLE = false, redef = {}) {
    if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
    if (BYTES > 2048) throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = FpSqrt(ORDER);
    const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n,
        ONE: _1n,
        create: (num)=>mod(num, ORDER),
        isValid: (num)=>{
            if (typeof num !== "bigint") throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible
        },
        is0: (num)=>num === _0n,
        isOdd: (num)=>(num & _1n) === _1n,
        neg: (num)=>mod(-num, ORDER),
        eql: (lhs, rhs)=>lhs === rhs,
        sqr: (num)=>mod(num * num, ORDER),
        add: (lhs, rhs)=>mod(lhs + rhs, ORDER),
        sub: (lhs, rhs)=>mod(lhs - rhs, ORDER),
        mul: (lhs, rhs)=>mod(lhs * rhs, ORDER),
        pow: (num, power)=>FpPow(f, num, power),
        div: (lhs, rhs)=>mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num)=>num * num,
        addN: (lhs, rhs)=>lhs + rhs,
        subN: (lhs, rhs)=>lhs - rhs,
        mulN: (lhs, rhs)=>lhs * rhs,
        inv: (num)=>invert(num, ORDER),
        sqrt: redef.sqrt || ((n)=>sqrtP(f, n)),
        invertBatch: (lst)=>FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c)=>c ? b : a,
        toBytes: (num)=>isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes)=>{
            if (bytes.length !== BYTES) throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
            return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);
        }
    });
    return Object.freeze(f);
}
exports.Field = Field;
function FpSqrtOdd(Fp, elm) {
    if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? root : Fp.neg(root);
}
exports.FpSqrtOdd = FpSqrtOdd;
function FpSqrtEven(Fp, elm) {
    if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? Fp.neg(root) : root;
}
exports.FpSqrtEven = FpSqrtEven;
/**
 * "Constant-time" private key generation utility.
 * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
 * Which makes it slightly more biased, less secure.
 * @deprecated use mapKeyToField instead
 */ function hashToPrivateScalar(hash, groupOrder, isLE = false) {
    hash = (0, utils_js_1.ensureBytes)("privateHash", hash);
    const hashLen = hash.length;
    const minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
    const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);
    return mod(num, groupOrder - _1n) + _1n;
}
exports.hashToPrivateScalar = hashToPrivateScalar;
/**
 * Returns total number of bytes consumed by the field element.
 * For example, 32 bytes for usual 256-bit weierstrass curve.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of field
 */ function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== "bigint") throw new Error("field order must be bigint");
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
}
exports.getFieldBytesLength = getFieldBytesLength;
/**
 * Returns minimal amount of bytes that can be safely reduced
 * by field order.
 * Should be 2^-128 for 128-bit curve such as P256.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of target hash
 */ function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
}
exports.getMinHashLength = getMinHashLength;
/**
 * "Constant-time" private key generation utility.
 * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
 * and convert them into private scalar, with the modulo bias being negligible.
 * Needs at least 48 bytes of input for 32-byte private key.
 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
 * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
 * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
 * @param hash hash output from SHA3 or a similar function
 * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
 * @param isLE interpret hash bytes as LE num
 * @returns valid private scalar
 */ function mapHashToField(key, fieldOrder, isLE = false) {
    const len = key.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
    if (len < 16 || len < minLen || len > 1024) throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
    const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
    const reduced = mod(num, fieldOrder - _1n) + _1n;
    return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
}
exports.mapHashToField = mapHashToField;

},{"d8ac4b6c79c60614":"cBmkf"}],"cBmkf":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateObject = exports.createHmacDrbg = exports.bitMask = exports.bitSet = exports.bitGet = exports.bitLen = exports.utf8ToBytes = exports.equalBytes = exports.concatBytes = exports.ensureBytes = exports.numberToVarBytesBE = exports.numberToBytesLE = exports.numberToBytesBE = exports.bytesToNumberLE = exports.bytesToNumberBE = exports.hexToBytes = exports.hexToNumber = exports.numberToHexUnpadded = exports.bytesToHex = exports.isBytes = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // 100 lines of code in the file are duplicated from noble-hashes (utils).
// This is OK: `abstract` directory does not use noble-hashes.
// User may opt-in into using different hashing library. This way, noble-hashes
// won't be included into their bundle.
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
function isBytes(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
exports.isBytes = isBytes;
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({
    length: 256
}, (_, i)=>i.toString(16).padStart(2, "0"));
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */ function bytesToHex(bytes) {
    if (!isBytes(bytes)) throw new Error("Uint8Array expected");
    // pre-caching improves the speed 6x
    let hex = "";
    for(let i = 0; i < bytes.length; i++)hex += hexes[bytes[i]];
    return hex;
}
exports.bytesToHex = bytesToHex;
function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
}
exports.numberToHexUnpadded = numberToHexUnpadded;
function hexToNumber(hex) {
    if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
    // Big Endian
    return BigInt(hex === "" ? "0" : `0x${hex}`);
}
exports.hexToNumber = hexToNumber;
// We use optimized technique to convert hex string to byte array
const asciis = {
    _0: 48,
    _9: 57,
    _A: 65,
    _F: 70,
    _a: 97,
    _f: 102
};
function asciiToBase16(char) {
    if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;
    if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);
    if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);
    return;
}
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */ function hexToBytes(hex) {
    if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2) throw new Error("padded hex string expected, got unpadded hex of length " + hl);
    const array = new Uint8Array(al);
    for(let ai = 0, hi = 0; ai < al; ai++, hi += 2){
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
    }
    return array;
}
exports.hexToBytes = hexToBytes;
// BE: Big Endian, LE: Little Endian
function bytesToNumberBE(bytes) {
    return hexToNumber(bytesToHex(bytes));
}
exports.bytesToNumberBE = bytesToNumberBE;
function bytesToNumberLE(bytes) {
    if (!isBytes(bytes)) throw new Error("Uint8Array expected");
    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
}
exports.bytesToNumberLE = bytesToNumberLE;
function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, "0"));
}
exports.numberToBytesBE = numberToBytesBE;
function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
}
exports.numberToBytesLE = numberToBytesLE;
// Unpadded, rarely used
function numberToVarBytesBE(n) {
    return hexToBytes(numberToHexUnpadded(n));
}
exports.numberToVarBytesBE = numberToVarBytesBE;
/**
 * Takes hex string or Uint8Array, converts to Uint8Array.
 * Validates output length.
 * Will throw error for other types.
 * @param title descriptive title for an error e.g. 'private key'
 * @param hex hex string or Uint8Array
 * @param expectedLength optional, will compare to result array's length
 * @returns
 */ function ensureBytes(title, hex, expectedLength) {
    let res;
    if (typeof hex === "string") try {
        res = hexToBytes(hex);
    } catch (e) {
        throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
    }
    else if (isBytes(hex)) // Uint8Array.from() instead of hash.slice() because node.js Buffer
    // is instance of Uint8Array, and its slice() creates **mutable** copy
    res = Uint8Array.from(hex);
    else throw new Error(`${title} must be hex string or Uint8Array`);
    const len = res.length;
    if (typeof expectedLength === "number" && len !== expectedLength) throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
    return res;
}
exports.ensureBytes = ensureBytes;
/**
 * Copies several Uint8Arrays into one.
 */ function concatBytes(...arrays) {
    let sum = 0;
    for(let i = 0; i < arrays.length; i++){
        const a = arrays[i];
        if (!isBytes(a)) throw new Error("Uint8Array expected");
        sum += a.length;
    }
    let res = new Uint8Array(sum);
    let pad = 0;
    for(let i = 0; i < arrays.length; i++){
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
exports.concatBytes = concatBytes;
// Compares 2 u8a-s in kinda constant time
function equalBytes(a, b) {
    if (a.length !== b.length) return false;
    let diff = 0;
    for(let i = 0; i < a.length; i++)diff |= a[i] ^ b[i];
    return diff === 0;
}
exports.equalBytes = equalBytes;
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */ function utf8ToBytes(str) {
    if (typeof str !== "string") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
exports.utf8ToBytes = utf8ToBytes;
// Bit operations
/**
 * Calculates amount of bits in a bigint.
 * Same as `n.toString(2).length`
 */ function bitLen(n) {
    let len;
    for(len = 0; n > _0n; n >>= _1n, len += 1);
    return len;
}
exports.bitLen = bitLen;
/**
 * Gets single bit at position.
 * NOTE: first bit position is 0 (same as arrays)
 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
 */ function bitGet(n, pos) {
    return n >> BigInt(pos) & _1n;
}
exports.bitGet = bitGet;
/**
 * Sets single bit at position.
 */ const bitSet = (n, pos, value)=>{
    return n | (value ? _1n : _0n) << BigInt(pos);
};
exports.bitSet = bitSet;
/**
 * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
 * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
 */ const bitMask = (n)=>(_2n << BigInt(n - 1)) - _1n;
exports.bitMask = bitMask;
// DRBG
const u8n = (data)=>new Uint8Array(data); // creates Uint8Array
const u8fr = (arr)=>Uint8Array.from(arr); // another shortcut
/**
 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
 * @returns function that will call DRBG until 2nd arg returns something meaningful
 * @example
 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
 */ function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2) throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2) throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function") throw new Error("hmacFn must be a function");
    // Step B, Step C: set hashLen to 8*ceil(hlen/8)
    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
    let i = 0; // Iterations counter, will throw when over 1000
    const reset = ()=>{
        v.fill(1);
        k.fill(0);
        i = 0;
    };
    const h = (...b)=>hmacFn(k, v, ...b); // hmac(k)(v, ...values)
    const reseed = (seed = u8n())=>{
        // HMAC-DRBG reseed() function. Steps D-G
        k = h(u8fr([
            0x00
        ]), seed); // k = hmac(k || v || 0x00 || seed)
        v = h(); // v = hmac(k || v)
        if (seed.length === 0) return;
        k = h(u8fr([
            0x01
        ]), seed); // k = hmac(k || v || 0x01 || seed)
        v = h(); // v = hmac(k || v)
    };
    const gen = ()=>{
        // HMAC-DRBG generate() function
        if (i++ >= 1000) throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while(len < qByteLen){
            v = h();
            const sl = v.slice();
            out.push(sl);
            len += v.length;
        }
        return concatBytes(...out);
    };
    const genUntil = (seed, pred)=>{
        reset();
        reseed(seed); // Steps D-G
        let res = undefined; // Step H: grind until k is in [1..n-1]
        while(!(res = pred(gen())))reseed();
        reset();
        return res;
    };
    return genUntil;
}
exports.createHmacDrbg = createHmacDrbg;
// Validating curves and fields
const validatorFns = {
    bigint: (val)=>typeof val === "bigint",
    function: (val)=>typeof val === "function",
    boolean: (val)=>typeof val === "boolean",
    string: (val)=>typeof val === "string",
    stringOrUint8Array: (val)=>typeof val === "string" || isBytes(val),
    isSafeInteger: (val)=>Number.isSafeInteger(val),
    array: (val)=>Array.isArray(val),
    field: (val, object)=>object.Fp.isValid(val),
    hash: (val)=>typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
function validateObject(object, validators, optValidators = {}) {
    const checkField = (fieldName, type, isOptional)=>{
        const checkVal = validatorFns[type];
        if (typeof checkVal !== "function") throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === undefined) return;
        if (!checkVal(val, object)) throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    };
    for (const [fieldName, type] of Object.entries(validators))checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))checkField(fieldName, type, true);
    return object;
}
exports.validateObject = validateObject; // validate type tests
 // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
 // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
 // // Should fail type-check
 // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
 // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
 // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
 // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });

},{}],"5TEzS":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Short Weierstrass curve. The formula is: y² = x³ + ax + b
const mod = require("d8b1615c256fe3fa");
const ut = require("aae491f09795d5ee");
const utils_js_1 = require("aae491f09795d5ee");
const curve_js_1 = require("11f68d725b0f6f5d");
function validatePointOpts(curve) {
    const opts = (0, curve_js_1.validateBasic)(curve);
    ut.validateObject(opts, {
        a: "field",
        b: "field"
    }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
    });
    const { endo, Fp, a } = opts;
    if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
    return Object.freeze({
        ...opts
    });
}
// ASN.1 DER encoding utilities
const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
exports.DER = {
    // asn.1 DER encoding utils
    Err: class DERErr extends Error {
        constructor(m = ""){
            super(m);
        }
    },
    _parseInt (data) {
        const { Err: E } = exports.DER;
        if (data.length < 2 || data[0] !== 0x02) throw new E("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len) throw new E("Invalid signature integer: wrong length");
        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
        // since we always use positive integers here. It must always be empty:
        // - add zero byte if exists
        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
        if (res[0] & 128) throw new E("Invalid signature integer: negative");
        if (res[0] === 0x00 && !(res[1] & 128)) throw new E("Invalid signature integer: unnecessary leading zero");
        return {
            d: b2n(res),
            l: data.subarray(len + 2)
        }; // d is data, l is left
    },
    toSig (hex) {
        // parse DER signature
        const { Err: E } = exports.DER;
        const data = typeof hex === "string" ? h2b(hex) : hex;
        if (!ut.isBytes(data)) throw new Error("ui8a expected");
        let l = data.length;
        if (l < 2 || data[0] != 0x30) throw new E("Invalid signature tag");
        if (data[1] !== l - 2) throw new E("Invalid signature: incorrect length");
        const { d: r, l: sBytes } = exports.DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);
        if (rBytesLeft.length) throw new E("Invalid signature: left bytes after parsing");
        return {
            r,
            s
        };
    },
    hexFromSig (sig) {
        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
        const slice = (s)=>Number.parseInt(s[0], 16) & 8 ? "00" + s : s;
        const h = (num)=>{
            const hex = num.toString(16);
            return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
    }
};
// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);
function weierstrassPoints(opts) {
    const CURVE = validatePointOpts(opts);
    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
    const toBytes = CURVE.toBytes || ((_c, point, _isCompressed)=>{
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([
            0x04
        ]), Fp.toBytes(a.x), Fp.toBytes(a.y));
    });
    const fromBytes = CURVE.fromBytes || ((bytes)=>{
        // const head = bytes[0];
        const tail = bytes.subarray(1);
        // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return {
            x,
            y
        };
    });
    /**
     * y² = x³ + ax + b: Short weierstrass curve formula
     * @returns y²
     */ function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x); // x * x
        const x3 = Fp.mul(x2, x); // x2 * x
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
    }
    // Validate whether the passed curve params are valid.
    // We check if curve equation works for generator point.
    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
    // ProjectivePoint class has not been initialized yet.
    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error("bad generator point: equation left != right");
    // Valid group elements reside in range 1..n-1
    function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n < num && num < CURVE.n;
    }
    function assertGE(num) {
        if (!isWithinCurveOrder(num)) throw new Error("Expected valid bigint: 0 < bigint < curve.n");
    }
    // Validates if priv key is valid and converts it to bigint.
    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
    function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key !== "bigint") {
            if (ut.isBytes(key)) key = ut.bytesToHex(key);
            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
            if (typeof key !== "string" || !lengths.includes(key.length)) throw new Error("Invalid key");
            key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
            num = typeof key === "bigint" ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS
        assertGE(num); // num in range [1..N-1]
        return num;
    }
    const pointPrecomputes = new Map();
    function assertPrjPoint(other) {
        if (!(other instanceof Point)) throw new Error("ProjectivePoint expected");
    }
    /**
     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
     * Default Point works in 2d / affine coordinates: (x, y)
     * We're doing calculations in projective, because its operations don't require costly inversion.
     */ class Point {
        constructor(px, py, pz){
            this.px = px;
            this.py = py;
            this.pz = pz;
            if (px == null || !Fp.isValid(px)) throw new Error("x required");
            if (py == null || !Fp.isValid(py)) throw new Error("y required");
            if (pz == null || !Fp.isValid(pz)) throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
            const { x, y } = p || {};
            if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error("invalid affine point");
            if (p instanceof Point) throw new Error("projective point not allowed");
            const is0 = (i)=>Fp.eql(i, Fp.ZERO);
            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
            if (is0(x) && is0(y)) return Point.ZERO;
            return new Point(x, y, Fp.ONE);
        }
        get x() {
            return this.toAffine().x;
        }
        get y() {
            return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */ static normalizeZ(points) {
            const toInv = Fp.invertBatch(points.map((p)=>p.pz));
            return points.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */ static fromHex(hex) {
            const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
            P.assertValidity();
            return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
            this._WINDOW_SIZE = windowSize;
            pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
            if (this.is0()) {
                // (0, 1, 0) aka ZERO is invalid in most contexts.
                // In BLS, ZERO can be serialized, so we allow it.
                // (0, 0, 0) is wrong representation of ZERO and is always invalid.
                if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;
                throw new Error("bad point: ZERO");
            }
            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
            const { x, y } = this.toAffine();
            // Check if x, y are valid field elements
            if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error("bad point: x or y not FE");
            const left = Fp.sqr(y); // y²
            const right = weierstrassEquation(x); // x³ + ax + b
            if (!Fp.eql(left, right)) throw new Error("bad point: equation left != right");
            if (!this.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
            const { y } = this.toAffine();
            if (Fp.isOdd) return !Fp.isOdd(y);
            throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */ equals(other) {
            assertPrjPoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
            return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */ negate() {
            return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
            const { a, b } = CURVE;
            const b3 = Fp.mul(b, _3n);
            const { px: X1, py: Y1, pz: Z1 } = this;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            let t0 = Fp.mul(X1, X1); // step 1
            let t1 = Fp.mul(Y1, Y1);
            let t2 = Fp.mul(Z1, Z1);
            let t3 = Fp.mul(X1, Y1);
            t3 = Fp.add(t3, t3); // step 5
            Z3 = Fp.mul(X1, Z1);
            Z3 = Fp.add(Z3, Z3);
            X3 = Fp.mul(a, Z3);
            Y3 = Fp.mul(b3, t2);
            Y3 = Fp.add(X3, Y3); // step 10
            X3 = Fp.sub(t1, Y3);
            Y3 = Fp.add(t1, Y3);
            Y3 = Fp.mul(X3, Y3);
            X3 = Fp.mul(t3, X3);
            Z3 = Fp.mul(b3, Z3); // step 15
            t2 = Fp.mul(a, t2);
            t3 = Fp.sub(t0, t2);
            t3 = Fp.mul(a, t3);
            t3 = Fp.add(t3, Z3);
            Z3 = Fp.add(t0, t0); // step 20
            t0 = Fp.add(Z3, t0);
            t0 = Fp.add(t0, t2);
            t0 = Fp.mul(t0, t3);
            Y3 = Fp.add(Y3, t0);
            t2 = Fp.mul(Y1, Z1); // step 25
            t2 = Fp.add(t2, t2);
            t0 = Fp.mul(t2, t3);
            X3 = Fp.sub(X3, t0);
            Z3 = Fp.mul(t2, t1);
            Z3 = Fp.add(Z3, Z3); // step 30
            Z3 = Fp.add(Z3, Z3);
            return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
            assertPrjPoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            const a = CURVE.a;
            const b3 = Fp.mul(CURVE.b, _3n);
            let t0 = Fp.mul(X1, X2); // step 1
            let t1 = Fp.mul(Y1, Y2);
            let t2 = Fp.mul(Z1, Z2);
            let t3 = Fp.add(X1, Y1);
            let t4 = Fp.add(X2, Y2); // step 5
            t3 = Fp.mul(t3, t4);
            t4 = Fp.add(t0, t1);
            t3 = Fp.sub(t3, t4);
            t4 = Fp.add(X1, Z1);
            let t5 = Fp.add(X2, Z2); // step 10
            t4 = Fp.mul(t4, t5);
            t5 = Fp.add(t0, t2);
            t4 = Fp.sub(t4, t5);
            t5 = Fp.add(Y1, Z1);
            X3 = Fp.add(Y2, Z2); // step 15
            t5 = Fp.mul(t5, X3);
            X3 = Fp.add(t1, t2);
            t5 = Fp.sub(t5, X3);
            Z3 = Fp.mul(a, t4);
            X3 = Fp.mul(b3, t2); // step 20
            Z3 = Fp.add(X3, Z3);
            X3 = Fp.sub(t1, Z3);
            Z3 = Fp.add(t1, Z3);
            Y3 = Fp.mul(X3, Z3);
            t1 = Fp.add(t0, t0); // step 25
            t1 = Fp.add(t1, t0);
            t2 = Fp.mul(a, t2);
            t4 = Fp.mul(b3, t4);
            t1 = Fp.add(t1, t2);
            t2 = Fp.sub(t0, t2); // step 30
            t2 = Fp.mul(a, t2);
            t4 = Fp.add(t4, t2);
            t0 = Fp.mul(t1, t4);
            Y3 = Fp.add(Y3, t0);
            t0 = Fp.mul(t5, t4); // step 35
            X3 = Fp.mul(t3, X3);
            X3 = Fp.sub(X3, t0);
            t0 = Fp.mul(t3, t1);
            Z3 = Fp.mul(t5, Z3);
            Z3 = Fp.add(Z3, t0); // step 40
            return new Point(X3, Y3, Z3);
        }
        subtract(other) {
            return this.add(other.negate());
        }
        is0() {
            return this.equals(Point.ZERO);
        }
        wNAF(n) {
            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp)=>{
                const toInv = Fp.invertBatch(comp.map((p)=>p.pz));
                return comp.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);
            });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */ multiplyUnsafe(n) {
            const I = Point.ZERO;
            if (n === _0n) return I;
            assertGE(n); // Will throw on 0
            if (n === _1n) return this;
            const { endo } = CURVE;
            if (!endo) return wnaf.unsafeLadder(this, n);
            // Apply endomorphism
            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let k1p = I;
            let k2p = I;
            let d = this;
            while(k1 > _0n || k2 > _0n){
                if (k1 & _1n) k1p = k1p.add(d);
                if (k2 & _1n) k2p = k2p.add(d);
                d = d.double();
                k1 >>= _1n;
                k2 >>= _1n;
            }
            if (k1neg) k1p = k1p.negate();
            if (k2neg) k2p = k2p.negate();
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */ multiply(scalar) {
            assertGE(scalar);
            let n = scalar;
            let point, fake; // Fake point is used to const-time mult
            const { endo } = CURVE;
            if (endo) {
                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
                let { p: k1p, f: f1p } = this.wNAF(k1);
                let { p: k2p, f: f2p } = this.wNAF(k2);
                k1p = wnaf.constTimeNegate(k1neg, k1p);
                k2p = wnaf.constTimeNegate(k2neg, k2p);
                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                point = k1p.add(k2p);
                fake = f1p.add(f2p);
            } else {
                const { p, f } = this.wNAF(n);
                point = p;
                fake = f;
            }
            // Normalize `z` for both points, but return only real one
            return Point.normalizeZ([
                point,
                fake
            ])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */ multiplyAndAddUnsafe(Q, a, b) {
            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
            const mul = (P, a // Select faster multiply() method
            )=>a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);
            const sum = mul(this, a).add(mul(Q, b));
            return sum.is0() ? undefined : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
            const { px: x, py: y, pz: z } = this;
            const is0 = this.is0();
            // If invZ was 0, we return zero point. However we still want to execute
            // all operations, so we replace invZ with a random number, 1.
            if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);
            const ax = Fp.mul(x, iz);
            const ay = Fp.mul(y, iz);
            const zz = Fp.mul(z, iz);
            if (is0) return {
                x: Fp.ZERO,
                y: Fp.ZERO
            };
            if (!Fp.eql(zz, Fp.ONE)) throw new Error("invZ was invalid");
            return {
                x: ax,
                y: ay
            };
        }
        isTorsionFree() {
            const { h: cofactor, isTorsionFree } = CURVE;
            if (cofactor === _1n) return true; // No subgroups, always torsion-free
            if (isTorsionFree) return isTorsionFree(Point, this);
            throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
            const { h: cofactor, clearCofactor } = CURVE;
            if (cofactor === _1n) return this; // Fast-path
            if (clearCofactor) return clearCofactor(Point, this);
            return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
            this.assertValidity();
            return toBytes(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
            return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
    }
    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    // Validate if generator point is on curve
    return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
    };
}
exports.weierstrassPoints = weierstrassPoints;
function validateOpts(curve) {
    const opts = (0, curve_js_1.validateBasic)(curve);
    ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
    }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
    });
    return Object.freeze({
        lowS: true,
        ...opts
    });
}
function weierstrass(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
    function isValidFieldElement(num) {
        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
    }
    function modN(a) {
        return mod.mod(a, CURVE_ORDER);
    }
    function invN(a) {
        return mod.invert(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes (_c, point, isCompressed) {
            const a = point.toAffine();
            const x = Fp.toBytes(a.x);
            const cat = ut.concatBytes;
            if (isCompressed) return cat(Uint8Array.from([
                point.hasEvenY() ? 0x02 : 0x03
            ]), x);
            else return cat(Uint8Array.from([
                0x04
            ]), x, Fp.toBytes(a.y));
        },
        fromBytes (bytes) {
            const len = bytes.length;
            const head = bytes[0];
            const tail = bytes.subarray(1);
            // this.assertValidity() is done inside of fromHex
            if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                const x = ut.bytesToNumberBE(tail);
                if (!isValidFieldElement(x)) throw new Error("Point is not on curve");
                const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                const isYOdd = (y & _1n) === _1n;
                // ECDSA
                const isHeadOdd = (head & 1) === 1;
                if (isHeadOdd !== isYOdd) y = Fp.neg(y);
                return {
                    x,
                    y
                };
            } else if (len === uncompressedLen && head === 0x04) {
                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                return {
                    x,
                    y
                };
            } else throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
        }
    });
    const numToNByteStr = (num)=>ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> _1n;
        return number > HALF;
    }
    function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    }
    // slice bytes num
    const slcNum = (b, from, to)=>ut.bytesToNumberBE(b.slice(from, to));
    /**
     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
     */ class Signature {
        constructor(r, s, recovery){
            this.r = r;
            this.s = s;
            this.recovery = recovery;
            this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
            const l = CURVE.nByteLength;
            hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
            const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
            return new Signature(r, s);
        }
        assertValidity() {
            // can use assertGE here
            if (!isWithinCurveOrder(this.r)) throw new Error("r must be 0 < r < CURVE.n");
            if (!isWithinCurveOrder(this.s)) throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
            return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
            const { r, s, recovery: rec } = this;
            const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash)); // Truncate hash
            if (rec == null || ![
                0,
                1,
                2,
                3
            ].includes(rec)) throw new Error("recovery id invalid");
            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
            if (radj >= Fp.ORDER) throw new Error("recovery id 2 or 3 invalid");
            const prefix = (rec & 1) === 0 ? "02" : "03";
            const R = Point.fromHex(prefix + numToNByteStr(radj));
            const ir = invN(radj); // r^-1
            const u1 = modN(-h * ir); // -hr^-1
            const u2 = modN(s * ir); // sr^-1
            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
            if (!Q) throw new Error("point at infinify"); // unsafe is fine: no priv data leaked
            Q.assertValidity();
            return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
            return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
            return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
            return exports.DER.hexFromSig({
                r: this.r,
                s: this.s
            });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
            return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
            return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
    }
    const utils = {
        isValidPrivateKey (privateKey) {
            try {
                normPrivateKeyToScalar(privateKey);
                return true;
            } catch (error) {
                return false;
            }
        },
        normPrivateKeyToScalar: normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */ randomPrivateKey: ()=>{
            const length = mod.getMinHashLength(CURVE.n);
            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */ precompute (windowSize = 8, point = Point.BASE) {
            point._setWindowSize(windowSize);
            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
            return point;
        }
    };
    /**
     * Computes public key for a private key. Checks for validity of the private key.
     * @param privateKey private key
     * @param isCompressed whether to return compact (default), or full key
     * @returns Public key, full when isCompressed=false; short when isCompressed=true
     */ function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    /**
     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
     */ function isProbPub(item) {
        const arr = ut.isBytes(item);
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr) return len === compressedLen || len === uncompressedLen;
        if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point) return true;
        return false;
    }
    /**
     * ECDH (Elliptic Curve Diffie Hellman).
     * Computes shared public key from private key and public key.
     * Checks: 1) private key validity 2) shared key is on-curve.
     * Does NOT hash the result.
     * @param privateA private key
     * @param publicB different public key
     * @param isCompressed whether to return compact (default), or full key
     * @returns shared public key
     */ function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA)) throw new Error("first arg must be private key");
        if (!isProbPub(publicB)) throw new Error("second arg must be public key");
        const b = Point.fromHex(publicB); // check for being on-curve
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
    const bits2int = CURVE.bits2int || function(bytes) {
        // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
        // for some cases, since bytes.length * 8 is not actual bitLength.
        const num = ut.bytesToNumberBE(bytes); // check for == u8 done here
        const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
        return delta > 0 ? num >> BigInt(delta) : num;
    };
    const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
        return modN(bits2int(bytes)); // can't use bytesToNumberBE here
    };
    // NOTE: pads output with zero as per spec
    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
    /**
     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
     */ function int2octets(num) {
        if (typeof num !== "bigint") throw new Error("bigint expected");
        if (!(_0n <= num && num < ORDER_MASK)) throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        // works with order, can have different size than numToField!
        return ut.numberToBytesBE(num, CURVE.nByteLength);
    }
    // Steps A, D of RFC6979 3.2
    // Creates RFC6979 seed; converts msg/privKey to numbers.
    // Used only in sign, not in verify.
    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
    // Also it can be bigger for P224 + SHA256
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if ([
            "recovered",
            "canonical"
        ].some((k)=>k in opts)) throw new Error("sign() legacy options not supported");
        const { hash, randomBytes } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
        if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        if (prehash) msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash(msgHash));
        // We can't later call bits2octets, since nested bits2int is broken for curves
        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
        const seedArgs = [
            int2octets(d),
            int2octets(h1int)
        ];
        // extraEntropy. RFC6979 3.6: additional k' (optional).
        if (ent != null) {
            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
            seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e)); // check for being bytes
        }
        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2
        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
        // Converts signature params into point w r/s, checks result for validity.
        function k2sig(kBytes) {
            // RFC 6979 Section 3.2, step 3: k = bits2int(T)
            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
            if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N
            const ik = invN(k); // k^-1 mod n
            const q = Point.BASE.multiply(k).toAffine(); // q = Gk
            const r = modN(q.x); // r = q.x mod n
            if (r === _0n) return;
            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
            const s = modN(ik * modN(m + r * d)); // Not using blinding here
            if (s === _0n) return;
            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)
            let normS = s;
            if (lowS && isBiggerThanHalfOrder(s)) {
                normS = normalizeS(s); // if lowS was passed, ensure s is always
                recovery ^= 1; // // in the bottom half of N
            }
            return new Signature(r, normS, recovery); // use normS, not s
        }
        return {
            seed,
            k2sig
        };
    }
    const defaultSigOpts = {
        lowS: CURVE.lowS,
        prehash: false
    };
    const defaultVerOpts = {
        lowS: CURVE.lowS,
        prehash: false
    };
    /**
     * Signs message hash with a private key.
     * ```
     * sign(m, d, k) where
     *   (x, y) = G × k
     *   r = x mod n
     *   s = (m + dr)/k mod n
     * ```
     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
     * @param privKey private key
     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
     * @returns signature with recovery param
     */ function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig); // Steps B, C, D, E, F, G
    }
    // Enable precomputes. Slows down first publicKey computation by 20ms.
    Point.BASE._setWindowSize(8);
    // utils.precompute(8, ProjectivePoint.BASE)
    /**
     * Verifies a signature against message hash and public key.
     * Rejects lowS signatures by default: to override,
     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
     *
     * ```
     * verify(r, s, h, P) where
     *   U1 = hs^-1 mod n
     *   U2 = rs^-1 mod n
     *   R = U1⋅G - U2⋅P
     *   mod(R.x, n) == r
     * ```
     */ function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_1.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts) throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = undefined;
        let P;
        try {
            if (typeof sg === "string" || ut.isBytes(sg)) // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
            // Since DER can also be 2*nByteLength bytes, we check for it first.
            try {
                _sig = Signature.fromDER(sg);
            } catch (derError) {
                if (!(derError instanceof exports.DER.Err)) throw derError;
                _sig = Signature.fromCompact(sg);
            }
            else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
                const { r, s } = sg;
                _sig = new Signature(r, s);
            } else throw new Error("PARSE");
            P = Point.fromHex(publicKey);
        } catch (error) {
            if (error.message === "PARSE") throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
            return false;
        }
        if (lowS && _sig.hasHighS()) return false;
        if (prehash) msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
        const is = invN(s); // s^-1
        const u1 = modN(h * is); // u1 = hs^-1 mod n
        const u2 = modN(r * is); // u2 = rs^-1 mod n
        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
        if (!R) return false;
        const v = modN(R.x);
        return v === r;
    }
    return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point,
        Signature,
        utils
    };
}
exports.weierstrass = weierstrass;
/**
 * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
 * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
 * b = True and y = sqrt(u / v) if (u / v) is square in F, and
 * b = False and y = sqrt(Z * (u / v)) otherwise.
 * @param Fp
 * @param Z
 * @returns
 */ function SWUFpSqrtRatio(Fp, Z) {
    // Generic implementation
    const q = Fp.ORDER;
    let l = _0n;
    for(let o = q - _1n; o % _2n === _0n; o /= _2n)l += _1n;
    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.
    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.
    // 2n ** c1 == 2n << (c1-1)
    const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;
    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic
    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic
    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic
    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic
    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2
    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)
    let sqrtRatio = (u, v)=>{
        let tv1 = c6; // 1. tv1 = c6
        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4
        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2
        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v
        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3
        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3
        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2
        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v
        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u
        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2
        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5
        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1
        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7
        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1
        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)
        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)
        // 17. for i in (c1, c1 - 1, ..., 2):
        for(let i = c1; i > _1n; i--){
            let tv5 = i - _2n; // 18.    tv5 = i - 2
            tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5
            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5
            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1
            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1
            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1
            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1
            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)
            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)
        }
        return {
            isValid: isQR,
            value: tv3
        };
    };
    if (Fp.ORDER % _4n === _3n) {
        // sqrt_ratio_3mod4(u, v)
        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic
        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)
        sqrtRatio = (u, v)=>{
            let tv1 = Fp.sqr(v); // 1. tv1 = v^2
            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v
            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2
            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1
            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2
            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2
            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v
            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u
            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)
            return {
                isValid: isQR,
                value: y
            }; // 11. return (isQR, y) isQR ? y : y*c2
        };
    }
    // No curves uses that
    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
    return sqrtRatio;
}
exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
/**
 * Simplified Shallue-van de Woestijne-Ulas Method
 * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
 */ function mapToCurveSimpleSWU(Fp, opts) {
    mod.validateField(Fp);
    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error("mapToCurveSimpleSWU: invalid opts");
    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
    if (!Fp.isOdd) throw new Error("Fp.isOdd is not implemented!");
    // Input: u, an element of F.
    // Output: (x, y), a point on E.
    return (u)=>{
        // prettier-ignore
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u); // 1.  tv1 = u^2
        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1
        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2
        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1
        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1
        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)
        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4
        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2
        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2
        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6
        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5
        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3
        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4
        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6
        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5
        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3
        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1
        y = Fp.mul(y, value); // 20.   y = y * y1
        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)
        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)
        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)
        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)
        x = Fp.div(x, tv4); // 25.   x = x / tv4
        return {
            x,
            y
        };
    };
}
exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;

},{"d8b1615c256fe3fa":"cB5Z5","aae491f09795d5ee":"cBmkf","11f68d725b0f6f5d":"etkeY"}],"etkeY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateBasic = exports.wNAF = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Abelian group utilities
const modular_js_1 = require("72c8f755a25fddc3");
const utils_js_1 = require("f90fcba6ea31de55");
const _0n = BigInt(0);
const _1n = BigInt(1);
// Elliptic curve multiplication of Point by scalar. Fragile.
// Scalars should always be less than curve order: this should be checked inside of a curve itself.
// Creates precomputation tables for fast multiplication:
// - private scalar is split by fixed size windows of W bits
// - every window point is collected from window's table & added to accumulator
// - since windows are different, same point inside tables won't be accessed more than once per calc
// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
// - +1 window is neccessary for wNAF
// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
// windows to be in different memory locations
function wNAF(c, bits) {
    const constTimeNegate = (condition, item)=>{
        const neg = item.negate();
        return condition ? neg : item;
    };
    const opts = (W)=>{
        const windows = Math.ceil(bits / W) + 1; // +1, because
        const windowSize = 2 ** (W - 1); // -1 because we skip zero
        return {
            windows,
            windowSize
        };
    };
    return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder (elm, n) {
            let p = c.ZERO;
            let d = elm;
            while(n > _0n){
                if (n & _1n) p = p.add(d);
                d = d.double();
                n >>= _1n;
            }
            return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */ precomputeWindow (elm, W) {
            const { windows, windowSize } = opts(W);
            const points = [];
            let p = elm;
            let base = p;
            for(let window = 0; window < windows; window++){
                base = p;
                points.push(base);
                // =1, because we skip zero
                for(let i = 1; i < windowSize; i++){
                    base = base.add(p);
                    points.push(base);
                }
                p = base.double();
            }
            return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */ wNAF (W, precomputes, n) {
            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
            // But need to carefully remove other checks before wNAF. ORDER == bits here
            const { windows, windowSize } = opts(W);
            let p = c.ZERO;
            let f = c.BASE;
            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
            const maxNumber = 2 ** W;
            const shiftBy = BigInt(W);
            for(let window = 0; window < windows; window++){
                const offset = window * windowSize;
                // Extract W bits.
                let wbits = Number(n & mask);
                // Shift number by W bits.
                n >>= shiftBy;
                // If the bits are bigger than max size, we'll split those.
                // +224 => 256 - 32
                if (wbits > windowSize) {
                    wbits -= maxNumber;
                    n += _1n;
                }
                // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                // there is negate now: it is possible that negated element from low value
                // would be the same as high element, which will create carry into next window.
                // It's not obvious how this can fail, but still worth investigating later.
                // Check if we're onto Zero point.
                // Add random point inside current window to f.
                const offset1 = offset;
                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                const cond1 = window % 2 !== 0;
                const cond2 = wbits < 0;
                if (wbits === 0) // The most important part for const-time getPublicKey
                f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                else p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
            // Even if the variable is still unused, there are some checks which will
            // throw an exception, so compiler needs to prove they won't happen, which is hard.
            // At this point there is a way to F be infinity-point even if p is not,
            // which makes it less const-time: around 1 bigint multiply.
            return {
                p,
                f
            };
        },
        wNAFCached (P, precomputesMap, n, transform) {
            // @ts-ignore
            const W = P._WINDOW_SIZE || 1;
            // Calculate precomputes on a first run, reuse them after
            let comp = precomputesMap.get(P);
            if (!comp) {
                comp = this.precomputeWindow(P, W);
                if (W !== 1) precomputesMap.set(P, transform(comp));
            }
            return this.wNAF(W, comp, n);
        }
    };
}
exports.wNAF = wNAF;
function validateBasic(curve) {
    (0, modular_js_1.validateField)(curve.Fp);
    (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
    }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
    });
    // Set defaults
    return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        p: curve.Fp.ORDER
    });
}
exports.validateBasic = validateBasic;

},{"72c8f755a25fddc3":"cB5Z5","f90fcba6ea31de55":"cBmkf"}],"2yuJj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createHasher = exports.isogenyMap = exports.hash_to_field = exports.expand_message_xof = exports.expand_message_xmd = void 0;
const modular_js_1 = require("eccb35e649679ca");
const utils_js_1 = require("202487820f28c009");
function validateDST(dst) {
    if ((0, utils_js_1.isBytes)(dst)) return dst;
    if (typeof dst === "string") return (0, utils_js_1.utf8ToBytes)(dst);
    throw new Error("DST must be Uint8Array or string");
}
// Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.
const os2ip = utils_js_1.bytesToNumberBE;
// Integer to Octet Stream (numberToBytesBE)
function i2osp(value, length) {
    if (value < 0 || value >= 1 << 8 * length) throw new Error(`bad I2OSP call: value=${value} length=${length}`);
    const res = Array.from({
        length
    }).fill(0);
    for(let i = length - 1; i >= 0; i--){
        res[i] = value & 0xff;
        value >>>= 8;
    }
    return new Uint8Array(res);
}
function strxor(a, b) {
    const arr = new Uint8Array(a.length);
    for(let i = 0; i < a.length; i++)arr[i] = a[i] ^ b[i];
    return arr;
}
function abytes(item) {
    if (!(0, utils_js_1.isBytes)(item)) throw new Error("Uint8Array expected");
}
function isNum(item) {
    if (!Number.isSafeInteger(item)) throw new Error("number expected");
}
// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1
function expand_message_xmd(msg, DST, lenInBytes, H) {
    abytes(msg);
    abytes(DST);
    isNum(lenInBytes);
    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
    if (DST.length > 255) DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
    const ell = Math.ceil(lenInBytes / b_in_bytes);
    if (ell > 255) throw new Error("Invalid xmd length");
    const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
    const Z_pad = i2osp(0, r_in_bytes);
    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str
    const b = new Array(ell);
    const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
    b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
    for(let i = 1; i <= ell; i++){
        const args = [
            strxor(b_0, b[i - 1]),
            i2osp(i + 1, 1),
            DST_prime
        ];
        b[i] = H((0, utils_js_1.concatBytes)(...args));
    }
    const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
    return pseudo_random_bytes.slice(0, lenInBytes);
}
exports.expand_message_xmd = expand_message_xmd;
// Produces a uniformly random byte string using an extendable-output function (XOF) H.
// 1. The collision resistance of H MUST be at least k bits.
// 2. H MUST be an XOF that has been proved indifferentiable from
//    a random oracle under a reasonable cryptographic assumption.
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2
function expand_message_xof(msg, DST, lenInBytes, k, H) {
    abytes(msg);
    abytes(DST);
    isNum(lenInBytes);
    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));
    if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({
            dkLen
        }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
    }
    if (lenInBytes > 65535 || DST.length > 255) throw new Error("expand_message_xof: invalid lenInBytes");
    return H.create({
        dkLen: lenInBytes
    }).update(msg).update(i2osp(lenInBytes, 2))// 2. DST_prime = DST || I2OSP(len(DST), 1)
    .update(DST).update(i2osp(DST.length, 1)).digest();
}
exports.expand_message_xof = expand_message_xof;
/**
 * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F
 * https://www.rfc-editor.org/rfc/rfc9380#section-5.2
 * @param msg a byte string containing the message to hash
 * @param count the number of elements of F to output
 * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
 * @returns [u_0, ..., u_(count - 1)], a list of field elements.
 */ function hash_to_field(msg, count, options) {
    (0, utils_js_1.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
    });
    const { p, k, m, hash, expand, DST: _DST } = options;
    abytes(msg);
    isNum(count);
    const DST = validateDST(_DST);
    const log2p = p.toString(2).length;
    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above
    const len_in_bytes = count * m * L;
    let prb; // pseudo_random_bytes
    if (expand === "xmd") prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
    else if (expand === "xof") prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
    else if (expand === "_internal_pass") // for internal tests only
    prb = msg;
    else throw new Error('expand must be "xmd" or "xof"');
    const u = new Array(count);
    for(let i = 0; i < count; i++){
        const e = new Array(m);
        for(let j = 0; j < m; j++){
            const elm_offset = L * (j + i * m);
            const tv = prb.subarray(elm_offset, elm_offset + L);
            e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
    }
    return u;
}
exports.hash_to_field = hash_to_field;
function isogenyMap(field, map) {
    // Make same order as in spec
    const COEFF = map.map((i)=>Array.from(i).reverse());
    return (x, y)=>{
        const [xNum, xDen, yNum, yDen] = COEFF.map((val)=>val.reduce((acc, i)=>field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen); // xNum / xDen
        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)
        return {
            x,
            y
        };
    };
}
exports.isogenyMap = isogenyMap;
function createHasher(Point, mapToCurve, def) {
    if (typeof mapToCurve !== "function") throw new Error("mapToCurve() must be defined");
    return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve (msg, options) {
            const u = hash_to_field(msg, 2, {
                ...def,
                DST: def.DST,
                ...options
            });
            const u0 = Point.fromAffine(mapToCurve(u[0]));
            const u1 = Point.fromAffine(mapToCurve(u[1]));
            const P = u0.add(u1).clearCofactor();
            P.assertValidity();
            return P;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve (msg, options) {
            const u = hash_to_field(msg, 1, {
                ...def,
                DST: def.encodeDST,
                ...options
            });
            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
            P.assertValidity();
            return P;
        }
    };
}
exports.createHasher = createHasher;

},{"eccb35e649679ca":"cB5Z5","202487820f28c009":"cBmkf"}],"jmUYM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createCurve = exports.getHash = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ const hmac_1 = require("2bb3ed73a71161e3");
const utils_1 = require("808050cc11f056c7");
const weierstrass_js_1 = require("bceff96a5b87336d");
// connects noble-curves to noble-hashes
function getHash(hash) {
    return {
        hash,
        hmac: (key, ...msgs)=>(0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes
    };
}
exports.getHash = getHash;
function createCurve(curveDef, defHash) {
    const create = (hash)=>(0, weierstrass_js_1.weierstrass)({
            ...curveDef,
            ...getHash(hash)
        });
    return Object.freeze({
        ...create(defHash),
        create
    });
}
exports.createCurve = createCurve;

},{"2bb3ed73a71161e3":"3IfCc","808050cc11f056c7":"2ehgp","bceff96a5b87336d":"5TEzS"}],"3IfCc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hmac = exports.HMAC = void 0;
const _assert_js_1 = require("88de570f0f701cc6");
const utils_js_1 = require("337359ae358d0fc");
// HMAC (RFC 2104)
class HMAC extends utils_js_1.Hash {
    constructor(hash, _key){
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function") throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;
        this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for(let i = 0; i < pad.length; i++)pad[i] ^= 106;
        this.oHash.update(pad);
        pad.fill(0);
    }
    update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
}
exports.HMAC = HMAC;
/**
 * HMAC: RFC2104 message authentication code.
 * @param hash - function that would be used e.g. sha256
 * @param key - message key
 * @param message - message data
 */ const hmac = (hash, key, message)=>new HMAC(hash, key).update(message).digest();
exports.hmac = hmac;
exports.hmac.create = (hash, key)=>new HMAC(hash, key);

},{"88de570f0f701cc6":"BFdql","337359ae358d0fc":"2ehgp"}],"h6UHx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BN_BE_OPTS", ()=>BN_BE_OPTS);
parcelHelpers.export(exports, "BN_LE_OPTS", ()=>BN_LE_OPTS);
parcelHelpers.export(exports, "BN_LE_16_OPTS", ()=>BN_LE_16_OPTS);
parcelHelpers.export(exports, "BN_BE_32_OPTS", ()=>BN_BE_32_OPTS);
parcelHelpers.export(exports, "BN_LE_32_OPTS", ()=>BN_LE_32_OPTS);
parcelHelpers.export(exports, "BN_BE_256_OPTS", ()=>BN_BE_256_OPTS);
parcelHelpers.export(exports, "BN_LE_256_OPTS", ()=>BN_LE_256_OPTS);
parcelHelpers.export(exports, "BN_LE_512_OPTS", ()=>BN_LE_512_OPTS);
const BN_BE_OPTS = {
    isLe: false
};
const BN_LE_OPTS = {
    isLe: true
};
const BN_LE_16_OPTS = {
    bitLength: 16,
    isLe: true
};
const BN_BE_32_OPTS = {
    bitLength: 32,
    isLe: false
};
const BN_LE_32_OPTS = {
    bitLength: 32,
    isLe: true
};
const BN_BE_256_OPTS = {
    bitLength: 256,
    isLe: false
};
const BN_LE_256_OPTS = {
    bitLength: 256,
    isLe: true
};
const BN_LE_512_OPTS = {
    bitLength: 512,
    isLe: true
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iNBtl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isEthereumAddress", ()=>isEthereumAddress);
var _util = require("@polkadot/util");
var _isChecksumJs = require("./isChecksum.js");
function isEthereumAddress(address) {
    if (!address || address.length !== 42 || !(0, _util.isHex)(address)) return false;
    else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) return true;
    return (0, _isChecksumJs.isEthereumChecksum)(address);
}

},{"@polkadot/util":"3HnHw","./isChecksum.js":"jJwHG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jJwHG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isEthereumChecksum", ()=>isEthereumChecksum);
var _util = require("@polkadot/util");
var _indexJs = require("../keccak/index.js");
function isInvalidChar(char, byte) {
    return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
}
function isEthereumChecksum(_address) {
    const address = _address.replace("0x", "");
    const hash = (0, _util.u8aToHex)((0, _indexJs.keccakAsU8a)(address.toLowerCase()), -1, false);
    for(let i = 0; i < 40; i++){
        if (isInvalidChar(address[i], parseInt(hash[i], 16))) return false;
    }
    return true;
}

},{"@polkadot/util":"3HnHw","../keccak/index.js":"6zB64","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9J4uy":[function(require,module,exports) {
/**
 * @summary Create xxhash64 values with specified bitlengths
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xxhashAsHex", ()=>(0, _asU8AJs.xxhashAsHex));
parcelHelpers.export(exports, "xxhashAsU8a", ()=>(0, _asU8AJs.xxhashAsU8a));
var _asU8AJs = require("./asU8a.js");

},{"./asU8a.js":"eMfkb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eMfkb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name xxhashAsU8a
 * @summary Creates a xxhash64 u8a from the input.
 * @description
 * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { xxhashAsU8a } from '@polkadot/util-crypto';
 *
 * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999
 * ```
 */ parcelHelpers.export(exports, "xxhashAsU8a", ()=>xxhashAsU8a);
parcelHelpers.export(exports, "xxhashAsHex", ()=>xxhashAsHex);
var _util = require("@polkadot/util");
var _wasmCrypto = require("@polkadot/wasm-crypto");
var _helpersJs = require("../helpers.js");
var _xxhash64Js = require("./xxhash64.js");
function xxhashAsU8a(data, bitLength = 64, onlyJs) {
    const rounds = Math.ceil(bitLength / 64);
    const u8a = (0, _util.u8aToU8a)(data);
    if (!(0, _util.hasBigInt) || !onlyJs && (0, _wasmCrypto.isReady)()) return (0, _wasmCrypto.twox)(u8a, rounds);
    const result = new Uint8Array(rounds * 8);
    for(let seed = 0; seed < rounds; seed++)result.set((0, _xxhash64Js.xxhash64)(u8a, seed).reverse(), seed * 8);
    return result;
}
const xxhashAsHex = /*#__PURE__*/ (0, _helpersJs.createAsHex)(xxhashAsU8a);

},{"@polkadot/util":"3HnHw","@polkadot/wasm-crypto":"19VJZ","../helpers.js":"by01j","./xxhash64.js":"gmAbl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gmAbl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xxhash64", ()=>xxhash64);
var _util = require("@polkadot/util");
var _xBigint = require("@polkadot/x-bigint");
const P64_1 = (0, _xBigint.BigInt)("11400714785074694791");
const P64_2 = (0, _xBigint.BigInt)("14029467366897019727");
const P64_3 = (0, _xBigint.BigInt)("1609587929392839161");
const P64_4 = (0, _xBigint.BigInt)("9650029242287828579");
const P64_5 = (0, _xBigint.BigInt)("2870177450012600261");
const U64 = (0, _xBigint.BigInt)("0xffffffffffffffff");
const _7n = (0, _xBigint.BigInt)(7);
const _11n = (0, _xBigint.BigInt)(11);
const _12n = (0, _xBigint.BigInt)(12);
const _16n = (0, _xBigint.BigInt)(16);
const _18n = (0, _xBigint.BigInt)(18);
const _23n = (0, _xBigint.BigInt)(23);
const _27n = (0, _xBigint.BigInt)(27);
const _29n = (0, _xBigint.BigInt)(29);
const _31n = (0, _xBigint.BigInt)(31);
const _32n = (0, _xBigint.BigInt)(32);
const _33n = (0, _xBigint.BigInt)(33);
const _64n = (0, _xBigint.BigInt)(64);
const _256n = (0, _xBigint.BigInt)(256);
function rotl(a, b) {
    const c = a & U64;
    return (c << b | c >> _64n - b) & U64;
}
function fromU8a(u8a, p, count) {
    const bigints = new Array(count);
    let offset = 0;
    for(let i = 0; i < count; i++, offset += 2)bigints[i] = (0, _xBigint.BigInt)(u8a[p + offset] | u8a[p + 1 + offset] << 8);
    let result = (0, _util._0n);
    for(let i = count - 1; i >= 0; i--)result = (result << _16n) + bigints[i];
    return result;
}
function init(seed, input) {
    const state = {
        seed,
        u8a: new Uint8Array(32),
        u8asize: 0,
        v1: seed + P64_1 + P64_2,
        v2: seed + P64_2,
        v3: seed,
        v4: seed - P64_1
    };
    if (input.length < 32) {
        state.u8a.set(input);
        state.u8asize = input.length;
        return state;
    }
    const limit = input.length - 32;
    let p = 0;
    if (limit >= 0) {
        const adjustV = (v)=>P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);
        do {
            state.v1 = adjustV(state.v1);
            p += 8;
            state.v2 = adjustV(state.v2);
            p += 8;
            state.v3 = adjustV(state.v3);
            p += 8;
            state.v4 = adjustV(state.v4);
            p += 8;
        }while (p <= limit);
    }
    if (p < input.length) {
        state.u8a.set(input.subarray(p, input.length));
        state.u8asize = input.length - p;
    }
    return state;
}
function xxhash64(input, initSeed) {
    const { seed, u8a, u8asize, v1, v2, v3, v4 } = init((0, _xBigint.BigInt)(initSeed), input);
    let p = 0;
    let h64 = U64 & (0, _xBigint.BigInt)(input.length) + (input.length >= 32 ? ((((rotl(v1, (0, _util._1n)) + rotl(v2, _7n) + rotl(v3, _12n) + rotl(v4, _18n) ^ P64_1 * rotl(v1 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v2 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v4 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);
    while(p <= u8asize - 8){
        h64 = U64 & P64_4 + P64_1 * rotl(h64 ^ P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n), _27n);
        p += 8;
    }
    if (p + 4 <= u8asize) {
        h64 = U64 & P64_3 + P64_2 * rotl(h64 ^ P64_1 * fromU8a(u8a, p, 2), _23n);
        p += 4;
    }
    while(p < u8asize)h64 = U64 & P64_1 * rotl(h64 ^ P64_5 * (0, _xBigint.BigInt)(u8a[p++]), _11n);
    h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
    h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
    h64 = U64 & (h64 ^ h64 >> _32n);
    const result = new Uint8Array(8);
    for(let i = 7; i >= 0; i--){
        result[i] = Number(h64 % _256n);
        h64 = h64 / _256n;
    }
    return result;
}

},{"@polkadot/util":"3HnHw","@polkadot/x-bigint":"6Blk3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2BKKc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "allExtensions", ()=>allExtensions);
parcelHelpers.export(exports, "fallbackExtensions", ()=>fallbackExtensions);
parcelHelpers.export(exports, "findUnknownExtensions", ()=>findUnknownExtensions);
parcelHelpers.export(exports, "expandExtensionTypes", ()=>expandExtensionTypes);
var _util = require("@polkadot/util");
var _polkadotJs = require("./polkadot.js");
var _shellJs = require("./shell.js");
var _statemintJs = require("./statemint.js");
var _substrateJs = require("./substrate.js");
const allExtensions = (0, _util.objectSpread)({}, (0, _substrateJs.substrate), (0, _polkadotJs.polkadot), (0, _shellJs.shell), (0, _statemintJs.statemint));
const fallbackExtensions = [
    "CheckVersion",
    "CheckGenesis",
    "CheckEra",
    "CheckNonce",
    "CheckWeight",
    "ChargeTransactionPayment",
    "CheckBlockGasLimit"
];
function findUnknownExtensions(extensions, userExtensions = {}) {
    const names = [
        ...Object.keys(allExtensions),
        ...Object.keys(userExtensions)
    ];
    return extensions.filter((k)=>!names.includes(k));
}
function expandExtensionTypes(extensions, type, userExtensions = {}) {
    return extensions// Always allow user extensions first - these should provide overrides
    .map((k)=>userExtensions[k] || allExtensions[k]).filter((info)=>!!info).reduce((result, info)=>(0, _util.objectSpread)(result, info[type]), {});
}

},{"@polkadot/util":"3HnHw","./polkadot.js":"b6nDZ","./shell.js":"bHaqk","./statemint.js":"gYfNZ","./substrate.js":"1eK0J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b6nDZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "polkadot", ()=>polkadot);
var _emptyCheckJs = require("./emptyCheck.js");
const polkadot = {
    LimitParathreadCommits: (0, _emptyCheckJs.emptyCheck),
    OnlyStakingAndClaims: (0, _emptyCheckJs.emptyCheck),
    PrevalidateAttests: (0, _emptyCheckJs.emptyCheck),
    RestrictFunctionality: (0, _emptyCheckJs.emptyCheck),
    TransactionCallFilter: (0, _emptyCheckJs.emptyCheck),
    ValidateDoubleVoteReports: (0, _emptyCheckJs.emptyCheck)
};

},{"./emptyCheck.js":"8emcs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8emcs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "emptyCheck", ()=>emptyCheck);
const emptyCheck = {
    extrinsic: {},
    payload: {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bHaqk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shell", ()=>shell);
var _emptyCheckJs = require("./emptyCheck.js");
const shell = {
    DisallowSigned: (0, _emptyCheckJs.emptyCheck)
};

},{"./emptyCheck.js":"8emcs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gYfNZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "statemint", ()=>statemint);
const statemint = {
    ChargeAssetTxPayment: {
        extrinsic: {
            tip: "Compact<Balance>",
            // eslint-disable-next-line sort-keys
            assetId: "TAssetConversion"
        },
        payload: {}
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1eK0J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "substrate", ()=>substrate);
var _emptyCheckJs = require("./emptyCheck.js");
const CheckMortality = {
    extrinsic: {
        era: "ExtrinsicEra"
    },
    payload: {
        blockHash: "Hash"
    }
};
const ChargeTransactionPayment = {
    extrinsic: {
        tip: "Compact<Balance>"
    },
    payload: {}
};
const substrate = {
    ChargeTransactionPayment,
    CheckBlockGasLimit: (0, _emptyCheckJs.emptyCheck),
    CheckEra: CheckMortality,
    CheckGenesis: {
        extrinsic: {},
        payload: {
            genesisHash: "Hash"
        }
    },
    CheckMortality,
    CheckNonZeroSender: (0, _emptyCheckJs.emptyCheck),
    CheckNonce: {
        extrinsic: {
            nonce: "Compact<Index>"
        },
        payload: {}
    },
    CheckSpecVersion: {
        extrinsic: {},
        payload: {
            specVersion: "u32"
        }
    },
    CheckTxVersion: {
        extrinsic: {},
        payload: {
            transactionVersion: "u32"
        }
    },
    CheckVersion: {
        extrinsic: {},
        payload: {
            specVersion: "u32"
        }
    },
    CheckWeight: (0, _emptyCheckJs.emptyCheck),
    LockStakingStatus: (0, _emptyCheckJs.emptyCheck),
    SkipCheckIfFeeless: ChargeTransactionPayment,
    ValidateEquivocationReport: (0, _emptyCheckJs.emptyCheck)
};

},{"./emptyCheck.js":"8emcs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jknfu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericEventData
 * @description
 * Wrapper for the actual data that forms part of an [[Event]]
 */ parcelHelpers.export(exports, "GenericEventData", ()=>GenericEventData);
/**
 * @name GenericEvent
 * @description
 * A representation of a system event. These are generated via the [[Metadata]] interfaces and
 * specific to a specific Substrate runtime
 */ parcelHelpers.export(exports, "GenericEvent", ()=>GenericEvent);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
/** @internal */ function decodeEvent(registry, value) {
    if (!value?.length) return {
        DataType: (0, _typesCodec.Null)
    };
    const index = value.subarray(0, 2);
    return {
        DataType: registry.findMetaEvent(index),
        value: {
            data: value.subarray(2),
            index
        }
    };
}
class GenericEventData extends (0, _typesCodec.Tuple) {
    __internal__meta;
    __internal__method;
    __internal__names = null;
    __internal__section;
    __internal__typeDef;
    constructor(registry, value, meta, section = "<unknown>", method = "<unknown>"){
        const fields = meta?.fields || [];
        super(registry, fields.map(({ type })=>registry.createLookupType(type)), value);
        this.__internal__meta = meta;
        this.__internal__method = method;
        this.__internal__section = section;
        this.__internal__typeDef = fields.map(({ type })=>registry.lookup.getTypeDef(type));
        const names = fields.map(({ name })=>registry.lookup.sanitizeField(name)[0]).filter((n)=>!!n);
        if (names.length === fields.length) {
            this.__internal__names = names;
            (0, _util.objectProperties)(this, names, (_, i)=>this[i]);
        }
    }
    /**
     * @description The wrapped [[EventMetadata]]
     */ get meta() {
        return this.__internal__meta;
    }
    /**
     * @description The method as a string
     */ get method() {
        return this.__internal__method;
    }
    /**
     * @description The field names (as available)
     */ get names() {
        return this.__internal__names;
    }
    /**
     * @description The section as a string
     */ get section() {
        return this.__internal__section;
    }
    /**
     * @description The [[TypeDef]] for this event
     */ get typeDef() {
        return this.__internal__typeDef;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        if (this.__internal__names !== null) {
            const json = {};
            for(let i = 0, count = this.__internal__names.length; i < count; i++)json[this.__internal__names[i]] = this[i].toHuman(isExtended);
            return json;
        }
        return super.toHuman(isExtended);
    }
}
class GenericEvent extends (0, _typesCodec.Struct) {
    // Currently we _only_ decode from Uint8Array, since we expect it to
    // be used via EventRecord
    constructor(registry, _value){
        const { DataType, value } = decodeEvent(registry, _value);
        super(registry, {
            index: "EventId",
            // eslint-disable-next-line sort-keys
            data: DataType
        }, value);
    }
    /**
     * @description The wrapped [[EventData]]
     */ get data() {
        return this.getT("data");
    }
    /**
     * @description The [[EventId]], identifying the raw event
     */ get index() {
        return this.getT("index");
    }
    /**
     * @description The [[EventMetadata]] with the documentation
     */ get meta() {
        return this.data.meta;
    }
    /**
     * @description The method string identifying the event
     */ get method() {
        return this.data.method;
    }
    /**
     * @description The section string identifying the event
     */ get section() {
        return this.data.section;
    }
    /**
     * @description The [[TypeDef]] for the event
     */ get typeDef() {
        return this.data.typeDef;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExpanded) {
        return (0, _util.objectSpread)({
            method: this.method,
            section: this.section
        }, isExpanded ? {
            docs: this.meta.docs.map((d)=>d.toString())
        } : null, super.toHuman(isExpanded));
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b4BtA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./extrinsic/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var _indexJs1 = require("./generic/index.js");
parcelHelpers.exportAll(_indexJs1, exports);
var _indexJs2 = require("./primitive/index.js");
parcelHelpers.exportAll(_indexJs2, exports);

},{"./extrinsic/index.js":"5khiZ","./generic/index.js":"gF9ma","./primitive/index.js":"4FGVo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5khiZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GenericExtrinsic", ()=>(0, _extrinsicJs.GenericExtrinsic));
parcelHelpers.export(exports, "GenericExtrinsicEra", ()=>(0, _extrinsicEraJs.GenericExtrinsicEra));
parcelHelpers.export(exports, "GenericImmortalEra", ()=>(0, _extrinsicEraJs.ImmortalEra));
parcelHelpers.export(exports, "GenericMortalEra", ()=>(0, _extrinsicEraJs.MortalEra));
parcelHelpers.export(exports, "GenericExtrinsicPayload", ()=>(0, _extrinsicPayloadJs.GenericExtrinsicPayload));
parcelHelpers.export(exports, "GenericExtrinsicPayloadUnknown", ()=>(0, _extrinsicPayloadUnknownJs.GenericExtrinsicPayloadUnknown));
parcelHelpers.export(exports, "GenericExtrinsicUnknown", ()=>(0, _extrinsicUnknownJs.GenericExtrinsicUnknown));
parcelHelpers.export(exports, "GenericSignerPayload", ()=>(0, _signerPayloadJs.GenericSignerPayload));
var _extrinsicJs = require("./Extrinsic.js");
var _extrinsicEraJs = require("./ExtrinsicEra.js");
var _extrinsicPayloadJs = require("./ExtrinsicPayload.js");
var _extrinsicPayloadUnknownJs = require("./ExtrinsicPayloadUnknown.js");
var _extrinsicUnknownJs = require("./ExtrinsicUnknown.js");
var _signerPayloadJs = require("./SignerPayload.js");
var _indexJs = require("./v4/index.js");
parcelHelpers.exportAll(_indexJs, exports);

},{"./Extrinsic.js":"lBqTY","./ExtrinsicEra.js":"fiuwA","./ExtrinsicPayload.js":"g8v6p","./ExtrinsicPayloadUnknown.js":"bzf8A","./ExtrinsicUnknown.js":"h76Za","./SignerPayload.js":"79cxZ","./v4/index.js":"k7HoD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lBqTY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LATEST_EXTRINSIC_VERSION", ()=>(0, _extrinsicJs.EXTRINSIC_VERSION));
/**
 * @name GenericExtrinsic
 * @description
 * Representation of an Extrinsic in the system. It contains the actual call,
 * (optional) signature and encodes with an actual length prefix
 *
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 *
 * Can be:
 * - signed, to create a transaction
 * - left as is, to create an inherent
 */ parcelHelpers.export(exports, "GenericExtrinsic", ()=>GenericExtrinsic);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _extrinsicJs = require("./v4/Extrinsic.js");
var _constantsJs = require("./constants.js");
const VERSIONS = [
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicV4"
];
/** @internal */ function newFromValue(registry, value, version) {
    if (value instanceof GenericExtrinsic) return value.unwrap();
    const isSigned = (version & (0, _constantsJs.BIT_SIGNED)) === (0, _constantsJs.BIT_SIGNED);
    const type = VERSIONS[version & (0, _constantsJs.UNMASK_VERSION)] || VERSIONS[0];
    // we cast here since the VERSION definition is incredibly broad - we don't have a
    // slice for "only add extrinsic types", and more string definitions become unwieldy
    return registry.createTypeUnsafe(type, [
        value,
        {
            isSigned,
            version
        }
    ]);
}
/** @internal */ function decodeExtrinsic(registry, value, version = (0, _constantsJs.DEFAULT_VERSION)) {
    if ((0, _util.isU8a)(value) || Array.isArray(value) || (0, _util.isHex)(value)) return decodeU8a(registry, (0, _util.u8aToU8a)(value), version);
    else if (value instanceof registry.createClassUnsafe("Call")) return newFromValue(registry, {
        method: value
    }, version);
    return newFromValue(registry, value, version);
}
/** @internal */ function decodeU8a(registry, value, version) {
    if (!value.length) return newFromValue(registry, new Uint8Array(), version);
    const [offset, length] = (0, _util.compactFromU8a)(value);
    const total = offset + length.toNumber();
    if (total > value.length) throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
    const data = value.subarray(offset, total);
    return newFromValue(registry, data.subarray(1), data[0]);
}
class ExtrinsicBase extends (0, _typesCodec.AbstractBase) {
    constructor(registry, value, initialU8aLength){
        super(registry, value, initialU8aLength);
        const signKeys = Object.keys(registry.getSignedExtensionTypes());
        const getter = (key)=>this.inner.signature[key];
        // This is on the abstract class, ensuring that hasOwnProperty operates
        // correctly, i.e. it needs to be on the base class exposing it
        for(let i = 0, count = signKeys.length; i < count; i++)(0, _util.objectProperty)(this, signKeys[i], getter);
    }
    /**
     * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
     */ get args() {
        return this.method.args;
    }
    /**
     * @description The argument definitions, compatible with [[Call]]
     */ get argsDef() {
        return this.method.argsDef;
    }
    /**
     * @description The actual `[sectionIndex, methodIndex]` as used in the Call
     */ get callIndex() {
        return this.method.callIndex;
    }
    /**
     * @description The actual data for the Call
     */ get data() {
        return this.method.data;
    }
    /**
     * @description The era for this extrinsic
     */ get era() {
        return this.inner.signature.era;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description `true` id the extrinsic is signed
     */ get isSigned() {
        return this.inner.signature.isSigned;
    }
    /**
     * @description The length of the actual data, excluding prefix
     */ get length() {
        return this.toU8a(true).length;
    }
    /**
     * @description The [[FunctionMetadataLatest]] that describes the extrinsic
     */ get meta() {
        return this.method.meta;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */ get method() {
        return this.inner.method;
    }
    /**
     * @description The nonce for this extrinsic
     */ get nonce() {
        return this.inner.signature.nonce;
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */ get signature() {
        return this.inner.signature.signature;
    }
    /**
     * @description The [[Address]] that signed
     */ get signer() {
        return this.inner.signature.signer;
    }
    /**
     * @description Forwards compat
     */ get tip() {
        return this.inner.signature.tip;
    }
    /**
     * @description Returns the raw transaction version (not flagged with signing information)
    */ get type() {
        return this.inner.version;
    }
    get inner() {
        return this.unwrap();
    }
    /**
     * @description Returns the encoded version flag
    */ get version() {
        return this.type | (this.isSigned ? (0, _constantsJs.BIT_SIGNED) : (0, _constantsJs.BIT_UNSIGNED));
    }
    /**
     * @description Checks if the source matches this in type
     */ is(other) {
        return this.method.is(other);
    }
    unwrap() {
        return super.unwrap();
    }
}
class GenericExtrinsic extends ExtrinsicBase {
    __internal__hashCache;
    static LATEST_EXTRINSIC_VERSION = (0, _extrinsicJs.EXTRINSIC_VERSION);
    constructor(registry, value, { version } = {}){
        super(registry, decodeExtrinsic(registry, value, version));
    }
    /**
     * @description returns a hash of the contents
     */ get hash() {
        if (!this.__internal__hashCache) this.__internal__hashCache = super.hash;
        return this.__internal__hashCache;
    }
    /**
     * @description Injects an already-generated signature into the extrinsic
     */ addSignature(signer, signature, payload) {
        this.inner.addSignature(signer, signature, payload);
        this.__internal__hashCache = undefined;
        return this;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        const encoded = (0, _util.u8aConcat)(...this.toU8aInner());
        return {
            inner: this.isSigned ? this.inner.inspect().inner : this.inner.method.inspect().inner,
            outer: [
                (0, _util.compactToU8a)(encoded.length),
                new Uint8Array([
                    this.version
                ])
            ]
        };
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */ sign(account, options) {
        this.inner.sign(account, options);
        this.__internal__hashCache = undefined;
        return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */ signFake(signer, options) {
        this.inner.signFake(signer, options);
        this.__internal__hashCache = undefined;
        return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex(isBare) {
        return (0, _util.u8aToHex)(this.toU8a(isBare));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExpanded) {
        return (0, _util.objectSpread)({}, {
            isSigned: this.isSigned,
            method: this.method.toHuman(isExpanded)
        }, this.isSigned ? {
            era: this.era.toHuman(isExpanded),
            nonce: this.nonce.toHuman(isExpanded),
            signature: this.signature.toHex(),
            signer: this.signer.toHuman(isExpanded),
            tip: this.tip.toHuman(isExpanded)
        } : null);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Extrinsic";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value is not length-prefixed
     */ toU8a(isBare) {
        const encoded = (0, _util.u8aConcat)(...this.toU8aInner());
        return isBare ? encoded : (0, _util.compactAddLength)(encoded);
    }
    toU8aInner() {
        // we do not apply bare to the internal values, rather this only determines out length addition,
        // where we strip all lengths this creates an extrinsic that cannot be decoded
        return [
            new Uint8Array([
                this.version
            ]),
            this.inner.toU8a()
        ];
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","./v4/Extrinsic.js":"llA4W","./constants.js":"gKNvX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"llA4W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EXTRINSIC_VERSION", ()=>EXTRINSIC_VERSION);
/**
 * @name GenericExtrinsicV4
 * @description
 * The third generation of compact extrinsics
 */ parcelHelpers.export(exports, "GenericExtrinsicV4", ()=>GenericExtrinsicV4);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
const EXTRINSIC_VERSION = 4;
class GenericExtrinsicV4 extends (0, _typesCodec.Struct) {
    constructor(registry, value, { isSigned } = {}){
        super(registry, {
            signature: "ExtrinsicSignatureV4",
            // eslint-disable-next-line sort-keys
            method: "Call"
        }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
    }
    /** @internal */ static decodeExtrinsic(registry, value, isSigned = false) {
        if (value instanceof GenericExtrinsicV4) return value;
        else if (value instanceof registry.createClassUnsafe("Call")) return {
            method: value
        };
        else if ((0, _util.isU8a)(value)) {
            // here we decode manually since we need to pull through the version information
            const signature = registry.createTypeUnsafe("ExtrinsicSignatureV4", [
                value,
                {
                    isSigned
                }
            ]);
            const method = registry.createTypeUnsafe("Call", [
                value.subarray(signature.encodedLength)
            ]);
            return {
                method,
                signature
            };
        }
        return value || {};
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */ get method() {
        return this.getT("method");
    }
    /**
     * @description The [[ExtrinsicSignatureV4]]
     */ get signature() {
        return this.getT("signature");
    }
    /**
     * @description The version for the signature
     */ get version() {
        return EXTRINSIC_VERSION;
    }
    /**
     * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
     */ addSignature(signer, signature, payload) {
        this.signature.addSignature(signer, signature, payload);
        return this;
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */ sign(account, options) {
        this.signature.sign(this.method, account, options);
        return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */ signFake(signer, options) {
        this.signature.signFake(this.method, signer, options);
        return this;
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gKNvX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BIT_SIGNED", ()=>BIT_SIGNED);
parcelHelpers.export(exports, "BIT_UNSIGNED", ()=>BIT_UNSIGNED);
parcelHelpers.export(exports, "EMPTY_U8A", ()=>EMPTY_U8A);
parcelHelpers.export(exports, "DEFAULT_VERSION", ()=>DEFAULT_VERSION);
parcelHelpers.export(exports, "IMMORTAL_ERA", ()=>IMMORTAL_ERA);
parcelHelpers.export(exports, "UNMASK_VERSION", ()=>UNMASK_VERSION);
const BIT_SIGNED = 128;
const BIT_UNSIGNED = 0;
const EMPTY_U8A = new Uint8Array();
const DEFAULT_VERSION = 4;
const IMMORTAL_ERA = new Uint8Array([
    0
]);
const UNMASK_VERSION = 127;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fiuwA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name ImmortalEra
 * @description
 * The ImmortalEra for an extrinsic
 */ parcelHelpers.export(exports, "ImmortalEra", ()=>ImmortalEra);
/**
 * @name MortalEra
 * @description
 * The MortalEra for an extrinsic, indicating period and phase
 */ parcelHelpers.export(exports, "MortalEra", ()=>MortalEra);
/**
 * @name GenericExtrinsicEra
 * @description
 * The era for an extrinsic, indicating either a mortal or immortal extrinsic
 */ parcelHelpers.export(exports, "GenericExtrinsicEra", ()=>GenericExtrinsicEra);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _constantsJs = require("./constants.js");
function getTrailingZeros(period) {
    const binary = period.toString(2);
    let index = 0;
    while(binary[binary.length - 1 - index] === "0")index++;
    return index;
}
/** @internal */ function decodeMortalEra(registry, value) {
    if ((0, _util.isU8a)(value) || (0, _util.isHex)(value) || Array.isArray(value)) return decodeMortalU8a(registry, (0, _util.u8aToU8a)(value));
    else if (!value) return [
        new (0, _typesCodec.U64)(registry),
        new (0, _typesCodec.U64)(registry)
    ];
    else if ((0, _util.isObject)(value)) return decodeMortalObject(registry, value);
    throw new Error("Invalid data passed to Mortal era");
}
/** @internal */ function decodeMortalObject(registry, value) {
    const { current, period } = value;
    let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
    calPeriod = Math.min(Math.max(calPeriod, 4), 65536);
    const phase = current % calPeriod;
    const quantizeFactor = Math.max(calPeriod >> 12, 1);
    const quantizedPhase = phase / quantizeFactor * quantizeFactor;
    return [
        new (0, _typesCodec.U64)(registry, calPeriod),
        new (0, _typesCodec.U64)(registry, quantizedPhase)
    ];
}
/** @internal */ function decodeMortalU8a(registry, value) {
    if (value.length === 0) return [
        new (0, _typesCodec.U64)(registry),
        new (0, _typesCodec.U64)(registry)
    ];
    const first = (0, _util.u8aToBn)(value.subarray(0, 1)).toNumber();
    const second = (0, _util.u8aToBn)(value.subarray(1, 2)).toNumber();
    const encoded = first + (second << 8);
    const period = 2 << encoded % 16;
    const quantizeFactor = Math.max(period >> 12, 1);
    const phase = (encoded >> 4) * quantizeFactor;
    if (period < 4 || phase >= period) throw new Error("Invalid data passed to Mortal era");
    return [
        new (0, _typesCodec.U64)(registry, period),
        new (0, _typesCodec.U64)(registry, phase)
    ];
}
/** @internal */ function decodeExtrinsicEra(value = new Uint8Array()) {
    if ((0, _util.isU8a)(value)) return !value.length || value[0] === 0 ? new Uint8Array([
        0
    ]) : new Uint8Array([
        1,
        value[0],
        value[1]
    ]);
    else if (!value) return new Uint8Array([
        0
    ]);
    else if (value instanceof GenericExtrinsicEra) return decodeExtrinsicEra(value.toU8a());
    else if ((0, _util.isHex)(value)) return decodeExtrinsicEra((0, _util.hexToU8a)(value));
    else if ((0, _util.isObject)(value)) {
        const entries = Object.entries(value).map(([k, v])=>[
                k.toLowerCase(),
                v
            ]);
        const mortal = entries.find(([k])=>k.toLowerCase() === "mortalera");
        const immortal = entries.find(([k])=>k.toLowerCase() === "immortalera");
        // this is to de-serialize from JSON
        return mortal ? {
            MortalEra: mortal[1]
        } : immortal ? {
            ImmortalEra: immortal[1]
        } : {
            MortalEra: value
        };
    }
    throw new Error("Invalid data passed to Era");
}
class ImmortalEra extends (0, _typesCodec.Raw) {
    constructor(registry, _value){
        // For immortals, we always provide the known value (i.e. treated as a
        // constant no matter how it is constructed - it is a fixed structure)
        super(registry, (0, _constantsJs.IMMORTAL_ERA));
    }
}
class MortalEra extends (0, _typesCodec.Tuple) {
    constructor(registry, value){
        super(registry, {
            period: (0, _typesCodec.U64),
            phase: (0, _typesCodec.U64)
        }, decodeMortalEra(registry, value));
    }
    /**
     * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
     */ get encodedLength() {
        return 2;
    }
    /**
     * @description The period of this Mortal wraps as a [[U64]]
     */ get period() {
        return this[0];
    }
    /**
     * @description The phase of this Mortal wraps as a [[U64]]
     */ get phase() {
        return this[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return {
            period: (0, _util.formatNumber)(this.period),
            phase: (0, _util.formatNumber)(this.phase)
        };
    }
    /**
     * @description Returns a JSON representation of the actual value
     */ toJSON() {
        return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     * Period and phase are encoded:
     *   - The period of validity from the block hash found in the signing material.
     *   - The phase in the period that this transaction's lifetime begins (and, importantly,
     *     implies which block hash is included in the signature material). If the `period` is
     *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
     *     `period` is.
     */ toU8a(_isBare) {
        const period = this.period.toNumber();
        const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + (this.phase.toNumber() / Math.max(period >> 12, 1) << 4);
        return new Uint8Array([
            encoded & 0xff,
            encoded >> 8
        ]);
    }
    /**
     * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
     */ birth(current) {
        const phase = this.phase.toNumber();
        const period = this.period.toNumber();
        // FIXME No toNumber() here
        return ~~((Math.max((0, _util.bnToBn)(current).toNumber(), phase) - phase) / period) * period + phase;
    }
    /**
     * @description Get the block number of the first block at which the era has ended.
     */ death(current) {
        // FIXME No toNumber() here
        return this.birth(current) + this.period.toNumber();
    }
}
class GenericExtrinsicEra extends (0, _typesCodec.Enum) {
    constructor(registry, value){
        super(registry, {
            ImmortalEra,
            MortalEra
        }, decodeExtrinsicEra(value));
    }
    /**
     * @description Override the encoded length method
     */ get encodedLength() {
        return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
    }
    /**
     * @description Returns the item as a [[ImmortalEra]]
     */ get asImmortalEra() {
        if (!this.isImmortalEra) throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
        return this.inner;
    }
    /**
     * @description Returns the item as a [[MortalEra]]
     */ get asMortalEra() {
        if (!this.isMortalEra) throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
        return this.inner;
    }
    /**
     * @description `true` if Immortal
     */ get isImmortalEra() {
        return this.index === 0;
    }
    /**
     * @description `true` if Mortal
     */ get isMortalEra() {
        return this.index > 0;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","./constants.js":"gKNvX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g8v6p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericExtrinsicPayload
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
 * on the contents included
 */ parcelHelpers.export(exports, "GenericExtrinsicPayload", ()=>GenericExtrinsicPayload);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _constantsJs = require("./constants.js");
const VERSIONS = [
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadV4"
];
/** @internal */ function decodeExtrinsicPayload(registry, value, version = (0, _constantsJs.DEFAULT_VERSION)) {
    if (value instanceof GenericExtrinsicPayload) return value.unwrap();
    return registry.createTypeUnsafe(VERSIONS[version] || VERSIONS[0], [
        value,
        {
            version
        }
    ]);
}
class GenericExtrinsicPayload extends (0, _typesCodec.AbstractBase) {
    constructor(registry, value, { version } = {}){
        super(registry, decodeExtrinsicPayload(registry, value, version));
    }
    /**
     * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
     */ get blockHash() {
        return this.inner.blockHash;
    }
    /**
     * @description The [[ExtrinsicEra]]
     */ get era() {
        return this.inner.era;
    }
    /**
     * @description The genesis block [[BlockHash]] the signature applies to
     */ get genesisHash() {
        // NOTE only v3+
        return this.inner.genesisHash || this.registry.createTypeUnsafe("Hash", []);
    }
    /**
     * @description The [[Bytes]] contained in the payload
     */ get method() {
        return this.inner.method;
    }
    /**
     * @description The [[Index]]
     */ get nonce() {
        return this.inner.nonce;
    }
    /**
     * @description The specVersion as a [[u32]] for this payload
     */ get specVersion() {
        // NOTE only v3+
        return this.inner.specVersion || this.registry.createTypeUnsafe("u32", []);
    }
    /**
     * @description The [[Balance]]
     */ get tip() {
        // NOTE from v2+
        return this.inner.tip || this.registry.createTypeUnsafe("Compact<Balance>", []);
    }
    /**
     * @description The transaction version as a [[u32]] for this payload
     */ get transactionVersion() {
        // NOTE only v4+
        return this.inner.transactionVersion || this.registry.createTypeUnsafe("u32", []);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return this.inner.eq(other);
    }
    /**
     * @description Sign the payload with the keypair
     */ sign(signerPair) {
        const signature = this.inner.sign(signerPair);
        // This is extensible, so we could quite readily extend to send back extra
        // information, such as for instance the payload, i.e. `payload: this.toHex()`
        // For the case here we sign via the extrinsic, we ignore the return, so generally
        // this is applicable for external signing
        return {
            signature: (0, _util.u8aToHex)(signature)
        };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExtended) {
        return this.inner.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "ExtrinsicPayload";
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return this.toHex();
    }
    /**
     * @description Returns a serialized u8a form
     */ toU8a(isBare) {
        // call our parent, with only the method stripped
        return super.toU8a(isBare ? {
            method: true
        } : false);
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","./constants.js":"gKNvX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bzf8A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericExtrinsicPayloadUnknown
 * @description
 * A default handler for payloads where the version is not known (default throw)
 */ parcelHelpers.export(exports, "GenericExtrinsicPayloadUnknown", ()=>GenericExtrinsicPayloadUnknown);
var _typesCodec = require("@polkadot/types-codec");
class GenericExtrinsicPayloadUnknown extends (0, _typesCodec.Struct) {
    constructor(registry, _value, { version = 0 } = {}){
        super(registry, {});
        throw new Error(`Unsupported extrinsic payload version ${version}`);
    }
}

},{"@polkadot/types-codec":"gvW09","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h76Za":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericExtrinsicUnknown
 * @description
 * A default handler for extrinsics where the version is not known (default throw)
 */ parcelHelpers.export(exports, "GenericExtrinsicUnknown", ()=>GenericExtrinsicUnknown);
var _typesCodec = require("@polkadot/types-codec");
var _constantsJs = require("./constants.js");
class GenericExtrinsicUnknown extends (0, _typesCodec.Struct) {
    constructor(registry, _value, { isSigned = false, version = 0 } = {}){
        super(registry, {});
        throw new Error(`Unsupported ${isSigned ? "" : "un"}signed extrinsic version ${version & (0, _constantsJs.UNMASK_VERSION)}`);
    }
}

},{"@polkadot/types-codec":"gvW09","./constants.js":"gKNvX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"79cxZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericSignerPayload
 * @description
 * A generic signer payload that can be used for serialization between API and signer
 */ parcelHelpers.export(exports, "GenericSignerPayload", ()=>GenericSignerPayload);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
const knownTypes = {
    address: "Address",
    blockHash: "Hash",
    blockNumber: "BlockNumber",
    era: "ExtrinsicEra",
    genesisHash: "Hash",
    method: "Call",
    nonce: "Compact<Index>",
    runtimeVersion: "RuntimeVersion",
    signedExtensions: "Vec<Text>",
    tip: "Compact<Balance>",
    version: "u8"
};
class GenericSignerPayload extends (0, _typesCodec.Struct) {
    __internal__extraTypes;
    constructor(registry, value){
        const extensionTypes = (0, _util.objectSpread)({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
        super(registry, (0, _util.objectSpread)({}, extensionTypes, knownTypes), value);
        this.__internal__extraTypes = {};
        const getter = (key)=>this.get(key);
        // add all extras that are not in the base types
        for (const [key, type] of Object.entries(extensionTypes)){
            if (!knownTypes[key]) this.__internal__extraTypes[key] = type;
            (0, _util.objectProperty)(this, key, getter);
        }
    }
    get address() {
        return this.getT("address");
    }
    get blockHash() {
        return this.getT("blockHash");
    }
    get blockNumber() {
        return this.getT("blockNumber");
    }
    get era() {
        return this.getT("era");
    }
    get genesisHash() {
        return this.getT("genesisHash");
    }
    get method() {
        return this.getT("method");
    }
    get nonce() {
        return this.getT("nonce");
    }
    get runtimeVersion() {
        return this.getT("runtimeVersion");
    }
    get signedExtensions() {
        return this.getT("signedExtensions");
    }
    get tip() {
        return this.getT("tip");
    }
    get version() {
        return this.getT("version");
    }
    /**
     * @description Creates an representation of the structure as an ISignerPayload JSON
     */ toPayload() {
        const result = {};
        const keys = Object.keys(this.__internal__extraTypes);
        // add any explicit overrides we may have
        for(let i = 0, count = keys.length; i < count; i++){
            const key = keys[i];
            const value = this.getT(key);
            // Don't include Option.isNone
            if (!(value instanceof (0, _typesCodec.Option)) || value.isSome) // NOTE In the spread below we convert (mostly) to Hex to align
            // with the typings. In the case of "unknown" fields, we use the
            // primitive toJSON conversion (which is serializable). Technically
            // we can include isNone in here as well ("null" is allowed), however
            // for empty fields we just skip it completely (historical compat)
            result[key] = value.toJSON();
        }
        return (0, _util.objectSpread)(result, {
            // the known defaults as managed explicitly and has different
            // formatting in cases, e.g. we mostly expose a hex format here
            address: this.address.toString(),
            blockHash: this.blockHash.toHex(),
            blockNumber: this.blockNumber.toHex(),
            era: this.era.toHex(),
            genesisHash: this.genesisHash.toHex(),
            method: this.method.toHex(),
            nonce: this.nonce.toHex(),
            signedExtensions: this.signedExtensions.map((e)=>e.toString()),
            specVersion: this.runtimeVersion.specVersion.toHex(),
            tip: this.tip.toHex(),
            transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
            version: this.version.toNumber()
        });
    }
    /**
     * @description Creates a representation of the payload in raw Exrinsic form
     */ toRaw() {
        const payload = this.toPayload();
        const data = (0, _util.u8aToHex)(this.registry.createTypeUnsafe("ExtrinsicPayload", [
            payload,
            {
                version: payload.version
            }
        ])// NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)
        .toU8a({
            method: true
        }));
        return {
            address: payload.address,
            data,
            type: "payload"
        };
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k7HoD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GenericExtrinsicV4", ()=>(0, _extrinsicJs.GenericExtrinsicV4));
parcelHelpers.export(exports, "GenericExtrinsicPayloadV4", ()=>(0, _extrinsicPayloadJs.GenericExtrinsicPayloadV4));
parcelHelpers.export(exports, "GenericExtrinsicSignatureV4", ()=>(0, _extrinsicSignatureJs.GenericExtrinsicSignatureV4));
var _extrinsicJs = require("./Extrinsic.js");
var _extrinsicPayloadJs = require("./ExtrinsicPayload.js");
var _extrinsicSignatureJs = require("./ExtrinsicSignature.js");

},{"./Extrinsic.js":"llA4W","./ExtrinsicPayload.js":"fJtHE","./ExtrinsicSignature.js":"a0b6l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fJtHE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericExtrinsicPayloadV4
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is
 * variable length based on the contents included
 */ parcelHelpers.export(exports, "GenericExtrinsicPayloadV4", ()=>GenericExtrinsicPayloadV4);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _utilJs = require("../util.js");
class GenericExtrinsicPayloadV4 extends (0, _typesCodec.Struct) {
    __internal__signOptions;
    constructor(registry, value){
        super(registry, (0, _util.objectSpread)({
            method: "Bytes"
        }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
        // Do detection for the type of extrinsic, in the case of MultiSignature
        // this is an enum, in the case of AnySignature, this is a Hash only
        // (which may be 64 or 65 bytes)
        this.__internal__signOptions = {
            withType: registry.createTypeUnsafe("ExtrinsicSignature", []) instanceof (0, _typesCodec.Enum)
        };
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        return super.inspect({
            method: true
        });
    }
    /**
     * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
     */ get blockHash() {
        return this.getT("blockHash");
    }
    /**
     * @description The [[ExtrinsicEra]]
     */ get era() {
        return this.getT("era");
    }
    /**
     * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
     */ get genesisHash() {
        return this.getT("genesisHash");
    }
    /**
     * @description The [[Bytes]] contained in the payload
     */ get method() {
        return this.getT("method");
    }
    /**
     * @description The [[Index]]
     */ get nonce() {
        return this.getT("nonce");
    }
    /**
     * @description The specVersion for this signature
     */ get specVersion() {
        return this.getT("specVersion");
    }
    /**
     * @description The tip [[Balance]]
     */ get tip() {
        return this.getT("tip");
    }
    /**
     * @description The transactionVersion for this signature
     */ get transactionVersion() {
        return this.getT("transactionVersion");
    }
    /**
     * @description The (optional) asset id for this signature for chains that support transaction fees in assets
     */ get assetId() {
        return this.getT("assetId");
    }
    /**
     * @description Sign the payload with the keypair
     */ sign(signerPair) {
        // NOTE The `toU8a({ method: true })` argument is absolutely critical, we
        // don't want the method (Bytes) to have the length prefix included. This
        // means that the data-as-signed is un-decodable, but is also doesn't need
        // the extra information, only the pure data (and is not decoded) ...
        // The same applies to V1..V3, if we have a V5, carry this comment
        return (0, _utilJs.sign)(this.registry, signerPair, this.toU8a({
            method: true
        }), this.__internal__signOptions);
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","../util.js":"5MaGk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5MaGk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sign", ()=>sign);
function sign(registry, signerPair, u8a, options) {
    const encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
    return signerPair.sign(encoded, options);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a0b6l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericExtrinsicSignatureV4
 * @description
 * A container for the [[Signature]] associated with a specific [[Extrinsic]]
 */ parcelHelpers.export(exports, "GenericExtrinsicSignatureV4", ()=>GenericExtrinsicSignatureV4);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _constantsJs = require("../constants.js");
var _extrinsicPayloadJs = require("./ExtrinsicPayload.js");
const FAKE_SIGNATURE = new Uint8Array(256).fill(1);
function toAddress(registry, address) {
    return registry.createTypeUnsafe("Address", [
        (0, _util.isU8a)(address) ? (0, _util.u8aToHex)(address) : address
    ]);
}
class GenericExtrinsicSignatureV4 extends (0, _typesCodec.Struct) {
    __internal__signKeys;
    constructor(registry, value, { isSigned } = {}){
        const signTypes = registry.getSignedExtensionTypes();
        super(registry, (0, _util.objectSpread)(// eslint-disable-next-line sort-keys
        {
            signer: "Address",
            signature: "ExtrinsicSignature"
        }, signTypes), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
        this.__internal__signKeys = Object.keys(signTypes);
        (0, _util.objectProperties)(this, this.__internal__signKeys, (k)=>this.get(k));
    }
    /** @internal */ static decodeExtrinsicSignature(value, isSigned = false) {
        if (!value) return 0, _constantsJs.EMPTY_U8A;
        else if (value instanceof GenericExtrinsicSignatureV4) return value;
        return isSigned ? value : (0, _constantsJs.EMPTY_U8A);
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        return this.isSigned ? super.encodedLength : 0;
    }
    /**
     * @description `true` if the signature is valid
     */ get isSigned() {
        return !this.signature.isEmpty;
    }
    /**
     * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
     */ get era() {
        return this.getT("era");
    }
    /**
     * @description The [[Index]] for the signature
     */ get nonce() {
        return this.getT("nonce");
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */ get signature() {
        // the second case here is when we don't have an enum signature, treat as raw
        return this.multiSignature.value || this.multiSignature;
    }
    /**
     * @description The raw [[ExtrinsicSignature]]
     */ get multiSignature() {
        return this.getT("signature");
    }
    /**
     * @description The [[Address]] that signed
     */ get signer() {
        return this.getT("signer");
    }
    /**
     * @description The [[Balance]] tip
     */ get tip() {
        return this.getT("tip");
    }
    _injectSignature(signer, signature, payload) {
        // use the fields exposed to guide the getters
        for(let i = 0, count = this.__internal__signKeys.length; i < count; i++){
            const k = this.__internal__signKeys[i];
            const v = payload.get(k);
            if (!(0, _util.isUndefined)(v)) this.set(k, v);
        }
        // additional fields (exposed in struct itself)
        this.set("signer", signer);
        this.set("signature", signature);
        return this;
    }
    /**
     * @description Adds a raw signature
     */ addSignature(signer, signature, payload) {
        return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe("ExtrinsicSignature", [
            signature
        ]), new (0, _extrinsicPayloadJs.GenericExtrinsicPayloadV4)(this.registry, payload));
    }
    /**
     * @description Creates a payload from the supplied options
     */ createPayload(method, options) {
        const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
        return new (0, _extrinsicPayloadJs.GenericExtrinsicPayloadV4)(this.registry, (0, _util.objectSpread)({}, options, {
            era: era || (0, _constantsJs.IMMORTAL_ERA),
            method: method.toHex(),
            specVersion,
            transactionVersion
        }));
    }
    /**
     * @description Generate a payload and applies the signature from a keypair
     */ sign(method, account, options) {
        if (!account?.addressRaw) throw new Error(`Expected a valid keypair for signing, found ${(0, _util.stringify)(account)}`);
        const payload = this.createPayload(method, options);
        return this._injectSignature(toAddress(this.registry, account.addressRaw), this.registry.createTypeUnsafe("ExtrinsicSignature", [
            payload.sign(account)
        ]), payload);
    }
    /**
     * @description Generate a payload and applies a fake signature
     */ signFake(method, address, options) {
        if (!address) throw new Error(`Expected a valid address for signing, found ${(0, _util.stringify)(address)}`);
        const payload = this.createPayload(method, options);
        return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe("ExtrinsicSignature", [
            FAKE_SIGNATURE
        ]), payload);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        return this.isSigned ? super.toU8a(isBare) : (0, _constantsJs.EMPTY_U8A);
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","../constants.js":"gKNvX","./ExtrinsicPayload.js":"fJtHE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gF9ma":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GenericAccountId", ()=>(0, _accountIdJs.GenericAccountId));
parcelHelpers.export(exports, "GenericAccountId32", ()=>(0, _accountIdJs.GenericAccountId));
parcelHelpers.export(exports, "GenericAccountId33", ()=>(0, _accountIdJs.GenericAccountId33));
parcelHelpers.export(exports, "GenericAccountIndex", ()=>(0, _accountIndexJs.GenericAccountIndex));
parcelHelpers.export(exports, "GenericBlock", ()=>(0, _blockJs.GenericBlock));
parcelHelpers.export(exports, "GenericCall", ()=>(0, _callJs.GenericCall));
parcelHelpers.export(exports, "GenericChainProperties", ()=>(0, _chainPropertiesJs.GenericChainProperties));
parcelHelpers.export(exports, "GenericConsensusEngineId", ()=>(0, _consensusEngineIdJs.GenericConsensusEngineId));
parcelHelpers.export(exports, "GenericEvent", ()=>(0, _eventJs.GenericEvent));
parcelHelpers.export(exports, "GenericEventData", ()=>(0, _eventJs.GenericEventData));
parcelHelpers.export(exports, "GenericLookupSource", ()=>(0, _lookupSourceJs.GenericLookupSource));
parcelHelpers.export(exports, "GenericAddress", ()=>(0, _multiAddressJs.GenericMultiAddress));
parcelHelpers.export(exports, "GenericMultiAddress", ()=>(0, _multiAddressJs.GenericMultiAddress));
parcelHelpers.export(exports, "GenericVote", ()=>(0, _voteJs.GenericVote));
var _accountIdJs = require("./AccountId.js");
var _accountIndexJs = require("./AccountIndex.js");
var _blockJs = require("./Block.js");
var _callJs = require("./Call.js");
var _chainPropertiesJs = require("./ChainProperties.js");
var _consensusEngineIdJs = require("./ConsensusEngineId.js");
var _eventJs = require("./Event.js");
var _lookupSourceJs = require("./LookupSource.js");
var _multiAddressJs = require("./MultiAddress.js");
var _voteJs = require("./Vote.js");
var _indexJs = require("../ethereum/index.js");
parcelHelpers.exportAll(_indexJs, exports);

},{"./AccountId.js":"flXVk","./AccountIndex.js":"bGqp8","./Block.js":"fZ1Kq","./Call.js":"a9Io9","./ChainProperties.js":"VbJWt","./ConsensusEngineId.js":"4dOBH","./Event.js":"jknfu","./LookupSource.js":"hefSi","./MultiAddress.js":"bAjIC","./Vote.js":"f3mO1","../ethereum/index.js":"kup0c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"flXVk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericAccountId
 * @description
 * A wrapper around an AccountId/PublicKey representation. Since we are dealing with
 * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is
 * just a Uint8Array wrapper with a fixed length.
 */ parcelHelpers.export(exports, "GenericAccountId", ()=>GenericAccountId);
parcelHelpers.export(exports, "GenericAccountId33", ()=>GenericAccountId33);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
/** @internal */ function decodeAccountId(value) {
    if ((0, _util.isU8a)(value) || Array.isArray(value)) return (0, _util.u8aToU8a)(value);
    else if (!value) return new Uint8Array();
    else if ((0, _util.isHex)(value)) return (0, _util.hexToU8a)(value);
    else if ((0, _util.isString)(value)) return (0, _utilCrypto.decodeAddress)(value.toString());
    throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
}
class BaseAccountId extends (0, _typesCodec.U8aFixed) {
    constructor(registry, allowedBits = 264, value){
        const decoded = decodeAccountId(value);
        const decodedBits = decoded.length * 8;
        // Part of stream containing >= 32 bytes or a all empty (defaults)
        if (decodedBits < allowedBits && decoded.some((b)=>b)) throw new Error(`Invalid AccountId provided, expected ${allowedBits >> 3} bytes, found ${decoded.length}`);
        super(registry, decoded, allowedBits);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return super.eq(decodeAccountId(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return (0, _utilCrypto.encodeAddress)(this, this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "AccountId";
    }
}
class GenericAccountId extends BaseAccountId {
    constructor(registry, value){
        super(registry, 256, value);
    }
}
class GenericAccountId33 extends BaseAccountId {
    constructor(registry, value){
        super(registry, 264, value);
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bGqp8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericAccountIndex
 * @description
 * A wrapper around an AccountIndex, which is a shortened, variable-length encoding
 * for an Account. We extends from [[U32]] to provide the number-like properties.
 */ parcelHelpers.export(exports, "GenericAccountIndex", ()=>GenericAccountIndex);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
const PREFIX_1BYTE = 0xef;
const PREFIX_2BYTE = 0xfc;
const PREFIX_4BYTE = 0xfd;
const PREFIX_8BYTE = 0xfe;
const MAX_1BYTE = new (0, _util.BN)(PREFIX_1BYTE);
const MAX_2BYTE = new (0, _util.BN)(1).shln(16);
const MAX_4BYTE = new (0, _util.BN)(1).shln(32);
/** @internal */ function decodeAccountIndex(value) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    if (value instanceof GenericAccountIndex) // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an
    // AccountIndex), which has the initial `toString()` implementation.
    return value.toBn();
    else if ((0, _util.isBn)(value) || (0, _util.isNumber)(value) || (0, _util.isHex)(value) || (0, _util.isU8a)(value) || (0, _util.isBigInt)(value)) return value;
    return decodeAccountIndex((0, _utilCrypto.decodeAddress)(value));
}
class GenericAccountIndex extends (0, _typesCodec.u32) {
    constructor(registry, value = new (0, _util.BN)(0)){
        super(registry, decodeAccountIndex(value));
    }
    static calcLength(_value) {
        const value = (0, _util.bnToBn)(_value);
        if (value.lte(MAX_1BYTE)) return 1;
        else if (value.lt(MAX_2BYTE)) return 2;
        else if (value.lt(MAX_4BYTE)) return 4;
        return 8;
    }
    static readLength(input) {
        const first = input[0];
        if (first === PREFIX_2BYTE) return [
            1,
            2
        ];
        else if (first === PREFIX_4BYTE) return [
            1,
            4
        ];
        else if (first === PREFIX_8BYTE) return [
            1,
            8
        ];
        return [
            0,
            1
        ];
    }
    static writeLength(input) {
        switch(input.length){
            case 2:
                return new Uint8Array([
                    PREFIX_2BYTE
                ]);
            case 4:
                return new Uint8Array([
                    PREFIX_4BYTE
                ]);
            case 8:
                return new Uint8Array([
                    PREFIX_8BYTE
                ]);
            default:
                return new Uint8Array([]);
        }
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        // shortcut for BN or Number, don't create an object
        if ((0, _util.isBn)(other) || (0, _util.isNumber)(other)) return super.eq(other);
        // convert and compare
        return super.eq(this.registry.createTypeUnsafe("AccountIndex", [
            other
        ]));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        const length = GenericAccountIndex.calcLength(this);
        return (0, _utilCrypto.encodeAddress)(this.toU8a().subarray(0, length), this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "AccountIndex";
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fZ1Kq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericBlock
 * @description
 * A block encoded with header and extrinsics
 */ parcelHelpers.export(exports, "GenericBlock", ()=>GenericBlock);
var _typesCodec = require("@polkadot/types-codec");
class GenericBlock extends (0, _typesCodec.Struct) {
    constructor(registry, value){
        super(registry, {
            header: "Header",
            // eslint-disable-next-line sort-keys
            extrinsics: "Vec<Extrinsic>"
        }, value);
    }
    /**
     * @description Encodes a content [[Hash]] for the block
     */ get contentHash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description The [[Extrinsic]] contained in the block
     */ get extrinsics() {
        return this.getT("extrinsics");
    }
    /**
     * @description Block/header [[Hash]]
     */ get hash() {
        return this.header.hash;
    }
    /**
     * @description The [[Header]] of the block
     */ get header() {
        return this.getT("header");
    }
}

},{"@polkadot/types-codec":"gvW09","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a9Io9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericCallIndex
 * @description
 * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
 */ parcelHelpers.export(exports, "GenericCallIndex", ()=>GenericCallIndex);
/**
 * @name GenericCall
 * @description
 * Extrinsic function descriptor
 */ parcelHelpers.export(exports, "GenericCall", ()=>GenericCall);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
/**
 * Get a mapping of `argument name -> argument type` for the function, from
 * its metadata.
 *
 * @param meta - The function metadata used to get the definition.
 * @internal
 */ function getArgsDef(registry, meta) {
    return meta.fields.reduce((result, { name, type }, index)=>{
        result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
        return result;
    }, {});
}
/** @internal */ function decodeCallViaObject(registry, value, _meta) {
    // we only pass args/methodsIndex out
    const { args, callIndex } = value;
    // Get the correct lookupIndex
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex;
    // Find metadata with callIndex
    const meta = _meta || registry.findMetaCall(lookupIndex).meta;
    return {
        args,
        argsDef: getArgsDef(registry, meta),
        callIndex,
        meta
    };
}
/** @internal */ function decodeCallViaU8a(registry, value, _meta) {
    // We need 2 bytes for the callIndex
    const callIndex = registry.firstCallIndex.slice();
    callIndex.set(value.subarray(0, 2), 0);
    // Find metadata with callIndex
    const meta = _meta || registry.findMetaCall(callIndex).meta;
    return {
        args: value.subarray(2),
        argsDef: getArgsDef(registry, meta),
        callIndex,
        meta
    };
}
/**
 * Decode input to pass into constructor.
 *
 * @param value - Value to decode, one of:
 * - hex
 * - Uint8Array
 * - {@see DecodeMethodInput}
 * @param _meta - Metadata to use, so that `injectMethods` lookup is not
 * necessary.
 * @internal
 */ function decodeCall(registry, value = new Uint8Array(), _meta) {
    if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) return decodeCallViaU8a(registry, (0, _util.u8aToU8a)(value), _meta);
    else if ((0, _util.isObject)(value) && value.callIndex && value.args) return decodeCallViaObject(registry, value, _meta);
    throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
}
class GenericCallIndex extends (0, _typesCodec.U8aFixed) {
    constructor(registry, value){
        super(registry, value, 16);
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.toHex();
    }
}
class GenericCall extends (0, _typesCodec.Struct) {
    _meta;
    constructor(registry, value, meta){
        const decoded = decodeCall(registry, value, meta);
        try {
            super(registry, {
                callIndex: GenericCallIndex,
                // eslint-disable-next-line sort-keys
                args: (0, _typesCodec.Struct).with(decoded.argsDef)
            }, decoded);
        } catch (error) {
            let method = "unknown.unknown";
            try {
                const c = registry.findMetaCall(decoded.callIndex);
                method = `${c.section}.${c.method}`;
            } catch  {
            // ignore
            }
            throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
        }
        this._meta = decoded.meta;
    }
    /**
     * @description The arguments for the function call
     */ get args() {
        return [
            ...this.getT("args").values()
        ];
    }
    /**
     * @description The argument definitions
     */ get argsDef() {
        return getArgsDef(this.registry, this.meta);
    }
    /**
     * @description The argument entries
     */ get argsEntries() {
        return [
            ...this.getT("args").entries()
        ];
    }
    /**
     * @description The encoded `[sectionIndex, methodIndex]` identifier
     */ get callIndex() {
        return this.getT("callIndex").toU8a();
    }
    /**
     * @description The encoded data
     */ get data() {
        return this.getT("args").toU8a();
    }
    /**
     * @description The [[FunctionMetadata]]
     */ get meta() {
        return this._meta;
    }
    /**
     * @description Returns the name of the method
     */ get method() {
        return this.registry.findMetaCall(this.callIndex).method;
    }
    /**
     * @description Returns the module containing the method
     */ get section() {
        return this.registry.findMetaCall(this.callIndex).section;
    }
    /**
     * @description Checks if the source matches this in type
     */ is(other) {
        return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExpanded) {
        let call;
        try {
            call = this.registry.findMetaCall(this.callIndex);
        } catch  {
        // swallow
        }
        return (0, _util.objectSpread)({
            args: this.argsEntries.reduce((args, [n, a])=>(0, _util.objectSpread)(args, {
                    [n]: a.toHuman(isExpanded)
                }), {}),
            method: call?.method,
            section: call?.section
        }, isExpanded && call ? {
            docs: call.meta.docs.map((d)=>d.toString())
        } : null);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Call";
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"VbJWt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GenericChainProperties", ()=>GenericChainProperties);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
function createValue(registry, type, value, asArray = true) {
    // We detect codec here as well - when found, generally this is constructed from itself
    if (value && (0, _util.isFunction)(value.unwrapOrDefault)) return value;
    return registry.createTypeUnsafe(type, [
        asArray ? (0, _util.isNull)(value) || (0, _util.isUndefined)(value) ? null : Array.isArray(value) ? value : [
            value
        ] : value
    ]);
}
function decodeValue(registry, key, value) {
    return key === "ss58Format" ? createValue(registry, "Option<u32>", value, false) : key === "tokenDecimals" ? createValue(registry, "Option<Vec<u32>>", value) : key === "tokenSymbol" ? createValue(registry, "Option<Vec<Text>>", value) : key === "isEthereum" ? createValue(registry, "Bool", value, false) : value;
}
function decode(registry, value) {
    return(// allow decoding from a map as well (ourselves)
    (value && (0, _util.isFunction)(value.entries) ? [
        ...value.entries()
    ] : Object.entries(value || {})).reduce((all, [key, value])=>{
        all[key] = decodeValue(registry, key, value);
        return all;
    }, {
        isEthereum: registry.createTypeUnsafe("Bool", []),
        ss58Format: registry.createTypeUnsafe("Option<u32>", []),
        tokenDecimals: registry.createTypeUnsafe("Option<Vec<u32>>", []),
        tokenSymbol: registry.createTypeUnsafe("Option<Vec<Text>>", [])
    }));
}
class GenericChainProperties extends (0, _typesCodec.Json) {
    constructor(registry, value){
        super(registry, decode(registry, value));
    }
    /**
     * @description The chain uses Ethereum addresses
     */ get isEthereum() {
        return this.getT("isEthereum");
    }
    /**
     * @description The chain ss58Format
     */ get ss58Format() {
        return this.getT("ss58Format");
    }
    /**
     * @description The decimals for each of the tokens
     */ get tokenDecimals() {
        return this.getT("tokenDecimals");
    }
    /**
     * @description The symbols for the tokens
     */ get tokenSymbol() {
        return this.getT("tokenSymbol");
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4dOBH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CID_AURA", ()=>CID_AURA);
parcelHelpers.export(exports, "CID_BABE", ()=>CID_BABE);
parcelHelpers.export(exports, "CID_GRPA", ()=>CID_GRPA);
parcelHelpers.export(exports, "CID_POW", ()=>CID_POW);
parcelHelpers.export(exports, "CID_NMBS", ()=>CID_NMBS);
/**
 * @name GenericConsensusEngineId
 * @description
 * A 4-byte identifier identifying the engine
 */ parcelHelpers.export(exports, "GenericConsensusEngineId", ()=>GenericConsensusEngineId);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
const CID_AURA = /*#__PURE__*/ (0, _util.stringToU8a)("aura");
const CID_BABE = /*#__PURE__*/ (0, _util.stringToU8a)("BABE");
const CID_GRPA = /*#__PURE__*/ (0, _util.stringToU8a)("FRNK");
const CID_POW = /*#__PURE__*/ (0, _util.stringToU8a)("pow_");
const CID_NMBS = /*#__PURE__*/ (0, _util.stringToU8a)("nmbs");
function getAuraAuthor(registry, bytes, sessionValidators) {
    return sessionValidators[registry.createTypeUnsafe("RawAuraPreDigest", [
        bytes.toU8a(true)
    ]).slotNumber.mod(new (0, _util.BN)(sessionValidators.length)).toNumber()];
}
function getBabeAuthor(registry, bytes, sessionValidators) {
    const digest = registry.createTypeUnsafe("RawBabePreDigestCompat", [
        bytes.toU8a(true)
    ]);
    return sessionValidators[digest.value.toNumber()];
}
function getBytesAsAuthor(registry, bytes) {
    return registry.createTypeUnsafe("AccountId", [
        bytes
    ]);
}
class GenericConsensusEngineId extends (0, _typesCodec.U8aFixed) {
    constructor(registry, value){
        super(registry, (0, _util.isNumber)(value) ? (0, _util.bnToU8a)(value, {
            isLe: false
        }) : value, 32);
    }
    /**
     * @description `true` if the engine matches aura
     */ get isAura() {
        return this.eq(CID_AURA);
    }
    /**
     * @description `true` is the engine matches babe
     */ get isBabe() {
        return this.eq(CID_BABE);
    }
    /**
     * @description `true` is the engine matches grandpa
     */ get isGrandpa() {
        return this.eq(CID_GRPA);
    }
    /**
     * @description `true` is the engine matches pow
     */ get isPow() {
        return this.eq(CID_POW);
    }
    /**
     * @description `true` is the engine matches nimbus
     */ get isNimbus() {
        return this.eq(CID_NMBS);
    }
    /**
     * @description From the input bytes, decode into an author
     */ extractAuthor(bytes, sessionValidators) {
        if (sessionValidators?.length) {
            if (this.isAura) return getAuraAuthor(this.registry, bytes, sessionValidators);
            else if (this.isBabe) return getBabeAuthor(this.registry, bytes, sessionValidators);
        }
        // For pow & Nimbus, the bytes are the actual author
        if (this.isPow || this.isNimbus) return getBytesAsAuthor(this.registry, bytes);
        return undefined;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return this.toString();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "ConsensusEngineId";
    }
    /**
     * @description Override the default toString to return a 4-byte string
     */ toString() {
        return this.isAscii ? (0, _util.u8aToString)(this) : (0, _util.u8aToHex)(this);
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hefSi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ACCOUNT_ID_PREFIX", ()=>ACCOUNT_ID_PREFIX);
/**
 * @name LookupSource
 * @description
 * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.
 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
 */ parcelHelpers.export(exports, "GenericLookupSource", ()=>GenericLookupSource);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
var _accountIdJs = require("./AccountId.js");
var _accountIndexJs = require("./AccountIndex.js");
const ACCOUNT_ID_PREFIX = new Uint8Array([
    0xff
]);
/** @internal */ function decodeString(registry, value) {
    const decoded = (0, _utilCrypto.decodeAddress)(value);
    return decoded.length === 32 ? registry.createTypeUnsafe("AccountId", [
        decoded
    ]) : registry.createTypeUnsafe("AccountIndex", [
        (0, _util.u8aToBn)(decoded)
    ]);
}
/** @internal */ function decodeU8a(registry, value) {
    // This allows us to instantiate an address with a raw publicKey. Do this first before
    // we checking the first byte, otherwise we may split an already-existent valid address
    if (value.length === 32) return registry.createTypeUnsafe("AccountId", [
        value
    ]);
    else if (value[0] === 0xff) return registry.createTypeUnsafe("AccountId", [
        value.subarray(1)
    ]);
    const [offset, length] = (0, _accountIndexJs.GenericAccountIndex).readLength(value);
    return registry.createTypeUnsafe("AccountIndex", [
        (0, _util.u8aToBn)(value.subarray(offset, offset + length))
    ]);
}
/** @internal */ function decodeAddressOrIndex(registry, value) {
    return value instanceof GenericLookupSource ? value.inner : value instanceof (0, _accountIdJs.GenericAccountId) || value instanceof (0, _accountIndexJs.GenericAccountIndex) ? value : (0, _util.isBn)(value) || (0, _util.isNumber)(value) || (0, _util.isBigInt)(value) ? registry.createTypeUnsafe("AccountIndex", [
        value
    ]) : Array.isArray(value) || (0, _util.isHex)(value) || (0, _util.isU8a)(value) ? decodeU8a(registry, (0, _util.u8aToU8a)(value)) : decodeString(registry, value);
}
class GenericLookupSource extends (0, _typesCodec.AbstractBase) {
    constructor(registry, value = new Uint8Array()){
        super(registry, decodeAddressOrIndex(registry, value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        const rawLength = this._rawLength;
        return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
        (rawLength > 1 ? 1 : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */ get _rawLength() {
        return this.inner instanceof (0, _accountIndexJs.GenericAccountIndex) ? (0, _accountIndexJs.GenericAccountIndex).calcLength(this.inner) : this.inner.encodedLength;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        const value = this.inner.toU8a().subarray(0, this._rawLength);
        return {
            outer: [
                new Uint8Array(this.inner instanceof (0, _accountIndexJs.GenericAccountIndex) ? (0, _accountIndexJs.GenericAccountIndex).writeLength(value) : ACCOUNT_ID_PREFIX),
                value
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        return (0, _util.u8aToHex)(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Address";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        const encoded = this.inner.toU8a().subarray(0, this._rawLength);
        return isBare ? encoded : (0, _util.u8aConcat)(this.inner instanceof (0, _accountIndexJs.GenericAccountIndex) ? (0, _accountIndexJs.GenericAccountIndex).writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","./AccountId.js":"flXVk","./AccountIndex.js":"bGqp8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bAjIC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GenericMultiAddress", ()=>GenericMultiAddress);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
var _accountIdJs = require("./AccountId.js");
var _accountIndexJs = require("./AccountIndex.js");
function decodeU8a(registry, u8a) {
    if ([
        0,
        32
    ].includes(u8a.length)) return {
        Id: u8a
    };
    else if (u8a.length === 20) return {
        Address20: u8a
    };
    else if (u8a.length <= 8) return {
        Index: registry.createTypeUnsafe("AccountIndex", [
            u8a
        ]).toNumber()
    };
    return u8a;
}
function decodeMultiAny(registry, value) {
    if (value instanceof (0, _accountIdJs.GenericAccountId)) return {
        Id: value
    };
    else if ((0, _util.isU8a)(value)) // NOTE This is after the AccountId check (which is U8a)
    return decodeU8a(registry, value);
    else if (value instanceof GenericMultiAddress) return value;
    else if (value instanceof (0, _accountIndexJs.GenericAccountIndex) || (0, _util.isBn)(value) || (0, _util.isNumber)(value)) return {
        Index: (0, _util.isNumber)(value) ? value : value.toNumber()
    };
    else if ((0, _util.isString)(value)) return decodeU8a(registry, (0, _utilCrypto.decodeAddress)(value.toString()));
    return value;
}
class GenericMultiAddress extends (0, _typesCodec.Enum) {
    constructor(registry, value){
        super(registry, {
            Id: "AccountId",
            Index: "Compact<AccountIndex>",
            Raw: "Bytes",
            // eslint-disable-next-line sort-keys
            Address32: "H256",
            // eslint-disable-next-line sort-keys
            Address20: "H160"
        }, decodeMultiAny(registry, value));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */ inspect() {
        const { inner, outer = [] } = this.inner.inspect();
        return {
            inner,
            outer: [
                new Uint8Array([
                    this.index
                ]),
                ...outer
            ]
        };
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return this.value.toString();
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","./AccountId.js":"flXVk","./AccountIndex.js":"bGqp8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f3mO1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericVote
 * @description
 * A number of lock periods, plus a vote, one way or the other.
 */ parcelHelpers.export(exports, "GenericVote", ()=>GenericVote);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
const AYE_BITS = 128;
const NAY_BITS = 0;
const CON_MASK = 127;
const DEF_CONV = 0; // the default conviction, None
/** @internal */ function decodeVoteBool(value) {
    return value ? new Uint8Array([
        AYE_BITS | DEF_CONV
    ]) : new Uint8Array([
        NAY_BITS
    ]);
}
/** @internal */ function decodeVoteU8a(value) {
    return value.length ? value.subarray(0, 1) : new Uint8Array([
        NAY_BITS
    ]);
}
/** @internal */ function decodeVoteType(registry, value) {
    return new Uint8Array([
        (new (0, _typesCodec.Bool)(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe("Conviction", [
            value.conviction || DEF_CONV
        ]).index
    ]);
}
/** @internal */ function decodeVote(registry, value) {
    if ((0, _util.isU8a)(value)) return decodeVoteU8a(value);
    else if ((0, _util.isUndefined)(value) || value instanceof Boolean || (0, _util.isBoolean)(value)) return decodeVoteBool(new (0, _typesCodec.Bool)(registry, value).isTrue);
    else if ((0, _util.isNumber)(value)) return decodeVoteBool(value < 0);
    return decodeVoteType(registry, value);
}
class GenericVote extends (0, _typesCodec.U8aFixed) {
    __internal__aye;
    __internal__conviction;
    constructor(registry, value){
        // decoded is just 1 byte
        // Aye: Most Significant Bit
        // Conviction: 0000 - 0101
        const decoded = decodeVote(registry, value);
        super(registry, decoded, 8);
        this.__internal__aye = (decoded[0] & AYE_BITS) === AYE_BITS;
        this.__internal__conviction = this.registry.createTypeUnsafe("Conviction", [
            decoded[0] & CON_MASK
        ]);
    }
    /**
     * @description returns a V2 conviction
     */ get conviction() {
        return this.__internal__conviction;
    }
    /**
     * @description true if the wrapped value is a positive vote
     */ get isAye() {
        return this.__internal__aye;
    }
    /**
     * @description true if the wrapped value is a negative vote
     */ get isNay() {
        return !this.isAye;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman(isExpanded) {
        return {
            conviction: this.conviction.toHuman(isExpanded),
            vote: this.isAye ? "Aye" : "Nay"
        };
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return {
            aye: this.isAye,
            conviction: this.conviction.toPrimitive()
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Vote";
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kup0c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GenericEthereumAccountId", ()=>(0, _accountIdJs.GenericEthereumAccountId));
parcelHelpers.export(exports, "GenericEthereumLookupSource", ()=>(0, _lookupSourceJs.GenericEthereumLookupSource));
var _accountIdJs = require("./AccountId.js");
var _lookupSourceJs = require("./LookupSource.js");

},{"./AccountId.js":"eXUVx","./LookupSource.js":"9Y5j8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eXUVx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name GenericEthereumAccountId
 * @description
 * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with
 * underlying addresses (20 bytes in length), we extend from U8aFixed which is
 * just a Uint8Array wrapper with a fixed length.
 */ parcelHelpers.export(exports, "GenericEthereumAccountId", ()=>GenericEthereumAccountId);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
/** @internal */ function decodeAccountId(value) {
    if ((0, _util.isU8a)(value) || Array.isArray(value)) return (0, _util.u8aToU8a)(value);
    else if ((0, _util.isHex)(value) || (0, _utilCrypto.isEthereumAddress)(value.toString())) return (0, _util.hexToU8a)(value.toString());
    else if ((0, _util.isString)(value)) return (0, _util.u8aToU8a)(value);
    return value;
}
class GenericEthereumAccountId extends (0, _typesCodec.U8aFixed) {
    constructor(registry, value = new Uint8Array()){
        super(registry, decodeAccountId(value), 160);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */ eq(other) {
        return !!other && super.eq(decodeAccountId(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */ toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */ toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */ toString() {
        return (0, _utilCrypto.ethereumEncode)(this);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "AccountId";
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Y5j8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ACCOUNT_ID_PREFIX", ()=>ACCOUNT_ID_PREFIX);
/**
 * @name GenericEthereumLookupSource
 * @description
 * A wrapper around an EthereumAccountId and/or AccountIndex that is encoded with a prefix.
 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
 */ parcelHelpers.export(exports, "GenericEthereumLookupSource", ()=>GenericEthereumLookupSource);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
var _accountIndexJs = require("../generic/AccountIndex.js");
var _accountIdJs = require("./AccountId.js");
const ACCOUNT_ID_PREFIX = new Uint8Array([
    0xff
]);
/** @internal */ function decodeString(registry, value) {
    const decoded = (0, _utilCrypto.decodeAddress)(value);
    return decoded.length === 20 ? registry.createTypeUnsafe("EthereumAccountId", [
        decoded
    ]) : registry.createTypeUnsafe("AccountIndex", [
        (0, _util.u8aToBn)(decoded)
    ]);
}
/** @internal */ function decodeU8a(registry, value) {
    // This allows us to instantiate an address with a raw publicKey. Do this first before
    // we checking the first byte, otherwise we may split an already-existent valid address
    if (value.length === 20) return registry.createTypeUnsafe("EthereumAccountId", [
        value
    ]);
    else if (value[0] === 0xff) return registry.createTypeUnsafe("EthereumAccountId", [
        value.subarray(1)
    ]);
    const [offset, length] = (0, _accountIndexJs.GenericAccountIndex).readLength(value);
    return registry.createTypeUnsafe("AccountIndex", [
        (0, _util.u8aToBn)(value.subarray(offset, offset + length))
    ]);
}
function decodeAddressOrIndex(registry, value) {
    return value instanceof GenericEthereumLookupSource ? value.inner : value instanceof (0, _accountIdJs.GenericEthereumAccountId) || value instanceof (0, _accountIndexJs.GenericAccountIndex) ? value : (0, _util.isU8a)(value) || Array.isArray(value) || (0, _util.isHex)(value) ? decodeU8a(registry, (0, _util.u8aToU8a)(value)) : (0, _util.isBn)(value) || (0, _util.isNumber)(value) || (0, _util.isBigInt)(value) ? registry.createTypeUnsafe("AccountIndex", [
        value
    ]) : decodeString(registry, value);
}
class GenericEthereumLookupSource extends (0, _typesCodec.AbstractBase) {
    constructor(registry, value = new Uint8Array()){
        super(registry, decodeAddressOrIndex(registry, value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */ get encodedLength() {
        const rawLength = this._rawLength;
        return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
        (rawLength > 1 ? 1 : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */ get _rawLength() {
        return this.inner instanceof (0, _accountIndexJs.GenericAccountIndex) ? (0, _accountIndexJs.GenericAccountIndex).calcLength(this.inner) : this.inner.encodedLength;
    }
    /**
     * @description Returns a hex string representation of the value
     */ toHex() {
        return (0, _util.u8aToHex)(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */ toRawType() {
        return "Address";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */ toU8a(isBare) {
        const encoded = this.inner.toU8a().subarray(0, this._rawLength);
        return isBare ? encoded : (0, _util.u8aConcat)(this.inner instanceof (0, _accountIndexJs.GenericAccountIndex) ? (0, _accountIndexJs.GenericAccountIndex).writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","../generic/AccountIndex.js":"bGqp8","./AccountId.js":"eXUVx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4FGVo":[function(require,module,exports) {
/**
 * @summary Type definitions that are used in the system
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BitVec", ()=>(0, _typesCodec.BitVec));
parcelHelpers.export(exports, "Bool", ()=>(0, _typesCodec.Bool));
parcelHelpers.export(exports, "bool", ()=>(0, _typesCodec.bool));
parcelHelpers.export(exports, "Bytes", ()=>(0, _typesCodec.Bytes));
parcelHelpers.export(exports, "F32", ()=>(0, _typesCodec.F32));
parcelHelpers.export(exports, "f32", ()=>(0, _typesCodec.f32));
parcelHelpers.export(exports, "F64", ()=>(0, _typesCodec.F64));
parcelHelpers.export(exports, "f64", ()=>(0, _typesCodec.f64));
parcelHelpers.export(exports, "I8", ()=>(0, _typesCodec.I8));
parcelHelpers.export(exports, "i8", ()=>(0, _typesCodec.i8));
parcelHelpers.export(exports, "I16", ()=>(0, _typesCodec.I16));
parcelHelpers.export(exports, "i16", ()=>(0, _typesCodec.i16));
parcelHelpers.export(exports, "I32", ()=>(0, _typesCodec.I32));
parcelHelpers.export(exports, "i32", ()=>(0, _typesCodec.i32));
parcelHelpers.export(exports, "I64", ()=>(0, _typesCodec.I64));
parcelHelpers.export(exports, "i64", ()=>(0, _typesCodec.i64));
parcelHelpers.export(exports, "I128", ()=>(0, _typesCodec.I128));
parcelHelpers.export(exports, "i128", ()=>(0, _typesCodec.i128));
parcelHelpers.export(exports, "I256", ()=>(0, _typesCodec.I256));
parcelHelpers.export(exports, "i256", ()=>(0, _typesCodec.i256));
parcelHelpers.export(exports, "ISize", ()=>(0, _typesCodec.ISize));
parcelHelpers.export(exports, "isize", ()=>(0, _typesCodec.isize));
parcelHelpers.export(exports, "Null", ()=>(0, _typesCodec.Null));
parcelHelpers.export(exports, "OptionBool", ()=>(0, _typesCodec.OptionBool));
parcelHelpers.export(exports, "Text", ()=>(0, _typesCodec.Text));
parcelHelpers.export(exports, "Type", ()=>(0, _typesCodec.Type));
parcelHelpers.export(exports, "U8", ()=>(0, _typesCodec.U8));
parcelHelpers.export(exports, "u8", ()=>(0, _typesCodec.u8));
parcelHelpers.export(exports, "U16", ()=>(0, _typesCodec.U16));
parcelHelpers.export(exports, "u16", ()=>(0, _typesCodec.u16));
parcelHelpers.export(exports, "U32", ()=>(0, _typesCodec.U32));
parcelHelpers.export(exports, "u32", ()=>(0, _typesCodec.u32));
parcelHelpers.export(exports, "U64", ()=>(0, _typesCodec.U64));
parcelHelpers.export(exports, "u64", ()=>(0, _typesCodec.u64));
parcelHelpers.export(exports, "U128", ()=>(0, _typesCodec.U128));
parcelHelpers.export(exports, "u128", ()=>(0, _typesCodec.u128));
parcelHelpers.export(exports, "U256", ()=>(0, _typesCodec.U256));
parcelHelpers.export(exports, "u256", ()=>(0, _typesCodec.u256));
parcelHelpers.export(exports, "USize", ()=>(0, _typesCodec.USize));
parcelHelpers.export(exports, "usize", ()=>(0, _typesCodec.usize));
parcelHelpers.export(exports, "Data", ()=>(0, _dataJs.Data));
parcelHelpers.export(exports, "StorageKey", ()=>(0, _storageKeyJs.StorageKey));
var _typesCodec = require("@polkadot/types-codec");
var _dataJs = require("./Data.js");
var _storageKeyJs = require("./StorageKey.js");

},{"@polkadot/types-codec":"gvW09","./Data.js":"hSt36","./StorageKey.js":"fD5Ag","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hSt36":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Data
 * @description
 * A [[Data]] container with node, raw or hashed data
 */ parcelHelpers.export(exports, "Data", ()=>Data);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
/** @internal */ function decodeDataU8a(registry, value) {
    const indicator = value[0];
    if (!indicator) return [
        undefined,
        undefined
    ];
    else if (indicator >= 1 && indicator <= 33) {
        const length = indicator - 1;
        const data = value.subarray(1, length + 1);
        // in this case, we are passing a Raw back (since we have no length)
        return [
            registry.createTypeUnsafe("Raw", [
                data
            ]),
            1
        ];
    } else if (indicator >= 34 && indicator <= 37) return [
        value.subarray(1, 33),
        indicator - 32
    ]; // 34 becomes 2
    throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
}
/** @internal */ function decodeData(registry, value) {
    if ((0, _util.isU8a)(value) || (0, _util.isString)(value)) return decodeDataU8a(registry, (0, _util.u8aToU8a)(value));
    else if (!value) return [
        undefined,
        undefined
    ];
    // assume we have an Enum or an  object input, handle this via the normal Enum decoding
    return [
        value,
        undefined
    ];
}
class Data extends (0, _typesCodec.Enum) {
    constructor(registry, value){
        super(registry, {
            None: "Null",
            Raw: "Bytes",
            // eslint-disable-next-line sort-keys
            BlakeTwo256: "H256",
            Sha256: "H256",
            // eslint-disable-next-line sort-keys
            Keccak256: "H256",
            ShaThree256: "H256" // 5
        }, ...decodeData(registry, value));
        if (this.isRaw && this.asRaw.length > 32) throw new Error("Data.Raw values are limited to a maximum length of 32 bytes");
    }
    get asBlakeTwo256() {
        return this.value;
    }
    get asKeccak256() {
        return this.value;
    }
    get asRaw() {
        return this.value;
    }
    get asSha256() {
        return this.value;
    }
    get asShaThree256() {
        return this.value;
    }
    get isBlakeTwo256() {
        return this.index === 2;
    }
    get isKeccak256() {
        return this.index === 4;
    }
    get isNone() {
        return this.index === 0;
    }
    get isRaw() {
        return this.index === 1;
    }
    get isSha256() {
        return this.index === 3;
    }
    get isShaThree256() {
        return this.index === 5;
    }
    /**
     * @description The encoded length
     */ get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */ toU8a() {
        if (this.index === 0) return new Uint8Array(1);
        else if (this.index === 1) {
            // don't add the length, just the data
            const data = this.value.toU8a(true);
            const length = Math.min(data.length, 32);
            const u8a = new Uint8Array(length + 1);
            u8a.set([
                length + 1
            ], 0);
            u8a.set(data.subarray(0, length), 1);
            return u8a;
        }
        // otherwise we simply have a hash
        const u8a = new Uint8Array(33);
        u8a.set([
            this.index + 32
        ], 0);
        u8a.set(this.value.toU8a(), 1);
        return u8a;
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fD5Ag":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name StorageKey
 * @description
 * A representation of a storage key (typically hashed) in the system. It can be
 * constructed by passing in a raw key or a StorageEntry with (optional) arguments.
 */ parcelHelpers.export(exports, "StorageKey", ()=>StorageKey);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _indexJs = require("../metadata/util/index.js");
var _indexJs1 = require("../util/index.js");
const HASHER_MAP = {
    // opaque
    Blake2_128: [
        16,
        false
    ],
    Blake2_128Concat: [
        16,
        true
    ],
    Blake2_256: [
        32,
        false
    ],
    Identity: [
        0,
        true
    ],
    Twox128: [
        16,
        false
    ],
    Twox256: [
        32,
        false
    ],
    Twox64Concat: [
        8,
        true
    ]
};
/** @internal */ function decodeStorageKey(value) {
    if ((0, _util.isU8a)(value) || !value || (0, _util.isString)(value)) // let Bytes handle these inputs
    return {
        key: value
    };
    else if (value instanceof StorageKey) return {
        key: value,
        method: value.method,
        section: value.section
    };
    else if ((0, _util.isFunction)(value)) return {
        key: value(),
        method: value.method,
        section: value.section
    };
    else if (Array.isArray(value)) {
        const [fn, args = []] = value;
        if (!(0, _util.isFunction)(fn)) throw new Error("Expected function input for key construction");
        if (fn.meta && fn.meta.type.isMap) {
            const map = fn.meta.type.asMap;
            if (!Array.isArray(args) || args.length !== map.hashers.length) throw new Error(`Expected an array of ${map.hashers.length} values as params to a Map query`);
        }
        return {
            key: fn(...args),
            method: fn.method,
            section: fn.section
        };
    }
    throw new Error(`Unable to convert input ${value} to StorageKey`);
}
/** @internal */ function decodeHashers(registry, value, hashers) {
    // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
    let offset = 32;
    const count = hashers.length;
    const result = new Array(count);
    for(let i = 0; i < count; i++){
        const [hasher, type] = hashers[i];
        const [hashLen, canDecode] = HASHER_MAP[hasher.type];
        const decoded = canDecode ? registry.createTypeUnsafe((0, _indexJs.getSiName)(registry.lookup, type), [
            value.subarray(offset + hashLen)
        ]) : registry.createTypeUnsafe("Raw", [
            value.subarray(offset, offset + hashLen)
        ]);
        offset += hashLen + (canDecode ? decoded.encodedLength : 0);
        result[i] = decoded;
    }
    return result;
}
/** @internal */ function decodeArgsFromMeta(registry, value, meta) {
    if (!meta || !meta.type.isMap) return [];
    const { hashers, key } = meta.type.asMap;
    const keys = hashers.length === 1 ? [
        key
    ] : registry.lookup.getSiType(key).def.asTuple;
    return decodeHashers(registry, value, hashers.map((h, i)=>[
            h,
            keys[i]
        ]));
}
/** @internal */ function getMeta(value) {
    if (value instanceof StorageKey) return value.meta;
    else if ((0, _util.isFunction)(value)) return value.meta;
    else if (Array.isArray(value)) {
        const [fn] = value;
        return fn.meta;
    }
    return undefined;
}
/** @internal */ function getType(registry, value) {
    if (value instanceof StorageKey) return value.outputType;
    else if ((0, _util.isFunction)(value)) return (0, _indexJs1.unwrapStorageType)(registry, value.meta.type);
    else if (Array.isArray(value)) {
        const [fn] = value;
        if (fn.meta) return (0, _indexJs1.unwrapStorageType)(registry, fn.meta.type);
    }
    // If we have no type set, default to Raw
    return "Raw";
}
class StorageKey extends (0, _typesCodec.Bytes) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore This is assigned via this.decodeArgsFromMeta()
    __internal__args;
    __internal__meta;
    __internal__outputType;
    __internal__method;
    __internal__section;
    constructor(registry, value, override = {}){
        const { key, method, section } = decodeStorageKey(value);
        super(registry, key);
        this.__internal__outputType = getType(registry, value);
        // decode the args (as applicable based on the key and the hashers, after all init)
        this.setMeta(getMeta(value), override.section || section, override.method || method);
    }
    /**
     * @description Return the decoded arguments (applicable to map with decodable values)
     */ get args() {
        return this.__internal__args;
    }
    /**
     * @description The metadata or `undefined` when not available
     */ get meta() {
        return this.__internal__meta;
    }
    /**
     * @description The key method or `undefined` when not specified
     */ get method() {
        return this.__internal__method;
    }
    /**
     * @description The output type
     */ get outputType() {
        return this.__internal__outputType;
    }
    /**
     * @description The key section or `undefined` when not specified
     */ get section() {
        return this.__internal__section;
    }
    is(key) {
        return key.section === this.section && key.method === this.method;
    }
    /**
     * @description Sets the meta for this key
     */ setMeta(meta, section, method) {
        this.__internal__meta = meta;
        this.__internal__method = method || this.__internal__method;
        this.__internal__section = section || this.__internal__section;
        if (meta) this.__internal__outputType = (0, _indexJs1.unwrapStorageType)(this.registry, meta.type);
        try {
            this.__internal__args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
        } catch  {
        // ignore...
        }
        return this;
    }
    /**
     * @description Returns the Human representation for this type
     */ toHuman() {
        return this.__internal__args.length ? this.__internal__args.map((a)=>a.toHuman()) : super.toHuman();
    }
    /**
     * @description Returns the raw type for this
     */ toRawType() {
        return "StorageKey";
    }
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","../metadata/util/index.js":"7JXy8","../util/index.js":"bIn7A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3JIyR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterCallsSome", ()=>filterCallsSome);
parcelHelpers.export(exports, "createCallFunction", ()=>createCallFunction);
/** @internal */ parcelHelpers.export(exports, "decorateExtrinsics", ()=>decorateExtrinsics);
var _util = require("@polkadot/util");
var _lazyJs = require("../../../create/lazy.js");
var _indexJs = require("../../util/index.js");
var _utilJs = require("../util.js");
var _createUncheckedJs = require("./createUnchecked.js");
function filterCallsSome({ calls }) {
    return calls.isSome;
}
function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
    const { fields, index } = variant;
    const count = fields.length;
    const args = new Array(count);
    for(let i = 0; i < count; i++){
        const { name, type, typeName } = fields[i];
        args[i] = (0, _util.objectSpread)({
            name: (0, _util.stringCamelCase)(name.unwrapOr(`param${i}`)),
            type: (0, _indexJs.getSiName)(lookup, type)
        }, typeName.isSome ? {
            typeName: typeName.unwrap()
        } : null);
    }
    return (0, _createUncheckedJs.createUnchecked)(registry, sectionName, new Uint8Array([
        sectionIndex,
        index.toNumber()
    ]), registry.createTypeUnsafe("FunctionMetadataLatest", [
        (0, _util.objectSpread)({
            args
        }, variant)
    ]));
}
function decorateExtrinsics(registry, { lookup, pallets }, version) {
    const result = {};
    const filtered = pallets.filter(filterCallsSome);
    for(let i = 0, count = filtered.length; i < count; i++){
        const { calls, index, name } = filtered[i];
        const sectionName = (0, _util.stringCamelCase)(name);
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        (0, _util.lazyMethod)(result, sectionName, ()=>(0, _lazyJs.lazyVariants)(lookup, calls.unwrap(), (0, _utilJs.objectNameToCamel), (variant)=>createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
    }
    return result;
}

},{"@polkadot/util":"3HnHw","../../../create/lazy.js":"3F1qc","../../util/index.js":"7JXy8","../util.js":"cN3Id","./createUnchecked.js":"6fyBo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cN3Id":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "objectNameToCamel", ()=>objectNameToCamel);
parcelHelpers.export(exports, "objectNameToString", ()=>objectNameToString);
var _util = require("@polkadot/util");
function convert(fn) {
    return ({ name })=>fn(name);
}
const objectNameToCamel = /*#__PURE__*/ convert((0, _util.stringCamelCase));
const objectNameToString = /*#__PURE__*/ convert((n)=>n.toString());

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6fyBo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "createUnchecked", ()=>createUnchecked);
var _util = require("@polkadot/util");
function isTx(tx, callIndex) {
    return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
}
function createUnchecked(registry, section, callIndex, callMetadata) {
    const expectedArgs = callMetadata.fields;
    const funcName = (0, _util.stringCamelCase)(callMetadata.name);
    const extrinsicFn = (...args)=>{
        if (expectedArgs.length !== args.length) throw new Error(`Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
        return registry.createTypeUnsafe("Call", [
            {
                args,
                callIndex
            },
            callMetadata
        ]);
    };
    extrinsicFn.is = (tx)=>isTx(tx, callIndex);
    extrinsicFn.callIndex = callIndex;
    extrinsicFn.meta = callMetadata;
    extrinsicFn.method = funcName;
    extrinsicFn.section = section;
    extrinsicFn.toJSON = ()=>callMetadata.toJSON();
    return extrinsicFn;
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltCSZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Expands the metadata by decoration into consts, query and tx sections
 */ parcelHelpers.export(exports, "expandMetadata", ()=>expandMetadata);
parcelHelpers.export(exports, "decorateConstants", ()=>(0, _indexJs.decorateConstants));
parcelHelpers.export(exports, "decorateErrors", ()=>(0, _indexJs1.decorateErrors));
parcelHelpers.export(exports, "decorateEvents", ()=>(0, _indexJs2.decorateEvents));
parcelHelpers.export(exports, "decorateExtrinsics", ()=>(0, _indexJs3.decorateExtrinsics));
parcelHelpers.export(exports, "decorateStorage", ()=>(0, _indexJs4.decorateStorage));
parcelHelpers.export(exports, "filterCallsSome", ()=>(0, _indexJs3.filterCallsSome));
parcelHelpers.export(exports, "filterEventsSome", ()=>(0, _indexJs2.filterEventsSome));
var _metadataJs = require("../Metadata.js");
var _indexJs = require("./constants/index.js");
var _indexJs1 = require("./errors/index.js");
var _indexJs2 = require("./events/index.js");
var _indexJs3 = require("./extrinsics/index.js");
var _indexJs4 = require("./storage/index.js");
function expandMetadata(registry, metadata) {
    if (!(metadata instanceof (0, _metadataJs.Metadata))) throw new Error("You need to pass a valid Metadata instance to Decorated");
    const latest = metadata.asLatest;
    const version = metadata.version;
    return {
        consts: (0, _indexJs.decorateConstants)(registry, latest, version),
        errors: (0, _indexJs1.decorateErrors)(registry, latest, version),
        events: (0, _indexJs2.decorateEvents)(registry, latest, version),
        query: (0, _indexJs4.decorateStorage)(registry, latest, version),
        registry,
        tx: (0, _indexJs3.decorateExtrinsics)(registry, latest, version)
    };
}

},{"../Metadata.js":"cg9v9","./constants/index.js":"lKJoC","./errors/index.js":"95TsO","./events/index.js":"XE5vW","./extrinsics/index.js":"3JIyR","./storage/index.js":"e58xK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cg9v9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name Metadata
 * @description
 * The versioned runtime metadata as a decoded structure
 */ parcelHelpers.export(exports, "Metadata", ()=>Metadata);
var _util = require("@polkadot/util");
var _metadataVersionedJs = require("./MetadataVersioned.js");
const EMPTY_METADATA = new Uint8Array([
    0x6d,
    0x65,
    0x74,
    0x61,
    9
]);
const VERSION_IDX = EMPTY_METADATA.length - 1;
/** @internal */ function decodeU8a(registry, u8a) {
    if (u8a.length === 0) return EMPTY_METADATA;
    else if (u8a[VERSION_IDX] === 9) // This is an f-ing hack as a follow-up to another ugly hack
    // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
    // when we fail on V9, try to re-parse it as v10...
    try {
        return new (0, _metadataVersionedJs.MetadataVersioned)(registry, u8a);
    } catch  {
        u8a[VERSION_IDX] = 10;
    }
    return u8a;
}
class Metadata extends (0, _metadataVersionedJs.MetadataVersioned) {
    constructor(registry, value){
        // const timeStart = performance.now()
        super(registry, (0, _util.isU8a)(value) || (0, _util.isString)(value) ? decodeU8a(registry, (0, _util.u8aToU8a)(value)) : value);
    // console.log('Metadata', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }
}

},{"@polkadot/util":"3HnHw","./MetadataVersioned.js":"dKeZr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dKeZr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name MetadataVersioned
 * @description
 * The versioned runtime metadata as a decoded structure
 */ parcelHelpers.export(exports, "MetadataVersioned", ()=>MetadataVersioned);
var _typesCodec = require("@polkadot/types-codec");
var _indexJs = require("./util/index.js");
var _toV10Js = require("./v9/toV10.js");
var _toV11Js = require("./v10/toV11.js");
var _toV12Js = require("./v11/toV12.js");
var _toV13Js = require("./v12/toV13.js");
var _toV14Js = require("./v13/toV14.js");
var _toV15Js = require("./v14/toV15.js");
var _toLatestJs = require("./v15/toLatest.js");
var _magicNumberJs = require("./MagicNumber.js");
var _versionsJs = require("./versions.js");
class MetadataVersioned extends (0, _typesCodec.Struct) {
    __internal__converted = new Map();
    constructor(registry, value){
        // const timeStart = performance.now()
        super(registry, {
            magicNumber: (0, _magicNumberJs.MagicNumber),
            metadata: "MetadataAll"
        }, value);
    // console.log('MetadataVersioned', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }
    __internal__assertVersion = (version)=>{
        if (this.version > version) throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);
        return this.version === version;
    };
    __internal__getVersion = (version, fromPrev)=>{
        if (version !== "latest" && this.__internal__assertVersion(version)) {
            const asCurr = `asV${version}`;
            return this.__internal__metadata()[asCurr];
        }
        if (!this.__internal__converted.has(version)) {
            const asPrev = version === "latest" ? `asV${0, _versionsJs.LATEST_VERSION}` : `asV${version - 1}`;
            this.__internal__converted.set(version, fromPrev(this.registry, this[asPrev], this.version));
        }
        return this.__internal__converted.get(version);
    };
    /**
     * @description the metadata wrapped
     */ __internal__metadata = ()=>{
        return this.getT("metadata");
    };
    /**
     * @description Returns the wrapped metadata as a limited calls-only (latest) version
     */ get asCallsOnly() {
        return new MetadataVersioned(this.registry, {
            magicNumber: this.magicNumber,
            metadata: this.registry.createTypeUnsafe("MetadataAll", [
                (0, _indexJs.toCallsOnly)(this.registry, this.asLatest),
                (0, _versionsJs.TO_CALLS_VERSION)
            ])
        });
    }
    /**
     * @description Returns the wrapped metadata as a V9 object
     */ get asV9() {
        this.__internal__assertVersion(9);
        return this.__internal__metadata().asV9;
    }
    /**
     * @description Returns the wrapped values as a V10 object
     */ get asV10() {
        return this.__internal__getVersion(10, (0, _toV10Js.toV10));
    }
    /**
     * @description Returns the wrapped values as a V11 object
     */ get asV11() {
        return this.__internal__getVersion(11, (0, _toV11Js.toV11));
    }
    /**
     * @description Returns the wrapped values as a V12 object
     */ get asV12() {
        return this.__internal__getVersion(12, (0, _toV12Js.toV12));
    }
    /**
     * @description Returns the wrapped values as a V13 object
     */ get asV13() {
        return this.__internal__getVersion(13, (0, _toV13Js.toV13));
    }
    /**
     * @description Returns the wrapped values as a V14 object
     */ get asV14() {
        return this.__internal__getVersion(14, (0, _toV14Js.toV14));
    }
    /**
     * @description Returns the wrapped values as a V14 object
     */ get asV15() {
        return this.__internal__getVersion(15, (0, _toV15Js.toV15));
    }
    /**
     * @description Returns the wrapped values as a latest version object
     */ get asLatest() {
        return this.__internal__getVersion("latest", (0, _toLatestJs.toLatest));
    }
    /**
     * @description The magicNumber for the Metadata (known constant)
     */ get magicNumber() {
        return this.getT("magicNumber");
    }
    /**
     * @description the metadata version this structure represents
     */ get version() {
        return this.__internal__metadata().index;
    }
    getUniqTypes(throwError) {
        return (0, _indexJs.getUniqTypes)(this.registry, this.asLatest, throwError);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */ toJSON() {
        // HACK(y): ensure that we apply the aliases if we have not done so already, this is
        // needed to ensure we have the correct overrides (which is only applied in toLatest)
        // eslint-disable-next-line no-unused-expressions
        this.asLatest;
        return super.toJSON();
    }
}

},{"@polkadot/types-codec":"gvW09","./util/index.js":"7JXy8","./v9/toV10.js":"55gGO","./v10/toV11.js":"5kWFi","./v11/toV12.js":"fs0Nk","./v12/toV13.js":"kfPjj","./v13/toV14.js":"ik141","./v14/toV15.js":"c8nwS","./v15/toLatest.js":"1eJxA","./MagicNumber.js":"5Ay22","./versions.js":"lIS69","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"55gGO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "toV10", ()=>toV10);
var _util = require("@polkadot/util");
/** @internal */ function createStorageHasher(registry, hasher) {
    // Blake2_128_Concat has been added at index 2, so we increment all the
    // indexes greater than 2
    if (hasher.toNumber() >= 2) return registry.createTypeUnsafe("StorageHasherV10", [
        hasher.toNumber() + 1
    ]);
    return registry.createTypeUnsafe("StorageHasherV10", [
        hasher
    ]);
}
/** @internal */ function createStorageType(registry, entryType) {
    if (entryType.isMap) return [
        (0, _util.objectSpread)({}, entryType.asMap, {
            hasher: createStorageHasher(registry, entryType.asMap.hasher)
        }),
        1
    ];
    if (entryType.isDoubleMap) return [
        (0, _util.objectSpread)({}, entryType.asDoubleMap, {
            hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
            key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
        }),
        2
    ];
    return [
        entryType.asPlain,
        0
    ];
}
/** @internal */ function convertModule(registry, mod) {
    const storage = mod.storage.unwrapOr(null);
    return registry.createTypeUnsafe("ModuleMetadataV10", [
        (0, _util.objectSpread)({}, mod, {
            storage: storage ? (0, _util.objectSpread)({}, storage, {
                items: storage.items.map((item)=>(0, _util.objectSpread)({}, item, {
                        type: registry.createTypeUnsafe("StorageEntryTypeV10", createStorageType(registry, item.type))
                    }))
            }) : null
        })
    ]);
}
function toV10(registry, { modules }) {
    return registry.createTypeUnsafe("MetadataV10", [
        {
            modules: modules.map((mod)=>convertModule(registry, mod))
        }
    ]);
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5kWFi":[function(require,module,exports) {
/** @internal */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toV11", ()=>toV11);
function toV11(registry, { modules }) {
    return registry.createTypeUnsafe("MetadataV11", [
        {
            // This is new in V11, pass V0 here - something non-existing, telling the API to use
            // the fallback for this information (on-chain detection)
            extrinsic: {
                signedExtensions: [],
                version: 0
            },
            modules
        }
    ]);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fs0Nk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 **/ parcelHelpers.export(exports, "toV12", ()=>toV12);
var _util = require("@polkadot/util");
function toV12(registry, { extrinsic, modules }) {
    return registry.createTypeUnsafe("MetadataV12", [
        {
            extrinsic,
            modules: modules.map((mod)=>registry.createTypeUnsafe("ModuleMetadataV12", [
                    (0, _util.objectSpread)({}, mod, {
                        index: 255
                    })
                ]))
        }
    ]);
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kfPjj":[function(require,module,exports) {
/**
 * @internal
 **/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toV13", ()=>toV13);
function toV13(registry, v12) {
    return registry.createTypeUnsafe("MetadataV13", [
        v12
    ]);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ik141":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Convert the Metadata to v14
 * @internal
 **/ parcelHelpers.export(exports, "toV14", ()=>toV14);
var _util = require("@polkadot/util");
var _aliasJs = require("../../interfaces/alias.js");
var _definitionsJs = require("../../interfaces/runtime/definitions.js");
const BOXES = [
    [
        "<",
        ">"
    ],
    [
        "<",
        ","
    ],
    [
        ",",
        ">"
    ],
    [
        "(",
        ")"
    ],
    [
        "(",
        ","
    ],
    [
        ",",
        ","
    ],
    [
        ",",
        ")"
    ]
];
/**
 * Creates a compatible type mapping
 * @internal
 **/ function compatType(specs, _type) {
    const type = _type.toString();
    const index = specs.findIndex(({ def })=>def.HistoricMetaCompat === type);
    if (index !== -1) return index;
    return specs.push({
        def: {
            HistoricMetaCompat: type
        }
    }) - 1;
}
function compatTypes(specs, ...types) {
    for(let i = 0, count = types.length; i < count; i++)compatType(specs, types[i]);
}
function makeTupleType(specs, entries) {
    return specs.push({
        def: {
            Tuple: entries
        }
    }) - 1;
}
function makeVariantType(modName, variantType, specs, variants) {
    return specs.push({
        def: {
            Variant: {
                variants
            }
        },
        path: [
            `pallet_${modName.toString()}`,
            "pallet",
            variantType
        ]
    }) - 1;
}
/**
 * @internal
 * generate & register the OriginCaller type
 **/ function registerOriginCaller(registry, modules, metaVersion) {
    registry.register({
        OriginCaller: {
            _enum: modules.map((mod, index)=>[
                    mod.name.toString(),
                    metaVersion >= 12 ? mod.index.toNumber() : index
                ]).sort((a, b)=>a[1] - b[1]).reduce((result, [name, index])=>{
                for(let i = Object.keys(result).length; i < index; i++)result[`Empty${i}`] = "Null";
                result[name] = (0, _definitionsJs.knownOrigins)[name] || "Null";
                return result;
            }, {})
        }
    });
}
/**
 * Find and apply the correct type override
 * @internal
 **/ function setTypeOverride(sectionTypes, types) {
    types.forEach((type)=>{
        const override = Object.keys(sectionTypes).find((aliased)=>type.eq(aliased));
        if (override) type.setOverride(sectionTypes[override]);
        else {
            // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
            const orig = type.toString();
            const alias = Object.entries(sectionTypes).reduce((result, [src, dst])=>BOXES.reduce((result, [a, z])=>result.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);
            if (orig !== alias) type.setOverride(alias);
        }
    });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/ function convertCalls(specs, registry, modName, calls, sectionTypes) {
    const variants = calls.map(({ args, docs, name }, index)=>{
        setTypeOverride(sectionTypes, args.map(({ type })=>type));
        return registry.createTypeUnsafe("SiVariant", [
            {
                docs,
                fields: args.map(({ name, type })=>registry.createTypeUnsafe("SiField", [
                        {
                            name,
                            type: compatType(specs, type)
                        }
                    ])),
                index,
                name
            }
        ]);
    });
    return registry.createTypeUnsafe("PalletCallMetadataV14", [
        {
            type: makeVariantType(modName, "Call", specs, variants)
        }
    ]);
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */ function convertConstants(specs, registry, constants, sectionTypes) {
    return constants.map(({ docs, name, type, value })=>{
        setTypeOverride(sectionTypes, [
            type
        ]);
        return registry.createTypeUnsafe("PalletConstantMetadataV14", [
            {
                docs,
                name,
                type: compatType(specs, type),
                value
            }
        ]);
    });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */ function convertErrors(specs, registry, modName, errors, _sectionTypes) {
    const variants = errors.map(({ docs, name }, index)=>registry.createTypeUnsafe("SiVariant", [
            {
                docs,
                fields: [],
                index,
                name
            }
        ]));
    return registry.createTypeUnsafe("PalletErrorMetadataV14", [
        {
            type: makeVariantType(modName, "Error", specs, variants)
        }
    ]);
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/ function convertEvents(specs, registry, modName, events, sectionTypes) {
    const variants = events.map(({ args, docs, name }, index)=>{
        setTypeOverride(sectionTypes, args);
        return registry.createTypeUnsafe("SiVariant", [
            {
                docs,
                fields: args.map((t)=>registry.createTypeUnsafe("SiField", [
                        {
                            type: compatType(specs, t)
                        }
                    ])),
                index,
                name
            }
        ]);
    });
    return registry.createTypeUnsafe("PalletEventMetadataV14", [
        {
            type: makeVariantType(modName, "Event", specs, variants)
        }
    ]);
}
function createMapEntry(specs, registry, sectionTypes, { hashers, isLinked, isOptional, keys, value }) {
    setTypeOverride(sectionTypes, [
        value,
        ...Array.isArray(keys) ? keys : [
            keys
        ]
    ]);
    return registry.createTypeUnsafe("StorageEntryTypeV14", [
        {
            Map: {
                hashers,
                key: hashers.length === 1 ? compatType(specs, keys[0]) : makeTupleType(specs, keys.map((t)=>compatType(specs, t))),
                value: isLinked ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys[0].toString()}>)`) : compatType(specs, value)
            }
        }
    ]);
}
/**
 * Apply module-specific storage type overrides (always part of toV14)
 * @internal
 **/ function convertStorage(specs, registry, { items, prefix }, sectionTypes) {
    return registry.createTypeUnsafe("PalletStorageMetadataV14", [
        {
            items: items.map(({ docs, fallback, modifier, name, type })=>{
                let entryType;
                if (type.isPlain) {
                    const plain = type.asPlain;
                    setTypeOverride(sectionTypes, [
                        plain
                    ]);
                    entryType = registry.createTypeUnsafe("StorageEntryTypeV14", [
                        {
                            Plain: compatType(specs, plain)
                        }
                    ]);
                } else if (type.isMap) {
                    const map = type.asMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: [
                            map.hasher
                        ],
                        isLinked: map.linked.isTrue,
                        isOptional: modifier.isOptional,
                        keys: [
                            map.key
                        ],
                        value: map.value
                    });
                } else if (type.isDoubleMap) {
                    const dm = type.asDoubleMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: [
                            dm.hasher,
                            dm.key2Hasher
                        ],
                        isLinked: false,
                        isOptional: modifier.isOptional,
                        keys: [
                            dm.key1,
                            dm.key2
                        ],
                        value: dm.value
                    });
                } else {
                    const nm = type.asNMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: nm.hashers,
                        isLinked: false,
                        isOptional: modifier.isOptional,
                        keys: nm.keyVec,
                        value: nm.value
                    });
                }
                return registry.createTypeUnsafe("StorageEntryMetadataV14", [
                    {
                        docs,
                        fallback,
                        modifier,
                        name,
                        type: entryType
                    }
                ]);
            }),
            prefix
        }
    ]);
}
/** @internal */ function convertExtrinsic(registry, { signedExtensions, version }) {
    return registry.createTypeUnsafe("ExtrinsicMetadataV14", [
        {
            signedExtensions: signedExtensions.map((identifier)=>({
                    identifier,
                    type: 0 // we don't map the fields at all
                })),
            type: 0,
            version
        }
    ]);
}
/** @internal */ function createPallet(specs, registry, mod, { calls, constants, errors, events, storage }) {
    const sectionTypes = (0, _aliasJs.getAliasTypes)(registry, (0, _util.stringCamelCase)(mod.name));
    return registry.createTypeUnsafe("PalletMetadataV14", [
        {
            calls: calls && convertCalls(specs, registry, mod.name, calls, sectionTypes),
            constants: convertConstants(specs, registry, constants, sectionTypes),
            errors: errors && convertErrors(specs, registry, mod.name, errors, sectionTypes),
            events: events && convertEvents(specs, registry, mod.name, events, sectionTypes),
            index: mod.index,
            name: mod.name,
            storage: storage && convertStorage(specs, registry, storage, sectionTypes)
        }
    ]);
}
function toV14(registry, v13, metaVersion) {
    const specs = [];
    // position 0 always has Null, additionally add internal defaults
    compatTypes(specs, "Null", "u8", "u16", "u32", "u64");
    registerOriginCaller(registry, v13.modules, metaVersion);
    const extrinsic = convertExtrinsic(registry, v13.extrinsic);
    const pallets = v13.modules.map((mod)=>createPallet(specs, registry, mod, {
            calls: mod.calls.unwrapOr(null),
            constants: mod.constants,
            errors: mod.errors.length ? mod.errors : null,
            events: mod.events.unwrapOr(null),
            storage: mod.storage.unwrapOr(null)
        }));
    return registry.createTypeUnsafe("MetadataV14", [
        {
            extrinsic,
            lookup: {
                types: specs.map((type, id)=>registry.createTypeUnsafe("PortableType", [
                        {
                            id,
                            type
                        }
                    ]))
            },
            pallets
        }
    ]);
}

},{"@polkadot/util":"3HnHw","../../interfaces/alias.js":"71fOM","../../interfaces/runtime/definitions.js":"cRjlK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"71fOM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Get types for specific modules (metadata override)
 */ parcelHelpers.export(exports, "getAliasTypes", ()=>getAliasTypes);
const typesAlias = {
    assets: {
        Approval: "AssetApproval",
        ApprovalKey: "AssetApprovalKey",
        Balance: "TAssetBalance",
        DestroyWitness: "AssetDestroyWitness"
    },
    babe: {
        EquivocationProof: "BabeEquivocationProof"
    },
    balances: {
        Status: "BalanceStatus"
    },
    beefy: {
        AuthorityId: "BeefyId"
    },
    contracts: {
        StorageKey: "ContractStorageKey"
    },
    electionProviderMultiPhase: {
        Phase: "ElectionPhase"
    },
    ethereum: {
        Block: "EthBlock",
        Header: "EthHeader",
        Receipt: "EthReceipt",
        Transaction: "EthTransaction",
        TransactionStatus: "EthTransactionStatus"
    },
    evm: {
        Account: "EvmAccount",
        Log: "EvmLog",
        Vicinity: "EvmVicinity"
    },
    grandpa: {
        Equivocation: "GrandpaEquivocation",
        EquivocationProof: "GrandpaEquivocationProof"
    },
    identity: {
        Judgement: "IdentityJudgement"
    },
    inclusion: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    paraDisputes: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    paraInclusion: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    paraScheduler: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    paraShared: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    parachains: {
        Id: "ParaId"
    },
    parasDisputes: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    parasInclusion: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    parasScheduler: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    parasShared: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    proposeParachain: {
        Proposal: "ParachainProposal"
    },
    proxy: {
        Announcement: "ProxyAnnouncement"
    },
    scheduler: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    shared: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    society: {
        Judgement: "SocietyJudgement",
        Vote: "SocietyVote"
    },
    staking: {
        Compact: "CompactAssignments"
    },
    treasury: {
        Proposal: "TreasuryProposal"
    },
    xcm: {
        AssetId: "XcmAssetId"
    },
    xcmPallet: {
        AssetId: "XcmAssetId"
    }
};
function getAliasTypes({ knownTypes }, section) {
    return {
        ...typesAlias[section] ?? {},
        ...knownTypes.typesAlias?.[section] ?? {}
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c8nwS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Convert the Metadata to v15
 * @internal
 **/ parcelHelpers.export(exports, "toV15", ()=>toV15);
var _util = require("@polkadot/util");
function toV15(registry, v14, _) {
    // V15 is mostly equivalent to v14 however it does add
    //
    // 1. The top-level apis entry - it is assumed that in usage we would
    //    just check for all-empty (like this would construct)
    // 2. A docs param on the pallet itself
    // 3. Additional extrinsic parameters
    //
    // A straight conversion with createTypeUndafe magic fills in details
    // We need the UncheckedExtrinsic to extract the types, at least for v14
    // which does have these details embedded (previous-gen won't populate)
    const unchecked = v14.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;
    return registry.createTypeUnsafe("MetadataV15", [
        (0, _util.objectSpread)({}, v14, {
            extrinsic: registry.createTypeUnsafe("ExtrinsicMetadataV15", [
                (0, _util.objectSpread)({}, v14.extrinsic, {
                    addressType: unchecked?.[0].type.unwrapOr(0),
                    callType: unchecked?.[1].type.unwrapOr(0),
                    extraType: unchecked?.[3].type.unwrapOr(0),
                    signatureType: unchecked?.[2].type.unwrapOr(0)
                })
            ]),
            outerEnums: registry.createTypeUnsafe("OuterEnums15", [
                {
                    // FIXME We need to extract & add the errorType in here
                    // (these doesn't seem to be an esay way to detect & extract it)
                    callType: unchecked?.[1].type.unwrapOr(0),
                    eventType: v14.lookup.paramTypes.FrameSystemEventRecord?.[0].type.unwrapOr(0)
                }
            ])
        })
    ]);
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1eJxA":[function(require,module,exports) {
/**
 * Convert the Metadata (which is an alias) to latest
 * @internal
 **/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toLatest", ()=>toLatest);
function toLatest(_registry, v15, _metaVersion) {
    return v15;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Ay22":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MAGIC_NUMBER", ()=>MAGIC_NUMBER);
parcelHelpers.export(exports, "MagicNumber", ()=>MagicNumber);
var _typesCodec = require("@polkadot/types-codec");
const MAGIC_NUMBER = 0x6174656d; // `meta`, reversed for Little Endian encoding
class MagicNumber extends (0, _typesCodec.U32) {
    constructor(registry, value){
        super(registry, value);
        if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe("u32", [
            MAGIC_NUMBER
        ]).toHex()}, found ${this.toHex()}`);
    }
}

},{"@polkadot/types-codec":"gvW09","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lIS69":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "KNOWN_VERSIONS", ()=>KNOWN_VERSIONS);
parcelHelpers.export(exports, "LATEST_VERSION", ()=>LATEST_VERSION);
parcelHelpers.export(exports, "TO_CALLS_VERSION", ()=>TO_CALLS_VERSION);
const KNOWN_VERSIONS = [
    15,
    14,
    13,
    12,
    11,
    10,
    9
];
const LATEST_VERSION = KNOWN_VERSIONS[0];
const TO_CALLS_VERSION = 14; // LATEST_VERSION;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lKJoC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "decorateConstants", ()=>decorateConstants);
var _util = require("@polkadot/util");
var _utilJs = require("../util.js");
function decorateConstants(registry, { pallets }, _version) {
    const result = {};
    for(let i = 0, count = pallets.length; i < count; i++){
        const { constants, name } = pallets[i];
        if (!constants.isEmpty) (0, _util.lazyMethod)(result, (0, _util.stringCamelCase)(name), ()=>(0, _util.lazyMethods)({}, constants, (constant)=>{
                const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [
                    (0, _util.hexToU8a)(constant.value.toHex())
                ]);
                // We are casting here since we are assigning to a read-only property
                codec.meta = constant;
                return codec;
            }, (0, _utilJs.objectNameToCamel)));
    }
    return result;
}

},{"@polkadot/util":"3HnHw","../util.js":"cN3Id","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"95TsO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "variantToMeta", ()=>variantToMeta);
/** @internal */ parcelHelpers.export(exports, "decorateErrors", ()=>decorateErrors);
var _util = require("@polkadot/util");
var _lazyJs = require("../../../create/lazy.js");
var _utilJs = require("../util.js");
function variantToMeta(lookup, variant) {
    return (0, _util.objectSpread)({
        args: variant.fields.map(({ type })=>lookup.getTypeDef(type).type)
    }, variant);
}
function decorateErrors(registry, { lookup, pallets }, version) {
    const result = {};
    for(let i = 0, count = pallets.length; i < count; i++){
        const { errors, index, name } = pallets[i];
        if (errors.isSome) {
            const sectionIndex = version >= 12 ? index.toNumber() : i;
            (0, _util.lazyMethod)(result, (0, _util.stringCamelCase)(name), ()=>(0, _lazyJs.lazyVariants)(lookup, errors.unwrap(), (0, _utilJs.objectNameToString), (variant)=>({
                        // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
                        is: (errorMod)=>(0, _util.isCodec)(errorMod) && (0, _util.isCodec)(errorMod.index) && errorMod.index.eq(sectionIndex) && ((0, _util.isU8a)(errorMod.error) ? errorMod.error[0] === variant.index.toNumber() : (0, _util.isCodec)(errorMod.error) && errorMod.error.eq(variant.index)),
                        meta: registry.createTypeUnsafe("ErrorMetadataLatest", [
                            variantToMeta(lookup, variant)
                        ])
                    })));
        }
    }
    return result;
}

},{"@polkadot/util":"3HnHw","../../../create/lazy.js":"3F1qc","../util.js":"cN3Id","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"XE5vW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterEventsSome", ()=>filterEventsSome);
/** @internal */ parcelHelpers.export(exports, "decorateEvents", ()=>decorateEvents);
var _util = require("@polkadot/util");
var _lazyJs = require("../../../create/lazy.js");
var _indexJs = require("../errors/index.js");
var _utilJs = require("../util.js");
function filterEventsSome({ events }) {
    return events.isSome;
}
function decorateEvents(registry, { lookup, pallets }, version) {
    const result = {};
    const filtered = pallets.filter(filterEventsSome);
    for(let i = 0, count = filtered.length; i < count; i++){
        const { events, index, name } = filtered[i];
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        (0, _util.lazyMethod)(result, (0, _util.stringCamelCase)(name), ()=>(0, _lazyJs.lazyVariants)(lookup, events.unwrap(), (0, _utilJs.objectNameToString), (variant)=>({
                    // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
                    is: (eventRecord)=>(0, _util.isCodec)(eventRecord) && (0, _util.isU8a)(eventRecord.index) && sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
                    meta: registry.createTypeUnsafe("EventMetadataLatest", [
                        (0, _indexJs.variantToMeta)(lookup, variant)
                    ])
                })));
    }
    return result;
}

},{"@polkadot/util":"3HnHw","../../../create/lazy.js":"3F1qc","../errors/index.js":"95TsO","../util.js":"cN3Id","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e58xK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "decorateStorage", ()=>decorateStorage);
var _util = require("@polkadot/util");
var _utilJs = require("../util.js");
var _createFunctionJs = require("./createFunction.js");
var _getStorageJs = require("./getStorage.js");
var _utilJs1 = require("./util.js");
const VERSION_NAME = "palletVersion";
const VERSION_KEY = ":__STORAGE_VERSION__:";
const VERSION_DOCS = {
    docs: "Returns the current pallet version from storage",
    type: "u16"
};
function decorateStorage(registry, { pallets }, _metaVersion) {
    const result = (0, _getStorageJs.getStorage)(registry);
    for(let i = 0, count = pallets.length; i < count; i++){
        const { name, storage } = pallets[i];
        if (storage.isSome) {
            const section = (0, _util.stringCamelCase)(name);
            const { items, prefix: _prefix } = storage.unwrap();
            const prefix = _prefix.toString();
            (0, _util.lazyMethod)(result, section, ()=>(0, _util.lazyMethods)({
                    palletVersion: (0, _utilJs1.createRuntimeFunction)({
                        method: VERSION_NAME,
                        prefix,
                        section
                    }, (0, _createFunctionJs.createKeyRaw)(registry, {
                        method: VERSION_KEY,
                        prefix: name.toString()
                    }, (0, _createFunctionJs.NO_RAW_ARGS)), VERSION_DOCS)(registry)
                }, items, (meta)=>(0, _createFunctionJs.createFunction)(registry, {
                        meta,
                        method: meta.name.toString(),
                        prefix,
                        section
                    }, {}), (0, _utilJs.objectNameToCamel)));
        }
    }
    return result;
}

},{"@polkadot/util":"3HnHw","../util.js":"cN3Id","./createFunction.js":"kmFgm","./getStorage.js":"2ecpX","./util.js":"llr42","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kmFgm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NO_RAW_ARGS", ()=>NO_RAW_ARGS);
/** @internal */ parcelHelpers.export(exports, "createKeyRawParts", ()=>createKeyRawParts);
/** @internal */ parcelHelpers.export(exports, "createKeyInspect", ()=>createKeyInspect);
/** @internal */ parcelHelpers.export(exports, "createKeyRaw", ()=>createKeyRaw);
/** @internal */ parcelHelpers.export(exports, "createFunction", ()=>createFunction);
var _typesCodec = require("@polkadot/types-codec");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
var _indexJs = require("../../util/index.js");
var _getHasherJs = require("./getHasher.js");
const NO_RAW_ARGS = {
    args: [],
    hashers: [],
    keys: []
};
/** @internal */ function filterDefined(a) {
    return !(0, _util.isUndefined)(a);
}
/** @internal */ function assertArgs({ method, section }, { args, keys }) {
    if (!Array.isArray(args)) throw new Error(`Call to ${(0, _util.stringCamelCase)(section || "unknown")}.${(0, _util.stringCamelCase)(method || "unknown")} needs ${keys.length} arguments`);
    else if (args.filter(filterDefined).length !== keys.length) throw new Error(`Call to ${(0, _util.stringCamelCase)(section || "unknown")}.${(0, _util.stringCamelCase)(method || "unknown")} needs ${keys.length} arguments, found [${args.join(", ")}]`);
}
function createKeyRawParts(registry, itemFn, { args, hashers, keys }) {
    const count = keys.length;
    const extra = new Array(count);
    for(let i = 0; i < count; i++)extra[i] = (0, _getHasherJs.getHasher)(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys[i]), [
        args[i]
    ]).toU8a());
    return [
        [
            (0, _utilCrypto.xxhashAsU8a)(itemFn.prefix, 128),
            (0, _utilCrypto.xxhashAsU8a)(itemFn.method, 128)
        ],
        extra
    ];
}
function createKeyInspect(registry, itemFn, args) {
    assertArgs(itemFn, args);
    const { meta } = itemFn;
    const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
    let types = [];
    if (meta.type.isMap) {
        const { hashers, key } = meta.type.asMap;
        types = hashers.length === 1 ? [
            `${hashers[0].type}(${(0, _indexJs.getSiName)(registry.lookup, key)})`
        ] : registry.lookup.getSiType(key).def.asTuple.map((k, i)=>`${hashers[i].type}(${(0, _indexJs.getSiName)(registry.lookup, k)})`);
    }
    const names = [
        "module",
        "method"
    ].concat(...args.args.map((_, i)=>types[i]));
    return {
        inner: prefix.concat(...extra).map((v, i)=>({
                name: names[i],
                outer: [
                    v
                ]
            }))
    };
}
function createKeyRaw(registry, itemFn, args) {
    const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
    return (0, _util.u8aConcat)(...prefix, ...extra);
}
/** @internal */ function createKey(registry, itemFn, args) {
    assertArgs(itemFn, args);
    // always add the length prefix (underlying it is Bytes)
    return (0, _util.compactAddLength)(createKeyRaw(registry, itemFn, args));
}
/** @internal */ function createStorageInspect(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    return (...args)=>{
        if (type.isPlain) return options.skipHashing ? {
            inner: [],
            name: "wellKnown",
            outer: [
                (0, _util.u8aToU8a)(options.key)
            ]
        } : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
        const { hashers, key } = type.asMap;
        return hashers.length === 1 ? createKeyInspect(registry, itemFn, {
            args,
            hashers,
            keys: [
                key
            ]
        }) : createKeyInspect(registry, itemFn, {
            args,
            hashers,
            keys: registry.lookup.getSiType(key).def.asTuple
        });
    };
}
/** @internal */ function createStorageFn(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    let cacheKey = null;
    // Can only have zero or one argument:
    //   - storage.system.account(address)
    //   - storage.timestamp.blockPeriod()
    // For higher-map queries the params are passed in as an tuple, [key1, key2]
    return (...args)=>{
        if (type.isPlain) {
            if (!cacheKey) cacheKey = options.skipHashing ? (0, _util.compactAddLength)((0, _util.u8aToU8a)(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
            return cacheKey;
        }
        const { hashers, key } = type.asMap;
        return hashers.length === 1 ? createKey(registry, itemFn, {
            args,
            hashers,
            keys: [
                key
            ]
        }) : createKey(registry, itemFn, {
            args,
            hashers,
            keys: registry.lookup.getSiType(key).def.asTuple
        });
    };
}
/** @internal */ function createWithMeta(registry, itemFn, options) {
    const { meta, method, prefix, section } = itemFn;
    const storageFn = createStorageFn(registry, itemFn, options);
    storageFn.inspect = createStorageInspect(registry, itemFn, options);
    storageFn.meta = meta;
    storageFn.method = (0, _util.stringCamelCase)(method);
    storageFn.prefix = prefix;
    storageFn.section = section;
    // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
    // instances (e.g. collective) will not work since it is only matched on param meta
    storageFn.toJSON = ()=>(0, _util.objectSpread)({
            storage: {
                method,
                prefix,
                section
            }
        }, meta.toJSON());
    return storageFn;
}
/** @internal */ function extendHeadMeta(registry, { meta: { docs, name, type }, section }, { method }, iterFn) {
    // metadata with a fallback value using the type of the key, the normal
    // meta fallback only applies to actual entry values, create one for head
    const meta = registry.createTypeUnsafe("StorageEntryMetadataLatest", [
        {
            docs,
            fallback: registry.createTypeUnsafe("Bytes", []),
            modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", [
                1
            ]),
            name,
            type: registry.createTypeUnsafe("StorageEntryTypeLatest", [
                type.asMap.key,
                0
            ])
        }
    ]);
    iterFn.meta = meta;
    const fn = (...args)=>registry.createTypeUnsafe("StorageKey", [
            iterFn(...args),
            {
                method,
                section
            }
        ]);
    fn.meta = meta;
    return fn;
}
/** @internal */ function extendPrefixedMap(registry, itemFn, storageFn) {
    const { meta: { type }, method, section } = itemFn;
    storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args)=>{
        if (args.length && (type.isPlain || args.length >= type.asMap.hashers.length)) throw new Error(`Iteration of ${(0, _util.stringCamelCase)(section || "unknown")}.${(0, _util.stringCamelCase)(method || "unknown")} needs arguments to be at least one less than the full arguments, found [${args.join(", ")}]`);
        if (args.length) {
            if (type.isMap) {
                const { hashers, key } = type.asMap;
                const keysVec = hashers.length === 1 ? [
                    key
                ] : registry.lookup.getSiType(key).def.asTuple;
                return new (0, _typesCodec.Raw)(registry, createKeyRaw(registry, itemFn, {
                    args,
                    hashers: hashers.slice(0, args.length),
                    keys: keysVec.slice(0, args.length)
                }));
            }
        }
        return new (0, _typesCodec.Raw)(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
    });
    return storageFn;
}
function createFunction(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    const storageFn = createWithMeta(registry, itemFn, options);
    if (type.isMap) extendPrefixedMap(registry, itemFn, storageFn);
    storageFn.keyPrefix = (...args)=>storageFn.iterKey && storageFn.iterKey(...args) || (0, _util.compactStripLength)(storageFn())[1];
    return storageFn;
}

},{"@polkadot/types-codec":"gvW09","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","../../util/index.js":"7JXy8","./getHasher.js":"8Z1o8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Z1o8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "getHasher", ()=>getHasher);
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
const DEFAULT_FN = (data)=>(0, _utilCrypto.xxhashAsU8a)(data, 128);
const HASHERS = {
    Blake2_128: (data)=>(0, _utilCrypto.blake2AsU8a)(data, 128),
    Blake2_128Concat: (data)=>(0, _util.u8aConcat)((0, _utilCrypto.blake2AsU8a)(data, 128), (0, _util.u8aToU8a)(data)),
    Blake2_256: (data)=>(0, _utilCrypto.blake2AsU8a)(data, 256),
    Identity: (data)=>(0, _util.u8aToU8a)(data),
    Twox128: (data)=>(0, _utilCrypto.xxhashAsU8a)(data, 128),
    Twox256: (data)=>(0, _utilCrypto.xxhashAsU8a)(data, 256),
    Twox64Concat: (data)=>(0, _util.u8aConcat)((0, _utilCrypto.xxhashAsU8a)(data, 64), (0, _util.u8aToU8a)(data))
};
function getHasher(hasher) {
    return HASHERS[hasher.type] || DEFAULT_FN;
}

},{"@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ecpX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "getStorage", ()=>getStorage);
var _substrateJs = require("./substrate.js");
function getStorage(registry) {
    const storage = {};
    const entries = Object.entries((0, _substrateJs.substrate));
    for(let e = 0, count = entries.length; e < count; e++)storage[entries[e][0]] = entries[e][1](registry);
    return {
        substrate: storage
    };
}

},{"./substrate.js":"b4RiX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b4RiX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "substrate", ()=>substrate);
var _utilJs = require("./util.js");
const prefix = "Substrate";
const section = "substrate";
function createSubstrateFn(method, key, meta) {
    return (0, _utilJs.createRuntimeFunction)({
        method,
        prefix,
        section
    }, key, meta);
}
const substrate = {
    changesTrieConfig: createSubstrateFn("changesTrieConfig", ":changes_trie", {
        docs: "Changes trie configuration is stored under this key.",
        type: "u32"
    }),
    childStorageKeyPrefix: createSubstrateFn("childStorageKeyPrefix", ":child_storage:", {
        docs: "Prefix of child storage keys.",
        type: "u32"
    }),
    code: createSubstrateFn("code", ":code", {
        docs: "Wasm code of the runtime.",
        type: "Bytes"
    }),
    extrinsicIndex: createSubstrateFn("extrinsicIndex", ":extrinsic_index", {
        docs: "Current extrinsic index (u32) is stored under this key.",
        type: "u32"
    }),
    heapPages: createSubstrateFn("heapPages", ":heappages", {
        docs: "Number of wasm linear memory pages required for execution of the runtime.",
        type: "u64"
    }),
    intrablockEntropy: createSubstrateFn("intrablockEntropy", ":intrablock_entropy", {
        docs: "Current intra-block entropy (a universally unique `[u8; 32]` value) is stored here.",
        type: "[u8; 32]"
    })
};

},{"./util.js":"llr42","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"llr42":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "createRuntimeFunction", ()=>createRuntimeFunction);
var _typesCreate = require("@polkadot/types-create");
var _createFunctionJs = require("./createFunction.js");
function findSiPrimitive(registry, type) {
    const prim = type.toLowerCase();
    return registry.lookup.types.find((t)=>t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
}
function findSiType(registry, type) {
    let portable = findSiPrimitive(registry, type);
    // some types are either Sequence or Arrays, cater for these
    // specifically (these all come from the base substrate known keys)
    if (!portable && (type === "Bytes" || type.startsWith("[u8;"))) {
        const u8 = findSiPrimitive(registry, "u8");
        if (u8) {
            if (type === "Bytes") portable = registry.lookup.types.find((t)=>t.type.def.isSequence && t.type.def.asSequence.type.eq(u8.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(type));
            else {
                const td = (0, _typesCreate.getTypeDef)(type);
                portable = registry.lookup.types.find((t)=>t.type.def.isArray && t.type.def.asArray.eq({
                        len: td.length,
                        type: u8.id
                    }) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(type));
            }
        }
    }
    if (!portable) // Not fatal, however if this happens the storage key using this
    // type will not return valid values, rather it will most probably
    // be decoded incorrectly
    console.warn(`Unable to map ${type} to a lookup index`);
    return portable;
}
function createRuntimeFunction({ method, prefix, section }, key, { docs, type }) {
    return (registry)=>(0, _createFunctionJs.createFunction)(registry, {
            meta: registry.createTypeUnsafe("StorageEntryMetadataLatest", [
                {
                    docs: registry.createTypeUnsafe("Vec<Text>", [
                        [
                            docs
                        ]
                    ]),
                    modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", [
                        "Required"
                    ]),
                    name: registry.createTypeUnsafe("Text", [
                        method
                    ]),
                    toJSON: ()=>key,
                    type: registry.createTypeUnsafe("StorageEntryTypeLatest", [
                        {
                            Plain: findSiType(registry, type)?.id || 0
                        }
                    ])
                }
            ]),
            method,
            prefix,
            section
        }, {
            key,
            skipHashing: true
        });
}

},{"@polkadot/types-create":"cr6lO","./createFunction.js":"kmFgm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5EZrK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decorateConstants", ()=>(0, _indexJs.decorateConstants));
parcelHelpers.export(exports, "decorateExtrinsics", ()=>(0, _indexJs.decorateExtrinsics));
parcelHelpers.export(exports, "decorateStorage", ()=>(0, _indexJs.decorateStorage));
parcelHelpers.export(exports, "expandMetadata", ()=>(0, _indexJs.expandMetadata));
parcelHelpers.export(exports, "Metadata", ()=>(0, _metadataJs.Metadata));
parcelHelpers.export(exports, "PortableRegistry", ()=>(0, _indexJs1.PortableRegistry));
var _indexJs = require("./decorate/index.js");
var _metadataJs = require("./Metadata.js");
var _indexJs1 = require("./PortableRegistry/index.js");

},{"./decorate/index.js":"ltCSZ","./Metadata.js":"cg9v9","./PortableRegistry/index.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6dxRh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drrJs = require("./drr.js");
parcelHelpers.exportAll(_drrJs, exports);
var _memoJs = require("./memo.js");
parcelHelpers.exportAll(_memoJs, exports);
var _refCountDelayJs = require("./refCountDelay.js");
parcelHelpers.exportAll(_refCountDelayJs, exports);

},{"./drr.js":"3LQQU","./memo.js":"1yKax","./refCountDelay.js":"5KeYw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3LQQU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Shorthand for distinctUntilChanged(), publishReplay(1) and refCount().
 *
 * @ignore
 * @internal
 */ parcelHelpers.export(exports, "drr", ()=>drr);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _refCountDelayJs = require("./refCountDelay.js");
function CMP(a, b) {
    return (0, _util.stringify)({
        t: a
    }) === (0, _util.stringify)({
        t: b
    });
}
function ERR(error) {
    throw error;
}
function NOOP() {
// empty
}
function drr({ delay, skipChange = false, skipTimeout = false } = {}) {
    return (source$)=>source$.pipe((0, _rxjs.catchError)(ERR), skipChange ? (0, _rxjs.tap)(NOOP) : (0, _rxjs.distinctUntilChanged)(CMP), // eslint-disable-next-line deprecation/deprecation
        (0, _rxjs.publishReplay)(1), skipTimeout ? (0, _rxjs.refCount)() : (0, _refCountDelayJs.refCountDelay)(delay));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","./refCountDelay.js":"5KeYw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5KeYw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "refCountDelay", ()=>refCountDelay);
var _rxjs = require("rxjs");
function refCountDelay(delay = 1750) {
    return (source)=>{
        // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
        let [state, refCount, connection, scheduler] = [
            0,
            0,
            (0, _rxjs.Subscription).EMPTY,
            (0, _rxjs.Subscription).EMPTY
        ];
        return new (0, _rxjs.Observable)((ob)=>{
            source.subscribe(ob);
            if (refCount++ === 0) {
                if (state === 1) scheduler.unsubscribe();
                else // eslint-disable-next-line deprecation/deprecation
                connection = source.connect();
                state = 3;
            }
            return ()=>{
                if (--refCount === 0) {
                    if (state === 2) {
                        state = 0;
                        scheduler.unsubscribe();
                    } else {
                        // state === 3
                        state = 1;
                        scheduler = (0, _rxjs.asapScheduler).schedule(()=>{
                            state = 0;
                            connection.unsubscribe();
                        }, delay);
                    }
                }
            };
        });
    };
}

},{"rxjs":"lLy7s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1yKax":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @internal */ parcelHelpers.export(exports, "memo", ()=>memo);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _drrJs = require("./drr.js");
function memo(instanceId, inner) {
    const options = {
        getInstanceId: ()=>instanceId
    };
    const cached = (0, _util.memoize)((...params)=>new (0, _rxjs.Observable)((observer)=>{
            const subscription = inner(...params).subscribe(observer);
            return ()=>{
                cached.unmemoize(...params);
                subscription.unsubscribe();
            };
        }).pipe((0, _drrJs.drr)()), options);
    return cached;
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","./drr.js":"3LQQU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"40yRm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unwrapBlockNumber", ()=>unwrapBlockNumber);
var _util = require("@polkadot/util");
function unwrapBlockNumber(hdr) {
    return (0, _util.isCompact)(hdr.number) ? hdr.number.unwrap() : hdr.number;
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"71fW9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setDeriveCache", ()=>setDeriveCache);
parcelHelpers.export(exports, "deriveCache", ()=>deriveCache);
var _cacheImplJs = require("./cacheImpl.js");
const CHACHE_EXPIRY = 604800000;
let deriveCache;
function wrapCache(keyStart, cache) {
    return {
        del: (partial)=>cache.del(`${keyStart}${partial}`),
        forEach: cache.forEach,
        get: (partial)=>{
            const key = `${keyStart}${partial}`;
            const cached = cache.get(key);
            if (cached) {
                cached.x = Date.now();
                cache.set(key, cached);
                return cached.v;
            }
            return undefined;
        },
        set: (partial, v)=>{
            cache.set(`${keyStart}${partial}`, {
                v,
                x: Date.now()
            });
        }
    };
}
function clearCache(cache) {
    // clear all expired values
    const now = Date.now();
    const all = [];
    cache.forEach((key, { x })=>{
        now - x > CHACHE_EXPIRY && all.push(key);
    });
    // don't do delete inside loop, just in-case
    all.forEach((key)=>cache.del(key));
}
function setDeriveCache(prefix = "", cache) {
    deriveCache = cache ? wrapCache(`derive:${prefix}:`, cache) : (0, _cacheImplJs.deriveNoopCache);
    if (cache) clearCache(cache);
}
setDeriveCache();

},{"./cacheImpl.js":"8ec7w","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ec7w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deriveMapCache", ()=>deriveMapCache);
parcelHelpers.export(exports, "deriveNoopCache", ()=>deriveNoopCache);
const mapCache = new Map();
const deriveMapCache = {
    del: (key)=>{
        mapCache.delete(key);
    },
    forEach: (cb)=>{
        for (const [k, v] of mapCache.entries())cb(k, v);
    },
    get: (key)=>{
        return mapCache.get(key);
    },
    set: (key, value)=>{
        mapCache.set(key, value);
    }
};
const deriveNoopCache = {
    del: ()=>undefined,
    forEach: ()=>undefined,
    get: ()=>undefined,
    set: (_, value)=>value
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"xmW8w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "firstObservable", ()=>firstObservable);
parcelHelpers.export(exports, "firstMemo", ()=>firstMemo);
var _rxjs = require("rxjs");
var _rpcCore = require("@polkadot/rpc-core");
function firstObservable(obs) {
    return obs.pipe((0, _rxjs.map)(([a])=>a));
}
function firstMemo(fn) {
    return (instanceId, api)=>(0, _rpcCore.memo)(instanceId, (...args)=>firstObservable(fn(api, ...args)));
}

},{"rxjs":"lLy7s","@polkadot/rpc-core":"8DbiP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jmKEw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lazyDeriveSection", ()=>lazyDeriveSection);
var _util = require("@polkadot/util");
function lazyDeriveSection(result, section, getKeys, creator) {
    (0, _util.lazyMethod)(result, section, ()=>(0, _util.lazyMethods)({}, getKeys(section), (method)=>creator(section, method)));
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l831w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "derive", ()=>derive);
var _indexJs = require("./accounts/index.js");
var _indexJs1 = require("./alliance/index.js");
var _indexJs2 = require("./bagsList/index.js");
var _indexJs3 = require("./balances/index.js");
var _indexJs4 = require("./bounties/index.js");
var _indexJs5 = require("./chain/index.js");
var _indexJs6 = require("./contracts/index.js");
var _indexJs7 = require("./council/index.js");
var _indexJs8 = require("./crowdloan/index.js");
var _indexJs9 = require("./democracy/index.js");
var _indexJs10 = require("./elections/index.js");
var _indexJs11 = require("./imOnline/index.js");
var _indexJs12 = require("./membership/index.js");
var _indexJs13 = require("./parachains/index.js");
var _indexJs14 = require("./session/index.js");
var _indexJs15 = require("./society/index.js");
var _indexJs16 = require("./staking/index.js");
var _indexJs17 = require("./technicalCommittee/index.js");
var _indexJs18 = require("./treasury/index.js");
var _indexJs19 = require("./tx/index.js");
const derive = {
    accounts: _indexJs,
    alliance: _indexJs1,
    bagsList: _indexJs2,
    balances: _indexJs3,
    bounties: _indexJs4,
    chain: _indexJs5,
    contracts: _indexJs6,
    council: _indexJs7,
    crowdloan: _indexJs8,
    democracy: _indexJs9,
    elections: _indexJs10,
    imOnline: _indexJs11,
    membership: _indexJs12,
    parachains: _indexJs13,
    session: _indexJs14,
    society: _indexJs15,
    staking: _indexJs16,
    technicalCommittee: _indexJs17,
    treasury: _indexJs18,
    tx: _indexJs19
};

},{"./accounts/index.js":"7W6rl","./alliance/index.js":"8Lj5m","./bagsList/index.js":"57KV3","./balances/index.js":"jOGiw","./bounties/index.js":"6JcL5","./chain/index.js":"9gS3k","./contracts/index.js":"5txcW","./council/index.js":"foPeO","./crowdloan/index.js":"emHOx","./democracy/index.js":"859YG","./elections/index.js":"fNaCt","./imOnline/index.js":"kJWmI","./membership/index.js":"61FaC","./parachains/index.js":"bJVqc","./session/index.js":"9XXME","./society/index.js":"1Vl0X","./staking/index.js":"4ZPwx","./technicalCommittee/index.js":"1wdIE","./treasury/index.js":"d9FCT","./tx/index.js":"3OoHL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7W6rl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _accountIdJs = require("./accountId.js");
parcelHelpers.exportAll(_accountIdJs, exports);
var _flagsJs = require("./flags.js");
parcelHelpers.exportAll(_flagsJs, exports);
var _idAndIndexJs = require("./idAndIndex.js");
parcelHelpers.exportAll(_idAndIndexJs, exports);
var _identityJs = require("./identity.js");
parcelHelpers.exportAll(_identityJs, exports);
var _idToIndexJs = require("./idToIndex.js");
parcelHelpers.exportAll(_idToIndexJs, exports);
var _indexesJs = require("./indexes.js");
parcelHelpers.exportAll(_indexesJs, exports);
var _indexToIdJs = require("./indexToId.js");
parcelHelpers.exportAll(_indexToIdJs, exports);
var _infoJs = require("./info.js");
parcelHelpers.exportAll(_infoJs, exports);

},{"./accountId.js":"7KK8r","./flags.js":"7CqbO","./idAndIndex.js":"9dHsI","./identity.js":"15R4i","./idToIndex.js":"h6dAG","./indexes.js":"d1wmx","./indexToId.js":"17gC4","./info.js":"b0w4D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7KK8r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name accountId
 * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
 * @description  An [[AccountId]]
 */ parcelHelpers.export(exports, "accountId", ()=>accountId);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
var _indexJs = require("../util/index.js");
function accountId(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (address)=>{
        const decoded = (0, _util.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || "").toString());
        if (decoded.length > 8) return (0, _rxjs.of)(api.registry.createType("AccountId", decoded));
        const accountIndex = api.registry.createType("AccountIndex", decoded);
        return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, _rxjs.map)((a)=>(0, _util.assertReturn)(a, "Unable to retrieve accountId")));
    });
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7CqbO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_flags", ()=>_flags);
/**
 * @name info
 * @description Returns account membership flags
 */ parcelHelpers.export(exports, "flags", ()=>flags);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
    const addrStr = address?.toString();
    const isIncluded = (id)=>id.toString() === addrStr;
    return {
        isCouncil: (electionsMembers?.map((r)=>Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),
        isSociety: (societyMembers || []).some(isIncluded),
        isSudo: sudoKey?.toString() === addrStr,
        isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
    };
}
function _flags(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>{
        const results = [
            undefined,
            [],
            [],
            [],
            undefined
        ];
        const calls = [
            (api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"])?.members,
            api.query.council?.members,
            api.query.technicalCommittee?.members,
            api.query.society?.members,
            api.query.sudo?.key
        ];
        const filtered = calls.filter((c)=>c);
        if (!filtered.length) return (0, _rxjs.of)(results);
        return api.queryMulti(filtered).pipe((0, _rxjs.map)((values)=>{
            let resultIndex = -1;
            for(let i = 0, count = calls.length; i < count; i++)if ((0, _util.isFunction)(calls[i])) results[i] = values[++resultIndex];
            return results;
        }));
    });
}
function flags(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (address)=>api.derive.accounts._flags().pipe((0, _rxjs.map)((r)=>parseFlags(address, r))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9dHsI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name idAndIndex
 * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.
 * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
 *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
 * });
 * ```
 */ parcelHelpers.export(exports, "idAndIndex", ()=>idAndIndex);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
var _indexJs = require("../util/index.js");
function idAndIndex(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (address)=>{
        try {
            // yes, this can fail, don't care too much, catch will catch it
            const decoded = (0, _util.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || "").toString());
            if (decoded.length > 8) {
                const accountId = api.registry.createType("AccountId", decoded);
                return api.derive.accounts.idToIndex(accountId).pipe((0, _rxjs.map)((accountIndex)=>[
                        accountId,
                        accountIndex
                    ]));
            }
            const accountIndex = api.registry.createType("AccountIndex", decoded);
            return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, _rxjs.map)((accountId)=>[
                    accountId,
                    accountIndex
                ]));
        } catch  {
            return (0, _rxjs.of)([
                undefined,
                undefined
            ]);
        }
    });
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"15R4i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_identity", ()=>_identity);
/**
 * @name identity
 * @description Returns identity info for an account
 */ parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "hasIdentity", ()=>hasIdentity);
parcelHelpers.export(exports, "hasIdentityMulti", ()=>hasIdentityMulti);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
const UNDEF_HEX = {
    toHex: ()=>undefined
};
function dataAsString(data) {
    return data.isRaw ? (0, _util.u8aToString)(data.asRaw.toU8a(true)) : data.isNone ? undefined : data.toHex();
}
function extractOther(additional) {
    return additional.reduce((other, [_key, _value])=>{
        const key = dataAsString(_key);
        const value = dataAsString(_value);
        if (key && value) other[key] = value;
        return other;
    }, {});
}
function extractIdentity(identityOfOpt, superOf) {
    if (!identityOfOpt?.isSome) return {
        judgements: []
    };
    const { info, judgements } = identityOfOpt.unwrap();
    const topDisplay = dataAsString(info.display);
    return {
        display: superOf && dataAsString(superOf[1]) || topDisplay,
        displayParent: superOf && topDisplay,
        email: dataAsString(info.email),
        image: dataAsString(info.image),
        judgements,
        legal: dataAsString(info.legal),
        other: extractOther(info.additional),
        parent: superOf?.[0],
        pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
        riot: dataAsString(info.riot),
        twitter: dataAsString(info.twitter),
        web: dataAsString(info.web)
    };
}
function getParent(api, identityOfOpt, superOfOpt) {
    if (identityOfOpt?.isSome) // this identity has something set
    return (0, _rxjs.of)([
        identityOfOpt,
        undefined
    ]);
    else if (superOfOpt?.isSome) {
        const superOf = superOfOpt.unwrap();
        return (0, _rxjs.combineLatest)([
            api.derive.accounts._identity(superOf[0]).pipe((0, _rxjs.map)(([info])=>info)),
            (0, _rxjs.of)(superOf)
        ]);
    }
    // nothing of value returned
    return (0, _rxjs.of)([
        undefined,
        undefined
    ]);
}
function _identity(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId)=>accountId && api.query.identity?.identityOf ? (0, _rxjs.combineLatest)([
            api.query.identity.identityOf(accountId),
            api.query.identity.superOf(accountId)
        ]) : (0, _rxjs.of)([
            undefined,
            undefined
        ]));
}
function identity(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId)=>api.derive.accounts._identity(accountId).pipe((0, _rxjs.switchMap)(([identityOfOpt, superOfOpt])=>getParent(api, identityOfOpt, superOfOpt)), (0, _rxjs.map)(([identityOfOpt, superOf])=>extractIdentity(identityOfOpt, superOf))));
}
const hasIdentity = /*#__PURE__*/ (0, _indexJs.firstMemo)((api, accountId)=>api.derive.accounts.hasIdentityMulti([
        accountId
    ]));
function hasIdentityMulti(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountIds)=>api.query.identity?.identityOf ? (0, _rxjs.combineLatest)([
            api.query.identity.identityOf.multi(accountIds),
            api.query.identity.superOf.multi(accountIds)
        ]).pipe((0, _rxjs.map)(([identities, supers])=>identities.map((identityOfOpt, index)=>{
                const superOfOpt = supers[index];
                const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : undefined;
                let display;
                if (identityOfOpt && identityOfOpt.isSome) {
                    const value = dataAsString(identityOfOpt.unwrap().info.display);
                    if (value && !(0, _util.isHex)(value)) display = value;
                }
                return {
                    display,
                    hasIdentity: !!(display || parentId),
                    parentId
                };
            }))) : (0, _rxjs.of)(accountIds.map(()=>({
                hasIdentity: false
            }))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h6dAG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name idToIndex
 * @param {( AccountId | string )} accountId - An accounts Id in different formats.
 * @returns Returns the corresponding AccountIndex.
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
 * api.derive.accounts.idToIndex(ALICE, (accountIndex) => {
 *   console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);
 * });
 * ```
 */ parcelHelpers.export(exports, "idToIndex", ()=>idToIndex);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function idToIndex(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId)=>api.derive.accounts.indexes().pipe((0, _rxjs.map)((indexes)=>indexes[accountId.toString()])));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d1wmx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name indexes
 * @returns Returns all the indexes on the system.
 * @description This is an unwieldly query since it loops through
 * all of the enumsets and returns all of the values found. This could be up to 32k depending
 * on the number of active accounts in the system
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.indexes((indexes) => {
 *   console.log('All existing AccountIndexes', indexes);
 * });
 * ```
 */ parcelHelpers.export(exports, "indexes", ()=>indexes);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
let indicesCache = null;
function queryAccounts(api) {
    return api.query.indices.accounts.entries().pipe((0, _rxjs.map)((entries)=>entries.reduce((indexes, [key, idOpt])=>{
            if (idOpt.isSome) indexes[idOpt.unwrap()[0].toString()] = api.registry.createType("AccountIndex", key.args[0]);
            return indexes;
        }, {})));
}
function indexes(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>indicesCache ? (0, _rxjs.of)(indicesCache) : (api.query.indices ? queryAccounts(api).pipe((0, _rxjs.startWith)({})) : (0, _rxjs.of)({})).pipe((0, _rxjs.map)((indices)=>{
            indicesCache = indices;
            return indices;
        })));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"17gC4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name indexToId
 * @param {( AccountIndex | string )} accountIndex - An accounts index in different formats.
 * @returns Returns the corresponding AccountId.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.indexToId('F7Hs', (accountId) => {
 *   console.log(`The AccountId of F7Hs is ${accountId}`);
 * });
 * ```
 */ parcelHelpers.export(exports, "indexToId", ()=>indexToId);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function indexToId(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountIndex)=>api.query.indices ? api.query.indices.accounts(accountIndex).pipe((0, _rxjs.map)((optResult)=>optResult.unwrapOr([])[0])) : (0, _rxjs.of)(undefined));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b0w4D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name info
 * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
 */ parcelHelpers.export(exports, "info", ()=>info);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function retrieveNick(api, accountId) {
    return (accountId && api.query["nicks"]?.["nameOf"] ? api.query["nicks"]["nameOf"](accountId) : (0, _rxjs.of)(undefined)).pipe((0, _rxjs.map)((nameOf)=>nameOf?.isSome ? (0, _util.u8aToString)(nameOf.unwrap()[0]).substring(0, api.consts["nicks"]["maxLength"].toNumber()) : undefined));
}
function info(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (address)=>api.derive.accounts.idAndIndex(address).pipe((0, _rxjs.switchMap)(([accountId, accountIndex])=>(0, _rxjs.combineLatest)([
                (0, _rxjs.of)({
                    accountId,
                    accountIndex
                }),
                api.derive.accounts.identity(accountId),
                retrieveNick(api, accountId)
            ])), (0, _rxjs.map)(([{ accountId, accountIndex }, identity, nickname])=>({
                accountId,
                accountIndex,
                identity,
                nickname
            }))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Lj5m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "members", ()=>members);
parcelHelpers.export(exports, "hasProposals", ()=>hasProposals);
parcelHelpers.export(exports, "proposal", ()=>proposal);
parcelHelpers.export(exports, "proposalCount", ()=>proposalCount);
parcelHelpers.export(exports, "proposalHashes", ()=>proposalHashes);
parcelHelpers.export(exports, "proposals", ()=>proposals);
parcelHelpers.export(exports, "prime", ()=>prime);
var _indexJs = require("../collective/index.js");
const members = /*#__PURE__*/ (0, _indexJs.members)("allianceMotion");
const hasProposals = /*#__PURE__*/ (0, _indexJs.hasProposals)("allianceMotion");
const proposal = /*#__PURE__*/ (0, _indexJs.proposal)("allianceMotion");
const proposalCount = /*#__PURE__*/ (0, _indexJs.proposalCount)("allianceMotion");
const proposalHashes = /*#__PURE__*/ (0, _indexJs.proposalHashes)("allianceMotion");
const proposals = /*#__PURE__*/ (0, _indexJs.proposals)("allianceMotion");
const prime = /*#__PURE__*/ (0, _indexJs.prime)("allianceMotion");

},{"../collective/index.js":"8aK0Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8aK0Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _membersJs = require("./members.js");
parcelHelpers.exportAll(_membersJs, exports);
var _primeJs = require("./prime.js");
parcelHelpers.exportAll(_primeJs, exports);
var _proposalsJs = require("./proposals.js");
parcelHelpers.exportAll(_proposalsJs, exports);

},{"./members.js":"e6ONQ","./prime.js":"59DEF","./proposals.js":"ajFNI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e6ONQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "members", ()=>members);
var _helpersJs = require("./helpers.js");
const members = /*#__PURE__*/ (0, _helpersJs.callMethod)("members", []);

},{"./helpers.js":"bSVDT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bSVDT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getInstance", ()=>getInstance);
parcelHelpers.export(exports, "withSection", ()=>withSection);
parcelHelpers.export(exports, "callMethod", ()=>callMethod);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function getInstance(api, section) {
    const instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section);
    const name = instances?.length ? instances[0] : section;
    return api.query[name];
}
function withSection(section, fn) {
    return (instanceId, api)=>(0, _indexJs.memo)(instanceId, fn(getInstance(api, section), api, instanceId));
}
function callMethod(method, empty) {
    return (section)=>withSection(section, (query)=>()=>(0, _util.isFunction)(query?.[method]) ? query[method]() : (0, _rxjs.of)(empty));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59DEF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prime", ()=>prime);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _helpersJs = require("./helpers.js");
function prime(section) {
    return (0, _helpersJs.withSection)(section, (query)=>()=>(0, _util.isFunction)(query?.prime) ? query.prime().pipe((0, _rxjs.map)((o)=>o.unwrapOr(null))) : (0, _rxjs.of)(null));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","./helpers.js":"bSVDT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ajFNI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasProposals", ()=>hasProposals);
parcelHelpers.export(exports, "proposals", ()=>proposals);
parcelHelpers.export(exports, "proposal", ()=>proposal);
parcelHelpers.export(exports, "proposalCount", ()=>proposalCount);
parcelHelpers.export(exports, "proposalHashes", ()=>proposalHashes);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _helpersJs = require("./helpers.js");
function parse(api, [hashes, proposals, votes]) {
    return proposals.map((o, index)=>({
            hash: api.registry.createType("Hash", hashes[index]),
            proposal: o && o.isSome ? o.unwrap() : null,
            votes: votes[index].unwrapOr(null)
        }));
}
function _proposalsFrom(api, query, hashes) {
    return ((0, _util.isFunction)(query?.proposals) && hashes.length ? (0, _rxjs.combineLatest)([
        (0, _rxjs.of)(hashes),
        // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
        // however we have had cases on Edgeware where the indices have moved around after an
        // upgrade, which results in invalid on-chain data
        query.proposalOf.multi(hashes).pipe((0, _rxjs.catchError)(()=>(0, _rxjs.of)(hashes.map(()=>null)))),
        query.voting.multi(hashes)
    ]) : (0, _rxjs.of)([
        [],
        [],
        []
    ])).pipe((0, _rxjs.map)((r)=>parse(api, r)));
}
function hasProposals(section) {
    return (0, _helpersJs.withSection)(section, (query)=>()=>(0, _rxjs.of)((0, _util.isFunction)(query?.proposals)));
}
function proposals(section) {
    return (0, _helpersJs.withSection)(section, (query, api)=>()=>api.derive[section].proposalHashes().pipe((0, _rxjs.switchMap)((all)=>_proposalsFrom(api, query, all))));
}
function proposal(section) {
    return (0, _helpersJs.withSection)(section, (query, api)=>(hash)=>(0, _util.isFunction)(query?.proposals) ? (0, _indexJs.firstObservable)(_proposalsFrom(api, query, [
                hash
            ])) : (0, _rxjs.of)(null));
}
const proposalCount = /*#__PURE__*/ (0, _helpersJs.callMethod)("proposalCount", null);
const proposalHashes = /*#__PURE__*/ (0, _helpersJs.callMethod)("proposals", []);

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./helpers.js":"bSVDT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"57KV3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getJs = require("./get.js");
parcelHelpers.exportAll(_getJs, exports);
var _getExpandedJs = require("./getExpanded.js");
parcelHelpers.exportAll(_getExpandedJs, exports);
var _listNodesJs = require("./listNodes.js");
parcelHelpers.exportAll(_listNodesJs, exports);

},{"./get.js":"7S3hJ","./getExpanded.js":"3LRlJ","./listNodes.js":"3f81h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7S3hJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_getIds", ()=>_getIds);
parcelHelpers.export(exports, "all", ()=>all);
parcelHelpers.export(exports, "get", ()=>get);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function orderBags(ids, bags) {
    const sorted = ids.map((id, index)=>({
            bag: bags[index].unwrapOr(null),
            id,
            key: id.toString()
        })).sort((a, b)=>b.id.cmp(a.id));
    const max = sorted.length - 1;
    return sorted.map((entry, index)=>(0, _util.objectSpread)(entry, {
            bagLower: index === max ? (0, _util.BN_ZERO) : sorted[index + 1].id,
            bagUpper: entry.id,
            index
        }));
}
function _getIds(instanceId, api) {
    const query = (0, _utilJs.getQueryInterface)(api);
    return (0, _indexJs.memo)(instanceId, (_ids)=>{
        const ids = _ids.map((id)=>(0, _util.bnToBn)(id));
        return ids.length ? query.listBags.multi(ids).pipe((0, _rxjs.map)((bags)=>orderBags(ids, bags))) : (0, _rxjs.of)([]);
    });
}
function all(instanceId, api) {
    const query = (0, _utilJs.getQueryInterface)(api);
    return (0, _indexJs.memo)(instanceId, ()=>query.listBags.keys().pipe((0, _rxjs.switchMap)((keys)=>api.derive.bagsList._getIds(keys.map(({ args: [id] })=>id))), (0, _rxjs.map)((list)=>list.filter(({ bag })=>bag))));
}
function get(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (id)=>api.derive.bagsList._getIds([
            (0, _util.bnToBn)(id)
        ]).pipe((0, _rxjs.map)((bags)=>bags[0])));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./util.js":"kpMkj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kpMkj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getQueryInterface", ()=>getQueryInterface);
function getQueryInterface(api) {
    return(// latest substrate & polkadot
    api.query.voterList || // previous substrate
    api.query["voterBagsList"] || api.query["bagsList"]);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3LRlJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expand", ()=>expand);
parcelHelpers.export(exports, "getExpanded", ()=>getExpanded);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function expand(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (bag)=>api.derive.bagsList.listNodes(bag.bag).pipe((0, _rxjs.map)((nodes)=>(0, _util.objectSpread)({
                nodes
            }, bag))));
}
function getExpanded(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (id)=>api.derive.bagsList.get(id).pipe((0, _rxjs.switchMap)((bag)=>api.derive.bagsList.expand(bag))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3f81h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "listNodes", ()=>listNodes);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function traverseLinks(api, head) {
    const subject = new (0, _rxjs.BehaviorSubject)(head);
    const query = (0, _utilJs.getQueryInterface)(api);
    return subject.pipe((0, _rxjs.switchMap)((account)=>query.listNodes(account)), (0, _rxjs.tap)((node)=>{
        (0, _util.nextTick)(()=>{
            node.isSome && node.value.next.isSome ? subject.next(node.unwrap().next.unwrap()) : subject.complete();
        });
    }), (0, _rxjs.toArray)(), (0, _rxjs.map)((all)=>all.map((o)=>o.unwrap())));
}
function listNodes(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (bag)=>bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : (0, _rxjs.of)([]));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./util.js":"kpMkj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jOGiw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "all", ()=>(0, _allJs.all));
parcelHelpers.export(exports, "votingBalance", ()=>votingBalance);
var _allJs = require("./all.js");
var _accountJs = require("./account.js");
parcelHelpers.exportAll(_accountJs, exports);
var _votingBalancesJs = require("./votingBalances.js");
parcelHelpers.exportAll(_votingBalancesJs, exports);
const votingBalance = (0, _allJs.all);

},{"./all.js":"dlVaC","./account.js":"bDE8p","./votingBalances.js":"XbCSx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dlVaC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name all
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */ parcelHelpers.export(exports, "all", ()=>all);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
const VESTING_ID = "0x76657374696e6720";
function calcLocked(api, bestNumber, locks) {
    let lockedBalance = api.registry.createType("Balance");
    let lockedBreakdown = [];
    let vestingLocked = api.registry.createType("Balance");
    let allLocked = false;
    if (Array.isArray(locks)) {
        // only get the locks that are valid until passed the current block
        lockedBreakdown = locks.filter(({ until })=>!until || bestNumber && until.gt(bestNumber));
        allLocked = lockedBreakdown.some(({ amount })=>amount && amount.isMax());
        vestingLocked = api.registry.createType("Balance", lockedBreakdown.filter(({ id })=>id.eq(VESTING_ID)).reduce((result, { amount })=>result.iadd(amount), new (0, _util.BN)(0)));
        // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699
        const notAll = lockedBreakdown.filter(({ amount })=>amount && !amount.isMax());
        if (notAll.length) lockedBalance = api.registry.createType("Balance", (0, _util.bnMax)(...notAll.map(({ amount })=>amount)));
    }
    return {
        allLocked,
        lockedBalance,
        lockedBreakdown,
        vestingLocked
    };
}
function calcShared(api, bestNumber, data, locks) {
    const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber, locks);
    return (0, _util.objectSpread)({}, data, {
        availableBalance: api.registry.createType("Balance", allLocked ? 0 : (0, _util.bnMax)(new (0, _util.BN)(0), data?.freeBalance ? data.freeBalance.sub(lockedBalance) : new (0, _util.BN)(0))),
        lockedBalance,
        lockedBreakdown,
        vestingLocked
    });
}
function calcVesting(bestNumber, shared, _vesting) {
    // Calculate the vesting balances,
    //  - offset = balance locked at startingBlock
    //  - perBlock is the unlock amount
    const vesting = _vesting || [];
    const isVesting = !shared.vestingLocked.isZero();
    const vestedBalances = vesting.map(({ locked, perBlock, startingBlock })=>bestNumber.gt(startingBlock) ? (0, _util.bnMin)(locked, perBlock.mul(bestNumber.sub(startingBlock))) : (0, _util.BN_ZERO));
    const vestedBalance = vestedBalances.reduce((all, value)=>all.iadd(value), new (0, _util.BN)(0));
    const vestingTotal = vesting.reduce((all, { locked })=>all.iadd(locked), new (0, _util.BN)(0));
    return {
        isVesting,
        vestedBalance,
        vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : (0, _util.BN_ZERO),
        vesting: vesting.map(({ locked, perBlock, startingBlock }, index)=>({
                endBlock: locked.div(perBlock).iadd(startingBlock),
                locked,
                perBlock,
                startingBlock,
                vested: vestedBalances[index]
            })).filter(({ locked })=>!locked.isZero()),
        vestingTotal
    };
}
function calcBalances(api, result) {
    const [data, [vesting, allLocks, namedReserves], bestNumber] = result;
    const shared = calcShared(api, bestNumber, data, allLocks[0]);
    return (0, _util.objectSpread)(shared, calcVesting(bestNumber, shared, vesting), {
        accountId: data.accountId,
        accountNonce: data.accountNonce,
        additional: allLocks.slice(1).map((l, index)=>calcShared(api, bestNumber, data.additional[index], l)),
        namedReserves
    });
}
function queryOld(api, accountId) {
    return (0, _rxjs.combineLatest)([
        api.query.balances.locks(accountId),
        api.query.balances["vesting"](accountId)
    ]).pipe((0, _rxjs.map)(([locks, optVesting])=>{
        let vestingNew = null;
        if (optVesting.isSome) {
            const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
            vestingNew = api.registry.createType("VestingInfo", {
                locked,
                perBlock,
                startingBlock
            });
        }
        return [
            vestingNew ? [
                vestingNew
            ] : null,
            [
                locks
            ],
            []
        ];
    }));
}
const isNonNullable = (nullable)=>!!nullable;
function createCalls(calls) {
    return [
        calls.map((c)=>!c),
        calls.filter(isNonNullable)
    ];
}
function queryCurrent(api, accountId, balanceInstances = [
    "balances"
]) {
    const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m)=>api.derive[m]?.customLocks || api.query[m]?.locks));
    const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m)=>api.query[m]?.reserves));
    return (0, _rxjs.combineLatest)([
        api.query.vesting?.vesting ? api.query.vesting.vesting(accountId) : (0, _rxjs.of)(api.registry.createType("Option<VestingInfo>")),
        lockQueries.length ? (0, _rxjs.combineLatest)(lockQueries.map((c)=>c(accountId))) : (0, _rxjs.of)([]),
        reserveQueries.length ? (0, _rxjs.combineLatest)(reserveQueries.map((c)=>c(accountId))) : (0, _rxjs.of)([])
    ]).pipe((0, _rxjs.map)(([opt, locks, reserves])=>{
        let offsetLock = -1;
        let offsetReserve = -1;
        const vesting = opt.unwrapOr(null);
        return [
            vesting ? Array.isArray(vesting) ? vesting : [
                vesting
            ] : null,
            lockEmpty.map((e)=>e ? api.registry.createType("Vec<BalanceLock>") : locks[++offsetLock]),
            reserveEmpty.map((e)=>e ? api.registry.createType("Vec<PalletBalancesReserveData>") : reserves[++offsetReserve])
        ];
    }));
}
function all(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
    return (0, _indexJs.memo)(instanceId, (address)=>(0, _rxjs.combineLatest)([
            api.derive.balances.account(address),
            (0, _util.isFunction)(api.query.system?.account) || (0, _util.isFunction)(api.query.balances?.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)
        ]).pipe((0, _rxjs.switchMap)(([account, locks])=>(0, _rxjs.combineLatest)([
                (0, _rxjs.of)(account),
                (0, _rxjs.of)(locks),
                api.derive.chain.bestNumber()
            ])), (0, _rxjs.map)((result)=>calcBalances(api, result))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bDE8p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name account
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */ parcelHelpers.export(exports, "account", ()=>account);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function zeroBalance(api) {
    return api.registry.createType("Balance");
}
function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
    const votingBalance = api.registry.createType("Balance", freeBalance.toBn());
    return {
        freeBalance,
        frozenFee,
        frozenMisc,
        reservedBalance,
        votingBalance
    };
}
function calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {
    return (0, _util.objectSpread)({
        accountId,
        accountNonce,
        additional: additional.map((b)=>getBalance(api, b))
    }, getBalance(api, primary));
}
function queryBalancesFree(api, accountId) {
    return (0, _rxjs.combineLatest)([
        api.query.balances["freeBalance"](accountId),
        api.query.balances["reservedBalance"](accountId),
        api.query.system["accountNonce"](accountId)
    ]).pipe((0, _rxjs.map)(([freeBalance, reservedBalance, accountNonce])=>[
            accountNonce,
            [
                [
                    freeBalance,
                    reservedBalance,
                    zeroBalance(api),
                    zeroBalance(api)
                ]
            ]
        ]));
}
function queryNonceOnly(api, accountId) {
    const fill = (nonce)=>[
            nonce,
            [
                [
                    zeroBalance(api),
                    zeroBalance(api),
                    zeroBalance(api),
                    zeroBalance(api)
                ]
            ]
        ];
    return (0, _util.isFunction)(api.query.system.account) ? api.query.system.account(accountId).pipe((0, _rxjs.map)(({ nonce })=>fill(nonce))) : (0, _util.isFunction)(api.query.system["accountNonce"]) ? api.query.system["accountNonce"](accountId).pipe((0, _rxjs.map)((nonce)=>fill(nonce))) : (0, _rxjs.of)(fill(api.registry.createType("Index")));
}
function queryBalancesAccount(api, accountId, modules = [
    "balances"
]) {
    const balances = modules.map((m)=>api.derive[m]?.customAccount || api.query[m]?.account).filter((q)=>(0, _util.isFunction)(q));
    const extract = (nonce, data)=>[
            nonce,
            data.map(({ feeFrozen, free, miscFrozen, reserved })=>[
                    free,
                    reserved,
                    feeFrozen,
                    miscFrozen
                ])
        ];
    // NOTE this is for the first case where we do have instances specified
    return balances.length ? (0, _util.isFunction)(api.query.system.account) ? (0, _rxjs.combineLatest)([
        api.query.system.account(accountId),
        ...balances.map((c)=>c(accountId))
    ]).pipe((0, _rxjs.map)(([{ nonce }, ...balances])=>extract(nonce, balances))) : (0, _rxjs.combineLatest)([
        api.query.system["accountNonce"](accountId),
        ...balances.map((c)=>c(accountId))
    ]).pipe((0, _rxjs.map)(([nonce, ...balances])=>extract(nonce, balances))) : queryNonceOnly(api, accountId);
}
function querySystemAccount(api, accountId) {
    // AccountInfo is current, support old, eg. Edgeware
    return api.query.system.account(accountId).pipe((0, _rxjs.map)((infoOrTuple)=>{
        const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
        const nonce = infoOrTuple.nonce || infoOrTuple[0];
        if (!data || data.isEmpty) return [
            nonce,
            [
                [
                    zeroBalance(api),
                    zeroBalance(api),
                    zeroBalance(api),
                    zeroBalance(api)
                ]
            ]
        ];
        const { feeFrozen, free, miscFrozen, reserved } = data;
        return [
            nonce,
            [
                [
                    free,
                    reserved,
                    feeFrozen,
                    miscFrozen
                ]
            ]
        ];
    }));
}
function account(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
    const nonDefaultBalances = balanceInstances && balanceInstances[0] !== "balances";
    return (0, _indexJs.memo)(instanceId, (address)=>api.derive.accounts.accountId(address).pipe((0, _rxjs.switchMap)((accountId)=>accountId ? (0, _rxjs.combineLatest)([
                (0, _rxjs.of)(accountId),
                nonDefaultBalances ? queryBalancesAccount(api, accountId, balanceInstances) : (0, _util.isFunction)(api.query.system?.account) ? querySystemAccount(api, accountId) : (0, _util.isFunction)(api.query.balances?.account) ? queryBalancesAccount(api, accountId) : (0, _util.isFunction)(api.query.balances?.["freeBalance"]) ? queryBalancesFree(api, accountId) : queryNonceOnly(api, accountId)
            ]) : (0, _rxjs.of)([
                api.registry.createType("AccountId"),
                [
                    api.registry.createType("Index"),
                    [
                        [
                            zeroBalance(api),
                            zeroBalance(api),
                            zeroBalance(api),
                            zeroBalance(api)
                        ]
                    ]
                ]
            ])), (0, _rxjs.map)((result)=>calcBalances(api, result))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"XbCSx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "votingBalances", ()=>votingBalances);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function votingBalances(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (addresses)=>!addresses?.length ? (0, _rxjs.of)([]) : (0, _rxjs.combineLatest)(addresses.map((accountId)=>api.derive.balances.account(accountId))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6JcL5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bountiesJs = require("./bounties.js");
parcelHelpers.exportAll(_bountiesJs, exports);

},{"./bounties.js":"jdNTh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jdNTh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bounties", ()=>bounties);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _filterBountyProposalsJs = require("./helpers/filterBountyProposals.js");
function parseResult([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
    const bounties = [];
    maybeBounties.forEach((bounty, index)=>{
        if (bounty.isSome) bounties.push({
            bounty: bounty.unwrap(),
            description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
            index: ids[index],
            proposals: bountyProposals.filter((bountyProposal)=>bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]))
        });
    });
    return bounties;
}
function bounties(instanceId, api) {
    const bountyBase = api.query.bounties || api.query.treasury;
    return (0, _indexJs.memo)(instanceId, ()=>bountyBase.bounties ? (0, _rxjs.combineLatest)([
            bountyBase.bountyCount(),
            api.query.council ? api.query.council.proposalCount() : (0, _rxjs.of)(0)
        ]).pipe((0, _rxjs.switchMap)(()=>(0, _rxjs.combineLatest)([
                bountyBase.bounties.keys(),
                api.derive.council ? api.derive.council.proposals() : (0, _rxjs.of)([])
            ])), (0, _rxjs.switchMap)(([keys, proposals])=>{
            const ids = keys.map(({ args: [id] })=>id);
            return (0, _rxjs.combineLatest)([
                bountyBase.bounties.multi(ids),
                bountyBase.bountyDescriptions.multi(ids),
                (0, _rxjs.of)(ids),
                (0, _rxjs.of)((0, _filterBountyProposalsJs.filterBountiesProposals)(api, proposals))
            ]);
        }), (0, _rxjs.map)(parseResult)) : (0, _rxjs.of)(parseResult([
            [],
            [],
            [],
            []
        ])));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./helpers/filterBountyProposals.js":"4ohRx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ohRx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterBountiesProposals", ()=>filterBountiesProposals);
function filterBountiesProposals(api, allProposals) {
    const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
    const bountyProposalCalls = [
        bountyTxBase.approveBounty,
        bountyTxBase.closeBounty,
        bountyTxBase.proposeCurator,
        bountyTxBase.unassignCurator
    ];
    return allProposals.filter((proposal)=>bountyProposalCalls.find((bountyCall)=>proposal.proposal && bountyCall.is(proposal.proposal)));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9gS3k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bestNumberJs = require("./bestNumber.js");
parcelHelpers.exportAll(_bestNumberJs, exports);
var _bestNumberFinalizedJs = require("./bestNumberFinalized.js");
parcelHelpers.exportAll(_bestNumberFinalizedJs, exports);
var _bestNumberLagJs = require("./bestNumberLag.js");
parcelHelpers.exportAll(_bestNumberLagJs, exports);
var _getBlockJs = require("./getBlock.js");
parcelHelpers.exportAll(_getBlockJs, exports);
var _getBlockByNumberJs = require("./getBlockByNumber.js");
parcelHelpers.exportAll(_getBlockByNumberJs, exports);
var _getHeaderJs = require("./getHeader.js");
parcelHelpers.exportAll(_getHeaderJs, exports);
var _subscribeFinalizedBlocksJs = require("./subscribeFinalizedBlocks.js");
parcelHelpers.exportAll(_subscribeFinalizedBlocksJs, exports);
var _subscribeFinalizedHeadsJs = require("./subscribeFinalizedHeads.js");
parcelHelpers.exportAll(_subscribeFinalizedHeadsJs, exports);
var _subscribeNewBlocksJs = require("./subscribeNewBlocks.js");
parcelHelpers.exportAll(_subscribeNewBlocksJs, exports);
var _subscribeNewHeadsJs = require("./subscribeNewHeads.js");
parcelHelpers.exportAll(_subscribeNewHeadsJs, exports);

},{"./bestNumber.js":"chp3l","./bestNumberFinalized.js":"jnUih","./bestNumberLag.js":"331z6","./getBlock.js":"jSLSH","./getBlockByNumber.js":"7DGSc","./getHeader.js":"4kGuI","./subscribeFinalizedBlocks.js":"9sw2n","./subscribeFinalizedHeads.js":"88i90","./subscribeNewBlocks.js":"7SfzB","./subscribeNewHeads.js":"2Djww","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"chp3l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bestNumber", ()=>bestNumber);
var _utilJs = require("./util.js");
const bestNumber = /*#__PURE__*/ (0, _utilJs.createBlockNumberDerive)((api)=>api.rpc.chain.subscribeNewHeads());

},{"./util.js":"arcpB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"arcpB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBlockNumberDerive", ()=>createBlockNumberDerive);
parcelHelpers.export(exports, "getAuthorDetails", ()=>getAuthorDetails);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function createBlockNumberDerive(fn) {
    return (instanceId, api)=>(0, _indexJs.memo)(instanceId, ()=>fn(api).pipe((0, _rxjs.map)((0, _indexJs.unwrapBlockNumber))));
}
/** @internal */ function getAuthorDetailsWithAt(header, queryAt) {
    const validators = queryAt.session?.validators ? queryAt.session.validators() : (0, _rxjs.of)(null);
    // nimbus consensus stores the session key of the block author in header logs
    const { logs: [log] } = header.digest;
    const loggedAuthor = log && (log.isConsensus && log.asConsensus[0].isNimbus && log.asConsensus[1] || log.isPreRuntime && log.asPreRuntime[0].isNimbus && log.asPreRuntime[1]);
    if (loggedAuthor) {
        // use the author mapping pallet, if available (ie: moonbeam, moonriver), to map session (nimbus) key to author (collator/validator) key
        if (queryAt["authorMapping"]?.["mappingWithDeposit"]) return (0, _rxjs.combineLatest)([
            (0, _rxjs.of)(header),
            validators,
            queryAt["authorMapping"]["mappingWithDeposit"](loggedAuthor).pipe((0, _rxjs.map)((o)=>o.unwrapOr({
                    account: null
                }).account))
        ]);
        // fall back to session and parachain staking pallets, if available (ie: manta, calamari), to map session (nimbus) key to author (collator) key
        if (queryAt["parachainStaking"]?.["selectedCandidates"] && queryAt.session?.nextKeys) {
            const loggedHex = loggedAuthor.toHex();
            return (0, _rxjs.combineLatest)([
                (0, _rxjs.of)(header),
                validators,
                queryAt["parachainStaking"]["selectedCandidates"]().pipe((0, _rxjs.mergeMap)((selectedCandidates)=>(0, _rxjs.combineLatest)([
                        (0, _rxjs.of)(selectedCandidates),
                        queryAt.session.nextKeys.multi(selectedCandidates).pipe((0, _rxjs.map)((nextKeys)=>nextKeys.findIndex((o)=>o.unwrapOrDefault().nimbus.toHex() === loggedHex)))
                    ])), (0, _rxjs.map)(([selectedCandidates, index])=>index === -1 ? null : selectedCandidates[index]))
            ]);
        }
    }
    // normal operation, non-mapping
    return (0, _rxjs.combineLatest)([
        (0, _rxjs.of)(header),
        validators,
        (0, _rxjs.of)(null)
    ]);
}
function getAuthorDetails(api, header, blockHash) {
    // For on-chain state, we need to retrieve it as per the start
    // of the block being constructed, i.e. session validators would
    // be at the point of the block construction, not when all operations
    // has been supplied.
    //
    // However for the first block (no parentHash available), we would
    // just use the as-is
    return api.queryAt(header.parentHash.isEmpty ? blockHash || header.hash : header.parentHash).pipe((0, _rxjs.switchMap)((queryAt)=>getAuthorDetailsWithAt(header, queryAt)));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jnUih":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bestNumberFinalized", ()=>bestNumberFinalized);
var _utilJs = require("./util.js");
const bestNumberFinalized = /*#__PURE__*/ (0, _utilJs.createBlockNumberDerive)((api)=>api.rpc.chain.subscribeFinalizedHeads());

},{"./util.js":"arcpB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"331z6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name bestNumberLag
 * @returns A number of blocks
 * @description Calculates the lag between finalized head and best head
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumberLag((lag) => {
 *   console.log(`finalized is ${lag} blocks behind head`);
 * });
 * ```
 */ parcelHelpers.export(exports, "bestNumberLag", ()=>bestNumberLag);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function bestNumberLag(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>(0, _rxjs.combineLatest)([
            api.derive.chain.bestNumber(),
            api.derive.chain.bestNumberFinalized()
        ]).pipe((0, _rxjs.map)(([bestNumber, bestNumberFinalized])=>api.registry.createType("BlockNumber", bestNumber.sub(bestNumberFinalized)))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jSLSH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name getBlock
 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
 * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author
 * @example
 * <BR>
 *
 * ```javascript
 * const { author, block } = await api.derive.chain.getBlock('0x123...456');
 *
 * console.log(`block #${block.header.number} was authored by ${author}`);
 * ```
 */ parcelHelpers.export(exports, "getBlock", ()=>getBlock);
var _rxjs = require("rxjs");
var _indexJs = require("../type/index.js");
var _indexJs1 = require("../util/index.js");
var _utilJs = require("./util.js");
function getBlock(instanceId, api) {
    return (0, _indexJs1.memo)(instanceId, (blockHash)=>(0, _rxjs.combineLatest)([
            api.rpc.chain.getBlock(blockHash),
            api.queryAt(blockHash)
        ]).pipe((0, _rxjs.switchMap)(([signedBlock, queryAt])=>(0, _rxjs.combineLatest)([
                (0, _rxjs.of)(signedBlock),
                queryAt.system.events(),
                (0, _utilJs.getAuthorDetails)(api, signedBlock.block.header, blockHash)
            ])), (0, _rxjs.map)(([signedBlock, events, [, validators, author]])=>(0, _indexJs.createSignedBlockExtended)(events.registry, signedBlock, events, validators, author))));
}

},{"rxjs":"lLy7s","../type/index.js":"cd05H","../util/index.js":"cN7tY","./util.js":"arcpB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cd05H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createHeaderExtended", ()=>(0, _headerExtendedJs.createHeaderExtended));
parcelHelpers.export(exports, "createSignedBlockExtended", ()=>(0, _signedBlockExtendedJs.createSignedBlockExtended));
var _headerExtendedJs = require("./HeaderExtended.js");
var _signedBlockExtendedJs = require("./SignedBlockExtended.js");

},{"./HeaderExtended.js":"9TLLv","./SignedBlockExtended.js":"ibBf6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9TLLv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createHeaderExtended", ()=>createHeaderExtended);
var _utilJs = require("./util.js");
function createHeaderExtended(registry, header, validators, author) {
    // an instance of the base extrinsic for us to extend
    const HeaderBase = registry.createClass("Header");
    class Implementation extends HeaderBase {
        __internal__author;
        constructor(registry, header, validators, author){
            super(registry, header);
            this.__internal__author = author || (0, _utilJs.extractAuthor)(this.digest, validators || []);
            this.createdAtHash = header?.createdAtHash;
        }
        /**
         * @description Convenience method, returns the author for the block
         */ get author() {
            return this.__internal__author;
        }
    }
    return new Implementation(registry, header, validators, author);
}

},{"./util.js":"lWO2D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWO2D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extractAuthor", ()=>extractAuthor);
function extractAuthor(digest, sessionValidators) {
    const [citem] = digest.logs.filter((e)=>e.isConsensus);
    const [pitem] = digest.logs.filter((e)=>e.isPreRuntime);
    const [sitem] = digest.logs.filter((e)=>e.isSeal);
    let accountId;
    try {
        // This is critical to be first for BABE (before Consensus)
        // If not first, we end up dropping the author at session-end
        if (pitem) {
            const [engine, data] = pitem.asPreRuntime;
            accountId = engine.extractAuthor(data, sessionValidators);
        }
        if (!accountId && citem) {
            const [engine, data] = citem.asConsensus;
            accountId = engine.extractAuthor(data, sessionValidators);
        }
        // SEAL, still used in e.g. Kulupu for pow
        if (!accountId && sitem) {
            const [engine, data] = sitem.asSeal;
            accountId = engine.extractAuthor(data, sessionValidators);
        }
    } catch  {
    // ignore
    }
    return accountId;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ibBf6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSignedBlockExtended", ()=>createSignedBlockExtended);
var _utilJs = require("./util.js");
function mapExtrinsics(extrinsics, records) {
    return extrinsics.map((extrinsic, index)=>{
        let dispatchError;
        let dispatchInfo;
        const events = records.filter(({ phase })=>phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({ event })=>{
            if (event.section === "system") {
                if (event.method === "ExtrinsicSuccess") dispatchInfo = event.data[0];
                else if (event.method === "ExtrinsicFailed") {
                    dispatchError = event.data[0];
                    dispatchInfo = event.data[1];
                }
            }
            return event;
        });
        return {
            dispatchError,
            dispatchInfo,
            events,
            extrinsic
        };
    });
}
function createSignedBlockExtended(registry, block, events, validators, author) {
    // an instance of the base extrinsic for us to extend
    const SignedBlockBase = registry.createClass("SignedBlock");
    class Implementation extends SignedBlockBase {
        __internal__author;
        __internal__events;
        __internal__extrinsics;
        constructor(registry, block, events, validators, author){
            super(registry, block);
            this.__internal__author = author || (0, _utilJs.extractAuthor)(this.block.header.digest, validators || []);
            this.__internal__events = events || [];
            this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);
            this.createdAtHash = block?.createdAtHash;
        }
        /**
         * @description Convenience method, returns the author for the block
         */ get author() {
            return this.__internal__author;
        }
        /**
         * @description Convenience method, returns the events associated with the block
         */ get events() {
            return this.__internal__events;
        }
        /**
         * @description Returns the extrinsics and their events, mapped
         */ get extrinsics() {
            return this.__internal__extrinsics;
        }
    }
    return new Implementation(registry, block, events, validators, author);
}

},{"./util.js":"lWO2D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7DGSc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBlockByNumber", ()=>getBlockByNumber);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function getBlockByNumber(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (blockNumber)=>api.rpc.chain.getBlockHash(blockNumber).pipe((0, _rxjs.switchMap)((h)=>api.derive.chain.getBlock(h))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4kGuI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name getHeader
 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
 * @returns An array containing the block header and the block author
 * @description Get a specific block header and extend it with the author
 * @example
 * <BR>
 *
 * ```javascript
 * const { author, number } = await api.derive.chain.getHeader('0x123...456');
 *
 * console.log(`block #${number} was authored by ${author}`);
 * ```
 */ parcelHelpers.export(exports, "getHeader", ()=>getHeader);
var _rxjs = require("rxjs");
var _indexJs = require("../type/index.js");
var _indexJs1 = require("../util/index.js");
var _utilJs = require("./util.js");
function getHeader(instanceId, api) {
    return (0, _indexJs1.memo)(instanceId, (blockHash)=>api.rpc.chain.getHeader(blockHash).pipe((0, _rxjs.switchMap)((header)=>(0, _utilJs.getAuthorDetails)(api, header, blockHash)), (0, _rxjs.map)(([header, validators, author])=>(0, _indexJs.createHeaderExtended)((validators || header).registry, header, validators, author))));
}

},{"rxjs":"lLy7s","../type/index.js":"cd05H","../util/index.js":"cN7tY","./util.js":"arcpB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9sw2n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name subscribeFinalizedBlocks
 * @returns The finalized block & events for that block
 */ parcelHelpers.export(exports, "subscribeFinalizedBlocks", ()=>subscribeFinalizedBlocks);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function subscribeFinalizedBlocks(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.derive.chain.subscribeFinalizedHeads().pipe((0, _rxjs.switchMap)((header)=>api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"88i90":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns a header range from startHash to to (not including) endHash, i.e. lastBlock.parentHash === endHash
 */ parcelHelpers.export(exports, "_getHeaderRange", ()=>_getHeaderRange);
/**
 * @name subscribeFinalizedHeads
 * @description An observable of the finalized block headers. Unlike the base
 * chain.subscribeFinalizedHeads this does not skip any headers. Since finalization
 * may skip specific blocks (finalization happens in terms of chains), this version
 * of the derive tracks missing headers (since last  retrieved) and provides them
 * to the caller
 */ parcelHelpers.export(exports, "subscribeFinalizedHeads", ()=>subscribeFinalizedHeads);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function _getHeaderRange(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (startHash, endHash, prev = [])=>api.rpc.chain.getHeader(startHash).pipe((0, _rxjs.switchMap)((header)=>header.parentHash.eq(endHash) ? (0, _rxjs.of)([
                header,
                ...prev
            ]) : api.derive.chain._getHeaderRange(header.parentHash, endHash, [
                header,
                ...prev
            ]))));
}
function subscribeFinalizedHeads(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>{
        let prevHash = null;
        return api.rpc.chain.subscribeFinalizedHeads().pipe((0, _rxjs.switchMap)((header)=>{
            const endHash = prevHash;
            const startHash = header.parentHash;
            prevHash = header.createdAtHash = header.hash;
            return endHash === null || startHash.eq(endHash) ? (0, _rxjs.of)(header) : api.derive.chain._getHeaderRange(startHash, endHash, [
                header
            ]).pipe((0, _rxjs.switchMap)((headers)=>(0, _rxjs.from)(headers)));
        }));
    });
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7SfzB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name subscribeNewBlocks
 * @returns The latest block & events for that block
 */ parcelHelpers.export(exports, "subscribeNewBlocks", ()=>subscribeNewBlocks);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function subscribeNewBlocks(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.derive.chain.subscribeNewHeads().pipe((0, _rxjs.switchMap)((header)=>api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Djww":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name subscribeNewHeads
 * @returns A header with the current header (including extracted author)
 * @description An observable of the current block header and it's author
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.subscribeNewHeads((header) => {
 *   console.log(`block #${header.number} was authored by ${header.author}`);
 * });
 * ```
 */ parcelHelpers.export(exports, "subscribeNewHeads", ()=>subscribeNewHeads);
var _rxjs = require("rxjs");
var _indexJs = require("../type/index.js");
var _indexJs1 = require("../util/index.js");
var _utilJs = require("./util.js");
function subscribeNewHeads(instanceId, api) {
    return (0, _indexJs1.memo)(instanceId, ()=>api.rpc.chain.subscribeNewHeads().pipe((0, _rxjs.switchMap)((header)=>(0, _utilJs.getAuthorDetails)(api, header)), (0, _rxjs.map)(([header, validators, author])=>{
            header.createdAtHash = header.hash;
            return (0, _indexJs.createHeaderExtended)(header.registry, header, validators, author);
        })));
}

},{"rxjs":"lLy7s","../type/index.js":"cd05H","../util/index.js":"cN7tY","./util.js":"arcpB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5txcW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _feesJs = require("./fees.js");
parcelHelpers.exportAll(_feesJs, exports);

},{"./fees.js":"8GSY0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8GSY0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name fees
 * @returns An object containing the combined results of the queries for
 * all relevant contract fees as declared in the substrate chain spec.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.contracts.fees(([creationFee, transferFee]) => {
 *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);
 * });
 * ```
 */ parcelHelpers.export(exports, "fees", ()=>fees);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function queryConstants(api) {
    return (0, _rxjs.of)([
        // deprecated
        api.consts.contracts["callBaseFee"] || api.registry.createType("Balance"),
        api.consts.contracts["contractFee"] || api.registry.createType("Balance"),
        api.consts.contracts["creationFee"] || api.registry.createType("Balance"),
        api.consts.contracts["transactionBaseFee"] || api.registry.createType("Balance"),
        api.consts.contracts["transactionByteFee"] || api.registry.createType("Balance"),
        api.consts.contracts["transferFee"] || api.registry.createType("Balance"),
        // current
        api.consts.contracts["rentByteFee"] || api.registry.createType("Balance"),
        api.consts.contracts["rentDepositOffset"] || api.registry.createType("Balance"),
        api.consts.contracts["surchargeReward"] || api.registry.createType("Balance"),
        api.consts.contracts["tombstoneDeposit"] || api.registry.createType("Balance")
    ]);
}
function fees(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>{
        return queryConstants(api).pipe((0, _rxjs.map)(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit])=>({
                callBaseFee,
                contractFee,
                creationFee,
                rentByteFee,
                rentDepositOffset,
                surchargeReward,
                tombstoneDeposit,
                transactionBaseFee,
                transactionByteFee,
                transferFee
            })));
    });
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"foPeO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "members", ()=>members);
parcelHelpers.export(exports, "hasProposals", ()=>hasProposals);
parcelHelpers.export(exports, "proposal", ()=>proposal);
parcelHelpers.export(exports, "proposalCount", ()=>proposalCount);
parcelHelpers.export(exports, "proposalHashes", ()=>proposalHashes);
parcelHelpers.export(exports, "proposals", ()=>proposals);
parcelHelpers.export(exports, "prime", ()=>prime);
var _indexJs = require("../collective/index.js");
var _votesJs = require("./votes.js");
parcelHelpers.exportAll(_votesJs, exports);
var _votesOfJs = require("./votesOf.js");
parcelHelpers.exportAll(_votesOfJs, exports);
const members = /*#__PURE__*/ (0, _indexJs.members)("council");
const hasProposals = /*#__PURE__*/ (0, _indexJs.hasProposals)("council");
const proposal = /*#__PURE__*/ (0, _indexJs.proposal)("council");
const proposalCount = /*#__PURE__*/ (0, _indexJs.proposalCount)("council");
const proposalHashes = /*#__PURE__*/ (0, _indexJs.proposalHashes)("council");
const proposals = /*#__PURE__*/ (0, _indexJs.proposals)("council");
const prime = /*#__PURE__*/ (0, _indexJs.prime)("council");

},{"../collective/index.js":"8aK0Q","./votes.js":"3Q8SU","./votesOf.js":"3h8QH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Q8SU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "votes", ()=>votes);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function isVoter(value) {
    return !Array.isArray(value);
}
function retrieveStakeOf(elections) {
    return elections["stakeOf"].entries().pipe((0, _rxjs.map)((entries)=>entries.map(([{ args: [accountId] }, stake])=>[
                accountId,
                stake
            ])));
}
function retrieveVoteOf(elections) {
    return elections["votesOf"].entries().pipe((0, _rxjs.map)((entries)=>entries.map(([{ args: [accountId] }, votes])=>[
                accountId,
                votes
            ])));
}
function retrievePrev(api, elections) {
    return (0, _rxjs.combineLatest)([
        retrieveStakeOf(elections),
        retrieveVoteOf(elections)
    ]).pipe((0, _rxjs.map)(([stakes, votes])=>{
        const result = [];
        votes.forEach(([voter, votes])=>{
            result.push([
                voter,
                {
                    stake: api.registry.createType("Balance"),
                    votes
                }
            ]);
        });
        stakes.forEach(([staker, stake])=>{
            const entry = result.find(([voter])=>voter.eq(staker));
            if (entry) entry[1].stake = stake;
            else result.push([
                staker,
                {
                    stake,
                    votes: []
                }
            ]);
        });
        return result;
    }));
}
function retrieveCurrent(elections) {
    return elections.voting.entries().pipe((0, _rxjs.map)((entries)=>entries.map(([{ args: [accountId] }, value])=>[
                accountId,
                isVoter(value) ? {
                    stake: value.stake,
                    votes: value.votes
                } : {
                    stake: value[0],
                    votes: value[1]
                }
            ])));
}
function votes(instanceId, api) {
    const elections = api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"];
    return (0, _indexJs.memo)(instanceId, ()=>elections ? elections["stakeOf"] ? retrievePrev(api, elections) : retrieveCurrent(elections) : (0, _rxjs.of)([]));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3h8QH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "votesOf", ()=>votesOf);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function votesOf(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId)=>api.derive.council.votes().pipe((0, _rxjs.map)((votes)=>(votes.find(([from])=>from.eq(accountId)) || [
                null,
                {
                    stake: api.registry.createType("Balance"),
                    votes: []
                }
            ])[1])));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"emHOx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _childKeyJs = require("./childKey.js");
parcelHelpers.exportAll(_childKeyJs, exports);
var _contributionsJs = require("./contributions.js");
parcelHelpers.exportAll(_contributionsJs, exports);
var _ownContributionsJs = require("./ownContributions.js");
parcelHelpers.exportAll(_ownContributionsJs, exports);

},{"./childKey.js":"6urWu","./contributions.js":"3xpuu","./ownContributions.js":"cq5Ha","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6urWu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "childKey", ()=>childKey);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
var _indexJs = require("../util/index.js");
function createChildKey(info) {
    return (0, _util.u8aToHex)((0, _util.u8aConcat)(":child_storage:default:", (0, _utilCrypto.blake2AsU8a)((0, _util.u8aConcat)("crowdloan", (info.fundIndex || info.trieIndex).toU8a()))));
}
function childKey(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (paraId)=>api.query["crowdloan"]["funds"](paraId).pipe((0, _rxjs.map)((optInfo)=>optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3xpuu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contributions", ()=>contributions);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)
function _getUpdates(api, paraId) {
    let added = [];
    let removed = [];
    return api.query.system.events().pipe((0, _rxjs.switchMap)((events)=>{
        const changes = (0, _utilJs.extractContributed)(paraId, events);
        if (changes.added.length || changes.removed.length) {
            added = added.concat(...changes.added);
            removed = removed.concat(...changes.removed);
            return (0, _rxjs.of)({
                added,
                addedDelta: changes.added,
                blockHash: events.createdAtHash?.toHex() || "-",
                removed,
                removedDelta: changes.removed
            });
        }
        return 0, _rxjs.EMPTY;
    }), (0, _rxjs.startWith)({
        added,
        addedDelta: [],
        blockHash: "-",
        removed,
        removedDelta: []
    }));
}
function _eventTriggerAll(api, paraId) {
    return api.query.system.events().pipe((0, _rxjs.switchMap)((events)=>{
        const items = events.filter(({ event: { data: [eventParaId], method, section } })=>section === "crowdloan" && [
                "AllRefunded",
                "Dissolved",
                "PartiallyRefunded"
            ].includes(method) && eventParaId.eq(paraId));
        return items.length ? (0, _rxjs.of)(events.createdAtHash?.toHex() || "-") : (0, _rxjs.EMPTY);
    }), (0, _rxjs.startWith)("-"));
}
function _getKeysPaged(api, childKey) {
    const subject = new (0, _rxjs.BehaviorSubject)(undefined);
    return subject.pipe((0, _rxjs.switchMap)((startKey)=>api.rpc.childstate.getKeysPaged(childKey, "0x", PAGE_SIZE_K, startKey)), (0, _rxjs.tap)((keys)=>{
        (0, _util.nextTick)(()=>{
            keys.length === PAGE_SIZE_K ? subject.next(keys[PAGE_SIZE_K - 1].toHex()) : subject.complete();
        });
    }), (0, _rxjs.toArray)(), (0, _rxjs.map)((keyArr)=>(0, _util.arrayFlatten)(keyArr)));
}
function _getAll(api, paraId, childKey) {
    return _eventTriggerAll(api, paraId).pipe((0, _rxjs.switchMap)(()=>(0, _util.isFunction)(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey) : api.rpc.childstate.getKeys(childKey, "0x")), (0, _rxjs.map)((keys)=>keys.map((k)=>k.toHex())));
}
function _contributions(api, paraId, childKey) {
    return (0, _rxjs.combineLatest)([
        _getAll(api, paraId, childKey),
        _getUpdates(api, paraId)
    ]).pipe((0, _rxjs.map)(([keys, { added, blockHash, removed }])=>{
        const contributorsMap = {};
        keys.forEach((k)=>{
            contributorsMap[k] = true;
        });
        added.forEach((k)=>{
            contributorsMap[k] = true;
        });
        removed.forEach((k)=>{
            delete contributorsMap[k];
        });
        return {
            blockHash,
            contributorsHex: Object.keys(contributorsMap)
        };
    }));
}
function contributions(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (paraId)=>api.derive.crowdloan.childKey(paraId).pipe((0, _rxjs.switchMap)((childKey)=>childKey ? _contributions(api, paraId, childKey) : (0, _rxjs.of)({
                blockHash: "-",
                contributorsHex: []
            }))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./util.js":"gqdGd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gqdGd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extractContributed", ()=>extractContributed);
function extractContributed(paraId, events) {
    const added = [];
    const removed = [];
    return events.filter(({ event: { data: [, eventParaId], method, section } })=>section === "crowdloan" && [
            "Contributed",
            "Withdrew"
        ].includes(method) && eventParaId.eq(paraId)).reduce((result, { event: { data: [accountId], method } })=>{
        if (method === "Contributed") result.added.push(accountId.toHex());
        else result.removed.push(accountId.toHex());
        return result;
    }, {
        added,
        blockHash: events.createdAtHash?.toHex() || "-",
        removed
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cq5Ha":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ownContributions", ()=>ownContributions);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function _getValues(api, childKey, keys) {
    // We actually would love to use multi-keys https://github.com/paritytech/substrate/issues/9203
    return (0, _rxjs.combineLatest)(keys.map((k)=>api.rpc.childstate.getStorage(childKey, k))).pipe((0, _rxjs.map)((values)=>values.map((v)=>api.registry.createType("Option<StorageData>", v)).map((o)=>o.isSome ? api.registry.createType("Balance", o.unwrap()) : api.registry.createType("Balance")).reduce((all, b, index)=>(0, _util.objectSpread)(all, {
                [keys[index]]: b
            }), {})));
}
function _watchOwnChanges(api, paraId, childkey, keys) {
    return api.query.system.events().pipe((0, _rxjs.switchMap)((events)=>{
        const changes = (0, _utilJs.extractContributed)(paraId, events);
        const filtered = keys.filter((k)=>changes.added.includes(k) || changes.removed.includes(k));
        return filtered.length ? _getValues(api, childkey, filtered) : (0, _rxjs.EMPTY);
    }), (0, _rxjs.startWith)({}));
}
function _contributions(api, paraId, childKey, keys) {
    return (0, _rxjs.combineLatest)([
        _getValues(api, childKey, keys),
        _watchOwnChanges(api, paraId, childKey, keys)
    ]).pipe((0, _rxjs.map)(([all, latest])=>(0, _util.objectSpread)({}, all, latest)));
}
function ownContributions(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (paraId, keys)=>api.derive.crowdloan.childKey(paraId).pipe((0, _rxjs.switchMap)((childKey)=>childKey && keys.length ? _contributions(api, paraId, childKey, keys) : (0, _rxjs.of)({}))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./util.js":"gqdGd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"859YG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dispatchQueueJs = require("./dispatchQueue.js");
parcelHelpers.exportAll(_dispatchQueueJs, exports);
var _locksJs = require("./locks.js");
parcelHelpers.exportAll(_locksJs, exports);
var _nextExternalJs = require("./nextExternal.js");
parcelHelpers.exportAll(_nextExternalJs, exports);
var _preimagesJs = require("./preimages.js");
parcelHelpers.exportAll(_preimagesJs, exports);
var _proposalsJs = require("./proposals.js");
parcelHelpers.exportAll(_proposalsJs, exports);
var _referendumIdsJs = require("./referendumIds.js");
parcelHelpers.exportAll(_referendumIdsJs, exports);
var _referendumsJs = require("./referendums.js");
parcelHelpers.exportAll(_referendumsJs, exports);
var _referendumsActiveJs = require("./referendumsActive.js");
parcelHelpers.exportAll(_referendumsActiveJs, exports);
var _referendumsFinishedJs = require("./referendumsFinished.js");
parcelHelpers.exportAll(_referendumsFinishedJs, exports);
var _referendumsInfoJs = require("./referendumsInfo.js");
parcelHelpers.exportAll(_referendumsInfoJs, exports);
var _sqrtElectorateJs = require("./sqrtElectorate.js");
parcelHelpers.exportAll(_sqrtElectorateJs, exports);

},{"./dispatchQueue.js":"2PdaQ","./locks.js":"eMq8o","./nextExternal.js":"2Ze4G","./preimages.js":"2VOl9","./proposals.js":"lUAgy","./referendumIds.js":"6Ocun","./referendums.js":"ejHyM","./referendumsActive.js":"eGTdF","./referendumsFinished.js":"52gBy","./referendumsInfo.js":"8vHzK","./sqrtElectorate.js":"lluEi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2PdaQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dispatchQueue", ()=>dispatchQueue);
var _rxjs = require("rxjs");
var _types = require("@polkadot/types");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
const DEMOCRACY_ID = (0, _util.stringToHex)("democrac");
function isMaybeHashedOrBounded(call) {
    // check for enum
    return call instanceof (0, _types.Enum);
}
function isBounded(call) {
    // check for type
    return call.isInline || call.isLegacy || call.isLookup;
}
function queryQueue(api) {
    return api.query.democracy["dispatchQueue"]().pipe((0, _rxjs.switchMap)((dispatches)=>(0, _rxjs.combineLatest)([
            (0, _rxjs.of)(dispatches),
            api.derive.democracy.preimages(dispatches.map(([, hash])=>hash))
        ])), (0, _rxjs.map)(([dispatches, images])=>dispatches.map(([at, imageHash, index], dispatchIndex)=>({
                at,
                image: images[dispatchIndex],
                imageHash: (0, _utilJs.getImageHashBounded)(imageHash),
                index
            }))));
}
function schedulerEntries(api) {
    // We don't get entries, but rather we get the keys (triggered via finished referendums) and
    // the subscribe to those keys - this means we pickup when the schedulers actually executes
    // at a block, the entry for that block will become empty
    return api.derive.democracy.referendumsFinished().pipe((0, _rxjs.switchMap)(()=>api.query.scheduler.agenda.keys()), (0, _rxjs.switchMap)((keys)=>{
        const blockNumbers = keys.map(({ args: [blockNumber] })=>blockNumber);
        return blockNumbers.length ? (0, _rxjs.combineLatest)([
            (0, _rxjs.of)(blockNumbers),
            // this should simply be api.query.scheduler.agenda.multi,
            // however we have had cases on Darwinia where the indices have moved around after an
            // upgrade, which results in invalid on-chain data
            api.query.scheduler.agenda.multi(blockNumbers).pipe((0, _rxjs.catchError)(()=>(0, _rxjs.of)(blockNumbers.map(()=>[]))))
        ]) : (0, _rxjs.of)([
            [],
            []
        ]);
    }));
}
function queryScheduler(api) {
    return schedulerEntries(api).pipe((0, _rxjs.switchMap)(([blockNumbers, agendas])=>{
        const result = [];
        blockNumbers.forEach((at, index)=>{
            (agendas[index] || []).filter((o)=>o.isSome).forEach((o)=>{
                const scheduled = o.unwrap();
                if (scheduled.maybeId.isSome) {
                    const id = scheduled.maybeId.unwrap().toHex();
                    if (id.startsWith(DEMOCRACY_ID)) {
                        const imageHash = isMaybeHashedOrBounded(scheduled.call) ? isBounded(scheduled.call) ? (0, _utilJs.getImageHashBounded)(scheduled.call) : scheduled.call.isHash ? scheduled.call.asHash.toHex() : scheduled.call.asValue.args[0].toHex() : scheduled.call.args[0].toHex();
                        result.push({
                            at,
                            imageHash,
                            index: api.registry.createType("(u64, ReferendumIndex)", id)[1]
                        });
                    }
                }
            });
        });
        return (0, _rxjs.combineLatest)([
            (0, _rxjs.of)(result),
            result.length ? api.derive.democracy.preimages(result.map(({ imageHash })=>imageHash)) : (0, _rxjs.of)([])
        ]);
    }), (0, _rxjs.map)(([infos, images])=>infos.map((info, index)=>(0, _util.objectSpread)({
                image: images[index]
            }, info))));
}
function dispatchQueue(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>(0, _util.isFunction)(api.query.scheduler?.agenda) ? queryScheduler(api) : api.query.democracy["dispatchQueue"] ? queryQueue(api) : (0, _rxjs.of)([]));
}

},{"rxjs":"lLy7s","@polkadot/types":"fnDGk","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./util.js":"4iPp3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4iPp3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareRationals", ()=>compareRationals);
parcelHelpers.export(exports, "calcPassing", ()=>calcPassing);
parcelHelpers.export(exports, "calcVotes", ()=>calcVotes);
parcelHelpers.export(exports, "getStatus", ()=>getStatus);
parcelHelpers.export(exports, "getImageHashBounded", ()=>getImageHashBounded);
parcelHelpers.export(exports, "getImageHash", ()=>getImageHash);
var _util = require("@polkadot/util");
function isOldInfo(info) {
    return !!info.proposalHash;
}
function isCurrentStatus(status) {
    return !!status.tally;
}
function compareRationals(n1, d1, n2, d2) {
    while(true){
        const q1 = n1.div(d1);
        const q2 = n2.div(d2);
        if (q1.lt(q2)) return true;
        else if (q2.lt(q1)) return false;
        const r1 = n1.mod(d1);
        const r2 = n2.mod(d2);
        if (r2.isZero()) return false;
        else if (r1.isZero()) return true;
        n1 = d2;
        n2 = d1;
        d1 = r2;
        d2 = r1;
    }
}
function calcPassingOther(threshold, sqrtElectorate, { votedAye, votedNay, votedTotal }) {
    const sqrtVoters = (0, _util.bnSqrt)(votedTotal);
    return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate) : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
}
function calcPassing(threshold, sqrtElectorate, state) {
    return threshold.isSimpleMajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate, state);
}
function calcVotesPrev(votesFor) {
    return votesFor.reduce((state, derived)=>{
        const { balance, vote } = derived;
        const isDefault = vote.conviction.index === 0;
        const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);
        if (vote.isAye) {
            state.allAye.push(derived);
            state.voteCountAye++;
            state.votedAye.iadd(counted);
        } else {
            state.allNay.push(derived);
            state.voteCountNay++;
            state.votedNay.iadd(counted);
        }
        state.voteCount++;
        state.votedTotal.iadd(counted);
        return state;
    }, {
        allAye: [],
        allNay: [],
        voteCount: 0,
        voteCountAye: 0,
        voteCountNay: 0,
        votedAye: new (0, _util.BN)(0),
        votedNay: new (0, _util.BN)(0),
        votedTotal: new (0, _util.BN)(0)
    });
}
function calcVotesCurrent(tally, votes) {
    const allAye = [];
    const allNay = [];
    votes.forEach((derived)=>{
        if (derived.vote.isAye) allAye.push(derived);
        else allNay.push(derived);
    });
    return {
        allAye,
        allNay,
        voteCount: allAye.length + allNay.length,
        voteCountAye: allAye.length,
        voteCountNay: allNay.length,
        votedAye: tally.ayes,
        votedNay: tally.nays,
        votedTotal: tally.turnout
    };
}
function calcVotes(sqrtElectorate, referendum, votes) {
    const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes) : calcVotesPrev(votes);
    return (0, _util.objectSpread)({}, state, {
        isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
        votes
    });
}
function getStatus(info) {
    if (info.isNone) return null;
    const unwrapped = info.unwrap();
    return isOldInfo(unwrapped) ? unwrapped : unwrapped.isOngoing ? unwrapped.asOngoing : null;
}
function getImageHashBounded(hash) {
    return hash.isLegacy ? hash.asLegacy.hash_.toHex() : hash.isLookup ? hash.asLookup.hash_.toHex() : hash.isInline ? hash.asInline.hash.toHex() : (0, _util.isString)(hash) ? (0, _util.isHex)(hash) ? hash : (0, _util.stringToHex)(hash) : (0, _util.isU8a)(hash) ? (0, _util.u8aToHex)(hash) : hash.toHex();
}
function getImageHash(status) {
    return getImageHashBounded(status.proposal || status.proposalHash);
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eMq8o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "locks", ()=>locks);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
const LOCKUPS = [
    0,
    1,
    2,
    4,
    8,
    16,
    32
];
function parseEnd(api, vote, { approved, end }) {
    return [
        end,
        approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : (0, _util.BN_ZERO)
    ];
}
function parseLock(api, [referendumId, accountVote], referendum) {
    const { balance, vote } = accountVote.asStandard;
    const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [
        (0, _util.BN_ZERO),
        (0, _util.BN_ZERO)
    ];
    return {
        balance,
        isDelegated: false,
        isFinished: referendum.isFinished,
        referendumEnd,
        referendumId,
        unlockAt,
        vote
    };
}
function delegateLocks(api, { balance, conviction, target }) {
    return api.derive.democracy.locks(target).pipe((0, _rxjs.map)((available)=>available.map(({ isFinished, referendumEnd, referendumId, unlockAt, vote })=>({
                balance,
                isDelegated: true,
                isFinished,
                referendumEnd,
                referendumId,
                unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
                vote: api.registry.createType("Vote", {
                    aye: vote.isAye,
                    conviction
                })
            }))));
}
function directLocks(api, { votes }) {
    if (!votes.length) return (0, _rxjs.of)([]);
    return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId])=>referendumId)).pipe((0, _rxjs.map)((referendums)=>votes.map((vote, index)=>[
                vote,
                referendums[index].unwrapOr(null)
            ]).filter((item)=>!!item[1] && (0, _util.isUndefined)(item[1].end) && item[0][1].isStandard).map(([directVote, referendum])=>parseLock(api, directVote, referendum))));
}
function locks(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId)=>api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId).pipe((0, _rxjs.switchMap)((voting)=>voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : (0, _rxjs.of)([]))) : (0, _rxjs.of)([]));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Ze4G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nextExternal", ()=>nextExternal);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function withImage(api, nextOpt) {
    if (nextOpt.isNone) return (0, _rxjs.of)(null);
    const [hash, threshold] = nextOpt.unwrap();
    return api.derive.democracy.preimage(hash).pipe((0, _rxjs.map)((image)=>({
            image,
            imageHash: (0, _utilJs.getImageHashBounded)(hash),
            threshold
        })));
}
function nextExternal(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query.democracy?.nextExternal ? api.query.democracy.nextExternal().pipe((0, _rxjs.switchMap)((nextOpt)=>withImage(api, nextOpt))) : (0, _rxjs.of)(null));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./util.js":"4iPp3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2VOl9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "preimages", ()=>preimages);
parcelHelpers.export(exports, "preimage", ()=>preimage);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function getUnrequestedTicket(status) {
    return status.ticket || status.deposit;
}
function getRequestedTicket(status) {
    return (status.maybeTicket || status.deposit).unwrapOrDefault();
}
function isDemocracyPreimage(api, imageOpt) {
    return !!imageOpt && !api.query.democracy["dispatchQueue"];
}
function constructProposal(api, [bytes, proposer, balance, at]) {
    let proposal;
    try {
        proposal = api.registry.createType("Call", bytes.toU8a(true));
    } catch (error) {
        console.error(error);
    }
    return {
        at,
        balance,
        proposal,
        proposer
    };
}
function parseDemocracy(api, imageOpt) {
    if (imageOpt.isNone) return;
    if (isDemocracyPreimage(api, imageOpt)) {
        const status = imageOpt.unwrap();
        if (status.isMissing) return;
        const { data, deposit, provider, since } = status.asAvailable;
        return constructProposal(api, [
            data,
            provider,
            deposit,
            since
        ]);
    }
    return constructProposal(api, imageOpt.unwrap());
}
function parseImage(api, [proposalHash, status, bytes]) {
    if (!status) return undefined;
    const [proposer, balance] = status.isUnrequested ? getUnrequestedTicket(status.asUnrequested) : getRequestedTicket(status.asRequested);
    let proposal;
    if (bytes) try {
        proposal = api.registry.createType("Call", bytes.toU8a(true));
    } catch (error) {
        console.error(error);
    }
    return {
        at: (0, _util.BN_ZERO),
        balance,
        proposal,
        proposalHash,
        proposer
    };
}
function getDemocracyImages(api, bounded) {
    const hashes = bounded.map((b)=>(0, _utilJs.getImageHashBounded)(b));
    return api.query.democracy["preimages"].multi(hashes).pipe((0, _rxjs.map)((images)=>images.map((imageOpt)=>parseDemocracy(api, imageOpt))));
}
function getImages(api, bounded) {
    const hashes = bounded.map((b)=>(0, _utilJs.getImageHashBounded)(b));
    const bytesType = api.registry.lookup.getTypeDef(api.query.preimage.preimageFor.creator.meta.type.asMap.key).type;
    return api.query.preimage.statusFor.multi(hashes).pipe((0, _rxjs.switchMap)((optStatus)=>{
        const statuses = optStatus.map((o)=>o.unwrapOr(null));
        const keys = statuses.map((s, i)=>s ? bytesType === "H256" ? hashes[i] : s.isRequested ? [
                hashes[i],
                s.asRequested.len.unwrapOr(0)
            ] : [
                hashes[i],
                s.asUnrequested.len
            ] : null).filter((p)=>!!p);
        return api.query.preimage.preimageFor.multi(keys).pipe((0, _rxjs.map)((optBytes)=>{
            let ptr = -1;
            return statuses.map((s, i)=>s ? [
                    hashes[i],
                    s,
                    optBytes[++ptr].unwrapOr(null)
                ] : [
                    hashes[i],
                    null,
                    null
                ]).map((v)=>parseImage(api, v));
        }));
    }));
}
function preimages(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (hashes)=>hashes.length ? (0, _util.isFunction)(api.query.democracy["preimages"]) ? getDemocracyImages(api, hashes) : (0, _util.isFunction)(api.query.preimage.preimageFor) ? getImages(api, hashes) : (0, _rxjs.of)([]) : (0, _rxjs.of)([]));
}
const preimage = /*#__PURE__*/ (0, _indexJs.firstMemo)((api, hash)=>api.derive.democracy.preimages([
        hash
    ]));

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./util.js":"4iPp3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lUAgy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "proposals", ()=>proposals);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function isNewDepositors(depositors) {
    // Detect balance...
    return (0, _util.isFunction)(depositors[1].mul);
}
function parse([proposals, images, optDepositors]) {
    return proposals.filter(([, , proposer], index)=>!!optDepositors[index]?.isSome && !proposer.isEmpty).map(([index, hash, proposer], proposalIndex)=>{
        const depositors = optDepositors[proposalIndex].unwrap();
        return (0, _util.objectSpread)({
            image: images[proposalIndex],
            imageHash: (0, _utilJs.getImageHashBounded)(hash),
            index,
            proposer
        }, isNewDepositors(depositors) ? {
            balance: depositors[1],
            seconds: depositors[0]
        } : {
            balance: depositors[0],
            seconds: depositors[1]
        });
    });
}
function proposals(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>(0, _util.isFunction)(api.query.democracy?.publicProps) ? api.query.democracy.publicProps().pipe((0, _rxjs.switchMap)((proposals)=>proposals.length ? (0, _rxjs.combineLatest)([
                (0, _rxjs.of)(proposals),
                api.derive.democracy.preimages(proposals.map(([, hash])=>hash)),
                api.query.democracy.depositOf.multi(proposals.map(([index])=>index))
            ]) : (0, _rxjs.of)([
                [],
                [],
                []
            ])), (0, _rxjs.map)(parse)) : (0, _rxjs.of)([]));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./util.js":"4iPp3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Ocun":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "referendumIds", ()=>referendumIds);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function referendumIds(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query.democracy?.lowestUnbaked ? api.queryMulti([
            api.query.democracy.lowestUnbaked,
            api.query.democracy.referendumCount
        ]).pipe((0, _rxjs.map)(([first, total])=>total.gt(first) ? [
                ...Array(total.sub(first).toNumber())
            ].map((_, i)=>first.addn(i)) : [])) : (0, _rxjs.of)([]));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ejHyM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "referendums", ()=>referendums);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function referendums(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.derive.democracy.referendumsActive().pipe((0, _rxjs.switchMap)((referendums)=>referendums.length ? (0, _rxjs.combineLatest)([
                (0, _rxjs.of)(referendums),
                api.derive.democracy._referendumsVotes(referendums)
            ]) : (0, _rxjs.of)([
                [],
                []
            ])), (0, _rxjs.map)(([referendums, votes])=>referendums.map((referendum, index)=>(0, _util.objectSpread)({}, referendum, votes[index])))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eGTdF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "referendumsActive", ()=>referendumsActive);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function referendumsActive(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.derive.democracy.referendumIds().pipe((0, _rxjs.switchMap)((ids)=>ids.length ? api.derive.democracy.referendumsInfo(ids) : (0, _rxjs.of)([]))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"52gBy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "referendumsFinished", ()=>referendumsFinished);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function referendumsFinished(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.derive.democracy.referendumIds().pipe((0, _rxjs.switchMap)((ids)=>api.query.democracy.referendumInfoOf.multi(ids)), (0, _rxjs.map)((infos)=>infos.map((o)=>o.unwrapOr(null)).filter((info)=>!!info && info.isFinished).map((info)=>info.asFinished))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8vHzK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_referendumVotes", ()=>_referendumVotes);
parcelHelpers.export(exports, "_referendumsVotes", ()=>_referendumsVotes);
parcelHelpers.export(exports, "_referendumInfo", ()=>_referendumInfo);
parcelHelpers.export(exports, "referendumsInfo", ()=>referendumsInfo);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function votesPrev(api, referendumId) {
    return api.query.democracy["votersFor"](referendumId).pipe((0, _rxjs.switchMap)((votersFor)=>(0, _rxjs.combineLatest)([
            (0, _rxjs.of)(votersFor),
            votersFor.length ? api.query.democracy["voteOf"].multi(votersFor.map((accountId)=>[
                    referendumId,
                    accountId
                ])) : (0, _rxjs.of)([]),
            api.derive.balances.votingBalances(votersFor)
        ])), (0, _rxjs.map)(([votersFor, votes, balances])=>votersFor.map((accountId, index)=>({
                accountId,
                balance: balances[index].votingBalance || api.registry.createType("Balance"),
                isDelegating: false,
                vote: votes[index] || api.registry.createType("Vote")
            }))));
}
function extractVotes(mapped, referendumId) {
    return mapped.filter(([, voting])=>voting.isDirect).map(([accountId, voting])=>[
            accountId,
            voting.asDirect.votes.filter(([idx])=>idx.eq(referendumId))
        ]).filter(([, directVotes])=>!!directVotes.length).reduce((result, [accountId, votes])=>// FIXME We are ignoring split votes
        votes.reduce((result, [, vote])=>{
            if (vote.isStandard) result.push((0, _util.objectSpread)({
                accountId,
                isDelegating: false
            }, vote.asStandard));
            return result;
        }, result), []);
}
function votesCurr(api, referendumId) {
    return api.query.democracy.votingOf.entries().pipe((0, _rxjs.map)((allVoting)=>{
        const mapped = allVoting.map(([{ args: [accountId] }, voting])=>[
                accountId,
                voting
            ]);
        const votes = extractVotes(mapped, referendumId);
        const delegations = mapped.filter(([, voting])=>voting.isDelegating).map(([accountId, voting])=>[
                accountId,
                voting.asDelegating
            ]);
        // add delegations
        delegations.forEach(([accountId, { balance, conviction, target }])=>{
            // Are we delegating to a delegator
            const toDelegator = delegations.find(([accountId])=>accountId.eq(target));
            const to = votes.find(({ accountId })=>accountId.eq(toDelegator ? toDelegator[0] : target));
            // this delegation has a target
            if (to) votes.push({
                accountId,
                balance,
                isDelegating: true,
                vote: api.registry.createType("Vote", {
                    aye: to.vote.isAye,
                    conviction
                })
            });
        });
        return votes;
    }));
}
function _referendumVotes(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (referendum)=>(0, _rxjs.combineLatest)([
            api.derive.democracy.sqrtElectorate(),
            (0, _util.isFunction)(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)
        ]).pipe((0, _rxjs.map)(([sqrtElectorate, votes])=>(0, _utilJs.calcVotes)(sqrtElectorate, referendum, votes))));
}
function _referendumsVotes(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (referendums)=>referendums.length ? (0, _rxjs.combineLatest)(referendums.map((referendum)=>api.derive.democracy._referendumVotes(referendum))) : (0, _rxjs.of)([]));
}
function _referendumInfo(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (index, info)=>{
        const status = (0, _utilJs.getStatus)(info);
        return status ? api.derive.democracy.preimage(status.proposal || status.proposalHash).pipe((0, _rxjs.map)((image)=>({
                image,
                imageHash: (0, _utilJs.getImageHash)(status),
                index: api.registry.createType("ReferendumIndex", index),
                status
            }))) : (0, _rxjs.of)(null);
    });
}
function referendumsInfo(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (ids)=>ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe((0, _rxjs.switchMap)((infos)=>(0, _rxjs.combineLatest)(ids.map((id, index)=>api.derive.democracy._referendumInfo(id, infos[index])))), (0, _rxjs.map)((infos)=>infos.filter((r)=>!!r))) : (0, _rxjs.of)([]));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./util.js":"4iPp3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lluEi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sqrtElectorate", ()=>sqrtElectorate);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function sqrtElectorate(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query.balances.totalIssuance().pipe((0, _rxjs.map)((0, _util.bnSqrt))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fNaCt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _infoJs = require("./info.js");
parcelHelpers.exportAll(_infoJs, exports);

},{"./info.js":"aozOV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aozOV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @name info
 * @returns An object containing the combined results of the storage queries for
 * all relevant election module properties.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.elections.info(({ members, candidates }) => {
 *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
 * });
 * ```
 */ parcelHelpers.export(exports, "info", ()=>info);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function isSeatHolder(value) {
    return !Array.isArray(value);
}
function isCandidateTuple(value) {
    return Array.isArray(value);
}
function getAccountTuple(value) {
    return isSeatHolder(value) ? [
        value.who,
        value.stake
    ] : value;
}
function getCandidate(value) {
    return isCandidateTuple(value) ? value[0] : value;
}
function sortAccounts([, balanceA], [, balanceB]) {
    return balanceB.cmp(balanceA);
}
function getConstants(api, elections) {
    return elections ? {
        candidacyBond: api.consts[elections].candidacyBond,
        desiredRunnersUp: api.consts[elections].desiredRunnersUp,
        desiredSeats: api.consts[elections].desiredMembers,
        termDuration: api.consts[elections].termDuration,
        votingBond: api.consts[elections]["votingBond"],
        votingBondBase: api.consts[elections].votingBondBase,
        votingBondFactor: api.consts[elections].votingBondFactor
    } : {};
}
function getModules(api) {
    const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName, "council") || [
        "council"
    ];
    const elections = api.query["phragmenElection"] ? "phragmenElection" : api.query["electionsPhragmen"] ? "electionsPhragmen" : api.query.elections ? "elections" : null;
    return [
        council,
        elections
    ];
}
function queryAll(api, council, elections) {
    return api.queryMulti([
        api.query[council].members,
        api.query[elections].candidates,
        api.query[elections].members,
        api.query[elections].runnersUp
    ]);
}
function queryCouncil(api, council) {
    return (0, _rxjs.combineLatest)([
        api.query[council].members(),
        (0, _rxjs.of)([]),
        (0, _rxjs.of)([]),
        (0, _rxjs.of)([])
    ]);
}
function info(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>{
        const [council, elections] = getModules(api);
        return (elections ? queryAll(api, council, elections) : queryCouncil(api, council)).pipe((0, _rxjs.map)(([councilMembers, candidates, members, runnersUp])=>(0, _util.objectSpread)({}, getConstants(api, elections), {
                candidateCount: api.registry.createType("u32", candidates.length),
                candidates: candidates.map(getCandidate),
                members: members.length ? members.map(getAccountTuple).sort(sortAccounts) : councilMembers.map((a)=>[
                        a,
                        api.registry.createType("Balance")
                    ]),
                runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
            })));
    });
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kJWmI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _receivedHeartbeatsJs = require("./receivedHeartbeats.js");
parcelHelpers.exportAll(_receivedHeartbeatsJs, exports);

},{"./receivedHeartbeats.js":"cTGyA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cTGyA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
 */ parcelHelpers.export(exports, "receivedHeartbeats", ()=>receivedHeartbeats);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function mapResult([result, validators, heartbeats, numBlocks]) {
    validators.forEach((validator, index)=>{
        const validatorId = validator.toString();
        const blockCount = numBlocks[index];
        const hasMessage = !heartbeats[index].isEmpty;
        const prev = result[validatorId];
        if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) result[validatorId] = {
            blockCount,
            hasMessage,
            isOnline: hasMessage || blockCount.gt((0, _util.BN_ZERO))
        };
    });
    return result;
}
function receivedHeartbeats(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query.imOnline?.receivedHeartbeats ? api.derive.staking.overview().pipe((0, _rxjs.switchMap)(({ currentIndex, validators })=>(0, _rxjs.combineLatest)([
                (0, _rxjs.of)({}),
                (0, _rxjs.of)(validators),
                api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index)=>[
                        currentIndex,
                        index
                    ])),
                api.query.imOnline.authoredBlocks.multi(validators.map((address)=>[
                        currentIndex,
                        address
                    ]))
            ])), (0, _rxjs.map)(mapResult)) : (0, _rxjs.of)({}));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"61FaC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "members", ()=>members);
parcelHelpers.export(exports, "hasProposals", ()=>hasProposals);
parcelHelpers.export(exports, "proposal", ()=>proposal);
parcelHelpers.export(exports, "proposalCount", ()=>proposalCount);
parcelHelpers.export(exports, "proposalHashes", ()=>proposalHashes);
parcelHelpers.export(exports, "proposals", ()=>proposals);
parcelHelpers.export(exports, "prime", ()=>prime);
var _indexJs = require("../collective/index.js");
const members = /*#__PURE__*/ (0, _indexJs.members)("membership");
const hasProposals = /*#__PURE__*/ (0, _indexJs.hasProposals)("membership");
const proposal = /*#__PURE__*/ (0, _indexJs.proposal)("membership");
const proposalCount = /*#__PURE__*/ (0, _indexJs.proposalCount)("membership");
const proposalHashes = /*#__PURE__*/ (0, _indexJs.proposalHashes)("membership");
const proposals = /*#__PURE__*/ (0, _indexJs.proposals)("membership");
const prime = /*#__PURE__*/ (0, _indexJs.prime)("membership");

},{"../collective/index.js":"8aK0Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bJVqc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _infoJs = require("./info.js");
parcelHelpers.exportAll(_infoJs, exports);
var _overviewJs = require("./overview.js");
parcelHelpers.exportAll(_overviewJs, exports);

},{"./info.js":"aQdgt","./overview.js":"aj0TU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aQdgt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "info", ()=>info);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function parseActive(id, active) {
    const found = active.find(([paraId])=>paraId === id);
    if (found && found[1].isSome) {
        const [collatorId, retriable] = found[1].unwrap();
        return (0, _util.objectSpread)({
            collatorId
        }, retriable.isWithRetries ? {
            isRetriable: true,
            retries: retriable.asWithRetries.toNumber()
        } : {
            isRetriable: false,
            retries: 0
        });
    }
    return null;
}
function parseCollators(id, collatorQueue) {
    return collatorQueue.map((queue)=>{
        const found = queue.find(([paraId])=>paraId === id);
        return found ? found[1] : null;
    });
}
function parse(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
    if (info.isNone) return null;
    return {
        active: parseActive(id, active),
        didUpdate: (0, _utilJs.didUpdateToBool)(didUpdate, id),
        heads,
        id,
        info: (0, _util.objectSpread)({
            id
        }, info.unwrap()),
        pendingSwapId: pendingSwap.unwrapOr(null),
        relayDispatchQueue,
        retryCollators: parseCollators(id, retryQueue),
        selectedCollators: parseCollators(id, selectedThreads)
    };
}
function info(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (id)=>api.query["registrar"] && api.query["parachains"] ? api.queryMulti([
            api.query["registrar"]["active"],
            api.query["registrar"]["retryQueue"],
            api.query["registrar"]["selectedThreads"],
            api.query["parachains"]["didUpdate"],
            [
                api.query["registrar"]["paras"],
                id
            ],
            [
                api.query["registrar"]["pendingSwap"],
                id
            ],
            [
                api.query["parachains"]["heads"],
                id
            ],
            [
                api.query["parachains"]["relayDispatchQueue"],
                id
            ]
        ]).pipe((0, _rxjs.map)((result)=>parse(api.registry.createType("ParaId", id), result))) : (0, _rxjs.of)(null));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./util.js":"bQchs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bQchs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "didUpdateToBool", ()=>didUpdateToBool);
function didUpdateToBool(didUpdate, id) {
    return didUpdate.isSome ? didUpdate.unwrap().some((paraId)=>paraId.eq(id)) : false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aj0TU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "overview", ()=>overview);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function parse([ids, didUpdate, relayDispatchQueueSizes, infos, pendingSwaps]) {
    return ids.map((id, index)=>({
            didUpdate: (0, _utilJs.didUpdateToBool)(didUpdate, id),
            id,
            info: (0, _util.objectSpread)({
                id
            }, infos[index].unwrapOr(null)),
            pendingSwapId: pendingSwaps[index].unwrapOr(null),
            relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
        }));
}
function overview(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query["registrar"]?.["parachains"] && api.query["parachains"] ? api.query["registrar"]["parachains"]().pipe((0, _rxjs.switchMap)((paraIds)=>(0, _rxjs.combineLatest)([
                (0, _rxjs.of)(paraIds),
                api.query["parachains"]["didUpdate"](),
                api.query["parachains"]["relayDispatchQueueSize"].multi(paraIds),
                api.query["registrar"]["paras"].multi(paraIds),
                api.query["registrar"]["pendingSwap"].multi(paraIds)
            ])), (0, _rxjs.map)(parse)) : (0, _rxjs.of)([]));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./util.js":"bQchs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9XXME":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexesJs = require("./indexes.js");
parcelHelpers.exportAll(_indexesJs, exports);
var _infoJs = require("./info.js");
parcelHelpers.exportAll(_infoJs, exports);
var _progressJs = require("./progress.js");
parcelHelpers.exportAll(_progressJs, exports);

},{"./indexes.js":"c5SUY","./info.js":"dovQI","./progress.js":"5CuQX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c5SUY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "indexes", ()=>indexes);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
    return {
        activeEra,
        activeEraStart,
        currentEra,
        currentIndex,
        validatorCount
    };
}
function queryStaking(api) {
    return api.queryMulti([
        api.query.session.currentIndex,
        api.query.staking.activeEra,
        api.query.staking.currentEra,
        api.query.staking.validatorCount
    ]).pipe((0, _rxjs.map)(([currentIndex, activeOpt, currentEra, validatorCount])=>{
        const { index, start } = activeOpt.unwrapOrDefault();
        return parse([
            currentIndex,
            index,
            start,
            currentEra.unwrapOrDefault(),
            validatorCount
        ]);
    }));
}
function querySession(api) {
    return api.query.session.currentIndex().pipe((0, _rxjs.map)((currentIndex)=>parse([
            currentIndex,
            api.registry.createType("EraIndex"),
            api.registry.createType("Option<Moment>"),
            api.registry.createType("EraIndex"),
            api.registry.createType("u32")
        ])));
}
function empty(api) {
    return (0, _rxjs.of)(parse([
        api.registry.createType("SessionIndex", 1),
        api.registry.createType("EraIndex"),
        api.registry.createType("Option<Moment>"),
        api.registry.createType("EraIndex"),
        api.registry.createType("u32")
    ]));
}
function indexes(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dovQI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
 */ parcelHelpers.export(exports, "info", ()=>info);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function info(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.derive.session.indexes().pipe((0, _rxjs.map)((indexes)=>{
            const sessionLength = api.consts?.babe?.epochDuration || api.registry.createType("u64", 1);
            const sessionsPerEra = api.consts?.staking?.sessionsPerEra || api.registry.createType("SessionIndex", 1);
            return (0, _util.objectSpread)({
                eraLength: api.registry.createType("BlockNumber", sessionsPerEra.mul(sessionLength)),
                isEpoch: !!api.query.babe,
                sessionLength,
                sessionsPerEra
            }, indexes);
        })));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5CuQX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
 */ parcelHelpers.export(exports, "progress", ()=>progress);
parcelHelpers.export(exports, "eraLength", ()=>eraLength);
parcelHelpers.export(exports, "eraProgress", ()=>eraProgress);
parcelHelpers.export(exports, "sessionProgress", ()=>sessionProgress);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function withProgressField(field) {
    return (instanceId, api)=>(0, _indexJs.memo)(instanceId, ()=>api.derive.session.progress().pipe((0, _rxjs.map)((info)=>info[field])));
}
function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
    const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
    const sessionProgress = currentSlot.sub(epochStartSlot);
    const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
    return (0, _util.objectSpread)({
        eraProgress: api.registry.createType("BlockNumber", eraProgress),
        sessionProgress: api.registry.createType("BlockNumber", sessionProgress)
    }, info);
}
function queryAura(api) {
    return api.derive.session.info().pipe((0, _rxjs.map)((info)=>(0, _util.objectSpread)({
            eraProgress: api.registry.createType("BlockNumber"),
            sessionProgress: api.registry.createType("BlockNumber")
        }, info)));
}
function queryBabe(api) {
    return api.derive.session.info().pipe((0, _rxjs.switchMap)((info)=>(0, _rxjs.combineLatest)([
            (0, _rxjs.of)(info),
            // we may have no staking, but have babe (permissioned)
            api.query.staking?.erasStartSessionIndex ? api.queryMulti([
                api.query.babe.currentSlot,
                api.query.babe.epochIndex,
                api.query.babe.genesisSlot,
                [
                    api.query.staking.erasStartSessionIndex,
                    info.activeEra
                ]
            ]) : api.queryMulti([
                api.query.babe.currentSlot,
                api.query.babe.epochIndex,
                api.query.babe.genesisSlot
            ])
        ])), (0, _rxjs.map)(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]])=>[
            info,
            [
                currentSlot,
                epochIndex,
                genesisSlot,
                optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType("SessionIndex", 1)
            ]
        ]));
}
function progress(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query.babe ? queryBabe(api).pipe((0, _rxjs.map)(([info, slots])=>createDerive(api, info, slots))) : queryAura(api));
}
const eraLength = /*#__PURE__*/ withProgressField("eraLength");
const eraProgress = /*#__PURE__*/ withProgressField("eraProgress");
const sessionProgress = /*#__PURE__*/ withProgressField("sessionProgress");

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Vl0X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _candidatesJs = require("./candidates.js");
parcelHelpers.exportAll(_candidatesJs, exports);
var _infoJs = require("./info.js");
parcelHelpers.exportAll(_infoJs, exports);
var _memberJs = require("./member.js");
parcelHelpers.exportAll(_memberJs, exports);
var _membersJs = require("./members.js");
parcelHelpers.exportAll(_membersJs, exports);

},{"./candidates.js":"91EbU","./info.js":"8i4AT","./member.js":"3MXLC","./members.js":"60Hl6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"91EbU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Get the candidate info for a society
 */ parcelHelpers.export(exports, "candidates", ()=>candidates);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function getPrev(api) {
    return api.query.society.candidates().pipe((0, _rxjs.switchMap)((candidates)=>(0, _rxjs.combineLatest)([
            (0, _rxjs.of)(candidates),
            api.query.society["suspendedCandidates"].multi(candidates.map(({ who })=>who))
        ])), (0, _rxjs.map)(([candidates, suspended])=>candidates.map(({ kind, value, who }, index)=>({
                accountId: who,
                isSuspended: suspended[index].isSome,
                kind,
                value
            }))));
}
function getCurr(api) {
    return api.query.society.candidates.entries().pipe((0, _rxjs.map)((entries)=>entries.filter(([, opt])=>opt.isSome).map(([{ args: [accountId] }, opt])=>[
                accountId,
                opt.unwrap()
            ])// FIXME We are missing the new fields from the candidate record
        .map(([accountId, { bid, kind }])=>({
                accountId,
                isSuspended: false,
                kind,
                value: bid
            }))));
}
function candidates(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query.society["suspendedCandidates"] && api.query.society.candidates.creator.meta.type.isPlain ? getPrev(api) : getCurr(api));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8i4AT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Get the overall info for a society
 */ parcelHelpers.export(exports, "info", ()=>info);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function info(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>(0, _rxjs.combineLatest)([
            api.query.society.bids(),
            api.query.society["defender"] ? api.query.society["defender"]() : (0, _rxjs.of)(undefined),
            api.query.society.founder(),
            api.query.society.head(),
            api.query.society["maxMembers"] ? api.query.society["maxMembers"]() : (0, _rxjs.of)(undefined),
            api.query.society.pot()
        ]).pipe((0, _rxjs.map)(([bids, defender, founder, head, maxMembers, pot])=>({
                bids,
                defender: defender?.unwrapOr(undefined),
                founder: founder.unwrapOr(undefined),
                hasDefender: defender?.isSome && head.isSome && !head.eq(defender) || false,
                head: head.unwrapOr(undefined),
                maxMembers,
                pot
            }))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3MXLC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Get the member info for a society
 */ parcelHelpers.export(exports, "member", ()=>member);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function member(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId)=>api.derive.society._members([
            accountId
        ]).pipe((0, _rxjs.map)(([result])=>result)));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"60Hl6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_members", ()=>_members);
/**
 * @description Get the member info for a society
 */ parcelHelpers.export(exports, "members", ()=>members);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function _membersPrev(api, accountIds) {
    return (0, _rxjs.combineLatest)([
        (0, _rxjs.of)(accountIds),
        api.query.society.payouts.multi(accountIds),
        api.query.society["strikes"].multi(accountIds),
        api.query.society.defenderVotes.multi(accountIds),
        api.query.society.suspendedMembers.multi(accountIds),
        api.query.society["vouching"].multi(accountIds)
    ]).pipe((0, _rxjs.map)(([accountIds, payouts, strikes, defenderVotes, suspended, vouching])=>accountIds.map((accountId, index)=>({
                accountId,
                isDefenderVoter: defenderVotes[index].isSome,
                isSuspended: suspended[index].isTrue,
                payouts: payouts[index],
                strikes: strikes[index],
                vote: defenderVotes[index].unwrapOr(undefined),
                vouching: vouching[index].unwrapOr(undefined)
            }))));
}
function _membersCurr(api, accountIds) {
    return (0, _rxjs.combineLatest)([
        (0, _rxjs.of)(accountIds),
        api.query.society.members.multi(accountIds),
        api.query.society.payouts.multi(accountIds),
        api.query.society.defenderVotes.multi(accountIds),
        api.query.society.suspendedMembers.multi(accountIds)
    ]).pipe((0, _rxjs.map)(([accountIds, members, payouts, defenderVotes, suspendedMembers])=>accountIds.map((accountId, index)=>members[index].isSome ? {
                accountId,
                isDefenderVoter: defenderVotes[index].isSome ? defenderVotes[index].unwrap().approve.isTrue : false,
                isSuspended: suspendedMembers[index].isSome,
                member: members[index].unwrap(),
                payouts: payouts[index].payouts
            } : null).filter((m)=>!!m).map(({ accountId, isDefenderVoter, isSuspended, member, payouts })=>({
                accountId,
                isDefenderVoter,
                isSuspended,
                payouts,
                strikes: member.strikes,
                vouching: member.vouching.unwrapOr(undefined)
            }))));
}
function _members(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountIds)=>api.query.society.members.creator.meta.type.isMap ? _membersCurr(api, accountIds) : _membersPrev(api, accountIds));
}
function members(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query.society.members.creator.meta.type.isMap ? api.query.society.members.keys().pipe((0, _rxjs.switchMap)((keys)=>api.derive.society._members(keys.map(({ args: [accountId] })=>accountId)))) : api.query.society.members().pipe((0, _rxjs.switchMap)((members)=>api.derive.society._members(members))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ZPwx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _accountJs = require("./account.js");
parcelHelpers.exportAll(_accountJs, exports);
var _currentPointsJs = require("./currentPoints.js");
parcelHelpers.exportAll(_currentPointsJs, exports);
var _electedInfoJs = require("./electedInfo.js");
parcelHelpers.exportAll(_electedInfoJs, exports);
var _erasExposureJs = require("./erasExposure.js");
parcelHelpers.exportAll(_erasExposureJs, exports);
var _erasHistoricJs = require("./erasHistoric.js");
parcelHelpers.exportAll(_erasHistoricJs, exports);
var _erasPointsJs = require("./erasPoints.js");
parcelHelpers.exportAll(_erasPointsJs, exports);
var _erasPrefsJs = require("./erasPrefs.js");
parcelHelpers.exportAll(_erasPrefsJs, exports);
var _erasRewardsJs = require("./erasRewards.js");
parcelHelpers.exportAll(_erasRewardsJs, exports);
var _erasSlashesJs = require("./erasSlashes.js");
parcelHelpers.exportAll(_erasSlashesJs, exports);
var _keysJs = require("./keys.js");
parcelHelpers.exportAll(_keysJs, exports);
var _overviewJs = require("./overview.js");
parcelHelpers.exportAll(_overviewJs, exports);
var _ownExposureJs = require("./ownExposure.js");
parcelHelpers.exportAll(_ownExposureJs, exports);
var _ownSlashesJs = require("./ownSlashes.js");
parcelHelpers.exportAll(_ownSlashesJs, exports);
var _queryJs = require("./query.js");
parcelHelpers.exportAll(_queryJs, exports);
var _stakerExposureJs = require("./stakerExposure.js");
parcelHelpers.exportAll(_stakerExposureJs, exports);
var _stakerPointsJs = require("./stakerPoints.js");
parcelHelpers.exportAll(_stakerPointsJs, exports);
var _stakerPrefsJs = require("./stakerPrefs.js");
parcelHelpers.exportAll(_stakerPrefsJs, exports);
var _stakerRewardsJs = require("./stakerRewards.js");
parcelHelpers.exportAll(_stakerRewardsJs, exports);
var _stakerSlashesJs = require("./stakerSlashes.js");
parcelHelpers.exportAll(_stakerSlashesJs, exports);
var _stashesJs = require("./stashes.js");
parcelHelpers.exportAll(_stashesJs, exports);
var _validatorsJs = require("./validators.js");
parcelHelpers.exportAll(_validatorsJs, exports);
var _waitingInfoJs = require("./waitingInfo.js");
parcelHelpers.exportAll(_waitingInfoJs, exports);

},{"./account.js":"j71Lj","./currentPoints.js":"bRsO3","./electedInfo.js":"kBh5E","./erasExposure.js":"djRll","./erasHistoric.js":"8mtwJ","./erasPoints.js":"epIv7","./erasPrefs.js":"fIU9A","./erasRewards.js":"a2qcT","./erasSlashes.js":"kQdGA","./keys.js":"dnGVX","./overview.js":"ixb2d","./ownExposure.js":"bLKlN","./ownSlashes.js":"eeIjB","./query.js":"5npVy","./stakerExposure.js":"kxCkY","./stakerPoints.js":"84zyw","./stakerPrefs.js":"LSzUF","./stakerRewards.js":"cQx06","./stakerSlashes.js":"5pEhQ","./stashes.js":"g06iW","./validators.js":"afojG","./waitingInfo.js":"e1Gl2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j71Lj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description From a list of stashes, fill in all the relevant staking details
 */ parcelHelpers.export(exports, "accounts", ()=>accounts);
parcelHelpers.export(exports, "account", ()=>account);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
const QUERY_OPTS = {
    withDestination: true,
    withLedger: true,
    withNominations: true,
    withPrefs: true
};
function groupByEra(list) {
    return list.reduce((map, { era, value })=>{
        const key = era.toString();
        map[key] = (map[key] || (0, _util.BN_ZERO)).add(value.unwrap());
        return map;
    }, {});
}
function calculateUnlocking(api, stakingLedger, sessionInfo) {
    const results = Object.entries(groupByEra((stakingLedger?.unlocking || []).filter(({ era })=>era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value])=>({
            remainingEras: new (0, _util.BN)(eraString).isub(sessionInfo.activeEra),
            value: api.registry.createType("Balance", value)
        }));
    return results.length ? results : undefined;
}
function redeemableSum(api, stakingLedger, sessionInfo) {
    return api.registry.createType("Balance", (stakingLedger?.unlocking || []).reduce((total, { era, value })=>{
        // aligns with https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/pallet/mod.rs#L973-L975
        // (ensure currentEra >= era passed, as per https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/lib.rs#L477-L494)
        // NOTE: Previously we used activeEra >= era, which is incorrect for the last session
        return era.unwrap().gt(sessionInfo.currentEra) ? total : total.iadd(value.unwrap());
    }, new (0, _util.BN)(0)));
}
function parseResult(api, sessionInfo, keys, query) {
    return (0, _util.objectSpread)({}, keys, query, {
        redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
        unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
    });
}
function accounts(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountIds, opts = QUERY_OPTS)=>api.derive.session.info().pipe((0, _rxjs.switchMap)((sessionInfo)=>(0, _rxjs.combineLatest)([
                api.derive.staking.keysMulti(accountIds),
                api.derive.staking.queryMulti(accountIds, opts)
            ]).pipe((0, _rxjs.map)(([keys, queries])=>queries.map((q, index)=>parseResult(api, sessionInfo, keys[index], q)))))));
}
const account = /*#__PURE__*/ (0, _indexJs.firstMemo)((api, accountId, opts)=>api.derive.staking.accounts([
        accountId
    ], opts));

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bRsO3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Retrieve the staking overview, including elected and points earned
 */ parcelHelpers.export(exports, "currentPoints", ()=>currentPoints);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function currentPoints(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.derive.session.indexes().pipe((0, _rxjs.switchMap)(({ activeEra })=>api.query.staking.erasRewardPoints(activeEra))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kBh5E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "electedInfo", ()=>electedInfo);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
const DEFAULT_FLAGS = {
    withController: true,
    withExposure: true,
    withPrefs: true
};
function combineAccounts(nextElected, validators) {
    return (0, _util.arrayFlatten)([
        nextElected,
        validators.filter((v)=>!nextElected.find((n)=>n.eq(v)))
    ]);
}
function electedInfo(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (flags = DEFAULT_FLAGS)=>api.derive.staking.validators().pipe((0, _rxjs.switchMap)(({ nextElected, validators })=>api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe((0, _rxjs.map)((info)=>({
                    info,
                    nextElected,
                    validators
                }))))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"djRll":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_eraExposure", ()=>_eraExposure);
parcelHelpers.export(exports, "eraExposure", ()=>eraExposure);
parcelHelpers.export(exports, "_erasExposure", ()=>_erasExposure);
parcelHelpers.export(exports, "erasExposure", ()=>erasExposure);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _cacheJs = require("./cache.js");
var _utilJs = require("./util.js");
const CACHE_KEY = "eraExposure";
function mapStakers(era, stakers) {
    const nominators = {};
    const validators = {};
    stakers.forEach(([key, exposure])=>{
        const validatorId = key.args[1].toString();
        validators[validatorId] = exposure;
        exposure.others.forEach(({ who }, validatorIndex)=>{
            const nominatorId = who.toString();
            nominators[nominatorId] = nominators[nominatorId] || [];
            nominators[nominatorId].push({
                validatorId,
                validatorIndex
            });
        });
    });
    return {
        era,
        nominators,
        validators
    };
}
function _eraExposure(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (era, withActive = false)=>{
        const [cacheKey, cached] = (0, _cacheJs.getEraCache)(CACHE_KEY, era, withActive);
        return cached ? (0, _rxjs.of)(cached) : api.query.staking.erasStakersClipped.entries(era).pipe((0, _rxjs.map)((r)=>(0, _cacheJs.setEraCache)(cacheKey, withActive, mapStakers(era, r))));
    });
}
const eraExposure = /*#__PURE__*/ (0, _utilJs.singleEra)("_eraExposure");
const _erasExposure = /*#__PURE__*/ (0, _utilJs.combineEras)("_eraExposure");
const erasExposure = /*#__PURE__*/ (0, _utilJs.erasHistoricApply)("_erasExposure");

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./cache.js":"gqSnj","./util.js":"e5Mnf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gqSnj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEraCache", ()=>getEraCache);
parcelHelpers.export(exports, "getEraMultiCache", ()=>getEraMultiCache);
parcelHelpers.export(exports, "setEraCache", ()=>setEraCache);
parcelHelpers.export(exports, "setEraMultiCache", ()=>setEraMultiCache);
parcelHelpers.export(exports, "filterCachedEras", ()=>filterCachedEras);
var _indexJs = require("../util/index.js");
function getEraCache(CACHE_KEY, era, withActive) {
    const cacheKey = `${CACHE_KEY}-${era.toString()}`;
    return [
        cacheKey,
        withActive ? undefined : (0, _indexJs.deriveCache).get(cacheKey)
    ];
}
function getEraMultiCache(CACHE_KEY, eras, withActive) {
    const cached = withActive ? [] : eras.map((e)=>(0, _indexJs.deriveCache).get(`${CACHE_KEY}-${e.toString()}`)).filter((v)=>!!v);
    return cached;
}
function setEraCache(cacheKey, withActive, value) {
    !withActive && (0, _indexJs.deriveCache).set(cacheKey, value);
    return value;
}
function setEraMultiCache(CACHE_KEY, withActive, values) {
    !withActive && values.forEach((v)=>(0, _indexJs.deriveCache).set(`${CACHE_KEY}-${v.era.toString()}`, v));
    return values;
}
function filterCachedEras(eras, cached, query) {
    return eras.map((e)=>cached.find(({ era })=>e.eq(era)) || query.find(({ era })=>e.eq(era))).filter((e)=>!!e);
}

},{"../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e5Mnf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterEras", ()=>filterEras);
parcelHelpers.export(exports, "erasHistoricApply", ()=>erasHistoricApply);
parcelHelpers.export(exports, "erasHistoricApplyAccount", ()=>erasHistoricApplyAccount);
parcelHelpers.export(exports, "singleEra", ()=>singleEra);
parcelHelpers.export(exports, "combineEras", ()=>combineEras);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
const ERA_CHUNK_SIZE = 14;
function chunkEras(eras, fn) {
    const chunked = (0, _util.arrayChunk)(eras, ERA_CHUNK_SIZE);
    let index = 0;
    const subject = new (0, _rxjs.BehaviorSubject)(chunked[index]);
    return subject.pipe((0, _rxjs.switchMap)(fn), (0, _rxjs.tap)(()=>{
        (0, _util.nextTick)(()=>{
            index++;
            index === chunked.length ? subject.complete() : subject.next(chunked[index]);
        });
    }), (0, _rxjs.toArray)(), (0, _rxjs.map)((0, _util.arrayFlatten)));
}
function filterEras(eras, list) {
    return eras.filter((e)=>!list.some(({ era })=>e.eq(era)));
}
function erasHistoricApply(fn) {
    return (instanceId, api)=>// Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        (0, _indexJs.memo)(instanceId, (withActive = false)=>api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)((e)=>api.derive.staking[fn](e, withActive))));
}
function erasHistoricApplyAccount(fn) {
    return (instanceId, api)=>// Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        (0, _indexJs.memo)(instanceId, (accountId, withActive = false)=>api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)((e)=>api.derive.staking[fn](accountId, e, withActive))));
}
function singleEra(fn) {
    return (instanceId, api)=>// Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        (0, _indexJs.memo)(instanceId, (era)=>api.derive.staking[fn](era, true));
}
function combineEras(fn) {
    return (instanceId, api)=>// Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        (0, _indexJs.memo)(instanceId, (eras, withActive)=>!eras.length ? (0, _rxjs.of)([]) : chunkEras(eras, (eras)=>(0, _rxjs.combineLatest)(eras.map((e)=>api.derive.staking[fn](e, withActive)))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8mtwJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "erasHistoric", ()=>erasHistoric);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function erasHistoric(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (withActive)=>(0, _rxjs.combineLatest)([
            api.query.staking.activeEra(),
            api.consts.staking.historyDepth ? (0, _rxjs.of)(api.consts.staking.historyDepth) : api.query.staking["historyDepth"]()
        ]).pipe((0, _rxjs.map)(([activeEraOpt, historyDepth])=>{
            const result = [];
            const max = historyDepth.toNumber();
            const activeEra = activeEraOpt.unwrapOrDefault().index;
            let lastEra = activeEra;
            while(lastEra.gte((0, _util.BN_ZERO)) && result.length < max){
                if (lastEra !== activeEra || withActive === true) result.push(api.registry.createType("EraIndex", lastEra));
                lastEra = lastEra.sub((0, _util.BN_ONE));
            }
            // go from oldest to newest
            return result.reverse();
        })));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"epIv7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_erasPoints", ()=>_erasPoints);
parcelHelpers.export(exports, "erasPoints", ()=>erasPoints);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _cacheJs = require("./cache.js");
var _utilJs = require("./util.js");
const CACHE_KEY = "eraPoints";
function mapValidators({ individual }) {
    return [
        ...individual.entries()
    ].filter(([, points])=>points.gt((0, _util.BN_ZERO))).reduce((result, [validatorId, points])=>{
        result[validatorId.toString()] = points;
        return result;
    }, {});
}
function mapPoints(eras, points) {
    return eras.map((era, index)=>({
            era,
            eraPoints: points[index].total,
            validators: mapValidators(points[index])
        }));
}
function _erasPoints(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (eras, withActive)=>{
        if (!eras.length) return (0, _rxjs.of)([]);
        const cached = (0, _cacheJs.getEraMultiCache)(CACHE_KEY, eras, withActive);
        const remaining = (0, _utilJs.filterEras)(eras, cached);
        return !remaining.length ? (0, _rxjs.of)(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe((0, _rxjs.map)((p)=>(0, _cacheJs.filterCachedEras)(eras, cached, (0, _cacheJs.setEraMultiCache)(CACHE_KEY, withActive, mapPoints(remaining, p)))));
    });
}
const erasPoints = /*#__PURE__*/ (0, _utilJs.erasHistoricApply)("_erasPoints");

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./cache.js":"gqSnj","./util.js":"e5Mnf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fIU9A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_eraPrefs", ()=>_eraPrefs);
parcelHelpers.export(exports, "eraPrefs", ()=>eraPrefs);
parcelHelpers.export(exports, "_erasPrefs", ()=>_erasPrefs);
parcelHelpers.export(exports, "erasPrefs", ()=>erasPrefs);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _cacheJs = require("./cache.js");
var _utilJs = require("./util.js");
const CACHE_KEY = "eraPrefs";
function mapPrefs(era, all) {
    const validators = {};
    all.forEach(([key, prefs])=>{
        validators[key.args[1].toString()] = prefs;
    });
    return {
        era,
        validators
    };
}
function _eraPrefs(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (era, withActive)=>{
        const [cacheKey, cached] = (0, _cacheJs.getEraCache)(CACHE_KEY, era, withActive);
        return cached ? (0, _rxjs.of)(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe((0, _rxjs.map)((r)=>(0, _cacheJs.setEraCache)(cacheKey, withActive, mapPrefs(era, r))));
    });
}
const eraPrefs = /*#__PURE__*/ (0, _utilJs.singleEra)("_eraPrefs");
const _erasPrefs = /*#__PURE__*/ (0, _utilJs.combineEras)("_eraPrefs");
const erasPrefs = /*#__PURE__*/ (0, _utilJs.erasHistoricApply)("_erasPrefs");

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./cache.js":"gqSnj","./util.js":"e5Mnf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2qcT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_erasRewards", ()=>_erasRewards);
parcelHelpers.export(exports, "erasRewards", ()=>erasRewards);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _cacheJs = require("./cache.js");
var _utilJs = require("./util.js");
const CACHE_KEY = "eraRewards";
function mapRewards(eras, optRewards) {
    return eras.map((era, index)=>({
            era,
            eraReward: optRewards[index].unwrapOrDefault()
        }));
}
function _erasRewards(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (eras, withActive)=>{
        if (!eras.length) return (0, _rxjs.of)([]);
        const cached = (0, _cacheJs.getEraMultiCache)(CACHE_KEY, eras, withActive);
        const remaining = (0, _utilJs.filterEras)(eras, cached);
        if (!remaining.length) return (0, _rxjs.of)(cached);
        return api.query.staking.erasValidatorReward.multi(remaining).pipe((0, _rxjs.map)((r)=>(0, _cacheJs.filterCachedEras)(eras, cached, (0, _cacheJs.setEraMultiCache)(CACHE_KEY, withActive, mapRewards(remaining, r)))));
    });
}
const erasRewards = /*#__PURE__*/ (0, _utilJs.erasHistoricApply)("_erasRewards");

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./cache.js":"gqSnj","./util.js":"e5Mnf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQdGA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_eraSlashes", ()=>_eraSlashes);
parcelHelpers.export(exports, "eraSlashes", ()=>eraSlashes);
parcelHelpers.export(exports, "_erasSlashes", ()=>_erasSlashes);
parcelHelpers.export(exports, "erasSlashes", ()=>erasSlashes);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _cacheJs = require("./cache.js");
var _utilJs = require("./util.js");
const CACHE_KEY = "eraSlashes";
function mapSlashes(era, noms, vals) {
    const nominators = {};
    const validators = {};
    noms.forEach(([key, optBalance])=>{
        nominators[key.args[1].toString()] = optBalance.unwrap();
    });
    vals.forEach(([key, optRes])=>{
        validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
    });
    return {
        era,
        nominators,
        validators
    };
}
function _eraSlashes(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (era, withActive)=>{
        const [cacheKey, cached] = (0, _cacheJs.getEraCache)(CACHE_KEY, era, withActive);
        return cached ? (0, _rxjs.of)(cached) : (0, _rxjs.combineLatest)([
            api.query.staking.nominatorSlashInEra.entries(era),
            api.query.staking.validatorSlashInEra.entries(era)
        ]).pipe((0, _rxjs.map)(([n, v])=>(0, _cacheJs.setEraCache)(cacheKey, withActive, mapSlashes(era, n, v))));
    });
}
const eraSlashes = /*#__PURE__*/ (0, _utilJs.singleEra)("_eraSlashes");
const _erasSlashes = /*#__PURE__*/ (0, _utilJs.combineEras)("_eraSlashes");
const erasSlashes = /*#__PURE__*/ (0, _utilJs.erasHistoricApply)("_erasSlashes");

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./cache.js":"gqSnj","./util.js":"e5Mnf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dnGVX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "keys", ()=>keys);
parcelHelpers.export(exports, "keysMulti", ()=>keysMulti);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function extractsIds(stashId, queuedKeys, nextKeys) {
    const sessionIds = (queuedKeys.find(([currentId])=>currentId.eq(stashId)) || [
        undefined,
        []
    ])[1];
    const nextSessionIds = nextKeys.unwrapOr([]);
    return {
        nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : [
            ...nextSessionIds.values()
        ],
        sessionIds: Array.isArray(sessionIds) ? sessionIds : [
            ...sessionIds.values()
        ]
    };
}
const keys = /*#__PURE__*/ (0, _indexJs.firstMemo)((api, stashId)=>api.derive.staking.keysMulti([
        stashId
    ]));
function keysMulti(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (stashIds)=>stashIds.length ? api.query.session.queuedKeys().pipe((0, _rxjs.switchMap)((queuedKeys)=>(0, _rxjs.combineLatest)([
                (0, _rxjs.of)(queuedKeys),
                api.consts["session"]?.["dedupKeyPrefix"] ? api.query.session.nextKeys.multi(stashIds.map((s)=>[
                        api.consts["session"]["dedupKeyPrefix"],
                        s
                    ])) : (0, _rxjs.combineLatest)(stashIds.map((s)=>api.query.session.nextKeys(s)))
            ])), (0, _rxjs.map)(([queuedKeys, nextKeys])=>stashIds.map((stashId, index)=>extractsIds(stashId, queuedKeys, nextKeys[index])))) : (0, _rxjs.of)([]));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ixb2d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Retrieve the staking overview, including elected and points earned
 */ parcelHelpers.export(exports, "overview", ()=>overview);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function overview(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>(0, _rxjs.combineLatest)([
            api.derive.session.indexes(),
            api.derive.staking.validators()
        ]).pipe((0, _rxjs.map)(([indexes, { nextElected, validators }])=>(0, _util.objectSpread)({}, indexes, {
                nextElected,
                validators
            }))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bLKlN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_ownExposures", ()=>_ownExposures);
parcelHelpers.export(exports, "ownExposure", ()=>ownExposure);
parcelHelpers.export(exports, "ownExposures", ()=>ownExposures);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function _ownExposures(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId, eras, _withActive)=>eras.length ? (0, _rxjs.combineLatest)([
            (0, _rxjs.combineLatest)(eras.map((e)=>api.query.staking.erasStakersClipped(e, accountId))),
            (0, _rxjs.combineLatest)(eras.map((e)=>api.query.staking.erasStakers(e, accountId)))
        ]).pipe((0, _rxjs.map)(([clp, exp])=>eras.map((era, index)=>({
                    clipped: clp[index],
                    era,
                    exposure: exp[index]
                })))) : (0, _rxjs.of)([]));
}
const ownExposure = /*#__PURE__*/ (0, _indexJs.firstMemo)((api, accountId, era)=>api.derive.staking._ownExposures(accountId, [
        era
    ], true));
const ownExposures = /*#__PURE__*/ (0, _utilJs.erasHistoricApplyAccount)("_ownExposures");

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./util.js":"e5Mnf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eeIjB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_ownSlashes", ()=>_ownSlashes);
parcelHelpers.export(exports, "ownSlash", ()=>ownSlash);
parcelHelpers.export(exports, "ownSlashes", ()=>ownSlashes);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function _ownSlashes(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId, eras, _withActive)=>eras.length ? (0, _rxjs.combineLatest)([
            (0, _rxjs.combineLatest)(eras.map((e)=>api.query.staking.validatorSlashInEra(e, accountId))),
            (0, _rxjs.combineLatest)(eras.map((e)=>api.query.staking.nominatorSlashInEra(e, accountId)))
        ]).pipe((0, _rxjs.map)(([vals, noms])=>eras.map((era, index)=>({
                    era,
                    total: vals[index].isSome ? vals[index].unwrap()[1] : noms[index].unwrapOrDefault()
                })))) : (0, _rxjs.of)([]));
}
const ownSlash = /*#__PURE__*/ (0, _indexJs.firstMemo)((api, accountId, era)=>api.derive.staking._ownSlashes(accountId, [
        era
    ], true));
const ownSlashes = /*#__PURE__*/ (0, _utilJs.erasHistoricApplyAccount)("_ownSlashes");

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./util.js":"e5Mnf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5npVy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "query", ()=>query);
parcelHelpers.export(exports, "queryMulti", ()=>queryMulti);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
    return {
        accountId: stashId,
        controllerId: controllerIdOpt?.unwrapOr(null) || null,
        exposure,
        nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
        rewardDestination,
        stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
        stashId,
        validatorPrefs
    };
}
function getLedgers(api, optIds, { withLedger = false }) {
    const ids = optIds.filter((o)=>withLedger && !!o && o.isSome).map((o)=>o.unwrap());
    const emptyLed = api.registry.createType("Option<StakingLedger>");
    return (ids.length ? (0, _rxjs.combineLatest)(ids.map((s)=>api.query.staking.ledger(s))) : (0, _rxjs.of)([])).pipe((0, _rxjs.map)((optLedgers)=>{
        let offset = -1;
        return optIds.map((o)=>o && o.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
    }));
}
function getStashInfo(api, stashIds, activeEra, { withController, withDestination, withExposure, withLedger, withNominations, withPrefs }) {
    const emptyNoms = api.registry.createType("Option<Nominations>");
    const emptyRewa = api.registry.createType("RewardDestination");
    const emptyExpo = api.registry.createType("Exposure");
    const emptyPrefs = api.registry.createType("ValidatorPrefs");
    return (0, _rxjs.combineLatest)([
        withController || withLedger ? (0, _rxjs.combineLatest)(stashIds.map((s)=>api.query.staking.bonded(s))) : (0, _rxjs.of)(stashIds.map(()=>null)),
        withNominations ? (0, _rxjs.combineLatest)(stashIds.map((s)=>api.query.staking.nominators(s))) : (0, _rxjs.of)(stashIds.map(()=>emptyNoms)),
        withDestination ? (0, _rxjs.combineLatest)(stashIds.map((s)=>api.query.staking.payee(s))) : (0, _rxjs.of)(stashIds.map(()=>emptyRewa)),
        withPrefs ? (0, _rxjs.combineLatest)(stashIds.map((s)=>api.query.staking.validators(s))) : (0, _rxjs.of)(stashIds.map(()=>emptyPrefs)),
        withExposure ? (0, _rxjs.combineLatest)(stashIds.map((s)=>api.query.staking.erasStakers(activeEra, s))) : (0, _rxjs.of)(stashIds.map(()=>emptyExpo))
    ]);
}
function getBatch(api, activeEra, stashIds, flags) {
    return getStashInfo(api, stashIds, activeEra, flags).pipe((0, _rxjs.switchMap)(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure])=>getLedgers(api, controllerIdOpt, flags).pipe((0, _rxjs.map)((stakingLedgerOpts)=>stashIds.map((stashId, index)=>parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
}
const query = /*#__PURE__*/ (0, _indexJs.firstMemo)((api, accountId, flags)=>api.derive.staking.queryMulti([
        accountId
    ], flags));
function queryMulti(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountIds, flags)=>api.derive.session.indexes().pipe((0, _rxjs.switchMap)(({ activeEra })=>{
            const stashIds = accountIds.map((a)=>api.registry.createType("AccountId", a));
            return stashIds.length ? getBatch(api, activeEra, stashIds, flags) : (0, _rxjs.of)([]);
        })));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kxCkY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_stakerExposures", ()=>_stakerExposures);
parcelHelpers.export(exports, "stakerExposures", ()=>stakerExposures);
parcelHelpers.export(exports, "stakerExposure", ()=>stakerExposure);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function _stakerExposures(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountIds, eras, withActive = false)=>{
        const stakerIds = accountIds.map((a)=>api.registry.createType("AccountId", a).toString());
        return api.derive.staking._erasExposure(eras, withActive).pipe((0, _rxjs.map)((exposures)=>stakerIds.map((stakerId)=>exposures.map(({ era, nominators: allNominators, validators: allValidators })=>{
                    const isValidator = !!allValidators[stakerId];
                    const validators = {};
                    const nominating = allNominators[stakerId] || [];
                    if (isValidator) validators[stakerId] = allValidators[stakerId];
                    else if (nominating) nominating.forEach(({ validatorId })=>{
                        validators[validatorId] = allValidators[validatorId];
                    });
                    return {
                        era,
                        isEmpty: !Object.keys(validators).length,
                        isValidator,
                        nominating,
                        validators
                    };
                }))));
    });
}
function stakerExposures(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountIds, withActive = false)=>api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)((eras)=>api.derive.staking._stakerExposures(accountIds, eras, withActive))));
}
const stakerExposure = /*#__PURE__*/ (0, _indexJs.firstMemo)((api, accountId, withActive)=>api.derive.staking.stakerExposures([
        accountId
    ], withActive));

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"84zyw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_stakerPoints", ()=>_stakerPoints);
parcelHelpers.export(exports, "stakerPoints", ()=>stakerPoints);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function _stakerPoints(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId, eras, withActive)=>{
        const stakerId = api.registry.createType("AccountId", accountId).toString();
        return api.derive.staking._erasPoints(eras, withActive).pipe((0, _rxjs.map)((points)=>points.map(({ era, eraPoints, validators })=>({
                    era,
                    eraPoints,
                    points: validators[stakerId] || api.registry.createType("RewardPoint")
                }))));
    });
}
const stakerPoints = /*#__PURE__*/ (0, _utilJs.erasHistoricApplyAccount)("_stakerPoints");

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./util.js":"e5Mnf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"LSzUF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_stakerPrefs", ()=>_stakerPrefs);
parcelHelpers.export(exports, "stakerPrefs", ()=>stakerPrefs);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function _stakerPrefs(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId, eras, _withActive)=>api.query.staking.erasValidatorPrefs.multi(eras.map((e)=>[
                e,
                accountId
            ])).pipe((0, _rxjs.map)((all)=>all.map((validatorPrefs, index)=>({
                    era: eras[index],
                    validatorPrefs
                })))));
}
const stakerPrefs = /*#__PURE__*/ (0, _utilJs.erasHistoricApplyAccount)("_stakerPrefs");

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./util.js":"e5Mnf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQx06":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_stakerRewardsEras", ()=>_stakerRewardsEras);
parcelHelpers.export(exports, "_stakerRewards", ()=>_stakerRewards);
parcelHelpers.export(exports, "stakerRewards", ()=>stakerRewards);
parcelHelpers.export(exports, "stakerRewardsMultiEras", ()=>stakerRewardsMultiEras);
parcelHelpers.export(exports, "stakerRewardsMulti", ()=>stakerRewardsMulti);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
function extractCompatRewards(ledger) {
    return ledger ? ledger.legacyClaimedRewards || ledger.claimedRewards : [];
}
function parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {
    return exposures.map(({ era, isEmpty, isValidator, nominating, validators: eraValidators })=>{
        const { eraPoints, validators: allValPoints } = erasPoints.find((p)=>p.era.eq(era)) || {
            eraPoints: (0, _util.BN_ZERO),
            validators: {}
        };
        const { eraReward } = erasRewards.find((r)=>r.era.eq(era)) || {
            eraReward: api.registry.createType("Balance")
        };
        const { validators: allValPrefs } = erasPrefs.find((p)=>p.era.eq(era)) || {
            validators: {}
        };
        const validators = {};
        const stakerId = stashId.toString();
        Object.entries(eraValidators).forEach(([validatorId, exposure])=>{
            const valPoints = allValPoints[validatorId] || (0, _util.BN_ZERO);
            const valComm = allValPrefs[validatorId]?.commission.unwrap() || (0, _util.BN_ZERO);
            const expTotal = exposure.total?.unwrap() || (0, _util.BN_ZERO);
            let avail = (0, _util.BN_ZERO);
            let value;
            if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
                avail = eraReward.mul(valPoints).div(eraPoints);
                const valCut = valComm.mul(avail).div((0, _util.BN_BILLION));
                let staked;
                if (validatorId === stakerId) staked = exposure.own.unwrap();
                else {
                    const stakerExp = exposure.others.find(({ who })=>who.eq(stakerId));
                    staked = stakerExp ? stakerExp.value.unwrap() : (0, _util.BN_ZERO);
                }
                value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : (0, _util.BN_ZERO));
            }
            validators[validatorId] = {
                total: api.registry.createType("Balance", avail),
                value: api.registry.createType("Balance", value)
            };
        });
        return {
            era,
            eraReward,
            isEmpty,
            isValidator,
            nominating,
            validators
        };
    });
}
function allUniqValidators(rewards) {
    return rewards.reduce(([all, perStash], rewards)=>{
        const uniq = [];
        perStash.push(uniq);
        rewards.forEach(({ validators })=>Object.keys(validators).forEach((validatorId)=>{
                if (!uniq.includes(validatorId)) {
                    uniq.push(validatorId);
                    if (!all.includes(validatorId)) all.push(validatorId);
                }
            }));
        return [
            all,
            perStash
        ];
    }, [
        [],
        []
    ]);
}
function removeClaimed(validators, queryValidators, reward) {
    const rm = [];
    Object.keys(reward.validators).forEach((validatorId)=>{
        const index = validators.indexOf(validatorId);
        if (index !== -1) {
            const valLedger = queryValidators[index].stakingLedger;
            if (extractCompatRewards(valLedger).some((e)=>reward.era.eq(e))) rm.push(validatorId);
        }
    });
    rm.forEach((validatorId)=>{
        delete reward.validators[validatorId];
    });
}
function filterRewards(eras, valInfo, { rewards, stakingLedger }) {
    const filter = eras.filter((e)=>!extractCompatRewards(stakingLedger).some((s)=>s.eq(e)));
    const validators = valInfo.map(([v])=>v);
    const queryValidators = valInfo.map(([, q])=>q);
    return rewards.filter(({ isEmpty })=>!isEmpty).filter((reward)=>{
        if (!filter.some((e)=>reward.era.eq(e))) return false;
        removeClaimed(validators, queryValidators, reward);
        return true;
    }).filter(({ validators })=>Object.keys(validators).length !== 0).map((reward)=>(0, _util.objectSpread)({}, reward, {
            nominators: reward.nominating.filter((n)=>reward.validators[n.validatorId])
        }));
}
function _stakerRewardsEras(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (eras, withActive = false)=>(0, _rxjs.combineLatest)([
            api.derive.staking._erasPoints(eras, withActive),
            api.derive.staking._erasPrefs(eras, withActive),
            api.derive.staking._erasRewards(eras, withActive)
        ]));
}
function _stakerRewards(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountIds, eras, withActive = false)=>(0, _rxjs.combineLatest)([
            api.derive.staking.queryMulti(accountIds, {
                withLedger: true
            }),
            api.derive.staking._stakerExposures(accountIds, eras, withActive),
            api.derive.staking._stakerRewardsEras(eras, withActive)
        ]).pipe((0, _rxjs.switchMap)(([queries, exposures, erasResult])=>{
            const allRewards = queries.map(({ stakingLedger, stashId }, index)=>!stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));
            if (withActive) return (0, _rxjs.of)(allRewards);
            const [allValidators, stashValidators] = allUniqValidators(allRewards);
            return api.derive.staking.queryMulti(allValidators, {
                withLedger: true
            }).pipe((0, _rxjs.map)((queriedVals)=>queries.map(({ stakingLedger }, index)=>filterRewards(eras, stashValidators[index].map((validatorId)=>[
                            validatorId,
                            queriedVals.find((q)=>q.accountId.eq(validatorId))
                        ]).filter((v)=>!!v[1]), {
                        rewards: allRewards[index],
                        stakingLedger
                    }))));
        })));
}
const stakerRewards = /*#__PURE__*/ (0, _indexJs.firstMemo)((api, accountId, withActive)=>api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)((eras)=>api.derive.staking._stakerRewards([
            accountId
        ], eras, withActive))));
function stakerRewardsMultiEras(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountIds, eras)=>accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : (0, _rxjs.of)([]));
}
function stakerRewardsMulti(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountIds, withActive = false)=>api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)((eras)=>api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5pEhQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_stakerSlashes", ()=>_stakerSlashes);
parcelHelpers.export(exports, "stakerSlashes", ()=>stakerSlashes);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
var _utilJs = require("./util.js");
function _stakerSlashes(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (accountId, eras, withActive)=>{
        const stakerId = api.registry.createType("AccountId", accountId).toString();
        return api.derive.staking._erasSlashes(eras, withActive).pipe((0, _rxjs.map)((slashes)=>slashes.map(({ era, nominators, validators })=>({
                    era,
                    total: nominators[stakerId] || validators[stakerId] || api.registry.createType("Balance")
                }))));
    });
}
const stakerSlashes = /*#__PURE__*/ (0, _utilJs.erasHistoricApplyAccount)("_stakerSlashes");

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","./util.js":"e5Mnf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g06iW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Retrieve the list of all validator stashes
 */ parcelHelpers.export(exports, "stashes", ()=>stashes);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function onBondedEvent(api) {
    let current = Date.now();
    return api.query.system.events().pipe((0, _rxjs.map)((events)=>{
        current = events.filter(({ event, phase })=>{
            try {
                return phase.isApplyExtrinsic && event.section === "staking" && event.method === "Bonded";
            } catch  {
                return false;
            }
        }) ? Date.now() : current;
        return current;
    }), (0, _rxjs.startWith)(current), (0, _indexJs.drr)({
        skipTimeout: true
    }));
}
function stashes(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>onBondedEvent(api).pipe((0, _rxjs.switchMap)(()=>api.query.staking.validators.keys()), (0, _rxjs.map)((keys)=>keys.map(({ args: [v] })=>v).filter((a)=>a))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afojG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nextElected", ()=>nextElected);
/**
 * @description Retrieve latest list of validators
 */ parcelHelpers.export(exports, "validators", ()=>validators);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function nextElected(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query.staking.erasStakers ? api.derive.session.indexes().pipe(// only populate for next era in the last session, so track both here - entries are not
        // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
        (0, _rxjs.switchMap)(({ currentEra })=>api.query.staking.erasStakers.keys(currentEra)), (0, _rxjs.map)((keys)=>keys.map(({ args: [, accountId] })=>accountId))) : api.query.staking["currentElected"]());
}
function validators(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>// Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
        // in all actual real-world deployed chains, it does create some confusion for limited template chains
        (0, _rxjs.combineLatest)([
            api.query.session ? api.query.session.validators() : (0, _rxjs.of)([]),
            api.query.staking ? api.derive.staking.nextElected() : (0, _rxjs.of)([])
        ]).pipe((0, _rxjs.map)(([validators, nextElected])=>({
                nextElected: nextElected.length ? nextElected : validators,
                validators
            }))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e1Gl2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "waitingInfo", ()=>waitingInfo);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
const DEFAULT_FLAGS = {
    withController: true,
    withPrefs: true
};
function waitingInfo(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (flags = DEFAULT_FLAGS)=>(0, _rxjs.combineLatest)([
            api.derive.staking.validators(),
            api.derive.staking.stashes()
        ]).pipe((0, _rxjs.switchMap)(([{ nextElected }, stashes])=>{
            const elected = nextElected.map((a)=>a.toString());
            const waiting = stashes.filter((v)=>!elected.includes(v.toString()));
            return api.derive.staking.queryMulti(waiting, flags).pipe((0, _rxjs.map)((info)=>({
                    info,
                    waiting
                })));
        })));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wdIE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "members", ()=>members);
parcelHelpers.export(exports, "hasProposals", ()=>hasProposals);
parcelHelpers.export(exports, "proposal", ()=>proposal);
parcelHelpers.export(exports, "proposalCount", ()=>proposalCount);
parcelHelpers.export(exports, "proposalHashes", ()=>proposalHashes);
parcelHelpers.export(exports, "proposals", ()=>proposals);
parcelHelpers.export(exports, "prime", ()=>prime);
var _indexJs = require("../collective/index.js");
const members = /*#__PURE__*/ (0, _indexJs.members)("technicalCommittee");
const hasProposals = /*#__PURE__*/ (0, _indexJs.hasProposals)("technicalCommittee");
const proposal = /*#__PURE__*/ (0, _indexJs.proposal)("technicalCommittee");
const proposalCount = /*#__PURE__*/ (0, _indexJs.proposalCount)("technicalCommittee");
const proposalHashes = /*#__PURE__*/ (0, _indexJs.proposalHashes)("technicalCommittee");
const proposals = /*#__PURE__*/ (0, _indexJs.proposals)("technicalCommittee");
const prime = /*#__PURE__*/ (0, _indexJs.prime)("technicalCommittee");

},{"../collective/index.js":"8aK0Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d9FCT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _proposalsJs = require("./proposals.js");
parcelHelpers.exportAll(_proposalsJs, exports);

},{"./proposals.js":"epjul","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"epjul":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Retrieve all active and approved treasury proposals, along with their info
 */ parcelHelpers.export(exports, "proposals", ()=>proposals);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount }) {
    const approvals = [];
    const proposals = [];
    const councilTreasury = councilProposals.filter(({ proposal })=>proposal && (api.tx.treasury.approveProposal.is(proposal) || api.tx.treasury.rejectProposal.is(proposal)));
    allIds.forEach((id, index)=>{
        if (allProposals[index].isSome) {
            const council = councilTreasury.filter(({ proposal })=>proposal && id.eq(proposal.args[0])).sort((a, b)=>a.proposal && b.proposal ? a.proposal.method.localeCompare(b.proposal.method) : a.proposal ? -1 : 1);
            const isApproval = approvalIds.some((approvalId)=>approvalId.eq(id));
            const derived = {
                council,
                id,
                proposal: allProposals[index].unwrap()
            };
            if (isApproval) approvals.push(derived);
            else proposals.push(derived);
        }
    });
    return {
        approvals,
        proposalCount,
        proposals
    };
}
function retrieveProposals(api, proposalCount, approvalIds) {
    const proposalIds = [];
    const count = proposalCount.toNumber();
    for(let index = 0; index < count; index++)if (!approvalIds.some((id)=>id.eqn(index))) proposalIds.push(api.registry.createType("ProposalIndex", index));
    const allIds = [
        ...proposalIds,
        ...approvalIds
    ];
    return (0, _rxjs.combineLatest)([
        api.query.treasury.proposals.multi(allIds),
        api.derive.council ? api.derive.council.proposals() : (0, _rxjs.of)([])
    ]).pipe((0, _rxjs.map)(([allProposals, councilProposals])=>parseResult(api, {
            allIds,
            allProposals,
            approvalIds,
            councilProposals,
            proposalCount
        })));
}
function proposals(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, ()=>api.query.treasury ? (0, _rxjs.combineLatest)([
            api.query.treasury.proposalCount(),
            api.query.treasury.approvals()
        ]).pipe((0, _rxjs.switchMap)(([proposalCount, approvalIds])=>retrieveProposals(api, proposalCount, approvalIds))) : (0, _rxjs.of)({
            approvals: [],
            proposalCount: api.registry.createType("ProposalIndex"),
            proposals: []
        }));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3OoHL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventsJs = require("./events.js");
parcelHelpers.exportAll(_eventsJs, exports);
var _signingInfoJs = require("./signingInfo.js");
parcelHelpers.exportAll(_signingInfoJs, exports);

},{"./events.js":"heRv0","./signingInfo.js":"5Dmzx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"heRv0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "events", ()=>events);
var _rxjs = require("rxjs");
var _indexJs = require("../util/index.js");
function events(instanceId, api) {
    return (0, _indexJs.memo)(instanceId, (blockHash)=>(0, _rxjs.combineLatest)([
            api.rpc.chain.getBlock(blockHash),
            api.queryAt(blockHash).pipe((0, _rxjs.switchMap)((queryAt)=>queryAt.system.events()))
        ]).pipe((0, _rxjs.map)(([block, events])=>({
                block,
                events
            }))));
}

},{"rxjs":"lLy7s","../util/index.js":"cN7tY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Dmzx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signingInfo", ()=>signingInfo);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _indexJs = require("../util/index.js");
var _constantsJs = require("./constants.js");
function latestNonce(api, address) {
    return api.derive.balances.account(address).pipe((0, _rxjs.map)(({ accountNonce })=>accountNonce));
}
function nextNonce(api, address) {
    return api.rpc.system?.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
}
function signingHeader(api) {
    return (0, _rxjs.combineLatest)([
        api.rpc.chain.getHeader().pipe((0, _rxjs.switchMap)((header)=>// check for chains at genesis (until block 1 is produced, e.g. 6s), since
            // we do need to allow transactions at chain start (also dev/seal chains)
            header.parentHash.isEmpty ? (0, _rxjs.of)(header) : api.rpc.chain.getHeader(header.parentHash).pipe((0, _rxjs.catchError)(()=>(0, _rxjs.of)(header))))),
        api.rpc.chain.getFinalizedHead().pipe((0, _rxjs.switchMap)((hash)=>api.rpc.chain.getHeader(hash).pipe((0, _rxjs.catchError)(()=>(0, _rxjs.of)(null)))))
    ]).pipe((0, _rxjs.map)(([current, finalized])=>// determine the hash to use, current when lag > max, else finalized
        !finalized || (0, _indexJs.unwrapBlockNumber)(current).sub((0, _indexJs.unwrapBlockNumber)(finalized)).gt((0, _constantsJs.MAX_FINALITY_LAG)) ? current : finalized));
}
function signingInfo(_instanceId, api) {
    // no memo, we want to do this fresh on each run
    return (address, nonce, era)=>(0, _rxjs.combineLatest)([
            // retrieve nonce if none was specified
            (0, _util.isUndefined)(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : (0, _rxjs.of)(api.registry.createType("Index", nonce)),
            // if no era (create) or era > 0 (mortal), do block retrieval
            (0, _util.isUndefined)(era) || (0, _util.isNumber)(era) && era > 0 ? signingHeader(api) : (0, _rxjs.of)(null)
        ]).pipe((0, _rxjs.map)(([nonce, header])=>({
                header,
                mortalLength: Math.min(api.consts.system?.blockHashCount?.toNumber() || (0, _constantsJs.FALLBACK_MAX_HASH_COUNT), (0, _constantsJs.MORTAL_PERIOD).div(api.consts.babe?.expectedBlockTime || api.consts.timestamp?.minimumPeriod.muln(2) || (0, _constantsJs.FALLBACK_PERIOD)).iadd((0, _constantsJs.MAX_FINALITY_LAG)).toNumber()),
                nonce
            })));
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","../util/index.js":"cN7tY","./constants.js":"9rYUA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9rYUA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FALLBACK_MAX_HASH_COUNT", ()=>FALLBACK_MAX_HASH_COUNT);
parcelHelpers.export(exports, "FALLBACK_PERIOD", ()=>FALLBACK_PERIOD);
parcelHelpers.export(exports, "MAX_FINALITY_LAG", ()=>MAX_FINALITY_LAG);
parcelHelpers.export(exports, "MORTAL_PERIOD", ()=>MORTAL_PERIOD);
var _util = require("@polkadot/util");
const FALLBACK_MAX_HASH_COUNT = 250;
const FALLBACK_PERIOD = new (0, _util.BN)(6000);
const MAX_FINALITY_LAG = new (0, _util.BN)(5);
const MORTAL_PERIOD = new (0, _util.BN)(300000);

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aFTVd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SubmittableResult", ()=>SubmittableResult);
const recordIdentity = (record)=>record;
function filterAndApply(events, section, methods, onFound) {
    return events.filter(({ event })=>section === event.section && methods.includes(event.method)).map((record)=>onFound(record));
}
function getDispatchError({ event: { data: [dispatchError] } }) {
    return dispatchError;
}
function getDispatchInfo({ event: { data, method } }) {
    return method === "ExtrinsicSuccess" ? data[0] : data[1];
}
function extractError(events = []) {
    return filterAndApply(events, "system", [
        "ExtrinsicFailed"
    ], getDispatchError)[0];
}
function extractInfo(events = []) {
    return filterAndApply(events, "system", [
        "ExtrinsicFailed",
        "ExtrinsicSuccess"
    ], getDispatchInfo)[0];
}
class SubmittableResult {
    dispatchError;
    dispatchInfo;
    internalError;
    events;
    status;
    txHash;
    txIndex;
    blockNumber;
    constructor({ blockNumber, dispatchError, dispatchInfo, events, internalError, status, txHash, txIndex }){
        this.dispatchError = dispatchError || extractError(events);
        this.dispatchInfo = dispatchInfo || extractInfo(events);
        this.events = events || [];
        this.internalError = internalError;
        this.status = status;
        this.txHash = txHash;
        this.txIndex = txIndex;
        this.blockNumber = blockNumber;
    }
    get isCompleted() {
        return this.isError || this.status.isInBlock || this.status.isFinalized;
    }
    get isError() {
        return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
    }
    get isFinalized() {
        return this.status.isFinalized;
    }
    get isInBlock() {
        return this.status.isInBlock;
    }
    get isWarning() {
        return this.status.isRetracted;
    }
    /**
     * @description Filters EventRecords for the specified method & section (there could be multiple)
     */ filterRecords(section, method) {
        return filterAndApply(this.events, section, Array.isArray(method) ? method : [
            method
        ], recordIdentity);
    }
    /**
     * @description Finds an EventRecord for the specified method & section
     */ findRecord(section, method) {
        return this.filterRecords(section, method)[0];
    }
    /**
     * @description Creates a human representation of the output
     */ toHuman(isExtended) {
        return {
            dispatchError: this.dispatchError?.toHuman(),
            dispatchInfo: this.dispatchInfo?.toHuman(),
            events: this.events.map((e)=>e.toHuman(isExtended)),
            internalError: this.internalError?.message.toString(),
            status: this.status.toHuman(isExtended)
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7tNjd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApiPromise", ()=>(0, _apiJs.ApiPromise));
parcelHelpers.export(exports, "toPromiseMethod", ()=>(0, _decorateMethodJs.toPromiseMethod));
var _apiJs = require("./Api.js");
var _decorateMethodJs = require("./decorateMethod.js");

},{"./Api.js":"cNZEW","./decorateMethod.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cNZEW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * # @polkadot/api/promise
 *
 * ## Overview
 *
 * @name ApiPromise
 * @description
 * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.
 *
 * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.
 *
 * @see [[ApiRx]]
 *
 * ## Usage
 *
 * Making rpc calls -
 * <BR>
 *
 * ```javascript
 * import ApiPromise from '@polkadot/api/promise';
 *
 * // initialise via static create
 * const api = await ApiPromise.create();
 *
 * // make a subscription to the network head
 * api.rpc.chain.subscribeNewHeads((header) => {
 *   console.log(`Chain is at #${header.number}`);
 * });
 * ```
 * <BR>
 *
 * Subscribing to chain state -
 * <BR>
 *
 * ```javascript
 * import { ApiPromise, WsProvider } from '@polkadot/api';
 *
 * // initialise a provider with a specific endpoint
 * const provider = new WsProvider('wss://example.com:9944')
 *
 * // initialise via isReady & new with specific provider
 * const api = await new ApiPromise({ provider }).isReady;
 *
 * // retrieve the block target time
 * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();
 * let last = 0;
 *
 * // subscribe to the current block timestamp, updates automatically (callback provided)
 * api.query.timestamp.now((timestamp) => {
 *   const elapsed = last
 *     ? `, ${timestamp.toNumber() - last}s since last`
 *     : '';
 *
 *   last = timestamp.toNumber();
 *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);
 * });
 * ```
 * <BR>
 *
 * Submitting a transaction -
 * <BR>
 *
 * ```javascript
 * import ApiPromise from '@polkadot/api/promise';
 *
 * ApiPromise.create().then((api) => {
 *   const [nonce] = await api.query.system.account(keyring.alice.address);
 *
 *   api.tx.balances
 *     // create transfer
 *     transfer(keyring.bob.address, 12345)
 *     // sign the transcation
 *     .sign(keyring.alice, { nonce })
 *     // send the transaction (optional status callback)
 *     .send((status) => {
 *       console.log(`current status ${status.type}`);
 *     })
 *     // retrieve the submitted extrinsic hash
 *     .then((hash) => {
 *       console.log(`submitted with hash ${hash}`);
 *     });
 * });
 * ```
 */ parcelHelpers.export(exports, "ApiPromise", ()=>ApiPromise);
var _util = require("@polkadot/util");
var _indexJs = require("../base/index.js");
var _combinatorJs = require("./Combinator.js");
var _decorateMethodJs = require("./decorateMethod.js");
class ApiPromise extends (0, _indexJs.ApiBase) {
    __internal__isReadyPromise;
    __internal__isReadyOrErrorPromise;
    /**
     * @description Creates an instance of the ApiPromise class
     * @param options Options to create an instance. This can be either [[ApiOptions]] or
     * an [[WsProvider]].
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * new Api().isReady.then((api) => {
     *   api.rpc.subscribeNewHeads((header) => {
     *     console.log(`new block #${header.number.toNumber()}`);
     *   });
     * });
     * ```
     */ constructor(options){
        super(options, "promise", (0, _decorateMethodJs.toPromiseMethod));
        this.__internal__isReadyPromise = new Promise((resolve)=>{
            super.once("ready", ()=>resolve(this));
        });
        this.__internal__isReadyOrErrorPromise = new Promise((resolve, reject)=>{
            const tracker = (0, _decorateMethodJs.promiseTracker)(resolve, reject);
            super.once("ready", ()=>tracker.resolve(this));
            super.once("error", (error)=>tracker.reject(error));
        });
    }
    /**
     * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
     * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
     * provider (see the constructor arguments)
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * Api.create().then(async (api) => {
     *   const timestamp = await api.query.timestamp.now();
     *
     *   console.log(`lastest block timestamp ${timestamp}`);
     * });
     * ```
     */ static create(options) {
        const instance = new ApiPromise(options);
        if (options && options.throwOnConnect) return instance.isReadyOrError;
        // Swallow any rejections on isReadyOrError
        // (in Node 15.x this creates issues, when not being looked at)
        instance.isReadyOrError.catch((0, _util.noop));
        return instance.isReady;
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */ get isReady() {
        return this.__internal__isReadyPromise;
    }
    /**
     * @description Promise that resolves if we can connect, or reject if there is an error
     */ get isReadyOrError() {
        return this.__internal__isReadyOrErrorPromise;
    }
    /**
     * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
     */ clone() {
        return new ApiPromise((0, _util.objectSpread)({}, this._options, {
            source: this
        }));
    }
    /**
     * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
     * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
     * @param callback A callback that will return an Array of all the values this combinator has been applied to
     * @example
     * <BR>
     *
     * ```javascript
     * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
     *
     * // combines values from balance & nonce as it updates
     * api.combineLatest([
     *   api.rpc.chain.subscribeNewHeads,
     *   (cb) => api.query.system.account(address, cb)
     * ], ([head, [balance, nonce]]) => {
     *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
     * });
     * ```
     */ // eslint-disable-next-line @typescript-eslint/require-await
    async combineLatest(fns, callback) {
        const combinator = new (0, _combinatorJs.Combinator)(fns, callback);
        return ()=>{
            combinator.unsubscribe();
        };
    }
}

},{"@polkadot/util":"3HnHw","../base/index.js":"6OpH1","./Combinator.js":"2zQtY","./decorateMethod.js":"d0NEl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6OpH1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApiBase", ()=>ApiBase);
var _util = require("@polkadot/util");
var _gettersJs = require("./Getters.js");
class ApiBase extends (0, _gettersJs.Getters) {
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */ constructor(options = {}, type, decorateMethod){
        super(options, type, decorateMethod);
    }
    /**
     * @description Connect from the underlying provider, halting all network traffic
     */ connect() {
        return this._rpcCore.connect();
    }
    /**
     * @description Disconnect from the underlying provider, halting all network traffic
     */ disconnect() {
        this._unsubscribe();
        return this._rpcCore.disconnect();
    }
    /**
     * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
     */ setSigner(signer) {
        this._rx.signer = signer;
    }
    /**
     * @description Signs a raw signer payload, string or Uint8Array
     */ async sign(address, data, { signer } = {}) {
        if ((0, _util.isString)(address)) {
            const _signer = signer || this._rx.signer;
            if (!_signer?.signRaw) throw new Error("No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
            return (await _signer.signRaw((0, _util.objectSpread)({
                type: "bytes"
            }, data, {
                address
            }))).signature;
        }
        return (0, _util.u8aToHex)(address.sign((0, _util.u8aToU8a)(data.data)));
    }
}

},{"@polkadot/util":"3HnHw","./Getters.js":"c8fYP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c8fYP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Getters", ()=>Getters);
var _packageInfoJs = require("../packageInfo.js");
var _findJs = require("./find.js");
var _initJs = require("./Init.js");
function assertResult(value) {
    if (value === undefined) throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
    return value;
}
class Getters extends (0, _initJs.Init) {
    /**
     * @description Runtime call interfaces (currently untyped, only decorated via API options)
     */ get call() {
        return assertResult(this._call);
    }
    /**
     * @description Contains the parameter types (constants) of all modules.
     *
     * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
     *
     * @example
     * <BR>
     *
     * ```javascript
     * console.log(api.consts.democracy.enactmentPeriod.toString())
     * ```
     */ get consts() {
        return assertResult(this._consts);
    }
    /**
     * @description Derived results that are injected into the API, allowing for combinations of various query results.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumber((number) => {
     *   console.log('best number', number);
     * });
     * ```
     */ get derive() {
        return assertResult(this._derive);
    }
    /**
     * @description Errors from metadata
     */ get errors() {
        return assertResult(this._errors);
    }
    /**
     * @description Events from metadata
     */ get events() {
        return assertResult(this._events);
    }
    /**
     * @description  Returns the version of extrinsics in-use on this chain
     */ get extrinsicVersion() {
        return this._extrinsicType;
    }
    /**
     * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
     */ get genesisHash() {
        return assertResult(this._genesisHash);
    }
    /**
     * @description true is the underlying provider is connected
     */ get isConnected() {
        return this._isConnected.getValue();
    }
    /**
     * @description The library information name & version (from package.json)
     */ get libraryInfo() {
        return `${(0, _packageInfoJs.packageInfo).name} v${(0, _packageInfoJs.packageInfo).version}`;
    }
    /**
     * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
     *
     * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.query.system.account(<accountId>, ([nonce, balance]) => {
     *   console.log('new free balance', balance.free, 'new nonce', nonce);
     * });
     * ```
     */ get query() {
        return assertResult(this._query);
    }
    /**
     * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const unsub = await api.queryMulti(
     *   [
     *     // you can include the storage without any parameters
     *     api.query.balances.totalIssuance,
     *     // or you can pass parameters to the storage query
     *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
     *   ],
     *   ([existential, [, { free }]]) => {
     *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
     *
     *     unsub();
     *   }
     * );
     * ```
     */ get queryMulti() {
        return assertResult(this._queryMulti);
    }
    /**
     * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
     *
     * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.rpc.chain.subscribeNewHeads((header) => {
     *   console.log('new header', header);
     * });
     * ```
     */ get rpc() {
        return assertResult(this._rpc);
    }
    /**
     * @description Contains the chain information for the current node.
     */ get runtimeChain() {
        return assertResult(this._runtimeChain);
    }
    /**
     * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
     */ get runtimeMetadata() {
        return assertResult(this._runtimeMetadata);
    }
    /**
     * @description Contains the version information for the current runtime.
     */ get runtimeVersion() {
        return assertResult(this._runtimeVersion);
    }
    /**
     * @description The underlying Rx API interface
     */ get rx() {
        return assertResult(this._rx);
    }
    /**
     * @description Returns the underlying provider stats
     */ get stats() {
        return this._rpcCore.stats;
    }
    /**
     * @description The type of this API instance, either 'rxjs' or 'promise'
     */ get type() {
        return this._type;
    }
    /**
     * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.tx.balances
     *   .transferAllowDeath(<recipientId>, <balance>)
     *   .signAndSend(<keyPair>, ({status}) => {
     *     console.log('tx status', status.asFinalized.toHex());
     *   });
     * ```
     */ get tx() {
        return assertResult(this._extrinsics);
    }
    /**
     * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
     */ findCall(callIndex) {
        return (0, _findJs.findCall)(this.registry, callIndex);
    }
    /**
     * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
     */ findError(errorIndex) {
        return (0, _findJs.findError)(this.registry, errorIndex);
    }
}

},{"../packageInfo.js":"1czuv","./find.js":"kXUDO","./Init.js":"iyjrQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kXUDO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "findCall", ()=>findCall);
parcelHelpers.export(exports, "findError", ()=>findError);
var _util = require("@polkadot/util");
function findCall(registry, callIndex) {
    return registry.findMetaCall((0, _util.u8aToU8a)(callIndex));
}
function findError(registry, errorIndex) {
    return registry.findMetaError((0, _util.u8aToU8a)(errorIndex));
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iyjrQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Init", ()=>Init);
var _rxjs = require("rxjs");
var _types = require("@polkadot/types");
var _typesKnown = require("@polkadot/types-known");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
var _decorateJs = require("./Decorate.js");
const KEEPALIVE_INTERVAL = 10000;
const WITH_VERSION_SHORTCUT = false;
const l = (0, _util.logger)("api/init");
function textToString(t) {
    return t.toString();
}
class Init extends (0, _decorateJs.Decorate) {
    __internal__atLast = null;
    __internal__healthTimer = null;
    __internal__registries = [];
    __internal__updateSub = null;
    __internal__waitingRegistries = {};
    constructor(options, type, decorateMethod){
        super(options, type, decorateMethod);
        // all injected types added to the registry for overrides
        this.registry.setKnownTypes(options);
        // We only register the types (global) if this is not a cloned instance.
        // Do right up-front, so we get in the user types before we are actually
        // doing anything on-chain, this ensures we have the overrides in-place
        if (!options.source) this.registerTypes(options.types);
        else this.__internal__registries = options.source.__internal__registries;
        this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
        this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
        if (this.supportMulti) {
            this._queryMulti = this._decorateMulti(this._decorateMethod);
            this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
        }
        this._rx.signer = options.signer;
        this._rpcCore.setRegistrySwap((blockHash)=>this.getBlockRegistry(blockHash));
        this._rpcCore.setResolveBlockHash((blockNumber)=>(0, _rxjs.firstValueFrom)(this._rpcCore.chain.getBlockHash(blockNumber)));
        if (this.hasSubscriptions) {
            this._rpcCore.provider.on("disconnected", ()=>this.__internal__onProviderDisconnect());
            this._rpcCore.provider.on("error", (e)=>this.__internal__onProviderError(e));
            this._rpcCore.provider.on("connected", ()=>this.__internal__onProviderConnect());
        } else if (!this._options.noInitWarn) l.warn("Api will be available in a limited mode since the provider does not support subscriptions");
        // If the provider was instantiated earlier, and has already emitted a
        // 'connected' event, then the `on('connected')` won't fire anymore. To
        // cater for this case, we call manually `this._onProviderConnect`.
        if (this._rpcCore.provider.isConnected) this.__internal__onProviderConnect().catch((0, _util.noop));
    }
    /**
     * @description Decorates a registry based on the runtime version
     */ _initRegistry(registry, chain, version, metadata, chainProps) {
        registry.clearCache();
        registry.setChainProperties(chainProps || this.registry.getChainProperties());
        registry.setKnownTypes(this._options);
        registry.register((0, _typesKnown.getSpecTypes)(registry, chain, version.specName, version.specVersion));
        registry.setHasher((0, _typesKnown.getSpecHasher)(registry, chain, version.specName));
        // for bundled types, pull through the aliases defined
        if (registry.knownTypes.typesBundle) registry.knownTypes.typesAlias = (0, _typesKnown.getSpecAlias)(registry, chain, version.specName);
        registry.setMetadata(metadata, undefined, (0, _util.objectSpread)({}, (0, _typesKnown.getSpecExtensions)(registry, chain, version.specName), this._options.signedExtensions), this._options.noInitWarn);
    }
    /**
     * @description Returns the default versioned registry
     */ _getDefaultRegistry() {
        return (0, _util.assertReturn)(this.__internal__registries.find(({ isDefault })=>isDefault), "Initialization error, cannot find the default registry");
    }
    /**
     * @description Returns a decorated API instance at a specific point in time
     */ async at(blockHash, knownVersion) {
        const u8aHash = (0, _util.u8aToU8a)(blockHash);
        const u8aHex = (0, _util.u8aToHex)(u8aHash);
        const registry = await this.getBlockRegistry(u8aHash, knownVersion);
        if (!this.__internal__atLast || this.__internal__atLast[0] !== u8aHex) // always create a new decoration - since we are pointing to a specific hash, this
        // means that all queries needs to use that hash (not a previous one already existing)
        this.__internal__atLast = [
            u8aHex,
            this._createDecorated(registry, true, null, u8aHash).decoratedApi
        ];
        return this.__internal__atLast[1];
    }
    async _createBlockRegistry(blockHash, header, version) {
        const registry = new (0, _types.TypeRegistry)(blockHash);
        const metadata = new (0, _types.Metadata)(registry, await (0, _rxjs.firstValueFrom)(this._rpcCore.state.getMetadata.raw(header.parentHash)));
        const runtimeChain = this._runtimeChain;
        if (!runtimeChain) throw new Error("Invalid initializion order, runtimeChain is not available");
        this._initRegistry(registry, runtimeChain, version, metadata);
        // add our new registry
        const result = {
            counter: 0,
            lastBlockHash: blockHash,
            metadata,
            registry,
            runtimeVersion: version
        };
        this.__internal__registries.push(result);
        return result;
    }
    _cacheBlockRegistryProgress(key, creator) {
        // look for waiting resolves
        let waiting = this.__internal__waitingRegistries[key];
        if ((0, _util.isUndefined)(waiting)) // nothing waiting, construct new
        waiting = this.__internal__waitingRegistries[key] = new Promise((resolve, reject)=>{
            creator().then((registry)=>{
                delete this.__internal__waitingRegistries[key];
                resolve(registry);
            }).catch((error)=>{
                delete this.__internal__waitingRegistries[key];
                reject(error);
            });
        });
        return waiting;
    }
    _getBlockRegistryViaVersion(blockHash, version) {
        if (version) {
            // check for pre-existing registries. We also check specName, e.g. it
            // could be changed like in Westmint with upgrade from shell -> westmint
            const existingViaVersion = this.__internal__registries.find(({ runtimeVersion: { specName, specVersion } })=>specName.eq(version.specName) && specVersion.eq(version.specVersion));
            if (existingViaVersion) {
                existingViaVersion.counter++;
                existingViaVersion.lastBlockHash = blockHash;
                return existingViaVersion;
            }
        }
        return null;
    }
    async _getBlockRegistryViaHash(blockHash) {
        // ensure we have everything required
        if (!this._genesisHash || !this._runtimeVersion) throw new Error("Cannot retrieve data on an uninitialized chain");
        // We have to assume that on the RPC layer the calls used here does not call back into
        // the registry swap, so getHeader & getRuntimeVersion should not be historic
        const header = this.registry.createType("HeaderPartial", this._genesisHash.eq(blockHash) ? {
            number: (0, _util.BN_ZERO),
            parentHash: this._genesisHash
        } : await (0, _rxjs.firstValueFrom)(this._rpcCore.chain.getHeader.raw(blockHash)));
        if (header.parentHash.isEmpty) throw new Error("Unable to retrieve header and parent from supplied hash");
        // get the runtime version, either on-chain or via an known upgrade history
        const [firstVersion, lastVersion] = (0, _typesKnown.getUpgradeVersion)(this._genesisHash, header.number);
        const version = this.registry.createType("RuntimeVersionPartial", WITH_VERSION_SHORTCUT && firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion)) ? {
            apis: firstVersion.apis,
            specName: this._runtimeVersion.specName,
            specVersion: firstVersion.specVersion
        } : await (0, _rxjs.firstValueFrom)(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
        return(// try to find via version
        this._getBlockRegistryViaVersion(blockHash, version) || // return new or in-flight result
        await this._cacheBlockRegistryProgress(version.toHex(), ()=>this._createBlockRegistry(blockHash, header, version)));
    }
    /**
     * @description Sets up a registry based on the block hash defined
     */ async getBlockRegistry(blockHash, knownVersion) {
        return(// try to find via blockHash
        this.__internal__registries.find(({ lastBlockHash })=>lastBlockHash && (0, _util.u8aEq)(lastBlockHash, blockHash)) || // try to find via version
        this._getBlockRegistryViaVersion(blockHash, knownVersion) || // return new or in-flight result
        await this._cacheBlockRegistryProgress((0, _util.u8aToHex)(blockHash), ()=>this._getBlockRegistryViaHash(blockHash)));
    }
    async _loadMeta() {
        // on re-connection to the same chain, we don't want to re-do everything from chain again
        if (this._isReady) return true;
        this._unsubscribeUpdates();
        // only load from on-chain if we are not a clone (default path), alternatively
        // just use the values from the source instance provided
        [this._genesisHash, this._runtimeMetadata] = this._options.source?._isReady ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
        return this._initFromMeta(this._runtimeMetadata);
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async _metaFromSource(source) {
        this._extrinsicType = source.extrinsicVersion;
        this._runtimeChain = source.runtimeChain;
        this._runtimeVersion = source.runtimeVersion;
        // manually build a list of all available methods in this RPC, we are
        // going to filter on it to align the cloned RPC without making a call
        const sections = Object.keys(source.rpc);
        const rpcs = [];
        for(let s = 0, scount = sections.length; s < scount; s++){
            const section = sections[s];
            const methods = Object.keys(source.rpc[section]);
            for(let m = 0, mcount = methods.length; m < mcount; m++)rpcs.push(`${section}_${methods[m]}`);
        }
        this._filterRpc(rpcs, (0, _typesKnown.getSpecRpc)(this.registry, source.runtimeChain, source.runtimeVersion.specName));
        return [
            source.genesisHash,
            source.runtimeMetadata
        ];
    }
    // subscribe to metadata updates, inject the types on changes
    _subscribeUpdates() {
        if (this.__internal__updateSub || !this.hasSubscriptions) return;
        this.__internal__updateSub = this._rpcCore.state.subscribeRuntimeVersion().pipe((0, _rxjs.switchMap)((version)=>// only retrieve the metadata when the on-chain version has been changed
            this._runtimeVersion?.specVersion.eq(version.specVersion) ? (0, _rxjs.of)(false) : this._rpcCore.state.getMetadata().pipe((0, _rxjs.map)((metadata)=>{
                l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
                this._runtimeMetadata = metadata;
                this._runtimeVersion = version;
                this._rx.runtimeVersion = version;
                // update the default registry version
                const thisRegistry = this._getDefaultRegistry();
                const runtimeChain = this._runtimeChain;
                if (!runtimeChain) throw new Error("Invalid initializion order, runtimeChain is not available");
                // setup the data as per the current versions
                thisRegistry.metadata = metadata;
                thisRegistry.runtimeVersion = version;
                this._initRegistry(this.registry, runtimeChain, version, metadata);
                this._injectMetadata(thisRegistry, true);
                return true;
            })))).subscribe();
    }
    async _metaFromChain(optMetadata) {
        const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([
            (0, _rxjs.firstValueFrom)(this._rpcCore.chain.getBlockHash(0)),
            (0, _rxjs.firstValueFrom)(this._rpcCore.state.getRuntimeVersion()),
            (0, _rxjs.firstValueFrom)(this._rpcCore.system.chain()),
            (0, _rxjs.firstValueFrom)(this._rpcCore.system.properties()),
            (0, _rxjs.firstValueFrom)(this._rpcCore.rpc.methods()),
            optMetadata ? Promise.resolve(null) : (0, _rxjs.firstValueFrom)(this._rpcCore.state.getMetadata())
        ]);
        // set our chain version & genesisHash as returned
        this._runtimeChain = chain;
        this._runtimeVersion = runtimeVersion;
        this._rx.runtimeVersion = runtimeVersion;
        // retrieve metadata, either from chain  or as pass-in via options
        const metadataKey = `${genesisHash.toHex() || "0x"}-${runtimeVersion.specVersion.toString()}`;
        const metadata = chainMetadata || (optMetadata?.[metadataKey] ? new (0, _types.Metadata)(this.registry, optMetadata[metadataKey]) : await (0, _rxjs.firstValueFrom)(this._rpcCore.state.getMetadata()));
        // initializes the registry & RPC
        this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);
        this._filterRpc(rpcMethods.methods.map(textToString), (0, _typesKnown.getSpecRpc)(this.registry, chain, runtimeVersion.specName));
        this._subscribeUpdates();
        // setup the initial registry, when we have none
        if (!this.__internal__registries.length) this.__internal__registries.push({
            counter: 0,
            isDefault: true,
            metadata,
            registry: this.registry,
            runtimeVersion
        });
        // get unique types & validate
        metadata.getUniqTypes(this._options.throwOnUnknown || false);
        return [
            genesisHash,
            metadata
        ];
    }
    _initFromMeta(metadata) {
        const runtimeVersion = this._runtimeVersion;
        if (!runtimeVersion) throw new Error("Invalid initializion order, runtimeVersion is not available");
        this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
        this._rx.extrinsicType = this._extrinsicType;
        this._rx.genesisHash = this._genesisHash;
        this._rx.runtimeVersion = runtimeVersion;
        // inject metadata and adjust the types as detected
        this._injectMetadata(this._getDefaultRegistry(), true);
        // derive is last, since it uses the decorated rx
        this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
        this._derive = this._decorateDerive(this._decorateMethod);
        return true;
    }
    _subscribeHealth() {
        this._unsubscribeHealth();
        // Only enable the health keepalive on WS, not needed on HTTP
        this.__internal__healthTimer = this.hasSubscriptions ? setInterval(()=>{
            (0, _rxjs.firstValueFrom)(this._rpcCore.system.health.raw()).catch((0, _util.noop));
        }, KEEPALIVE_INTERVAL) : null;
    }
    _unsubscribeHealth() {
        if (this.__internal__healthTimer) {
            clearInterval(this.__internal__healthTimer);
            this.__internal__healthTimer = null;
        }
    }
    _unsubscribeUpdates() {
        if (this.__internal__updateSub) {
            this.__internal__updateSub.unsubscribe();
            this.__internal__updateSub = null;
        }
    }
    _unsubscribe() {
        this._unsubscribeHealth();
        this._unsubscribeUpdates();
    }
    async __internal__onProviderConnect() {
        this._isConnected.next(true);
        this.emit("connected");
        try {
            const cryptoReady = this._options.initWasm === false ? true : await (0, _utilCrypto.cryptoWaitReady)();
            const hasMeta = await this._loadMeta();
            this._subscribeHealth();
            if (hasMeta && !this._isReady && cryptoReady) {
                this._isReady = true;
                this.emit("ready", this);
            }
        } catch (_error) {
            const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
            l.error(error);
            this.emit("error", error);
        }
    }
    __internal__onProviderDisconnect() {
        this._isConnected.next(false);
        this._unsubscribe();
        this.emit("disconnected");
    }
    __internal__onProviderError(error) {
        this.emit("error", error);
    }
}

},{"rxjs":"lLy7s","@polkadot/types":"fnDGk","@polkadot/types-known":"fbgSe","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","./Decorate.js":"kF4Em","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fbgSe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _detectPackageJs = require("./detectPackage.js");
var _bundleJs = require("./bundle.js");
parcelHelpers.exportAll(_bundleJs, exports);

},{"./detectPackage.js":"kTGlx","./bundle.js":"3UCr0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kTGlx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _util = require("@polkadot/util");
var _detectOtherJs = require("./detectOther.js");
var _detectOtherJsDefault = parcelHelpers.interopDefault(_detectOtherJs);
var _packageInfoJs = require("./packageInfo.js");
(0, _util.detectPackage)((0, _packageInfoJs.packageInfo), null, (0, _detectOtherJsDefault.default));

},{"@polkadot/util":"3HnHw","./detectOther.js":"duZLI","./packageInfo.js":"kiObO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"duZLI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageInfo = require("@polkadot/types/packageInfo");
exports.default = [
    (0, _packageInfo.packageInfo)
];

},{"@polkadot/types/packageInfo":"cIucp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3UCr0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapXcmTypes", ()=>(0, _typesCreate.mapXcmTypes));
parcelHelpers.export(exports, "packageInfo", ()=>(0, _packageInfoJs.packageInfo));
var _typesCreate = require("@polkadot/types-create");
var _packageInfoJs = require("./packageInfo.js");
var _utilJs = require("./util.js");
parcelHelpers.exportAll(_utilJs, exports);

},{"@polkadot/types-create":false,"./packageInfo.js":false,"./util.js":"3j83B","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3j83B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Based on the chain and runtimeVersion, get the applicable signed extensions (ready for registration)
 */ parcelHelpers.export(exports, "getSpecExtensions", ()=>getSpecExtensions);
/**
 * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)
 */ parcelHelpers.export(exports, "getSpecTypes", ()=>getSpecTypes);
/**
 * @description Based on the chain or spec, return the hasher used
 */ parcelHelpers.export(exports, "getSpecHasher", ()=>getSpecHasher);
/**
 * @description Based on the chain and runtimeVersion, get the applicable rpc definitions (ready for registration)
 */ parcelHelpers.export(exports, "getSpecRpc", ()=>getSpecRpc);
/**
 * @description Based on the chain and runtimeVersion, get the applicable runtime definitions (ready for registration)
 */ parcelHelpers.export(exports, "getSpecRuntime", ()=>getSpecRuntime);
/**
 * @description Based on the chain and runtimeVersion, get the applicable alias definitions (ready for registration)
 */ parcelHelpers.export(exports, "getSpecAlias", ()=>getSpecAlias);
/**
 * @description Returns a version record for known chains where upgrades are being tracked
 */ parcelHelpers.export(exports, "getUpgradeVersion", ()=>getUpgradeVersion);
var _util = require("@polkadot/util");
var _indexJs = require("./chain/index.js");
var _indexJs1 = require("./spec/index.js");
var _indexJs2 = require("./upgrades/index.js");
/**
 * @description Perform the callback function using the stringified spec/chain
 * @internal
 * */ function withNames(chainName, specName, fn) {
    return fn(chainName.toString(), specName.toString());
}
/**
 * @descriptionFflatten a VersionedType[] into a Record<string, string>
 * @internal
 * */ function filterVersions(versions = [], specVersion) {
    return versions.filter(({ minmax: [min, max] })=>(min === undefined || min === null || specVersion >= min) && (max === undefined || max === null || specVersion <= max)).reduce((result, { types })=>({
            ...result,
            ...types
        }), {});
}
function getSpecExtensions({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s)=>({
            ...knownTypes.typesBundle?.spec?.[s]?.signedExtensions ?? {},
            ...knownTypes.typesBundle?.chain?.[c]?.signedExtensions ?? {}
        }));
}
function getSpecTypes({ knownTypes }, chainName, specName, specVersion) {
    const _specVersion = (0, _util.bnToBn)(specVersion).toNumber();
    return withNames(chainName, specName, (c, s)=>({
            // The order here is always, based on -
            //   - spec then chain
            //   - typesBundle takes higher precedence
            //   - types is the final catch-all override
            ...filterVersions((0, _indexJs1.typesSpec)[s], _specVersion),
            ...filterVersions((0, _indexJs.typesChain)[c], _specVersion),
            ...filterVersions(knownTypes.typesBundle?.spec?.[s]?.types, _specVersion),
            ...filterVersions(knownTypes.typesBundle?.chain?.[c]?.types, _specVersion),
            ...knownTypes.typesSpec?.[s] ?? {},
            ...knownTypes.typesChain?.[c] ?? {},
            ...knownTypes.types ?? {}
        }));
}
function getSpecHasher({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s)=>knownTypes.hasher || knownTypes.typesBundle?.chain?.[c]?.hasher || knownTypes.typesBundle?.spec?.[s]?.hasher || null);
}
function getSpecRpc({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s)=>({
            ...knownTypes.typesBundle?.spec?.[s]?.rpc ?? {},
            ...knownTypes.typesBundle?.chain?.[c]?.rpc ?? {}
        }));
}
function getSpecRuntime({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s)=>({
            ...knownTypes.typesBundle?.spec?.[s]?.runtime ?? {},
            ...knownTypes.typesBundle?.chain?.[c]?.runtime ?? {}
        }));
}
function getSpecAlias({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s)=>({
            // as per versions, first spec, then chain then finally non-versioned
            ...knownTypes.typesBundle?.spec?.[s]?.alias ?? {},
            ...knownTypes.typesBundle?.chain?.[c]?.alias ?? {},
            ...knownTypes.typesAlias ?? {}
        }));
}
function getUpgradeVersion(genesisHash, blockNumber) {
    const known = (0, _indexJs2.upgrades).find((u)=>genesisHash.eq(u.genesisHash));
    return known ? [
        known.versions.reduce((last, version)=>{
            return blockNumber.gt(version.blockNumber) ? version : last;
        }, undefined),
        known.versions.find((version)=>blockNumber.lte(version.blockNumber))
    ] : [
        undefined,
        undefined
    ];
}

},{"@polkadot/util":"3HnHw","./chain/index.js":"7W81h","./spec/index.js":"99lmI","./upgrades/index.js":"iSqVl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7W81h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "typesChain", ()=>typesChain);
const typesChain = {};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99lmI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "typesSpec", ()=>typesSpec);
var _centrifugeChainJs = require("./centrifuge-chain.js");
var _kusamaJs = require("./kusama.js");
var _nodeJs = require("./node.js");
var _nodeTemplateJs = require("./node-template.js");
var _polkadotJs = require("./polkadot.js");
var _rococoJs = require("./rococo.js");
var _shellJs = require("./shell.js");
var _statemineJs = require("./statemine.js");
var _statemintJs = require("./statemint.js");
var _westendJs = require("./westend.js");
var _westmintJs = require("./westmint.js");
const typesSpec = {
    "centrifuge-chain": (0, _centrifugeChainJs.versioned),
    kusama: (0, _kusamaJs.versioned),
    node: (0, _nodeJs.versioned),
    "node-template": (0, _nodeTemplateJs.versioned),
    polkadot: (0, _polkadotJs.versioned),
    rococo: (0, _rococoJs.versioned),
    shell: (0, _shellJs.versioned),
    statemine: (0, _statemineJs.versioned),
    statemint: (0, _statemintJs.versioned),
    westend: (0, _westendJs.versioned),
    westmint: (0, _westmintJs.versioned)
};

},{"./centrifuge-chain.js":"UOC4w","./kusama.js":"c62FZ","./node.js":"gFgCK","./node-template.js":"h3wFW","./polkadot.js":"ixV3R","./rococo.js":"2DzYu","./shell.js":"bXurS","./statemine.js":"9jwz4","./statemint.js":"1B6U1","./westend.js":"hh9FZ","./westmint.js":"1Ek8L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"UOC4w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
const sharedTypes = {
    // Anchor
    AnchorData: {
        anchoredBlock: "u64",
        docRoot: "H256",
        id: "H256"
    },
    DispatchErrorModule: "DispatchErrorModuleU8",
    PreCommitData: {
        expirationBlock: "u64",
        identity: "H256",
        signingRoot: "H256"
    },
    // Fees
    Fee: {
        key: "Hash",
        price: "Balance"
    },
    // MultiAccount
    MultiAccountData: {
        deposit: "Balance",
        depositor: "AccountId",
        signatories: "Vec<AccountId>",
        threshold: "u16"
    },
    // Bridge
    ChainId: "u8",
    DepositNonce: "u64",
    ResourceId: "[u8; 32]",
    "chainbridge::ChainId": "u8",
    // NFT
    RegistryId: "H160",
    TokenId: "U256",
    AssetId: {
        registryId: "RegistryId",
        tokenId: "TokenId"
    },
    AssetInfo: {
        metadata: "Bytes"
    },
    MintInfo: {
        anchorId: "Hash",
        proofs: "Vec<ProofMint>",
        staticHashes: "[Hash; 3]"
    },
    Proof: {
        leafHash: "H256",
        sortedHashes: "H256"
    },
    ProofMint: {
        hashes: "Vec<Hash>",
        property: "Bytes",
        salt: "[u8; 32]",
        value: "Bytes"
    },
    RegistryInfo: {
        fields: "Vec<Bytes>",
        ownerCanBurn: "bool"
    },
    ProxyType: {
        _enum: [
            "Any",
            "NonTransfer",
            "Governance",
            "Staking",
            "NonProxy"
        ]
    }
};
const standaloneTypes = {
    ...sharedTypes,
    AccountInfo: "AccountInfoWithRefCount",
    Address: "LookupSource",
    LookupSource: "IndicesLookupSource",
    Multiplier: "Fixed64",
    RefCount: "RefCountTo259"
};
const versioned = [
    {
        minmax: [
            240,
            243
        ],
        types: {
            ...standaloneTypes,
            ProxyType: {
                _enum: [
                    "Any",
                    "NonTransfer",
                    "Governance",
                    "Staking",
                    "Vesting"
                ]
            }
        }
    },
    {
        minmax: [
            244,
            999
        ],
        types: {
            ...standaloneTypes
        }
    },
    {
        minmax: [
            1000,
            undefined
        ],
        types: {
            ...sharedTypes
        }
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c62FZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
var _typesCreate = require("@polkadot/types-create");
const sharedTypes = {
    CompactAssignments: "CompactAssignmentsWith24",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith24",
    Keys: "SessionKeys6",
    ProxyType: {
        _enum: [
            "Any",
            "NonTransfer",
            "Governance",
            "Staking",
            "IdentityJudgement",
            "CancelProxy",
            "Auction"
        ]
    },
    Weight: "WeightV1"
};
const addrIndicesTypes = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "LookupSource",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys5",
    LookupSource: "IndicesLookupSource",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
};
const addrAccountIdTypes = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys5",
    LookupSource: "AccountId",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
};
const versioned = [
    {
        // 1020 is first CC3
        minmax: [
            1019,
            1031
        ],
        types: {
            ...addrIndicesTypes,
            BalanceLock: "BalanceLockTo212",
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchError: "DispatchErrorTo198",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            IdentityInfo: "IdentityInfoTo198",
            Keys: "SessionKeys5",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            ReferendumInfo: "ReferendumInfoTo239",
            Scheduled: "ScheduledTo254",
            SlashingSpans: "SlashingSpansTo204",
            StakingLedger: "StakingLedgerTo223",
            Votes: "VotesTo230",
            Weight: "u32"
        }
    },
    {
        minmax: [
            1032,
            1042
        ],
        types: {
            ...addrIndicesTypes,
            BalanceLock: "BalanceLockTo212",
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Keys: "SessionKeys5",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            ReferendumInfo: "ReferendumInfoTo239",
            Scheduled: "ScheduledTo254",
            SlashingSpans: "SlashingSpansTo204",
            StakingLedger: "StakingLedgerTo223",
            Votes: "VotesTo230",
            Weight: "u32"
        }
    },
    {
        // actual at 1045 (1043-1044 is dev)
        minmax: [
            1043,
            1045
        ],
        types: {
            ...addrIndicesTypes,
            BalanceLock: "BalanceLockTo212",
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Keys: "SessionKeys5",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            ReferendumInfo: "ReferendumInfoTo239",
            Scheduled: "ScheduledTo254",
            StakingLedger: "StakingLedgerTo223",
            Votes: "VotesTo230",
            Weight: "u32"
        }
    },
    {
        minmax: [
            1046,
            1049
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            ReferendumInfo: "ReferendumInfoTo239",
            Scheduled: "ScheduledTo254",
            StakingLedger: "StakingLedgerTo223",
            Weight: "u32"
        }
    },
    {
        minmax: [
            1050,
            1054
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            ReferendumInfo: "ReferendumInfoTo239",
            Scheduled: "ScheduledTo254",
            StakingLedger: "StakingLedgerTo240",
            Weight: "u32"
        }
    },
    {
        minmax: [
            1055,
            1056
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            Scheduled: "ScheduledTo254",
            StakingLedger: "StakingLedgerTo240",
            Weight: "u32"
        }
    },
    {
        minmax: [
            1057,
            1061
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            // Last 100% known problematic runtime range - this quite possibly need to
            // apply to more runtime ranges that follow, we just don't know how far this
            // should be applied to
            //
            // TL;DR whack-a-mole since this was not histrically checked
            //
            // See https://github.com/polkadot-js/api/issues/5618#issuecomment-1530970316
            Scheduled: "ScheduledTo254"
        }
    },
    {
        minmax: [
            1062,
            2012
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259"
        }
    },
    {
        minmax: [
            2013,
            2022
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            RefCount: "RefCountTo259"
        }
    },
    {
        minmax: [
            2023,
            2024
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            RefCount: "RefCountTo259"
        }
    },
    {
        minmax: [
            2025,
            2027
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes
        }
    },
    {
        minmax: [
            2028,
            2029
        ],
        types: {
            ...sharedTypes,
            AccountInfo: "AccountInfoWithDualRefCount",
            CompactAssignments: "CompactAssignmentsWith16",
            RawSolution: "RawSolutionWith16"
        }
    },
    {
        minmax: [
            2030,
            9000
        ],
        types: {
            ...sharedTypes,
            CompactAssignments: "CompactAssignmentsWith16",
            RawSolution: "RawSolutionWith16"
        }
    },
    {
        minmax: [
            9010,
            9099
        ],
        types: {
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V0")
        }
    },
    {
        // jump from 9100 to 9110, however align with Rococo
        minmax: [
            9100,
            9105
        ],
        types: {
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V1")
        }
    },
    {
        // metadata v14
        minmax: [
            9106,
            undefined
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];

},{"@polkadot/types-create":"cr6lO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gFgCK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
const versioned = [
    {
        minmax: [
            0,
            undefined
        ],
        types: {
            // nothing, API tracks master
            // (v2 weights are not yet the default)
            Weight: "WeightV2"
        }
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h3wFW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
const versioned = [
    {
        minmax: [
            0,
            undefined
        ],
        types: {
            // nothing, API tracks master
            // (v2 weights are not yet the default)
            Weight: "WeightV2"
        }
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ixV3R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
const sharedTypes = {
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys6",
    ProxyType: {
        _enum: {
            Any: 0,
            NonTransfer: 1,
            Governance: 2,
            Staking: 3,
            UnusedSudoBalances: 4,
            IdentityJudgement: 5,
            CancelProxy: 6,
            Auction: 7
        }
    },
    Weight: "WeightV1"
};
const addrAccountIdTypes = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    DispatchErrorModule: "DispatchErrorModuleU8",
    Keys: "SessionKeys5",
    LookupSource: "AccountId",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
};
const versioned = [
    {
        minmax: [
            0,
            12
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259"
        }
    },
    {
        minmax: [
            13,
            22
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            RefCount: "RefCountTo259"
        }
    },
    {
        minmax: [
            23,
            24
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            RefCount: "RefCountTo259"
        }
    },
    {
        minmax: [
            25,
            27
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes
        }
    },
    {
        minmax: [
            28,
            29
        ],
        types: {
            ...sharedTypes,
            AccountInfo: "AccountInfoWithDualRefCount"
        }
    },
    {
        minmax: [
            30,
            9109
        ],
        types: {
            ...sharedTypes
        }
    },
    {
        // metadata v14
        minmax: [
            9110,
            undefined
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2DzYu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
var _typesCreate = require("@polkadot/types-create");
/* eslint-disable sort-keys */ const sharedTypes = {
    DispatchErrorModule: "DispatchErrorModuleU8",
    FullIdentification: "()",
    Keys: "SessionKeys7B",
    Weight: "WeightV1"
};
const versioned = [
    {
        minmax: [
            0,
            200
        ],
        types: {
            ...sharedTypes,
            AccountInfo: "AccountInfoWithDualRefCount",
            Address: "AccountId",
            LookupSource: "AccountId"
        }
    },
    {
        minmax: [
            201,
            214
        ],
        types: {
            ...sharedTypes,
            AccountInfo: "AccountInfoWithDualRefCount"
        }
    },
    {
        minmax: [
            215,
            228
        ],
        types: {
            ...sharedTypes,
            Keys: "SessionKeys6"
        }
    },
    {
        minmax: [
            229,
            9099
        ],
        types: {
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V0")
        }
    },
    {
        minmax: [
            9100,
            9105
        ],
        types: {
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V1")
        }
    },
    {
        // metadata v14
        minmax: [
            9106,
            undefined
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];

},{"@polkadot/types-create":"cr6lO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bXurS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
const versioned = [
    {
        minmax: [
            0,
            undefined
        ],
        types: {
        }
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jwz4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
var _typesCreate = require("@polkadot/types-create");
const sharedTypes = {
    DispatchErrorModule: "DispatchErrorModuleU8",
    TAssetBalance: "u128",
    ProxyType: {
        _enum: [
            "Any",
            "NonTransfer",
            "CancelProxy",
            "Assets",
            "AssetOwner",
            "AssetManager",
            "Staking"
        ]
    },
    Weight: "WeightV1"
};
const versioned = [
    {
        minmax: [
            0,
            3
        ],
        types: {
            // Enum was modified mid-flight -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            DispatchError: "DispatchErrorPre6First",
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V0")
        }
    },
    {
        minmax: [
            4,
            5
        ],
        types: {
            // As above, see https://github.com/polkadot-js/api/issues/5301
            DispatchError: "DispatchErrorPre6First",
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V1")
        }
    },
    {
        // metadata V14
        minmax: [
            500,
            9999
        ],
        types: {
            Weight: "WeightV1",
            TAssetConversion: "Option<AssetId>"
        }
    },
    {
        minmax: [
            10000,
            undefined
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];

},{"@polkadot/types-create":"cr6lO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1B6U1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
var _typesCreate = require("@polkadot/types-create");
const sharedTypes = {
    DispatchErrorModule: "DispatchErrorModuleU8",
    TAssetBalance: "u128",
    ProxyType: {
        _enum: [
            "Any",
            "NonTransfer",
            "CancelProxy",
            "Assets",
            "AssetOwner",
            "AssetManager",
            "Staking"
        ]
    },
    Weight: "WeightV1"
};
const versioned = [
    {
        minmax: [
            0,
            3
        ],
        types: {
            // Enum was modified mid-flight -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            DispatchError: "DispatchErrorPre6First",
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V0")
        }
    },
    {
        minmax: [
            4,
            5
        ],
        types: {
            // As above, see https://github.com/polkadot-js/api/issues/5301
            DispatchError: "DispatchErrorPre6First",
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V1")
        }
    },
    {
        // metadata V14
        minmax: [
            500,
            undefined
        ],
        types: {
            Weight: "WeightV1",
            TAssetConversion: "Option<AssetId>"
        }
    }
];

},{"@polkadot/types-create":"cr6lO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hh9FZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
var _typesCreate = require("@polkadot/types-create");
const sharedTypes = {
    // 16 validators
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    // general
    Keys: "SessionKeys6",
    ProxyType: {
        _enum: [
            "Any",
            "NonTransfer",
            "Staking",
            "SudoBalances",
            "IdentityJudgement",
            "CancelProxy"
        ]
    },
    Weight: "WeightV1"
};
const addrAccountIdTypes = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    LookupSource: "AccountId",
    Keys: "SessionKeys5",
    RawSolution: "RawSolutionWith16",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
};
const versioned = [
    {
        minmax: [
            1,
            2
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            Weight: "u32"
        }
    },
    {
        minmax: [
            3,
            22
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259"
        }
    },
    {
        minmax: [
            23,
            42
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            RefCount: "RefCountTo259"
        }
    },
    {
        minmax: [
            43,
            44
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes,
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            RefCount: "RefCountTo259"
        }
    },
    {
        minmax: [
            45,
            47
        ],
        types: {
            ...sharedTypes,
            ...addrAccountIdTypes
        }
    },
    {
        minmax: [
            48,
            49
        ],
        types: {
            ...sharedTypes,
            AccountInfo: "AccountInfoWithDualRefCount"
        }
    },
    {
        minmax: [
            50,
            9099
        ],
        types: {
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V0")
        }
    },
    {
        minmax: [
            9100,
            9105
        ],
        types: {
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V1")
        }
    },
    {
        // metadata v14
        minmax: [
            9106,
            undefined
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];

},{"@polkadot/types-create":"cr6lO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Ek8L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versioned", ()=>versioned);
var _typesCreate = require("@polkadot/types-create");
const sharedTypes = {
    DispatchErrorModule: "DispatchErrorModuleU8",
    TAssetBalance: "u128",
    ProxyType: {
        _enum: [
            "Any",
            "NonTransfer",
            "CancelProxy",
            "Assets",
            "AssetOwner",
            "AssetManager",
            "Staking"
        ]
    },
    Weight: "WeightV1"
};
const versioned = [
    {
        minmax: [
            0,
            3
        ],
        types: {
            // Enum was modified mid-flight -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            DispatchError: "DispatchErrorPre6First",
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V0")
        }
    },
    {
        minmax: [
            4,
            5
        ],
        types: {
            // As above, see https://github.com/polkadot-js/api/issues/5301
            DispatchError: "DispatchErrorPre6First",
            ...sharedTypes,
            ...(0, _typesCreate.mapXcmTypes)("V1")
        }
    },
    {
        // metadata V14
        minmax: [
            500,
            9434
        ],
        types: {
            Weight: "WeightV1",
            TAssetConversion: "Option<AssetId>"
        }
    },
    {
        minmax: [
            9435,
            undefined
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];

},{"@polkadot/types-create":"cr6lO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iSqVl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "upgrades", ()=>upgrades);
var _networks = require("@polkadot/networks");
var _util = require("@polkadot/util");
var _indexJs = require("./e2e/index.js");
const NET_EXTRA = {
    westend: {
        genesisHash: [
            "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
        ]
    }
};
/** @internal */ function mapRaw([network, versions]) {
    const chain = (0, _networks.selectableNetworks).find((n)=>n.network === network) || NET_EXTRA[network];
    if (!chain) throw new Error(`Unable to find info for chain ${network}`);
    return {
        genesisHash: (0, _util.hexToU8a)(chain.genesisHash[0]),
        network,
        versions: versions.map(([blockNumber, specVersion, apis])=>({
                apis,
                blockNumber: new (0, _util.BN)(blockNumber),
                specVersion: new (0, _util.BN)(specVersion)
            }))
    };
}
const upgrades = Object.entries(_indexJs).map(mapRaw);

},{"@polkadot/networks":"1v38R","@polkadot/util":"3HnHw","./e2e/index.js":"gpFOn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gpFOn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "kusama", ()=>(0, _kusamaJs.upgrades));
parcelHelpers.export(exports, "polkadot", ()=>(0, _polkadotJs.upgrades));
parcelHelpers.export(exports, "westend", ()=>(0, _westendJs.upgrades));
var _kusamaJs = require("./kusama.js");
var _polkadotJs = require("./polkadot.js");
var _westendJs = require("./westend.js");

},{"./kusama.js":"epZfb","./polkadot.js":"aMfEE","./westend.js":"1KWAa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"epZfb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "upgrades", ()=>upgrades);
const upgrades = [
    [
        0,
        1020,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        26669,
        1021,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        38245,
        1022,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        54248,
        1023,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        59659,
        1024,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        67651,
        1025,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        82191,
        1027,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        83238,
        1028,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        101503,
        1029,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        203466,
        1030,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        295787,
        1031,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        461692,
        1032,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        504329,
        1033,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        569327,
        1038,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        587687,
        1039,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        653183,
        1040,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        693488,
        1042,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        901442,
        1045,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1375086,
        1050,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1445458,
        1051,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1472960,
        1052,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1475648,
        1053,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1491596,
        1054,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1574408,
        1055,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2064961,
        1058,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2201991,
        1062,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2671528,
        2005,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2704202,
        2007,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2728002,
        2008,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2832534,
        2011,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2962294,
        2012,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3240000,
        2013,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3274408,
        2015,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3323565,
        2019,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3534175,
        2022,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3860281,
        2023,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4143129,
        2024,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4401242,
        2025,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4841367,
        2026,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5961600,
        2027,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6137912,
        2028,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6561855,
        2029,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7100891,
        2030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7468792,
        9010,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7668600,
        9030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7812476,
        9040,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8010981,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8073833,
        9070,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8555825,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8945245,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9611377,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9625129,
        9111,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9866422,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10403784,
        9130,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10960765,
        9150,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11006614,
        9151,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11404482,
        9160,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11601803,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12008022,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12405451,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12665416,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12909508,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13109752,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13555777,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13727747,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        14248044,
        9271,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        14433840,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        14645900,
        9291,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15048375,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15426015,
        9320,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15680713,
        9340,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15756296,
        9350,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ]
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMfEE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "upgrades", ()=>upgrades);
const upgrades = [
    [
        0,
        0,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        29231,
        1,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        188836,
        5,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        199405,
        6,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        214264,
        7,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        244358,
        8,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        303079,
        9,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        314201,
        10,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        342400,
        11,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        443963,
        12,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        528470,
        13,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        687751,
        14,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        746085,
        15,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        787923,
        16,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        799302,
        17,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1205128,
        18,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1603423,
        23,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1733218,
        24,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2005673,
        25,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2436698,
        26,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3613564,
        27,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3899547,
        28,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4345767,
        29,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4876134,
        30,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5661442,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6321619,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6713249,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7217907,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7229126,
        9110,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7560558,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8115869,
        9140,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8638103,
        9151,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9280179,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9738717,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10156856,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10458576,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10655116,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10879371,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11328884,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11532856,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11933818,
        9270,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12217535,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12245277,
        9281,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12532644,
        9291,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12876189,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ]
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1KWAa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "upgrades", ()=>upgrades);
const upgrades = [
    [
        214356,
        4,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        392764,
        7,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        409740,
        8,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        809976,
        20,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        877581,
        24,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        879238,
        25,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        889472,
        26,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        902937,
        27,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        932751,
        28,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        991142,
        29,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1030162,
        31,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1119657,
        32,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1199282,
        33,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1342534,
        34,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1392263,
        35,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1431703,
        36,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1433369,
        37,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1490972,
        41,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2087397,
        43,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2316688,
        44,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2549864,
        45,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3925782,
        46,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3925843,
        47,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4207800,
        48,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4627944,
        49,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5124076,
        50,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5478664,
        900,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5482450,
        9000,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5584305,
        9010,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5784566,
        9030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5879822,
        9031,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5896856,
        9032,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5897316,
        9033,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6117927,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6210274,
        9070,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6379314,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6979141,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7568453,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7766394,
        9111,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7911691,
        9120,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7968866,
        9121,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7982889,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8514322,
        9130,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9091726,
        9140,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9091774,
        9150,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9406726,
        9160,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9921066,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10007115,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10480973,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10578091,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10678509,
        9210,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10811001,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11096116,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11409279,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11584820,
        9251,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11716837,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11876919,
        9261,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11987927,
        9270,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12077324,
        9271,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12301871,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12604343,
        9290,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12841034,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13128237,
        9310,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13272363,
        9320,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13483497,
        9330,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13649433,
        9340,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13761100,
        9350,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ]
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kF4Em":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Decorate", ()=>Decorate);
var _rxjs = require("rxjs");
var _apiDerive = require("@polkadot/api-derive");
var _rpcCore = require("@polkadot/rpc-core");
var _rpcProvider = require("@polkadot/rpc-provider");
var _types = require("@polkadot/types");
var _typesKnown = require("@polkadot/types-known");
var _util = require("@polkadot/util");
var _utilCrypto = require("@polkadot/util-crypto");
var _indexJs = require("../submittable/index.js");
var _augmentObjectJs = require("../util/augmentObject.js");
var _decorateJs = require("../util/decorate.js");
var _validateJs = require("../util/validate.js");
var _eventsJs = require("./Events.js");
var _findJs = require("./find.js");
const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)
const PAGE_SIZE_V = 250; // limited since the data may be > 16MB (e.g. misfiring elections)
const PAGE_SIZE_Q = 50; // queue of pending storage queries (mapped together, next tick)
const l = (0, _util.logger)("api/init");
let instanceCounter = 0;
function getAtQueryFn(api, { method, section }) {
    return (0, _util.assertReturn)(api.rx.query[section] && api.rx.query[section][method], ()=>`query.${section}.${method} is not available in this version of the metadata`);
}
class Decorate extends (0, _eventsJs.Events) {
    __internal__instanceId;
    __internal__runtimeLog = {};
    __internal__registry;
    __internal__storageGetQ = [];
    __internal__storageSubQ = [];
    // HACK Use BN import so decorateDerive works... yes, wtf.
    __phantom = new (0, _util.BN)(0);
    _type;
    _call = {};
    _consts = {};
    _derive;
    _errors = {};
    _events = {};
    _extrinsics;
    _extrinsicType = (0, _types.GenericExtrinsic).LATEST_EXTRINSIC_VERSION;
    _genesisHash;
    _isConnected;
    _isReady = false;
    _query = {};
    _queryMulti;
    _rpc;
    _rpcCore;
    _runtimeMap = {};
    _runtimeChain;
    _runtimeMetadata;
    _runtimeVersion;
    _rx = {
        call: {},
        consts: {},
        query: {},
        tx: {}
    };
    _options;
    /**
     * This is the one and only method concrete children classes need to implement.
     * It's a higher-order function, which takes one argument
     * `method: Method extends (...args: any[]) => Observable<any>`
     * (and one optional `options`), and should return the user facing method.
     * For example:
     * - For ApiRx, `decorateMethod` should just be identity, because the input
     * function is already an Observable
     * - For ApiPromise, `decorateMethod` should return a function that takes all
     * the parameters from `method`, adds an optional `callback` argument, and
     * returns a Promise.
     *
     * We could easily imagine other user-facing interfaces, which are simply
     * implemented by transforming the Observable to Stream/Iterator/Kefir/Bacon
     * via `decorateMethod`.
     */ _decorateMethod;
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */ constructor(options, type, decorateMethod){
        super();
        this.__internal__instanceId = `${++instanceCounter}`;
        this.__internal__registry = options.source?.registry || options.registry || new (0, _types.TypeRegistry)();
        this._rx.callAt = (blockHash, knownVersion)=>(0, _rxjs.from)(this.at(blockHash, knownVersion)).pipe((0, _rxjs.map)((a)=>a.rx.call));
        this._rx.queryAt = (blockHash, knownVersion)=>(0, _rxjs.from)(this.at(blockHash, knownVersion)).pipe((0, _rxjs.map)((a)=>a.rx.query));
        this._rx.registry = this.__internal__registry;
        this._decorateMethod = decorateMethod;
        this._options = options;
        this._type = type;
        const provider = options.source ? options.source._rpcCore.provider.isClonable ? options.source._rpcCore.provider.clone() : options.source._rpcCore.provider : options.provider || new (0, _rpcProvider.WsProvider)();
        // The RPC interface decorates the known interfaces on init
        this._rpcCore = new (0, _rpcCore.RpcCore)(this.__internal__instanceId, this.__internal__registry, {
            isPedantic: this._options.isPedantic,
            provider,
            userRpc: this._options.rpc
        });
        this._isConnected = new (0, _rxjs.BehaviorSubject)(this._rpcCore.provider.isConnected);
        this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @description Return the current used registry
     */ get registry() {
        return this.__internal__registry;
    }
    /**
     * @description Creates an instance of a type as registered
     */ createType(type, ...params) {
        return this.__internal__registry.createType(type, ...params);
    }
    /**
     * @description Register additional user-defined of chain-specific types in the type registry
     */ registerTypes(types) {
        types && this.__internal__registry.register(types);
    }
    /**
     * @returns `true` if the API operates with subscriptions
     */ get hasSubscriptions() {
        return this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @returns `true` if the API decorate multi-key queries
     */ get supportMulti() {
        return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
    }
    _emptyDecorated(registry, blockHash) {
        return {
            call: {},
            consts: {},
            errors: {},
            events: {},
            query: {},
            registry,
            rx: {
                call: {},
                query: {}
            },
            tx: (0, _indexJs.createSubmittable)(this._type, this._rx, this._decorateMethod, registry, blockHash)
        };
    }
    _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
        if (!decoratedApi) decoratedApi = this._emptyDecorated(registry.registry, blockHash);
        if (fromEmpty || !registry.decoratedMeta) registry.decoratedMeta = (0, _types.expandMetadata)(registry.registry, registry.metadata);
        const runtime = this._decorateCalls(registry, this._decorateMethod, blockHash);
        const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
        const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
        const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
        (0, _augmentObjectJs.augmentObject)("consts", registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
        (0, _augmentObjectJs.augmentObject)("errors", registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
        (0, _augmentObjectJs.augmentObject)("events", registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
        (0, _augmentObjectJs.augmentObject)("query", storage, decoratedApi.query, fromEmpty);
        (0, _augmentObjectJs.augmentObject)("query", storageRx, decoratedApi.rx.query, fromEmpty);
        (0, _augmentObjectJs.augmentObject)("call", runtime, decoratedApi.call, fromEmpty);
        (0, _augmentObjectJs.augmentObject)("call", runtimeRx, decoratedApi.rx.call, fromEmpty);
        decoratedApi.findCall = (callIndex)=>(0, _findJs.findCall)(registry.registry, callIndex);
        decoratedApi.findError = (errorIndex)=>(0, _findJs.findError)(registry.registry, errorIndex);
        decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
        decoratedApi.runtimeVersion = registry.runtimeVersion;
        return {
            createdAt: blockHash,
            decoratedApi,
            decoratedMeta: registry.decoratedMeta
        };
    }
    _injectMetadata(registry, fromEmpty = false) {
        // clear the decoration, we are redoing it here
        if (fromEmpty || !registry.decoratedApi) registry.decoratedApi = this._emptyDecorated(registry.registry);
        const { decoratedApi, decoratedMeta } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
        this._call = decoratedApi.call;
        this._consts = decoratedApi.consts;
        this._errors = decoratedApi.errors;
        this._events = decoratedApi.events;
        this._query = decoratedApi.query;
        this._rx.call = decoratedApi.rx.call;
        this._rx.query = decoratedApi.rx.query;
        const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
        const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
        if (fromEmpty || !this._extrinsics) {
            this._extrinsics = tx;
            this._rx.tx = rxtx;
        } else {
            (0, _augmentObjectJs.augmentObject)("tx", tx, this._extrinsics, false);
            (0, _augmentObjectJs.augmentObject)(null, rxtx, this._rx.tx, false);
        }
        (0, _augmentObjectJs.augmentObject)(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
        this.emit("decorated");
    }
    /**
     * @deprecated
     * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
     */ injectMetadata(metadata, fromEmpty, registry) {
        this._injectMetadata({
            counter: 0,
            metadata,
            registry: registry || this.__internal__registry,
            runtimeVersion: this.__internal__registry.createType("RuntimeVersionPartial")
        }, fromEmpty);
    }
    _decorateFunctionMeta(input, output) {
        output.meta = input.meta;
        output.method = input.method;
        output.section = input.section;
        output.toJSON = input.toJSON;
        if (input.callIndex) output.callIndex = input.callIndex;
        return output;
    }
    // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
    // manner to cater for both old and new:
    //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
    //   - when non-zero, remove anything that is not in the array (we don't do this)
    _filterRpc(methods, additional) {
        // add any specific user-base RPCs
        if (Object.keys(additional).length !== 0) {
            this._rpcCore.addUserInterfaces(additional);
            // re-decorate, only adding any new additional interfaces
            this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
            this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
        }
        // extract the actual sections from the methods (this is useful when
        // we try and create mappings to runtime names via a hash mapping)
        const sectionMap = {};
        for(let i = 0, count = methods.length; i < count; i++){
            const [section] = methods[i].split("_");
            sectionMap[section] = true;
        }
        // convert the actual section names into an easy name lookup
        const sections = Object.keys(sectionMap);
        for(let i = 0, count = sections.length; i < count; i++){
            const nameA = (0, _util.stringUpperFirst)(sections[i]);
            const nameB = `${nameA}Api`;
            this._runtimeMap[(0, _utilCrypto.blake2AsHex)(nameA, 64)] = nameA;
            this._runtimeMap[(0, _utilCrypto.blake2AsHex)(nameB, 64)] = nameB;
        }
        // finally we filter the actual methods to expose
        this._filterRpcMethods(methods);
    }
    _filterRpcMethods(exposed) {
        const hasResults = exposed.length !== 0;
        const allKnown = [
            ...this._rpcCore.mapping.entries()
        ];
        const allKeys = [];
        const count = allKnown.length;
        for(let i = 0; i < count; i++){
            const [, { alias, endpoint, method, pubsub, section }] = allKnown[i];
            allKeys.push(`${section}_${method}`);
            if (pubsub) {
                allKeys.push(`${section}_${pubsub[1]}`);
                allKeys.push(`${section}_${pubsub[2]}`);
            }
            if (alias) allKeys.push(...alias);
            if (endpoint) allKeys.push(endpoint);
        }
        const unknown = exposed.filter((k)=>!allKeys.includes(k) && !k.includes("_unstable_"));
        if (unknown.length && !this._options.noInitWarn) l.warn(`RPC methods not decorated: ${unknown.join(", ")}`);
        // loop through all entries we have (populated in decorate) and filter as required
        // only remove when we have results and method missing, or with no results if optional
        for(let i = 0; i < count; i++){
            const [k, { method, section }] = allKnown[i];
            if (hasResults && !exposed.includes(k) && k !== "rpc_methods") {
                if (this._rpc[section]) {
                    delete this._rpc[section][method];
                    delete this._rx.rpc[section][method];
                }
            }
        }
    }
    _rpcSubmitter(decorateMethod) {
        const method = (method, ...params)=>{
            return (0, _rxjs.from)(this._rpcCore.provider.send(method, params));
        };
        return decorateMethod(method);
    }
    _decorateRpc(rpc, decorateMethod, input = this._rpcSubmitter(decorateMethod)) {
        const out = input;
        const decorateFn = (section, method)=>{
            const source = rpc[section][method];
            const fn = decorateMethod(source, {
                methodName: method
            });
            fn.meta = source.meta;
            fn.raw = decorateMethod(source.raw, {
                methodName: method
            });
            return fn;
        };
        for(let s = 0, scount = rpc.sections.length; s < scount; s++){
            const section = rpc.sections[s];
            if (!Object.prototype.hasOwnProperty.call(out, section)) {
                const methods = Object.keys(rpc[section]);
                const decorateInternal = (method)=>decorateFn(section, method);
                for(let m = 0, mcount = methods.length; m < mcount; m++){
                    const method = methods[m];
                    //  skip subscriptions where we have a non-subscribe interface
                    if (this.hasSubscriptions || !(method.startsWith("subscribe") || method.startsWith("unsubscribe"))) {
                        if (!Object.prototype.hasOwnProperty.call(out, section)) out[section] = {};
                        (0, _util.lazyMethod)(out[section], method, decorateInternal);
                    }
                }
            }
        }
        return out;
    }
    // add all definition entries
    _addRuntimeDef(result, additional) {
        if (!additional) return;
        const entries = Object.entries(additional);
        for(let j = 0, ecount = entries.length; j < ecount; j++){
            const [key, defs] = entries[j];
            if (result[key]) // we have this one already, step through for new versions or
            // new methods and add those as applicable
            for(let k = 0, dcount = defs.length; k < dcount; k++){
                const def = defs[k];
                const prev = result[key].find(({ version })=>def.version === version);
                if (prev) // interleave the new methods with the old - last definition wins
                (0, _util.objectSpread)(prev.methods, def.methods);
                else // we don't have this specific version, add it
                result[key].push(def);
            }
            else // we don't have this runtime definition, add it as-is
            result[key] = defs;
        }
    }
    // extract all runtime definitions
    _getRuntimeDefs(registry, specName, chain = "") {
        const result = {};
        const defValues = Object.values((0, _types.typeDefinitions));
        // options > chain/spec > built-in, apply in reverse order with
        // methods overriding previous definitions (or interleave missing)
        for(let i = 0, count = defValues.length; i < count; i++)this._addRuntimeDef(result, defValues[i].runtime);
        this._addRuntimeDef(result, (0, _typesKnown.getSpecRuntime)(registry, chain, specName));
        this._addRuntimeDef(result, this._options.runtime);
        return Object.entries(result);
    }
    // pre-metadata decoration
    _decorateCalls({ registry, runtimeVersion: { apis, specName, specVersion } }, decorateMethod, blockHash) {
        const result = {};
        const named = {};
        const hashes = {};
        const sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
        const older = [];
        const implName = `${specName.toString()}/${specVersion.toString()}`;
        const hasLogged = this.__internal__runtimeLog[implName] || false;
        this.__internal__runtimeLog[implName] = true;
        for(let i = 0, scount = sections.length; i < scount; i++){
            const [_section, secs] = sections[i];
            const sectionHash = (0, _utilCrypto.blake2AsHex)(_section, 64);
            const rtApi = apis.find(([a])=>a.eq(sectionHash));
            hashes[sectionHash] = true;
            if (rtApi) {
                const all = secs.map(({ version })=>version).sort();
                const sec = secs.find(({ version })=>rtApi[1].eq(version));
                if (sec) {
                    const section = (0, _util.stringCamelCase)(_section);
                    const methods = Object.entries(sec.methods);
                    if (methods.length) {
                        if (!named[section]) named[section] = {};
                        for(let m = 0, mcount = methods.length; m < mcount; m++){
                            const [_method, def] = methods[m];
                            const method = (0, _util.stringCamelCase)(_method);
                            named[section][method] = (0, _util.objectSpread)({
                                method,
                                name: `${_section}_${_method}`,
                                section,
                                sectionHash
                            }, def);
                        }
                    }
                } else older.push(`${_section}/${rtApi[1].toString()} (${all.join("/")} known)`);
            }
        }
        // find the runtimes that we don't have hashes for
        const notFound = apis.map(([a, v])=>[
                a.toHex(),
                v.toString()
            ]).filter(([a])=>!hashes[a]).map(([a, v])=>`${this._runtimeMap[a] || a}/${v}`);
        if (!this._options.noInitWarn && !hasLogged) {
            if (older.length) l.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(", ")}`);
            if (notFound.length) l.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(", ")}`);
        }
        const stateCall = blockHash ? (name, bytes)=>this._rpcCore.state.call(name, bytes, blockHash) : (name, bytes)=>this._rpcCore.state.call(name, bytes);
        const lazySection = (section)=>(0, _util.lazyMethods)({}, Object.keys(named[section]), (method)=>this._decorateCall(registry, named[section][method], stateCall, decorateMethod));
        const modules = Object.keys(named);
        for(let i = 0, count = modules.length; i < count; i++)(0, _util.lazyMethod)(result, modules[i], lazySection);
        return result;
    }
    _decorateCall(registry, def, stateCall, decorateMethod) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const decorated = decorateMethod((...args)=>{
            if (args.length !== def.params.length) throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
            const bytes = registry.createType("Raw", (0, _util.u8aConcatStrict)(args.map((a, i)=>registry.createTypeUnsafe(def.params[i].type, [
                    a
                ]).toU8a())));
            return stateCall(def.name, bytes).pipe((0, _rxjs.map)((r)=>registry.createTypeUnsafe(def.type, [
                    r
                ])));
        });
        decorated.meta = def;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorated;
    }
    // only be called if supportMulti is true
    _decorateMulti(decorateMethod) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorateMethod((keys)=>keys.length ? (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(keys.map((args)=>Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [
                    args[0].creator
                ] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [
                    args[0].creator,
                    args.slice(1)
                ] : [
                    args[0].creator,
                    ...args.slice(1)
                ] : [
                    args.creator
                ])) : (0, _rxjs.of)([]));
    }
    _decorateMultiAt(atApi, decorateMethod, blockHash) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorateMethod((calls)=>calls.length ? this._rpcCore.state.queryStorageAt(calls.map((args)=>{
                if (Array.isArray(args)) {
                    const { creator } = getAtQueryFn(atApi, args[0].creator);
                    return creator.meta.type.isPlain ? [
                        creator
                    ] : creator.meta.type.asMap.hashers.length === 1 ? [
                        creator,
                        args.slice(1)
                    ] : [
                        creator,
                        ...args.slice(1)
                    ];
                }
                return [
                    getAtQueryFn(atApi, args.creator).creator
                ];
            }), blockHash) : (0, _rxjs.of)([]));
    }
    _decorateExtrinsics({ tx }, decorateMethod) {
        const result = (0, _indexJs.createSubmittable)(this._type, this._rx, decorateMethod);
        const lazySection = (section)=>(0, _util.lazyMethods)({}, Object.keys(tx[section]), (method)=>method.startsWith("$") ? tx[section][method] : this._decorateExtrinsicEntry(tx[section][method], result));
        const sections = Object.keys(tx);
        for(let i = 0, count = sections.length; i < count; i++)(0, _util.lazyMethod)(result, sections[i], lazySection);
        return result;
    }
    _decorateExtrinsicEntry(method, creator) {
        const decorated = (...params)=>creator(method(...params));
        // pass through the `.is`
        decorated.is = (other)=>method.is(other);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return this._decorateFunctionMeta(method, decorated);
    }
    _decorateStorage({ query, registry }, decorateMethod, blockHash) {
        const result = {};
        const lazySection = (section)=>(0, _util.lazyMethods)({}, Object.keys(query[section]), (method)=>blockHash ? this._decorateStorageEntryAt(registry, query[section][method], decorateMethod, blockHash) : this._decorateStorageEntry(query[section][method], decorateMethod));
        const sections = Object.keys(query);
        for(let i = 0, count = sections.length; i < count; i++)(0, _util.lazyMethod)(result, sections[i], lazySection);
        return result;
    }
    _decorateStorageEntry(creator, decorateMethod) {
        const getArgs = (args, registry)=>(0, _validateJs.extractStorageArgs)(registry || this.__internal__registry, creator, args);
        const getQueryAt = (blockHash)=>(0, _rxjs.from)(this.at(blockHash)).pipe((0, _rxjs.map)((api)=>getAtQueryFn(api, creator)));
        // Disable this where it occurs for each field we are decorating
        /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */ const decorated = this._decorateStorageCall(creator, decorateMethod);
        decorated.creator = creator;
        // eslint-disable-next-line deprecation/deprecation
        decorated.at = decorateMethod((blockHash, ...args)=>getQueryAt(blockHash).pipe((0, _rxjs.switchMap)((q)=>q(...args))));
        decorated.hash = decorateMethod((...args)=>this._rpcCore.state.getStorageHash(getArgs(args)));
        decorated.is = (key)=>key.section === creator.section && key.method === creator.method;
        decorated.key = (...args)=>(0, _util.u8aToHex)((0, _util.compactStripLength)(creator(...args))[1]);
        decorated.keyPrefix = (...args)=>(0, _util.u8aToHex)(creator.keyPrefix(...args));
        decorated.size = decorateMethod((...args)=>this._rpcCore.state.getStorageSize(getArgs(args)));
        // eslint-disable-next-line deprecation/deprecation
        decorated.sizeAt = decorateMethod((blockHash, ...args)=>getQueryAt(blockHash).pipe((0, _rxjs.switchMap)((q)=>this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash))));
        // .keys() & .entries() only available on map types
        if (creator.iterKey && creator.meta.type.isMap) {
            decorated.entries = decorateMethod((0, _rpcCore.memo)(this.__internal__instanceId, (...args)=>this._retrieveMapEntries(creator, null, args)));
            // eslint-disable-next-line deprecation/deprecation
            decorated.entriesAt = decorateMethod((0, _rpcCore.memo)(this.__internal__instanceId, (blockHash, ...args)=>getQueryAt(blockHash).pipe((0, _rxjs.switchMap)((q)=>this._retrieveMapEntries(q.creator, blockHash, args)))));
            decorated.entriesPaged = decorateMethod((0, _rpcCore.memo)(this.__internal__instanceId, (opts)=>this._retrieveMapEntriesPaged(creator, undefined, opts)));
            decorated.keys = decorateMethod((0, _rpcCore.memo)(this.__internal__instanceId, (...args)=>this._retrieveMapKeys(creator, null, args)));
            // eslint-disable-next-line deprecation/deprecation
            decorated.keysAt = decorateMethod((0, _rpcCore.memo)(this.__internal__instanceId, (blockHash, ...args)=>getQueryAt(blockHash).pipe((0, _rxjs.switchMap)((q)=>this._retrieveMapKeys(q.creator, blockHash, args)))));
            decorated.keysPaged = decorateMethod((0, _rpcCore.memo)(this.__internal__instanceId, (opts)=>this._retrieveMapKeysPaged(creator, undefined, opts)));
        }
        if (this.supportMulti && creator.meta.type.isMap) // When using double map storage function, user need to pass double map key as an array
        decorated.multi = decorateMethod((args)=>creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a)=>[
                    creator,
                    [
                        a
                    ]
                ])) : this._retrieveMulti(args.map((a)=>[
                    creator,
                    a
                ])));
        /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */ return this._decorateFunctionMeta(creator, decorated);
    }
    _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
        const getArgs = (args)=>(0, _validateJs.extractStorageArgs)(registry, creator, args);
        // Disable this where it occurs for each field we are decorating
        /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */ const decorated = decorateMethod((...args)=>this._rpcCore.state.getStorage(getArgs(args), blockHash));
        decorated.creator = creator;
        decorated.hash = decorateMethod((...args)=>this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
        decorated.is = (key)=>key.section === creator.section && key.method === creator.method;
        decorated.key = (...args)=>(0, _util.u8aToHex)((0, _util.compactStripLength)(creator(...args))[1]);
        decorated.keyPrefix = (...keys)=>(0, _util.u8aToHex)(creator.keyPrefix(...keys));
        decorated.size = decorateMethod((...args)=>this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
        // .keys() & .entries() only available on map types
        if (creator.iterKey && creator.meta.type.isMap) {
            decorated.entries = decorateMethod((0, _rpcCore.memo)(this.__internal__instanceId, (...args)=>this._retrieveMapEntries(creator, blockHash, args)));
            decorated.entriesPaged = decorateMethod((0, _rpcCore.memo)(this.__internal__instanceId, (opts)=>this._retrieveMapEntriesPaged(creator, blockHash, opts)));
            decorated.keys = decorateMethod((0, _rpcCore.memo)(this.__internal__instanceId, (...args)=>this._retrieveMapKeys(creator, blockHash, args)));
            decorated.keysPaged = decorateMethod((0, _rpcCore.memo)(this.__internal__instanceId, (opts)=>this._retrieveMapKeysPaged(creator, blockHash, opts)));
        }
        if (this.supportMulti && creator.meta.type.isMap) // When using double map storage function, user need to pass double map key as an array
        decorated.multi = decorateMethod((args)=>creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a)=>[
                    creator,
                    [
                        a
                    ]
                ]), blockHash) : this._retrieveMulti(args.map((a)=>[
                    creator,
                    a
                ]), blockHash));
        /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */ return this._decorateFunctionMeta(creator, decorated);
    }
    _queueStorage(call, queue) {
        const query = queue === this.__internal__storageSubQ ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
        let queueIdx = queue.length - 1;
        let valueIdx = 0;
        let valueObs;
        // if we don't have queue entries yet,
        // or the current queue has fired (see from below),
        // or the current queue has the max entries,
        // then we create a new queue
        if (queueIdx === -1 || !queue[queueIdx] || queue[queueIdx][1].length === PAGE_SIZE_Q) {
            queueIdx++;
            valueObs = (0, _rxjs.from)(// we delay the execution until the next tick, this allows
            // any queries made in this timeframe to be added to the same
            // queue for a single query
            new Promise((resolve)=>{
                (0, _util.nextTick)(()=>{
                    // get all the calls in this instance, resolve with it
                    // and then clear the queue so we don't add more
                    // (anything after this will be added to a new queue)
                    const calls = queue[queueIdx][1];
                    delete queue[queueIdx];
                    resolve(calls);
                });
            })).pipe((0, _rxjs.switchMap)((calls)=>query(calls)));
            queue.push([
                valueObs,
                [
                    call
                ]
            ]);
        } else {
            valueObs = queue[queueIdx][0];
            valueIdx = queue[queueIdx][1].length;
            queue[queueIdx][1].push(call);
        }
        return valueObs.pipe(// return the single value at this index
        (0, _rxjs.map)((values)=>values[valueIdx]));
    }
    // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
    // we make a subscription, alternatively we push this through a single-shot query
    _decorateStorageCall(creator, decorateMethod) {
        const memoed = (0, _rpcCore.memo)(this.__internal__instanceId, (...args)=>{
            const call = (0, _validateJs.extractStorageArgs)(this.__internal__registry, creator, args);
            if (!this.hasSubscriptions) return this._rpcCore.state.getStorage(call);
            return this._queueStorage(call, this.__internal__storageSubQ);
        });
        return decorateMethod(memoed, {
            methodName: creator.method,
            overrideNoSub: (...args)=>this._queueStorage((0, _validateJs.extractStorageArgs)(this.__internal__registry, creator, args), this.__internal__storageGetQ)
        });
    }
    // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
    _retrieveMulti(keys, blockHash) {
        if (!keys.length) return (0, _rxjs.of)([]);
        const query = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
        if (keys.length <= PAGE_SIZE_V) return blockHash ? query(keys, blockHash) : query(keys);
        return (0, _rxjs.combineLatest)((0, _util.arrayChunk)(keys, PAGE_SIZE_V).map((k)=>blockHash ? query(k, blockHash) : query(k))).pipe((0, _rxjs.map)((0, _util.arrayFlatten)));
    }
    _retrieveMapKeys({ iterKey, meta, method, section }, at, args) {
        if (!iterKey || !meta.type.isMap) throw new Error("keys can only be retrieved on maps");
        const headKey = iterKey(...args).toHex();
        const startSubject = new (0, _rxjs.BehaviorSubject)(headKey);
        const query = at ? (startKey)=>this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey, at) : (startKey)=>this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey);
        const setMeta = (key)=>key.setMeta(meta, section, method);
        return startSubject.pipe((0, _rxjs.switchMap)(query), (0, _rxjs.map)((keys)=>keys.map(setMeta)), (0, _rxjs.tap)((keys)=>(0, _util.nextTick)(()=>{
                keys.length === PAGE_SIZE_K ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex()) : startSubject.complete();
            })), (0, _rxjs.toArray)(), (0, _rxjs.map)((0, _util.arrayFlatten)));
    }
    _retrieveMapKeysPaged({ iterKey, meta, method, section }, at, opts) {
        if (!iterKey || !meta.type.isMap) throw new Error("keys can only be retrieved on maps");
        const setMeta = (key)=>key.setMeta(meta, section, method);
        const query = at ? (headKey)=>this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at) : (headKey)=>this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
        return query(iterKey(...opts.args).toHex()).pipe((0, _rxjs.map)((keys)=>keys.map(setMeta)));
    }
    _retrieveMapEntries(entry, at, args) {
        const query = at ? (keys)=>this._rpcCore.state.queryStorageAt(keys, at) : (keys)=>this._rpcCore.state.queryStorageAt(keys);
        return this._retrieveMapKeys(entry, at, args).pipe((0, _rxjs.switchMap)((keys)=>keys.length ? (0, _rxjs.combineLatest)((0, _util.arrayChunk)(keys, PAGE_SIZE_V).map(query)).pipe((0, _rxjs.map)((valsArr)=>(0, _util.arrayFlatten)(valsArr).map((value, index)=>[
                        keys[index],
                        value
                    ]))) : (0, _rxjs.of)([])));
    }
    _retrieveMapEntriesPaged(entry, at, opts) {
        const query = at ? (keys)=>this._rpcCore.state.queryStorageAt(keys, at) : (keys)=>this._rpcCore.state.queryStorageAt(keys);
        return this._retrieveMapKeysPaged(entry, at, opts).pipe((0, _rxjs.switchMap)((keys)=>keys.length ? query(keys).pipe((0, _rxjs.map)((valsArr)=>valsArr.map((value, index)=>[
                        keys[index],
                        value
                    ]))) : (0, _rxjs.of)([])));
    }
    _decorateDeriveRx(decorateMethod) {
        const specName = this._runtimeVersion?.specName.toString();
        // Pull in derive from api-derive
        const available = (0, _apiDerive.getAvailableDerives)(this.__internal__instanceId, this._rx, (0, _util.objectSpread)({}, this._options.derives, this._options.typesBundle?.spec?.[specName || ""]?.derives));
        return (0, _decorateJs.decorateDeriveSections)(decorateMethod, available);
    }
    _decorateDerive(decorateMethod) {
        return (0, _decorateJs.decorateDeriveSections)(decorateMethod, this._rx.derive);
    }
    /**
     * Put the `this.onCall` function of ApiRx here, because it is needed by
     * `api._rx`.
     */ _rxDecorateMethod = (method)=>{
        return method;
    };
}

},{"rxjs":"lLy7s","@polkadot/api-derive":"5hNo3","@polkadot/rpc-core":"8DbiP","@polkadot/rpc-provider":"bvUtj","@polkadot/types":"fnDGk","@polkadot/types-known":"fbgSe","@polkadot/util":"3HnHw","@polkadot/util-crypto":"f2ofx","../submittable/index.js":"IVbyl","../util/augmentObject.js":"jgmuZ","../util/decorate.js":"dOghB","../util/validate.js":"1FcRj","./Events.js":"1r5Te","./find.js":"kXUDO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jgmuZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @description Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is
 * already available, but rather just adds new missing items into the result object.
 * @internal
 */ parcelHelpers.export(exports, "augmentObject", ()=>augmentObject);
var _util = require("@polkadot/util");
const l = (0, _util.logger)("api/augment");
function logLength(type, values, and = []) {
    return values.length ? ` ${values.length} ${type}${and.length ? " and" : ""}` : "";
}
function logValues(type, values) {
    return values.length ? `\n\t${type.padStart(7)}: ${values.sort().join(", ")}` : "";
}
function warn(prefix, type, [added, removed]) {
    if (added.length || removed.length) l.warn(`api.${prefix}: Found${logLength("added", added, removed)}${logLength("removed", removed)} ${type}:${logValues("added", added)}${logValues("removed", removed)}`);
}
function findSectionExcludes(a, b) {
    return a.filter((s)=>!b.includes(s));
}
function findSectionIncludes(a, b) {
    return a.filter((s)=>b.includes(s));
}
function extractSections(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = Object.keys(dst);
    return [
        findSectionExcludes(srcSections, dstSections),
        findSectionExcludes(dstSections, srcSections)
    ];
}
function findMethodExcludes(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
    const excludes = [];
    for(let s = 0, scount = dstSections.length; s < scount; s++){
        const section = dstSections[s];
        const srcMethods = Object.keys(src[section]);
        const dstMethods = Object.keys(dst[section]);
        for(let d = 0, mcount = dstMethods.length; d < mcount; d++){
            const method = dstMethods[d];
            if (!srcMethods.includes(method)) excludes.push(`${section}.${method}`);
        }
    }
    return excludes;
}
function extractMethods(src, dst) {
    return [
        findMethodExcludes(dst, src),
        findMethodExcludes(src, dst)
    ];
}
function augmentObject(prefix, src, dst, fromEmpty = false) {
    fromEmpty && (0, _util.objectClear)(dst);
    // NOTE: This part is slightly problematic since it will get the
    // values for at least all the sections and the names of the methods
    // (Since methods won't be decorated before lazy, this _may_ be ok)
    if (prefix && Object.keys(dst).length) {
        warn(prefix, "modules", extractSections(src, dst));
        warn(prefix, "calls", extractMethods(src, dst));
    }
    const sections = Object.keys(src);
    for(let i = 0, count = sections.length; i < count; i++){
        const section = sections[i];
        const methods = src[section];
        // We don't set here with a lazy interface, we decorate based
        // on the top-level structure (this bypasses adding lazy onto lazy)
        if (!dst[section]) dst[section] = {};
        (0, _util.lazyMethods)(dst[section], Object.keys(methods), (m)=>methods[m]);
    }
    return dst;
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1FcRj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extractStorageArgs", ()=>extractStorageArgs);
var _util = require("@polkadot/util");
function sig({ lookup }, { method, section }, args) {
    return `${section}.${method}(${args.map((a)=>lookup.getTypeDef(a).type).join(", ")})`;
}
function extractStorageArgs(registry, creator, _args) {
    const args = _args.filter((a)=>!(0, _util.isUndefined)(a));
    if (creator.meta.type.isPlain) {
        if (args.length !== 0) throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
    } else {
        const { hashers, key } = creator.meta.type.asMap;
        const keys = hashers.length === 1 ? [
            key
        ] : registry.lookup.getSiType(key).def.asTuple.map((t)=>t);
        if (args.length !== keys.length) throw new Error(`${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);
    }
    // pass as tuple
    return [
        creator,
        args
    ];
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1r5Te":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Events", ()=>Events);
var _eventemitter3 = require("eventemitter3");
class Events {
    __internal__eventemitter = new (0, _eventemitter3.EventEmitter)();
    emit(type, ...args) {
        return this.__internal__eventemitter.emit(type, ...args);
    }
    /**
     * @description Attach an eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.on('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.on('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */ on(type, handler) {
        this.__internal__eventemitter.on(type, handler);
        return this;
    }
    /**
     * @description Remove the given eventemitter handler
     *
     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to unregister.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const handler = (): void => {
     *  console.log('Connected !);
     * };
     *
     * // Start listening
     * api.on('connected', handler);
     *
     * // Stop listening
     * api.off('connected', handler);
     * ```
     */ off(type, handler) {
        this.__internal__eventemitter.removeListener(type, handler);
        return this;
    }
    /**
     * @description Attach an one-time eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.once('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.once('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */ once(type, handler) {
        this.__internal__eventemitter.once(type, handler);
        return this;
    }
}

},{"eventemitter3":"3fnfh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2zQtY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Combinator", ()=>Combinator);
var _util = require("@polkadot/util");
class Combinator {
    __internal__allHasFired = false;
    __internal__callback;
    __internal__fired = [];
    __internal__fns = [];
    __internal__isActive = true;
    __internal__results = [];
    __internal__subscriptions = [];
    constructor(fns, callback){
        this.__internal__callback = callback;
        // eslint-disable-next-line @typescript-eslint/require-await
        this.__internal__subscriptions = fns.map(async (input, index)=>{
            const [fn, ...args] = Array.isArray(input) ? input : [
                input
            ];
            this.__internal__fired.push(false);
            this.__internal__fns.push(fn);
            // Not quite 100% how to have a variable number at the front here
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types
            return fn(...args, this._createCallback(index));
        });
    }
    _allHasFired() {
        this.__internal__allHasFired ||= this.__internal__fired.filter((hasFired)=>!hasFired).length === 0;
        return this.__internal__allHasFired;
    }
    _createCallback(index) {
        return (value)=>{
            this.__internal__fired[index] = true;
            this.__internal__results[index] = value;
            this._triggerUpdate();
        };
    }
    _triggerUpdate() {
        if (!this.__internal__isActive || !(0, _util.isFunction)(this.__internal__callback) || !this._allHasFired()) return;
        try {
            Promise.resolve(this.__internal__callback(this.__internal__results)).catch((0, _util.noop));
        } catch  {
        // swallow, we don't want the handler to trip us up
        }
    }
    unsubscribe() {
        if (!this.__internal__isActive) return;
        this.__internal__isActive = false;
        this.__internal__subscriptions.map(async (subscription)=>{
            try {
                const unsubscribe = await subscription;
                if ((0, _util.isFunction)(unsubscribe)) unsubscribe();
            } catch  {
            // ignore
            }
        });
    }
}

},{"@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d0NEl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "promiseTracker", ()=>promiseTracker);
/**
 * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent
 */ parcelHelpers.export(exports, "toPromiseMethod", ()=>toPromiseMethod);
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
function promiseTracker(resolve, reject) {
    let isCompleted = false;
    return {
        reject: (error)=>{
            if (!isCompleted) {
                isCompleted = true;
                reject(error);
            }
            return 0, _rxjs.EMPTY;
        },
        resolve: (value)=>{
            if (!isCompleted) {
                isCompleted = true;
                resolve(value);
            }
        }
    };
}
function extractArgs(args, needsCallback) {
    const actualArgs = args.slice();
    // If the last arg is a function, we pop it, put it into callback.
    // actualArgs will then hold the actual arguments to be passed to `method`
    const callback = args.length && (0, _util.isFunction)(args[args.length - 1]) ? actualArgs.pop() : undefined;
    // When we need a subscription, ensure that a valid callback is actually passed
    if (needsCallback && !(0, _util.isFunction)(callback)) throw new Error("Expected a callback to be passed with subscriptions");
    return [
        actualArgs,
        callback
    ];
}
function decorateCall(method, args) {
    return new Promise((resolve, reject)=>{
        // single result tracker - either reject with Error or resolve with Codec result
        const tracker = promiseTracker(resolve, reject);
        // encoding errors reject immediately, any result unsubscribes and resolves
        const subscription = method(...args).pipe((0, _rxjs.catchError)((error)=>tracker.reject(error))).subscribe((result)=>{
            tracker.resolve(result);
            (0, _util.nextTick)(()=>subscription.unsubscribe());
        });
    });
}
function decorateSubscribe(method, args, resultCb) {
    return new Promise((resolve, reject)=>{
        // either reject with error or resolve with unsubscribe callback
        const tracker = promiseTracker(resolve, reject);
        // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback
        const subscription = method(...args).pipe((0, _rxjs.catchError)((error)=>tracker.reject(error)), (0, _rxjs.tap)(()=>tracker.resolve(()=>subscription.unsubscribe()))).subscribe((result)=>{
            // queue result (back of queue to clear current)
            (0, _util.nextTick)(()=>resultCb(result));
        });
    });
}
function toPromiseMethod(method, options) {
    const needsCallback = !!(options?.methodName && options.methodName.includes("subscribe"));
    return function(...args) {
        const [actualArgs, resultCb] = extractArgs(args, needsCallback);
        return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall(options?.overrideNoSub || method, actualArgs);
    };
}

},{"rxjs":"lLy7s","@polkadot/util":"3HnHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["4rkIz","8lqZg"], "8lqZg", "parcelRequire374a")

//# sourceMappingURL=index.975ef6c8.js.map
